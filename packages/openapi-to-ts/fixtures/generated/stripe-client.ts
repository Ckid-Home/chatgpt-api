/* eslint-disable unicorn/no-unreadable-iife */
/* eslint-disable unicorn/no-array-reduce */

/**
 * This file was auto-generated from an OpenAPI spec.
 */

import {
  aiFunction,
  AIFunctionsProvider,
  assert,
  getEnv,
  pick,
  sanitizeSearchParams
} from '@agentic/core'
import defaultKy, { type KyInstance } from 'ky'
import { z } from 'zod'

export namespace stripe {
  export const apiBaseUrl = 'https://api.stripe.com/'

  // -----------------------------------------------------------------------------
  // Component schemas
  // -----------------------------------------------------------------------------

  export const AccountAnnualRevenueSchema = z.object({
    /** A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal).'
      )
      .optional(),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .nullable()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      )
      .optional(),
    /** The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023. */
    fiscal_year_end: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023.'
      )
      .optional()
  })
  export type AccountAnnualRevenue = z.infer<typeof AccountAnnualRevenueSchema>

  export const AccountMonthlyEstimatedRevenueSchema = z.object({
    /** A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        'A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal).'
      ),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      )
  })
  export type AccountMonthlyEstimatedRevenue = z.infer<
    typeof AccountMonthlyEstimatedRevenueSchema
  >

  export const AddressSchema = z.object({
    /** City, district, suburb, town, or village. */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('City, district, suburb, town, or village.')
      .optional(),
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      )
      .optional(),
    /** Address line 1 (e.g., street, PO Box, or company name). */
    line1: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 1 (e.g., street, PO Box, or company name).')
      .optional(),
    /** Address line 2 (e.g., apartment, suite, unit, or building). */
    line2: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 2 (e.g., apartment, suite, unit, or building).')
      .optional(),
    /** ZIP or postal code. */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('ZIP or postal code.')
      .optional(),
    /** State, county, province, or region. */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe('State, county, province, or region.')
      .optional()
  })
  export type Address = z.infer<typeof AddressSchema>

  export const AccountCapabilitiesSchema = z.object({
    /** The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges. */
    acss_debit_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.'
      )
      .optional(),
    /** The status of the Affirm capability of the account, or whether the account can directly process Affirm charges. */
    affirm_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.'
      )
      .optional(),
    /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
    afterpay_clearpay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.'
      )
      .optional(),
    /** The status of the Alma capability of the account, or whether the account can directly process Alma payments. */
    alma_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Alma capability of the account, or whether the account can directly process Alma payments.'
      )
      .optional(),
    /** The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments. */
    amazon_pay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.'
      )
      .optional(),
    /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
    au_becs_debit_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.'
      )
      .optional(),
    /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
    bacs_debit_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.'
      )
      .optional(),
    /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
    bancontact_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.'
      )
      .optional(),
    /** The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges. */
    bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.'
      )
      .optional(),
    /** The status of the blik payments capability of the account, or whether the account can directly process blik charges. */
    blik_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the blik payments capability of the account, or whether the account can directly process blik charges.'
      )
      .optional(),
    /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
    boleto_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.'
      )
      .optional(),
    /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
    card_issuing: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards'
      )
      .optional(),
    /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
    card_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.'
      )
      .optional(),
    /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
    cartes_bancaires_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.'
      )
      .optional(),
    /** The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments. */
    cashapp_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.'
      )
      .optional(),
    /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
    eps_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.'
      )
      .optional(),
    /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
    fpx_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.'
      )
      .optional(),
    /** The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges. */
    gb_bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.'
      )
      .optional(),
    /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
    giropay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.'
      )
      .optional(),
    /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
    grabpay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.'
      )
      .optional(),
    /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
    ideal_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.'
      )
      .optional(),
    /** The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India. */
    india_international_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.'
      )
      .optional(),
    /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
    jcb_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.'
      )
      .optional(),
    /** The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges. */
    jp_bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.'
      )
      .optional(),
    /** The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments. */
    kakao_pay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments.'
      )
      .optional(),
    /** The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges. */
    klarna_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.'
      )
      .optional(),
    /** The status of the konbini payments capability of the account, or whether the account can directly process konbini charges. */
    konbini_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.'
      )
      .optional(),
    /** The status of the KrCard capability of the account, or whether the account can directly process KrCard payments. */
    kr_card_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the KrCard capability of the account, or whether the account can directly process KrCard payments.'
      )
      .optional(),
    /** The status of the legacy payments capability of the account. */
    legacy_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe('The status of the legacy payments capability of the account.')
      .optional(),
    /** The status of the link_payments capability of the account, or whether the account can directly process Link charges. */
    link_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the link_payments capability of the account, or whether the account can directly process Link charges.'
      )
      .optional(),
    /** The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges. */
    mobilepay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.'
      )
      .optional(),
    /** The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges. */
    multibanco_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.'
      )
      .optional(),
    /** The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges. */
    mx_bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.'
      )
      .optional(),
    /** The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments. */
    naver_pay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments.'
      )
      .optional(),
    /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
    oxxo_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.'
      )
      .optional(),
    /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
    p24_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.'
      )
      .optional(),
    /** The status of the pay_by_bank payments capability of the account, or whether the account can directly process pay_by_bank charges. */
    pay_by_bank_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the pay_by_bank payments capability of the account, or whether the account can directly process pay_by_bank charges.'
      )
      .optional(),
    /** The status of the Payco capability of the account, or whether the account can directly process Payco payments. */
    payco_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Payco capability of the account, or whether the account can directly process Payco payments.'
      )
      .optional(),
    /** The status of the paynow payments capability of the account, or whether the account can directly process paynow charges. */
    paynow_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.'
      )
      .optional(),
    /** The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges. */
    promptpay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.'
      )
      .optional(),
    /** The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments. */
    revolut_pay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.'
      )
      .optional(),
    /** The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments. */
    samsung_pay_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments.'
      )
      .optional(),
    /** The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges. */
    sepa_bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.'
      )
      .optional(),
    /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
    sepa_debit_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.'
      )
      .optional(),
    /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
    sofort_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.'
      )
      .optional(),
    /** The status of the Swish capability of the account, or whether the account can directly process Swish payments. */
    swish_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Swish capability of the account, or whether the account can directly process Swish payments.'
      )
      .optional(),
    /** The status of the tax reporting 1099-K (US) capability of the account. */
    tax_reporting_us_1099_k: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the tax reporting 1099-K (US) capability of the account.'
      )
      .optional(),
    /** The status of the tax reporting 1099-MISC (US) capability of the account. */
    tax_reporting_us_1099_misc: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the tax reporting 1099-MISC (US) capability of the account.'
      )
      .optional(),
    /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
    transfers: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the transfers capability of the account, or whether your platform can transfer funds to the account.'
      )
      .optional(),
    /** The status of the banking capability, or whether the account can have bank accounts. */
    treasury: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the banking capability, or whether the account can have bank accounts.'
      )
      .optional(),
    /** The status of the TWINT capability of the account, or whether the account can directly process TWINT charges. */
    twint_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.'
      )
      .optional(),
    /** The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges. */
    us_bank_account_ach_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.'
      )
      .optional(),
    /** The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges. */
    us_bank_transfer_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.'
      )
      .optional(),
    /** The status of the Zip capability of the account, or whether the account can directly process Zip charges. */
    zip_payments: z
      .enum(['active', 'inactive', 'pending'])
      .describe(
        'The status of the Zip capability of the account, or whether the account can directly process Zip charges.'
      )
      .optional()
  })
  export type AccountCapabilities = z.infer<typeof AccountCapabilitiesSchema>

  export const LegalEntityJapanAddressSchema = z.object({
    /** City/Ward. */
    city: z.string().max(5000).nullable().describe('City/Ward.').optional(),
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      )
      .optional(),
    /** Block/Building number. */
    line1: z
      .string()
      .max(5000)
      .nullable()
      .describe('Block/Building number.')
      .optional(),
    /** Building details. */
    line2: z
      .string()
      .max(5000)
      .nullable()
      .describe('Building details.')
      .optional(),
    /** ZIP or postal code. */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('ZIP or postal code.')
      .optional(),
    /** Prefecture. */
    state: z.string().max(5000).nullable().describe('Prefecture.').optional(),
    /** Town/cho-me. */
    town: z.string().max(5000).nullable().describe('Town/cho-me.').optional()
  })
  export type LegalEntityJapanAddress = z.infer<
    typeof LegalEntityJapanAddressSchema
  >

  export const LegalEntityDirectorshipDeclarationSchema = z.object({
    /** The Unix timestamp marking when the directorship declaration attestation was made. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the directorship declaration attestation was made.'
      )
      .optional(),
    /** The IP address from which the directorship declaration attestation was made. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the directorship declaration attestation was made.'
      )
      .optional(),
    /** The user-agent string from the browser where the directorship declaration attestation was made. */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The user-agent string from the browser where the directorship declaration attestation was made.'
      )
      .optional()
  })
  export type LegalEntityDirectorshipDeclaration = z.infer<
    typeof LegalEntityDirectorshipDeclarationSchema
  >

  export const LegalEntityUboDeclarationSchema = z.object({
    /** The Unix timestamp marking when the beneficial owner attestation was made. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the beneficial owner attestation was made.'
      )
      .optional(),
    /** The IP address from which the beneficial owner attestation was made. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the beneficial owner attestation was made.'
      )
      .optional(),
    /** The user-agent string from the browser where the beneficial owner attestation was made. */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The user-agent string from the browser where the beneficial owner attestation was made.'
      )
      .optional()
  })
  export type LegalEntityUboDeclaration = z.infer<
    typeof LegalEntityUboDeclarationSchema
  >

  export const AccountUnificationAccountControllerFeesSchema = z.object({
    /** A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior). */
    payer: z
      .enum([
        'account',
        'application',
        'application_custom',
        'application_express'
      ])
      .describe(
        'A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior).'
      )
  })
  export type AccountUnificationAccountControllerFees = z.infer<
    typeof AccountUnificationAccountControllerFeesSchema
  >

  export const AccountUnificationAccountControllerLossesSchema = z.object({
    /** A value indicating who is liable when this account can't pay back negative balances from payments. */
    payments: z
      .enum(['application', 'stripe'])
      .describe(
        "A value indicating who is liable when this account can't pay back negative balances from payments."
      )
  })
  export type AccountUnificationAccountControllerLosses = z.infer<
    typeof AccountUnificationAccountControllerLossesSchema
  >

  export const AccountUnificationAccountControllerStripeDashboardSchema =
    z.object({
      /** A value indicating the Stripe dashboard this account has access to independent of the Connect application. */
      type: z
        .enum(['express', 'full', 'none'])
        .describe(
          'A value indicating the Stripe dashboard this account has access to independent of the Connect application.'
        )
    })
  export type AccountUnificationAccountControllerStripeDashboard = z.infer<
    typeof AccountUnificationAccountControllerStripeDashboardSchema
  >

  export const CustomerBalanceCustomerBalanceSettingsSchema = z.object({
    /** The configuration for how funds that land in the customer cash balance are reconciled. */
    reconciliation_mode: z
      .enum(['automatic', 'manual'])
      .describe(
        'The configuration for how funds that land in the customer cash balance are reconciled.'
      ),
    /** A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance */
    using_merchant_default: z
      .boolean()
      .describe(
        "A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance"
      )
  })
  export type CustomerBalanceCustomerBalanceSettings = z.infer<
    typeof CustomerBalanceCustomerBalanceSettingsSchema
  >

  export const DeletedCustomerSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('customer')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedCustomer = z.infer<typeof DeletedCustomerSchema>

  export const TokenCardNetworksSchema = z.object({
    /** The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
    preferred: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.'
      )
      .optional()
  })
  export type TokenCardNetworks = z.infer<typeof TokenCardNetworksSchema>

  export const SourceTypeAchCreditTransferSchema = z.object({
    account_number: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    fingerprint: z.string().nullable().optional(),
    refund_account_holder_name: z.string().nullable().optional(),
    refund_account_holder_type: z.string().nullable().optional(),
    refund_routing_number: z.string().nullable().optional(),
    routing_number: z.string().nullable().optional(),
    swift_code: z.string().nullable().optional()
  })
  export type SourceTypeAchCreditTransfer = z.infer<
    typeof SourceTypeAchCreditTransferSchema
  >

  export const SourceTypeAchDebitSchema = z.object({
    bank_name: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    fingerprint: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    routing_number: z.string().nullable().optional(),
    type: z.string().nullable().optional()
  })
  export type SourceTypeAchDebit = z.infer<typeof SourceTypeAchDebitSchema>

  export const SourceTypeAcssDebitSchema = z.object({
    bank_address_city: z.string().nullable().optional(),
    bank_address_line_1: z.string().nullable().optional(),
    bank_address_line_2: z.string().nullable().optional(),
    bank_address_postal_code: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    category: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    fingerprint: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    routing_number: z.string().nullable().optional()
  })
  export type SourceTypeAcssDebit = z.infer<typeof SourceTypeAcssDebitSchema>

  export const SourceTypeAlipaySchema = z.object({
    data_string: z.string().nullable().optional(),
    native_url: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeAlipay = z.infer<typeof SourceTypeAlipaySchema>

  export const SourceTypeAuBecsDebitSchema = z.object({
    bsb_number: z.string().nullable().optional(),
    fingerprint: z.string().nullable().optional(),
    last4: z.string().nullable().optional()
  })
  export type SourceTypeAuBecsDebit = z.infer<
    typeof SourceTypeAuBecsDebitSchema
  >

  export const SourceTypeBancontactSchema = z.object({
    bank_code: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    iban_last4: z.string().nullable().optional(),
    preferred_language: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeBancontact = z.infer<typeof SourceTypeBancontactSchema>

  export const SourceTypeCardSchema = z.object({
    address_line1_check: z.string().nullable().optional(),
    address_zip_check: z.string().nullable().optional(),
    brand: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    cvc_check: z.string().nullable().optional(),
    dynamic_last4: z.string().nullable().optional(),
    exp_month: z.number().int().nullable().optional(),
    exp_year: z.number().int().nullable().optional(),
    fingerprint: z.string().optional(),
    funding: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    name: z.string().nullable().optional(),
    three_d_secure: z.string().optional(),
    tokenization_method: z.string().nullable().optional()
  })
  export type SourceTypeCard = z.infer<typeof SourceTypeCardSchema>

  export const SourceTypeCardPresentSchema = z.object({
    application_cryptogram: z.string().optional(),
    application_preferred_name: z.string().optional(),
    authorization_code: z.string().nullable().optional(),
    authorization_response_code: z.string().optional(),
    brand: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    cvm_type: z.string().optional(),
    data_type: z.string().nullable().optional(),
    dedicated_file_name: z.string().optional(),
    emv_auth_data: z.string().optional(),
    evidence_customer_signature: z.string().nullable().optional(),
    evidence_transaction_certificate: z.string().nullable().optional(),
    exp_month: z.number().int().nullable().optional(),
    exp_year: z.number().int().nullable().optional(),
    fingerprint: z.string().optional(),
    funding: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    pos_device_id: z.string().nullable().optional(),
    pos_entry_mode: z.string().optional(),
    read_method: z.string().nullable().optional(),
    reader: z.string().nullable().optional(),
    terminal_verification_results: z.string().optional(),
    transaction_status_information: z.string().optional()
  })
  export type SourceTypeCardPresent = z.infer<
    typeof SourceTypeCardPresentSchema
  >

  export const SourceCodeVerificationFlowSchema = z.object({
    /** The number of attempts remaining to authenticate the source object with a verification code. */
    attempts_remaining: z
      .number()
      .int()
      .describe(
        'The number of attempts remaining to authenticate the source object with a verification code.'
      ),
    /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
    status: z
      .string()
      .max(5000)
      .describe(
        'The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).'
      )
  })
  export type SourceCodeVerificationFlow = z.infer<
    typeof SourceCodeVerificationFlowSchema
  >

  export const SourceTypeEpsSchema = z.object({
    reference: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeEps = z.infer<typeof SourceTypeEpsSchema>

  export const SourceTypeGiropaySchema = z.object({
    bank_code: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeGiropay = z.infer<typeof SourceTypeGiropaySchema>

  export const SourceTypeIdealSchema = z.object({
    bank: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    iban_last4: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeIdeal = z.infer<typeof SourceTypeIdealSchema>

  export const SourceTypeKlarnaSchema = z.object({
    background_image_url: z.string().optional(),
    client_token: z.string().nullable().optional(),
    first_name: z.string().optional(),
    last_name: z.string().optional(),
    locale: z.string().optional(),
    logo_url: z.string().optional(),
    page_title: z.string().optional(),
    pay_later_asset_urls_descriptive: z.string().optional(),
    pay_later_asset_urls_standard: z.string().optional(),
    pay_later_name: z.string().optional(),
    pay_later_redirect_url: z.string().optional(),
    pay_now_asset_urls_descriptive: z.string().optional(),
    pay_now_asset_urls_standard: z.string().optional(),
    pay_now_name: z.string().optional(),
    pay_now_redirect_url: z.string().optional(),
    pay_over_time_asset_urls_descriptive: z.string().optional(),
    pay_over_time_asset_urls_standard: z.string().optional(),
    pay_over_time_name: z.string().optional(),
    pay_over_time_redirect_url: z.string().optional(),
    payment_method_categories: z.string().optional(),
    purchase_country: z.string().optional(),
    purchase_type: z.string().optional(),
    redirect_url: z.string().optional(),
    shipping_delay: z.number().int().optional(),
    shipping_first_name: z.string().optional(),
    shipping_last_name: z.string().optional()
  })
  export type SourceTypeKlarna = z.infer<typeof SourceTypeKlarnaSchema>

  export const SourceTypeMultibancoSchema = z.object({
    entity: z.string().nullable().optional(),
    reference: z.string().nullable().optional(),
    refund_account_holder_address_city: z.string().nullable().optional(),
    refund_account_holder_address_country: z.string().nullable().optional(),
    refund_account_holder_address_line1: z.string().nullable().optional(),
    refund_account_holder_address_line2: z.string().nullable().optional(),
    refund_account_holder_address_postal_code: z.string().nullable().optional(),
    refund_account_holder_address_state: z.string().nullable().optional(),
    refund_account_holder_name: z.string().nullable().optional(),
    refund_iban: z.string().nullable().optional()
  })
  export type SourceTypeMultibanco = z.infer<typeof SourceTypeMultibancoSchema>

  export const SourceTypeP24Schema = z.object({
    reference: z.string().nullable().optional()
  })
  export type SourceTypeP24 = z.infer<typeof SourceTypeP24Schema>

  export const SourceReceiverFlowSchema = z.object({
    /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
    address: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.'
      )
      .optional(),
    /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
    amount_charged: z
      .number()
      .int()
      .describe(
        "The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency."
      ),
    /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
    amount_received: z
      .number()
      .int()
      .describe(
        "The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency."
      ),
    /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
    amount_returned: z
      .number()
      .int()
      .describe(
        "The total amount that was returned to the customer. The amount returned is expressed in the source's currency."
      ),
    /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
    refund_attributes_method: z
      .string()
      .max(5000)
      .describe(
        'Type of refund attribute method, one of `email`, `manual`, or `none`.'
      ),
    /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
    refund_attributes_status: z
      .string()
      .max(5000)
      .describe(
        'Type of refund attribute status, one of `missing`, `requested`, or `available`.'
      )
  })
  export type SourceReceiverFlow = z.infer<typeof SourceReceiverFlowSchema>

  export const SourceRedirectFlowSchema = z.object({
    /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
    failure_reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.'
      )
      .optional(),
    /** The URL you provide to redirect the customer to after they authenticated their payment. */
    return_url: z
      .string()
      .max(5000)
      .describe(
        'The URL you provide to redirect the customer to after they authenticated their payment.'
      ),
    /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
    status: z
      .string()
      .max(5000)
      .describe(
        'The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).'
      ),
    /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
    url: z
      .string()
      .max(2048)
      .describe(
        'The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.'
      )
  })
  export type SourceRedirectFlow = z.infer<typeof SourceRedirectFlowSchema>

  export const SourceTypeSepaDebitSchema = z.object({
    bank_code: z.string().nullable().optional(),
    branch_code: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    fingerprint: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    mandate_reference: z.string().nullable().optional(),
    mandate_url: z.string().nullable().optional()
  })
  export type SourceTypeSepaDebit = z.infer<typeof SourceTypeSepaDebitSchema>

  export const SourceTypeSofortSchema = z.object({
    bank_code: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    iban_last4: z.string().nullable().optional(),
    preferred_language: z.string().nullable().optional(),
    statement_descriptor: z.string().nullable().optional()
  })
  export type SourceTypeSofort = z.infer<typeof SourceTypeSofortSchema>

  export const SourceOrderItemSchema = z.object({
    /** The amount (price) for this order item. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe('The amount (price) for this order item.')
      .optional(),
    /** This currency of this order item. Required when `amount` is present. */
    currency: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'This currency of this order item. Required when `amount` is present.'
      )
      .optional(),
    /** Human-readable description for this order item. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe('Human-readable description for this order item.')
      .optional(),
    /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
    parent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).'
      )
      .optional(),
    /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
    quantity: z
      .number()
      .int()
      .describe(
        'The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.'
      )
      .optional(),
    /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
    type: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The type of this order item. Must be `sku`, `tax`, or `shipping`.'
      )
      .optional()
  })
  export type SourceOrderItem = z.infer<typeof SourceOrderItemSchema>

  export const SourceTypeThreeDSecureSchema = z.object({
    address_line1_check: z.string().nullable().optional(),
    address_zip_check: z.string().nullable().optional(),
    authenticated: z.boolean().nullable().optional(),
    brand: z.string().nullable().optional(),
    card: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    customer: z.string().nullable().optional(),
    cvc_check: z.string().nullable().optional(),
    dynamic_last4: z.string().nullable().optional(),
    exp_month: z.number().int().nullable().optional(),
    exp_year: z.number().int().nullable().optional(),
    fingerprint: z.string().optional(),
    funding: z.string().nullable().optional(),
    last4: z.string().nullable().optional(),
    name: z.string().nullable().optional(),
    three_d_secure: z.string().optional(),
    tokenization_method: z.string().nullable().optional()
  })
  export type SourceTypeThreeDSecure = z.infer<
    typeof SourceTypeThreeDSecureSchema
  >

  export const SourceTypeWechatSchema = z.object({
    prepay_id: z.string().optional(),
    qr_code_url: z.string().nullable().optional(),
    statement_descriptor: z.string().optional()
  })
  export type SourceTypeWechat = z.infer<typeof SourceTypeWechatSchema>

  export const CouponAppliesToSchema = z.object({
    /** A list of product IDs this coupon applies to */
    products: z
      .array(z.string().max(5000))
      .describe('A list of product IDs this coupon applies to')
  })
  export type CouponAppliesTo = z.infer<typeof CouponAppliesToSchema>

  export const CouponCurrencyOptionSchema = z.object({
    /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
    amount_off: z
      .number()
      .int()
      .describe(
        'Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.'
      )
  })
  export type CouponCurrencyOption = z.infer<typeof CouponCurrencyOptionSchema>

  export const PromotionCodeCurrencyOptionSchema = z.object({
    /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
    minimum_amount: z
      .number()
      .int()
      .describe(
        'Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).'
      )
  })
  export type PromotionCodeCurrencyOption = z.infer<
    typeof PromotionCodeCurrencyOptionSchema
  >

  export const InvoiceSettingCustomFieldSchema = z.object({
    /** The name of the custom field. */
    name: z.string().max(5000).describe('The name of the custom field.'),
    /** The value of the custom field. */
    value: z.string().max(5000).describe('The value of the custom field.')
  })
  export type InvoiceSettingCustomField = z.infer<
    typeof InvoiceSettingCustomFieldSchema
  >

  export const PaymentMethodAcssDebitSchema = z.object({
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Institution number of the bank account. */
    institution_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Institution number of the bank account.')
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** Transit number of the bank account. */
    transit_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Transit number of the bank account.')
      .optional()
  })
  export type PaymentMethodAcssDebit = z.infer<
    typeof PaymentMethodAcssDebitSchema
  >

  export const PaymentMethodAffirmSchema = z.object({})
  export type PaymentMethodAffirm = z.infer<typeof PaymentMethodAffirmSchema>

  export const PaymentMethodAfterpayClearpaySchema = z.object({})
  export type PaymentMethodAfterpayClearpay = z.infer<
    typeof PaymentMethodAfterpayClearpaySchema
  >

  export const PaymentFlowsPrivatePaymentMethodsAlipaySchema = z.object({})
  export type PaymentFlowsPrivatePaymentMethodsAlipay = z.infer<
    typeof PaymentFlowsPrivatePaymentMethodsAlipaySchema
  >

  export const PaymentMethodAlmaSchema = z.object({})
  export type PaymentMethodAlma = z.infer<typeof PaymentMethodAlmaSchema>

  export const PaymentMethodAmazonPaySchema = z.object({})
  export type PaymentMethodAmazonPay = z.infer<
    typeof PaymentMethodAmazonPaySchema
  >

  export const PaymentMethodAuBecsDebitSchema = z.object({
    /** Six-digit number identifying bank and branch associated with this bank account. */
    bsb_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Six-digit number identifying bank and branch associated with this bank account.'
      )
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional()
  })
  export type PaymentMethodAuBecsDebit = z.infer<
    typeof PaymentMethodAuBecsDebitSchema
  >

  export const PaymentMethodBacsDebitSchema = z.object({
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** Sort code of the bank account. (e.g., `10-20-30`) */
    sort_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Sort code of the bank account. (e.g., `10-20-30`)')
      .optional()
  })
  export type PaymentMethodBacsDebit = z.infer<
    typeof PaymentMethodBacsDebitSchema
  >

  export const PaymentMethodBancontactSchema = z.object({})
  export type PaymentMethodBancontact = z.infer<
    typeof PaymentMethodBancontactSchema
  >

  export const PaymentMethodBlikSchema = z.object({})
  export type PaymentMethodBlik = z.infer<typeof PaymentMethodBlikSchema>

  export const PaymentMethodBoletoSchema = z.object({
    /** Uniquely identifies the customer tax id (CNPJ or CPF) */
    tax_id: z
      .string()
      .max(5000)
      .describe('Uniquely identifies the customer tax id (CNPJ or CPF)')
  })
  export type PaymentMethodBoleto = z.infer<typeof PaymentMethodBoletoSchema>

  export const PaymentMethodCardChecksSchema = z.object({
    /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_line1_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_postal_code_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    cvc_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional()
  })
  export type PaymentMethodCardChecks = z.infer<
    typeof PaymentMethodCardChecksSchema
  >

  export const PaymentMethodDetailsCardPresentOfflineSchema = z.object({
    /** Time at which the payment was collected while offline */
    stored_at: z
      .number()
      .int()
      .nullable()
      .describe('Time at which the payment was collected while offline')
      .optional(),
    /** The method used to process this payment method offline. Only deferred is allowed. */
    type: z
      .literal('deferred')
      .nullable()
      .describe(
        'The method used to process this payment method offline. Only deferred is allowed.'
      )
      .optional()
  })
  export type PaymentMethodDetailsCardPresentOffline = z.infer<
    typeof PaymentMethodDetailsCardPresentOfflineSchema
  >

  export const PaymentMethodDetailsCardPresentReceiptSchema = z.object({
    /** The type of account being debited or credited */
    account_type: z
      .enum(['checking', 'credit', 'prepaid', 'unknown'])
      .describe('The type of account being debited or credited')
      .optional(),
    /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
    application_cryptogram: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'EMV tag 9F26, cryptogram generated by the integrated circuit chip.'
      )
      .optional(),
    /** Mnenomic of the Application Identifier. */
    application_preferred_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Mnenomic of the Application Identifier.')
      .optional(),
    /** Identifier for this transaction. */
    authorization_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Identifier for this transaction.')
      .optional(),
    /** EMV tag 8A. A code returned by the card issuer. */
    authorization_response_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('EMV tag 8A. A code returned by the card issuer.')
      .optional(),
    /** Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
    cardholder_verification_method: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.'
      )
      .optional(),
    /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
    dedicated_file_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.'
      )
      .optional(),
    /** The outcome of a series of EMV functions performed by the card reader. */
    terminal_verification_results: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The outcome of a series of EMV functions performed by the card reader.'
      )
      .optional(),
    /** An indication of various EMV functions performed during the transaction. */
    transaction_status_information: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An indication of various EMV functions performed during the transaction.'
      )
      .optional()
  })
  export type PaymentMethodDetailsCardPresentReceipt = z.infer<
    typeof PaymentMethodDetailsCardPresentReceiptSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsCardPresentCommonWalletSchema =
    z.object({
      /** The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`. */
      type: z
        .enum(['apple_pay', 'google_pay', 'samsung_pay', 'unknown'])
        .describe(
          'The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`.'
        )
    })
  export type PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsCardPresentCommonWalletSchema
    >

  export const ApplicationSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** The name of the application. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The name of the application.')
      .optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('application')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type Application = z.infer<typeof ApplicationSchema>

  export const SetupAttemptPaymentMethodDetailsAcssDebitSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsAcssDebit = z.infer<
    typeof SetupAttemptPaymentMethodDetailsAcssDebitSchema
  >

  export const SetupAttemptPaymentMethodDetailsAmazonPaySchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsAmazonPay = z.infer<
    typeof SetupAttemptPaymentMethodDetailsAmazonPaySchema
  >

  export const SetupAttemptPaymentMethodDetailsAuBecsDebitSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsAuBecsDebit = z.infer<
    typeof SetupAttemptPaymentMethodDetailsAuBecsDebitSchema
  >

  export const SetupAttemptPaymentMethodDetailsBacsDebitSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsBacsDebit = z.infer<
    typeof SetupAttemptPaymentMethodDetailsBacsDebitSchema
  >

  export const OfflineAcceptanceSchema = z.object({})
  export type OfflineAcceptance = z.infer<typeof OfflineAcceptanceSchema>

  export const OnlineAcceptanceSchema = z.object({
    /** The customer accepts the mandate from this IP address. */
    ip_address: z
      .string()
      .max(5000)
      .nullable()
      .describe('The customer accepts the mandate from this IP address.')
      .optional(),
    /** The customer accepts the mandate using the user agent of the browser. */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The customer accepts the mandate using the user agent of the browser.'
      )
      .optional()
  })
  export type OnlineAcceptance = z.infer<typeof OnlineAcceptanceSchema>

  export const MandateMultiUseSchema = z.object({})
  export type MandateMultiUse = z.infer<typeof MandateMultiUseSchema>

  export const MandateAcssDebitSchema = z.object({
    /** List of Stripe products where this mandate can be selected automatically. */
    default_for: z
      .array(z.enum(['invoice', 'subscription']))
      .describe(
        'List of Stripe products where this mandate can be selected automatically.'
      )
      .optional(),
    /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
    interval_description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
      )
      .optional(),
    /** Payment schedule for the mandate. */
    payment_schedule: z
      .enum(['combined', 'interval', 'sporadic'])
      .describe('Payment schedule for the mandate.'),
    /** Transaction type of the mandate. */
    transaction_type: z
      .enum(['business', 'personal'])
      .describe('Transaction type of the mandate.')
  })
  export type MandateAcssDebit = z.infer<typeof MandateAcssDebitSchema>

  export const MandateAmazonPaySchema = z.object({})
  export type MandateAmazonPay = z.infer<typeof MandateAmazonPaySchema>

  export const MandateAuBecsDebitSchema = z.object({
    /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
    url: z
      .string()
      .max(5000)
      .describe(
        'The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.'
      )
  })
  export type MandateAuBecsDebit = z.infer<typeof MandateAuBecsDebitSchema>

  export const MandateBacsDebitSchema = z.object({
    /** The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
    network_status: z
      .enum(['accepted', 'pending', 'refused', 'revoked'])
      .describe(
        'The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.'
      ),
    /** The unique reference identifying the mandate on the Bacs network. */
    reference: z
      .string()
      .max(5000)
      .describe(
        'The unique reference identifying the mandate on the Bacs network.'
      ),
    /** When the mandate is revoked on the Bacs network this field displays the reason for the revocation. */
    revocation_reason: z
      .enum([
        'account_closed',
        'bank_account_restricted',
        'bank_ownership_changed',
        'could_not_process',
        'debit_not_authorized'
      ])
      .nullable()
      .describe(
        'When the mandate is revoked on the Bacs network this field displays the reason for the revocation.'
      )
      .optional(),
    /** The URL that will contain the mandate that the customer has signed. */
    url: z
      .string()
      .max(5000)
      .describe(
        'The URL that will contain the mandate that the customer has signed.'
      )
  })
  export type MandateBacsDebit = z.infer<typeof MandateBacsDebitSchema>

  export const CardMandatePaymentMethodDetailsSchema = z.object({})
  export type CardMandatePaymentMethodDetails = z.infer<
    typeof CardMandatePaymentMethodDetailsSchema
  >

  export const MandateCashappSchema = z.object({})
  export type MandateCashapp = z.infer<typeof MandateCashappSchema>

  export const MandateKakaoPaySchema = z.object({})
  export type MandateKakaoPay = z.infer<typeof MandateKakaoPaySchema>

  export const MandateKrCardSchema = z.object({})
  export type MandateKrCard = z.infer<typeof MandateKrCardSchema>

  export const MandateLinkSchema = z.object({})
  export type MandateLink = z.infer<typeof MandateLinkSchema>

  export const MandatePaypalSchema = z.object({
    /** The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
    billing_agreement_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.'
      )
      .optional(),
    /** PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
    payer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'PayPal account PayerID. This identifier uniquely identifies the PayPal customer.'
      )
      .optional()
  })
  export type MandatePaypal = z.infer<typeof MandatePaypalSchema>

  export const MandateRevolutPaySchema = z.object({})
  export type MandateRevolutPay = z.infer<typeof MandateRevolutPaySchema>

  export const MandateSepaDebitSchema = z.object({
    /** The unique reference of the mandate. */
    reference: z
      .string()
      .max(5000)
      .describe('The unique reference of the mandate.'),
    /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
    url: z
      .string()
      .max(5000)
      .describe(
        'The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.'
      )
  })
  export type MandateSepaDebit = z.infer<typeof MandateSepaDebitSchema>

  export const MandateUsBankAccountSchema = z.object({
    /** Mandate collection method */
    collection_method: z
      .literal('paper')
      .describe('Mandate collection method')
      .optional()
  })
  export type MandateUsBankAccount = z.infer<typeof MandateUsBankAccountSchema>

  export const MandateSingleUseSchema = z.object({
    /** The amount of the payment on a single use mandate. */
    amount: z
      .number()
      .int()
      .describe('The amount of the payment on a single use mandate.'),
    /** The currency of the payment on a single use mandate. */
    currency: z
      .string()
      .describe('The currency of the payment on a single use mandate.')
  })
  export type MandateSingleUse = z.infer<typeof MandateSingleUseSchema>

  export const SetupAttemptPaymentMethodDetailsBoletoSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsBoleto = z.infer<
    typeof SetupAttemptPaymentMethodDetailsBoletoSchema
  >

  export const SetupAttemptPaymentMethodDetailsCardChecksSchema = z.object({
    /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_line1_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_postal_code_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    cvc_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsCardChecks = z.infer<
    typeof SetupAttemptPaymentMethodDetailsCardChecksSchema
  >

  export const ThreeDSecureDetailsSchema = z.object({
    /**
     * For authenticated transactions: how the customer was authenticated by
     * the issuing bank.
     */
    authentication_flow: z
      .enum(['challenge', 'frictionless'])
      .nullable()
      .describe(
        'For authenticated transactions: how the customer was authenticated by\nthe issuing bank.'
      )
      .optional(),
    /**
     * The Electronic Commerce Indicator (ECI). A protocol-level field
     * indicating what degree of authentication was performed.
     */
    electronic_commerce_indicator: z
      .enum(['01', '02', '05', '06', '07'])
      .nullable()
      .describe(
        'The Electronic Commerce Indicator (ECI). A protocol-level field\nindicating what degree of authentication was performed.'
      )
      .optional(),
    /** Indicates the outcome of 3D Secure authentication. */
    result: z
      .enum([
        'attempt_acknowledged',
        'authenticated',
        'exempted',
        'failed',
        'not_supported',
        'processing_error'
      ])
      .nullable()
      .describe('Indicates the outcome of 3D Secure authentication.')
      .optional(),
    /**
     * Additional information about why 3D Secure succeeded or failed based
     * on the `result`.
     */
    result_reason: z
      .enum([
        'abandoned',
        'bypassed',
        'canceled',
        'card_not_enrolled',
        'network_not_supported',
        'protocol_error',
        'rejected'
      ])
      .nullable()
      .describe(
        'Additional information about why 3D Secure succeeded or failed based\non the `result`.'
      )
      .optional(),
    /**
     * The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
     * (dsTransId) for this payment.
     */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID\n(dsTransId) for this payment.'
      )
      .optional(),
    /** The version of 3D Secure that was used. */
    version: z
      .enum(['1.0.2', '2.1.0', '2.2.0'])
      .nullable()
      .describe('The version of 3D Secure that was used.')
      .optional()
  })
  export type ThreeDSecureDetails = z.infer<typeof ThreeDSecureDetailsSchema>

  export const PaymentMethodDetailsCardWalletApplePaySchema = z.object({})
  export type PaymentMethodDetailsCardWalletApplePay = z.infer<
    typeof PaymentMethodDetailsCardWalletApplePaySchema
  >

  export const PaymentMethodDetailsCardWalletGooglePaySchema = z.object({})
  export type PaymentMethodDetailsCardWalletGooglePay = z.infer<
    typeof PaymentMethodDetailsCardWalletGooglePaySchema
  >

  export const SetupAttemptPaymentMethodDetailsCashappSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsCashapp = z.infer<
    typeof SetupAttemptPaymentMethodDetailsCashappSchema
  >

  export const SetupAttemptPaymentMethodDetailsKakaoPaySchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsKakaoPay = z.infer<
    typeof SetupAttemptPaymentMethodDetailsKakaoPaySchema
  >

  export const SetupAttemptPaymentMethodDetailsKlarnaSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsKlarna = z.infer<
    typeof SetupAttemptPaymentMethodDetailsKlarnaSchema
  >

  export const SetupAttemptPaymentMethodDetailsKrCardSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsKrCard = z.infer<
    typeof SetupAttemptPaymentMethodDetailsKrCardSchema
  >

  export const SetupAttemptPaymentMethodDetailsLinkSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsLink = z.infer<
    typeof SetupAttemptPaymentMethodDetailsLinkSchema
  >

  export const SetupAttemptPaymentMethodDetailsPaypalSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsPaypal = z.infer<
    typeof SetupAttemptPaymentMethodDetailsPaypalSchema
  >

  export const SetupAttemptPaymentMethodDetailsRevolutPaySchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsRevolutPay = z.infer<
    typeof SetupAttemptPaymentMethodDetailsRevolutPaySchema
  >

  export const SetupAttemptPaymentMethodDetailsSepaDebitSchema = z.object({})
  export type SetupAttemptPaymentMethodDetailsSepaDebit = z.infer<
    typeof SetupAttemptPaymentMethodDetailsSepaDebitSchema
  >

  export const SetupAttemptPaymentMethodDetailsUsBankAccountSchema = z.object(
    {}
  )
  export type SetupAttemptPaymentMethodDetailsUsBankAccount = z.infer<
    typeof SetupAttemptPaymentMethodDetailsUsBankAccountSchema
  >

  export const PaymentFlowsAmountDetailsClientResourceTipSchema = z.object({
    /** Portion of the amount that corresponds to a tip. */
    amount: z
      .number()
      .int()
      .describe('Portion of the amount that corresponds to a tip.')
      .optional()
  })
  export type PaymentFlowsAmountDetailsClientResourceTip = z.infer<
    typeof PaymentFlowsAmountDetailsClientResourceTipSchema
  >

  export const PaymentFlowsAutomaticPaymentMethodsPaymentIntentSchema =
    z.object({
      /**
       * Controls whether this PaymentIntent will accept redirect-based payment methods.
       *
       * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
       */
      allow_redirects: z
        .enum(['always', 'never'])
        .describe(
          "Controls whether this PaymentIntent will accept redirect-based payment methods.\n\nRedirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment."
        )
        .optional(),
      /** Automatically calculates compatible payment methods */
      enabled: z
        .boolean()
        .describe('Automatically calculates compatible payment methods')
    })
  export type PaymentFlowsAutomaticPaymentMethodsPaymentIntent = z.infer<
    typeof PaymentFlowsAutomaticPaymentMethodsPaymentIntentSchema
  >

  export const TaxIdVerificationSchema = z.object({
    /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
    status: z
      .enum(['pending', 'unavailable', 'unverified', 'verified'])
      .describe(
        'Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.'
      ),
    /** Verified address. */
    verified_address: z
      .string()
      .max(5000)
      .nullable()
      .describe('Verified address.')
      .optional(),
    /** Verified name. */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Verified name.')
      .optional()
  })
  export type TaxIdVerification = z.infer<typeof TaxIdVerificationSchema>

  export const DeletedTaxIdSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('tax_id')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedTaxId = z.infer<typeof DeletedTaxIdSchema>

  export const DeletedApplicationSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** The name of the application. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The name of the application.')
      .optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('application')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedApplication = z.infer<typeof DeletedApplicationSchema>

  export const FeeSchema = z.object({
    /** Amount of the fee, in cents. */
    amount: z.number().int().describe('Amount of the fee, in cents.'),
    /** ID of the Connect application that earned the fee. */
    application: z
      .string()
      .max(5000)
      .nullable()
      .describe('ID of the Connect application that earned the fee.')
      .optional(),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An arbitrary string attached to the object. Often useful for displaying to users.'
      )
      .optional(),
    /** Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`.'
      )
  })
  export type Fee = z.infer<typeof FeeSchema>

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransferSchema =
    z.object({
      /** The BIC of the bank of the sender of the funding. */
      bic: z
        .string()
        .max(5000)
        .nullable()
        .describe('The BIC of the bank of the sender of the funding.')
        .optional(),
      /** The last 4 digits of the IBAN of the sender of the funding. */
      iban_last4: z
        .string()
        .max(5000)
        .nullable()
        .describe('The last 4 digits of the IBAN of the sender of the funding.')
        .optional(),
      /** The full name of the sender, as supplied by the sending bank. */
      sender_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The full name of the sender, as supplied by the sending bank.'
        )
        .optional()
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransferSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransferSchema =
    z.object({
      /** The last 4 digits of the account number of the sender of the funding. */
      account_number_last4: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The last 4 digits of the account number of the sender of the funding.'
        )
        .optional(),
      /** The full name of the sender, as supplied by the sending bank. */
      sender_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The full name of the sender, as supplied by the sending bank.'
        )
        .optional(),
      /** The sort code of the bank of the sender of the funding */
      sort_code: z
        .string()
        .max(5000)
        .nullable()
        .describe('The sort code of the bank of the sender of the funding')
        .optional()
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransferSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransferSchema =
    z.object({
      /** The name of the bank of the sender of the funding. */
      sender_bank: z
        .string()
        .max(5000)
        .nullable()
        .describe('The name of the bank of the sender of the funding.')
        .optional(),
      /** The name of the bank branch of the sender of the funding. */
      sender_branch: z
        .string()
        .max(5000)
        .nullable()
        .describe('The name of the bank branch of the sender of the funding.')
        .optional(),
      /** The full name of the sender, as supplied by the sending bank. */
      sender_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The full name of the sender, as supplied by the sending bank.'
        )
        .optional()
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransferSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferSchema =
    z.object({
      /** The banking network used for this funding. */
      network: z
        .enum(['ach', 'domestic_wire_us', 'swift'])
        .describe('The banking network used for this funding.')
        .optional(),
      /** The full name of the sender, as supplied by the sending bank. */
      sender_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The full name of the sender, as supplied by the sending bank.'
        )
        .optional()
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferSchema
    >

  export const DestinationDetailsUnimplementedSchema = z.object({})
  export type DestinationDetailsUnimplemented = z.infer<
    typeof DestinationDetailsUnimplementedSchema
  >

  export const RefundDestinationDetailsBlikSchema = z.object({
    /** For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed. */
    network_decline_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.'
      )
      .optional(),
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsBlik = z.infer<
    typeof RefundDestinationDetailsBlikSchema
  >

  export const RefundDestinationDetailsBrBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsBrBankTransfer = z.infer<
    typeof RefundDestinationDetailsBrBankTransferSchema
  >

  export const RefundDestinationDetailsCardSchema = z.object({
    /** Value of the reference number assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .describe('Value of the reference number assigned to the refund.')
      .optional(),
    /** Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .describe(
        'Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional(),
    /** Type of the reference number assigned to the refund. */
    reference_type: z
      .string()
      .max(5000)
      .describe('Type of the reference number assigned to the refund.')
      .optional(),
    /** The type of refund. This can be `refund`, `reversal`, or `pending`. */
    type: z
      .enum(['pending', 'refund', 'reversal'])
      .describe(
        'The type of refund. This can be `refund`, `reversal`, or `pending`.'
      )
  })
  export type RefundDestinationDetailsCard = z.infer<
    typeof RefundDestinationDetailsCardSchema
  >

  export const RefundDestinationDetailsEuBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsEuBankTransfer = z.infer<
    typeof RefundDestinationDetailsEuBankTransferSchema
  >

  export const RefundDestinationDetailsGbBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsGbBankTransfer = z.infer<
    typeof RefundDestinationDetailsGbBankTransferSchema
  >

  export const RefundDestinationDetailsJpBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsJpBankTransfer = z.infer<
    typeof RefundDestinationDetailsJpBankTransferSchema
  >

  export const RefundDestinationDetailsMultibancoSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsMultibanco = z.infer<
    typeof RefundDestinationDetailsMultibancoSchema
  >

  export const RefundDestinationDetailsMxBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsMxBankTransfer = z.infer<
    typeof RefundDestinationDetailsMxBankTransferSchema
  >

  export const RefundDestinationDetailsP24Schema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsP24 = z.infer<
    typeof RefundDestinationDetailsP24Schema
  >

  export const RefundDestinationDetailsSwishSchema = z.object({
    /** For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed. */
    network_decline_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.'
      )
      .optional(),
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsSwish = z.infer<
    typeof RefundDestinationDetailsSwishSchema
  >

  export const RefundDestinationDetailsThBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsThBankTransfer = z.infer<
    typeof RefundDestinationDetailsThBankTransferSchema
  >

  export const RefundDestinationDetailsUsBankTransferSchema = z.object({
    /** The reference assigned to the refund. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reference assigned to the refund.')
      .optional(),
    /** Status of the reference on the refund. This can be `pending`, `available` or `unavailable`. */
    reference_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.'
      )
      .optional()
  })
  export type RefundDestinationDetailsUsBankTransfer = z.infer<
    typeof RefundDestinationDetailsUsBankTransferSchema
  >

  export const EmailSentSchema = z.object({
    /** The timestamp when the email was sent. */
    email_sent_at: z
      .number()
      .int()
      .describe('The timestamp when the email was sent.'),
    /** The recipient's email address. */
    email_sent_to: z
      .string()
      .max(5000)
      .describe("The recipient's email address.")
  })
  export type EmailSent = z.infer<typeof EmailSentSchema>

  export const DisputeTransactionShippingAddressSchema = z.object({
    /** City, district, suburb, town, or village. */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('City, district, suburb, town, or village.')
      .optional(),
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      )
      .optional(),
    /** Address line 1 (e.g., street, PO Box, or company name). */
    line1: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 1 (e.g., street, PO Box, or company name).')
      .optional(),
    /** Address line 2 (e.g., apartment, suite, unit, or building). */
    line2: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 2 (e.g., apartment, suite, unit, or building).')
      .optional(),
    /** ZIP or postal code. */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('ZIP or postal code.')
      .optional(),
    /** State, county, province, or region. */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe('State, county, province, or region.')
      .optional()
  })
  export type DisputeTransactionShippingAddress = z.infer<
    typeof DisputeTransactionShippingAddressSchema
  >

  export const DisputeEnhancedEvidenceVisaComplianceSchema = z.object({
    /** A field acknowledging the fee incurred when countering a Visa compliance dispute. If this field is set to true, evidence can be submitted for the compliance dispute. Stripe collects a 500 USD (or local equivalent) amount to cover the network costs associated with resolving compliance disputes. Stripe refunds the 500 USD network fee if you win the dispute. */
    fee_acknowledged: z
      .boolean()
      .describe(
        'A field acknowledging the fee incurred when countering a Visa compliance dispute. If this field is set to true, evidence can be submitted for the compliance dispute. Stripe collects a 500 USD (or local equivalent) amount to cover the network costs associated with resolving compliance disputes. Stripe refunds the 500 USD network fee if you win the dispute.'
      )
  })
  export type DisputeEnhancedEvidenceVisaCompliance = z.infer<
    typeof DisputeEnhancedEvidenceVisaComplianceSchema
  >

  export const DisputeEnhancedEligibilityVisaCompellingEvidence3Schema =
    z.object({
      /** List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission. */
      required_actions: z
        .array(
          z.enum([
            'missing_customer_identifiers',
            'missing_disputed_transaction_description',
            'missing_merchandise_or_services',
            'missing_prior_undisputed_transaction_description',
            'missing_prior_undisputed_transactions'
          ])
        )
        .describe(
          'List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission.'
        ),
      /** Visa Compelling Evidence 3.0 eligibility status. */
      status: z
        .enum(['not_qualified', 'qualified', 'requires_action'])
        .describe('Visa Compelling Evidence 3.0 eligibility status.')
    })
  export type DisputeEnhancedEligibilityVisaCompellingEvidence3 = z.infer<
    typeof DisputeEnhancedEligibilityVisaCompellingEvidence3Schema
  >

  export const DisputeEnhancedEligibilityVisaComplianceSchema = z.object({
    /** Visa compliance eligibility status. */
    status: z
      .enum(['fee_acknowledged', 'requires_fee_acknowledgement'])
      .describe('Visa compliance eligibility status.')
  })
  export type DisputeEnhancedEligibilityVisaCompliance = z.infer<
    typeof DisputeEnhancedEligibilityVisaComplianceSchema
  >

  export const DisputePaymentMethodDetailsAmazonPaySchema = z.object({
    /** The AmazonPay dispute type, chargeback or claim */
    dispute_type: z
      .enum(['chargeback', 'claim'])
      .nullable()
      .describe('The AmazonPay dispute type, chargeback or claim')
      .optional()
  })
  export type DisputePaymentMethodDetailsAmazonPay = z.infer<
    typeof DisputePaymentMethodDetailsAmazonPaySchema
  >

  export const DisputePaymentMethodDetailsCardSchema = z.object({
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      ),
    /** The type of dispute opened. Different case types may have varying fees and financial impact. */
    case_type: z
      .enum(['chargeback', 'inquiry'])
      .describe(
        'The type of dispute opened. Different case types may have varying fees and financial impact.'
      ),
    /** The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network. */
    network_reason_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network."
      )
      .optional()
  })
  export type DisputePaymentMethodDetailsCard = z.infer<
    typeof DisputePaymentMethodDetailsCardSchema
  >

  export const DisputePaymentMethodDetailsKlarnaSchema = z.object({
    /** The reason for the dispute as defined by Klarna */
    reason_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reason for the dispute as defined by Klarna')
      .optional()
  })
  export type DisputePaymentMethodDetailsKlarna = z.infer<
    typeof DisputePaymentMethodDetailsKlarnaSchema
  >

  export const DisputePaymentMethodDetailsPaypalSchema = z.object({
    /** The ID of the dispute in PayPal. */
    case_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('The ID of the dispute in PayPal.')
      .optional(),
    /** The reason for the dispute as defined by PayPal */
    reason_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('The reason for the dispute as defined by PayPal')
      .optional()
  })
  export type DisputePaymentMethodDetailsPaypal = z.infer<
    typeof DisputePaymentMethodDetailsPaypalSchema
  >

  export const IssuingAuthorizationAmountDetailsSchema = z.object({
    /** The fee charged by the ATM for the cash withdrawal. */
    atm_fee: z
      .number()
      .int()
      .nullable()
      .describe('The fee charged by the ATM for the cash withdrawal.')
      .optional(),
    /** The amount of cash requested by the cardholder. */
    cashback_amount: z
      .number()
      .int()
      .nullable()
      .describe('The amount of cash requested by the cardholder.')
      .optional()
  })
  export type IssuingAuthorizationAmountDetails = z.infer<
    typeof IssuingAuthorizationAmountDetailsSchema
  >

  export const IssuingCardholderCompanySchema = z.object({
    /** Whether the company's business ID number was provided. */
    tax_id_provided: z
      .boolean()
      .describe("Whether the company's business ID number was provided.")
  })
  export type IssuingCardholderCompany = z.infer<
    typeof IssuingCardholderCompanySchema
  >

  export const IssuingCardholderUserTermsAcceptanceSchema = z.object({
    /** The Unix timestamp marking when the cardholder accepted the Authorized User Terms. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the cardholder accepted the Authorized User Terms.'
      )
      .optional(),
    /** The IP address from which the cardholder accepted the Authorized User Terms. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the cardholder accepted the Authorized User Terms.'
      )
      .optional(),
    /** The user agent of the browser from which the cardholder accepted the Authorized User Terms. */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The user agent of the browser from which the cardholder accepted the Authorized User Terms.'
      )
      .optional()
  })
  export type IssuingCardholderUserTermsAcceptance = z.infer<
    typeof IssuingCardholderUserTermsAcceptanceSchema
  >

  export const IssuingCardholderIndividualDobSchema = z.object({
    /** The day of birth, between 1 and 31. */
    day: z
      .number()
      .int()
      .nullable()
      .describe('The day of birth, between 1 and 31.')
      .optional(),
    /** The month of birth, between 1 and 12. */
    month: z
      .number()
      .int()
      .nullable()
      .describe('The month of birth, between 1 and 12.')
      .optional(),
    /** The four-digit year of birth. */
    year: z
      .number()
      .int()
      .nullable()
      .describe('The four-digit year of birth.')
      .optional()
  })
  export type IssuingCardholderIndividualDob = z.infer<
    typeof IssuingCardholderIndividualDobSchema
  >

  export const IssuingCardholderRequirementsSchema = z.object({
    /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
    disabled_reason: z
      .enum([
        'listed',
        'rejected.listed',
        'requirements.past_due',
        'under_review'
      ])
      .nullable()
      .describe(
        'If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.'
      )
      .optional(),
    /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
    past_due: z
      .array(
        z.enum([
          'company.tax_id',
          'individual.card_issuing.user_terms_acceptance.date',
          'individual.card_issuing.user_terms_acceptance.ip',
          'individual.dob.day',
          'individual.dob.month',
          'individual.dob.year',
          'individual.first_name',
          'individual.last_name',
          'individual.verification.document'
        ])
      )
      .nullable()
      .describe(
        'Array of fields that need to be collected in order to verify and re-enable the cardholder.'
      )
      .optional()
  })
  export type IssuingCardholderRequirements = z.infer<
    typeof IssuingCardholderRequirementsSchema
  >

  export const IssuingCardholderSpendingLimitSchema = z.object({
    /** Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        "Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
      ),
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
    categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.'
      )
      .optional(),
    /** Interval (or event) to which the amount applies. */
    interval: z
      .enum([
        'all_time',
        'daily',
        'monthly',
        'per_authorization',
        'weekly',
        'yearly'
      ])
      .describe('Interval (or event) to which the amount applies.')
  })
  export type IssuingCardholderSpendingLimit = z.infer<
    typeof IssuingCardholderSpendingLimitSchema
  >

  export const IssuingPersonalizationDesignCarrierTextSchema = z.object({
    /** The footer body text of the carrier letter. */
    footer_body: z
      .string()
      .max(5000)
      .nullable()
      .describe('The footer body text of the carrier letter.')
      .optional(),
    /** The footer title text of the carrier letter. */
    footer_title: z
      .string()
      .max(5000)
      .nullable()
      .describe('The footer title text of the carrier letter.')
      .optional(),
    /** The header body text of the carrier letter. */
    header_body: z
      .string()
      .max(5000)
      .nullable()
      .describe('The header body text of the carrier letter.')
      .optional(),
    /** The header title text of the carrier letter. */
    header_title: z
      .string()
      .max(5000)
      .nullable()
      .describe('The header title text of the carrier letter.')
      .optional()
  })
  export type IssuingPersonalizationDesignCarrierText = z.infer<
    typeof IssuingPersonalizationDesignCarrierTextSchema
  >

  export const IssuingPhysicalBundleFeaturesSchema = z.object({
    /** The policy for how to use card logo images in a card design with this physical bundle. */
    card_logo: z
      .enum(['optional', 'required', 'unsupported'])
      .describe(
        'The policy for how to use card logo images in a card design with this physical bundle.'
      ),
    /** The policy for how to use carrier letter text in a card design with this physical bundle. */
    carrier_text: z
      .enum(['optional', 'required', 'unsupported'])
      .describe(
        'The policy for how to use carrier letter text in a card design with this physical bundle.'
      ),
    /** The policy for how to use a second line on a card with this physical bundle. */
    second_line: z
      .enum(['optional', 'required', 'unsupported'])
      .describe(
        'The policy for how to use a second line on a card with this physical bundle.'
      )
  })
  export type IssuingPhysicalBundleFeatures = z.infer<
    typeof IssuingPhysicalBundleFeaturesSchema
  >

  export const IssuingPersonalizationDesignPreferencesSchema = z.object({
    /** Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design. */
    is_default: z
      .boolean()
      .describe(
        "Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design."
      ),
    /** Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist. */
    is_platform_default: z
      .boolean()
      .nullable()
      .describe(
        'Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist.'
      )
      .optional()
  })
  export type IssuingPersonalizationDesignPreferences = z.infer<
    typeof IssuingPersonalizationDesignPreferencesSchema
  >

  export const IssuingPersonalizationDesignRejectionReasonsSchema = z.object({
    /** The reason(s) the card logo was rejected. */
    card_logo: z
      .array(
        z.enum([
          'geographic_location',
          'inappropriate',
          'network_name',
          'non_binary_image',
          'non_fiat_currency',
          'other',
          'other_entity',
          'promotional_material'
        ])
      )
      .nullable()
      .describe('The reason(s) the card logo was rejected.')
      .optional(),
    /** The reason(s) the carrier text was rejected. */
    carrier_text: z
      .array(
        z.enum([
          'geographic_location',
          'inappropriate',
          'network_name',
          'non_fiat_currency',
          'other',
          'other_entity',
          'promotional_material'
        ])
      )
      .nullable()
      .describe('The reason(s) the carrier text was rejected.')
      .optional()
  })
  export type IssuingPersonalizationDesignRejectionReasons = z.infer<
    typeof IssuingPersonalizationDesignRejectionReasonsSchema
  >

  export const IssuingCardShippingCustomsSchema = z.object({
    /** A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU. */
    eori_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU.'
      )
      .optional()
  })
  export type IssuingCardShippingCustoms = z.infer<
    typeof IssuingCardShippingCustomsSchema
  >

  export const IssuingCardSpendingLimitSchema = z.object({
    /** Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        "Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
      ),
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
    categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.'
      )
      .optional(),
    /** Interval (or event) to which the amount applies. */
    interval: z
      .enum([
        'all_time',
        'daily',
        'monthly',
        'per_authorization',
        'weekly',
        'yearly'
      ])
      .describe('Interval (or event) to which the amount applies.')
  })
  export type IssuingCardSpendingLimit = z.infer<
    typeof IssuingCardSpendingLimitSchema
  >

  export const IssuingCardApplePaySchema = z.object({
    /** Apple Pay Eligibility */
    eligible: z.boolean().describe('Apple Pay Eligibility'),
    /** Reason the card is ineligible for Apple Pay */
    ineligible_reason: z
      .enum([
        'missing_agreement',
        'missing_cardholder_contact',
        'unsupported_region'
      ])
      .nullable()
      .describe('Reason the card is ineligible for Apple Pay')
      .optional()
  })
  export type IssuingCardApplePay = z.infer<typeof IssuingCardApplePaySchema>

  export const IssuingCardGooglePaySchema = z.object({
    /** Google Pay Eligibility */
    eligible: z.boolean().describe('Google Pay Eligibility'),
    /** Reason the card is ineligible for Google Pay */
    ineligible_reason: z
      .enum([
        'missing_agreement',
        'missing_cardholder_contact',
        'unsupported_region'
      ])
      .nullable()
      .describe('Reason the card is ineligible for Google Pay')
      .optional()
  })
  export type IssuingCardGooglePay = z.infer<typeof IssuingCardGooglePaySchema>

  export const IssuingAuthorizationFleetCardholderPromptDataSchema = z.object({
    /** [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID. */
    alphanumeric_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '[Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.'
      )
      .optional(),
    /** Driver ID. */
    driver_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Driver ID.')
      .optional(),
    /** Odometer reading. */
    odometer: z
      .number()
      .int()
      .nullable()
      .describe('Odometer reading.')
      .optional(),
    /** An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
    unspecified_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.'
      )
      .optional(),
    /** User ID. */
    user_id: z.string().max(5000).nullable().describe('User ID.').optional(),
    /** Vehicle number. */
    vehicle_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Vehicle number.')
      .optional()
  })
  export type IssuingAuthorizationFleetCardholderPromptData = z.infer<
    typeof IssuingAuthorizationFleetCardholderPromptDataSchema
  >

  export const IssuingAuthorizationFleetFuelPriceDataSchema = z.object({
    /** Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes. */
    gross_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.'
      )
      .optional()
  })
  export type IssuingAuthorizationFleetFuelPriceData = z.infer<
    typeof IssuingAuthorizationFleetFuelPriceDataSchema
  >

  export const IssuingAuthorizationFleetNonFuelPriceDataSchema = z.object({
    /** Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes. */
    gross_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.'
      )
      .optional()
  })
  export type IssuingAuthorizationFleetNonFuelPriceData = z.infer<
    typeof IssuingAuthorizationFleetNonFuelPriceDataSchema
  >

  export const IssuingAuthorizationFleetTaxDataSchema = z.object({
    /** Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax. */
    local_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax.'
      )
      .optional(),
    /** Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax. */
    national_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax.'
      )
      .optional()
  })
  export type IssuingAuthorizationFleetTaxData = z.infer<
    typeof IssuingAuthorizationFleetTaxDataSchema
  >

  export const IssuingAuthorizationFraudChallengeSchema = z.object({
    /** The method by which the fraud challenge was delivered to the cardholder. */
    channel: z
      .literal('sms')
      .describe(
        'The method by which the fraud challenge was delivered to the cardholder.'
      ),
    /** The status of the fraud challenge. */
    status: z
      .enum(['expired', 'pending', 'rejected', 'undeliverable', 'verified'])
      .describe('The status of the fraud challenge.'),
    /** If the challenge is not deliverable, the reason why. */
    undeliverable_reason: z
      .enum(['no_phone_number', 'unsupported_phone_number'])
      .nullable()
      .describe('If the challenge is not deliverable, the reason why.')
      .optional()
  })
  export type IssuingAuthorizationFraudChallenge = z.infer<
    typeof IssuingAuthorizationFraudChallengeSchema
  >

  export const IssuingAuthorizationFuelDataSchema = z.object({
    /** [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
    industry_product_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '[Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.'
      )
      .optional(),
    /** The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places. */
    quantity_decimal: z
      .string()
      .nullable()
      .describe(
        'The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.'
      )
      .optional(),
    /** The type of fuel that was purchased. */
    type: z
      .enum([
        'diesel',
        'other',
        'unleaded_plus',
        'unleaded_regular',
        'unleaded_super'
      ])
      .nullable()
      .describe('The type of fuel that was purchased.')
      .optional(),
    /** The units for `quantity_decimal`. */
    unit: z
      .enum([
        'charging_minute',
        'imperial_gallon',
        'kilogram',
        'kilowatt_hour',
        'liter',
        'other',
        'pound',
        'us_gallon'
      ])
      .nullable()
      .describe('The units for `quantity_decimal`.')
      .optional(),
    /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
    unit_cost_decimal: z
      .string()
      .nullable()
      .describe(
        'The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.'
      )
      .optional()
  })
  export type IssuingAuthorizationFuelData = z.infer<
    typeof IssuingAuthorizationFuelDataSchema
  >

  export const IssuingAuthorizationMerchantDataSchema = z.object({
    /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
    category: z
      .string()
      .max(5000)
      .describe(
        "A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values."
      ),
    /** The merchant category code for the seller’s business */
    category_code: z
      .string()
      .max(5000)
      .describe('The merchant category code for the seller’s business'),
    /** City where the seller is located */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('City where the seller is located')
      .optional(),
    /** Country where the seller is located */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe('Country where the seller is located')
      .optional(),
    /** Name of the seller */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the seller')
      .optional(),
    /** Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant. */
    network_id: z
      .string()
      .max(5000)
      .describe(
        'Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.'
      ),
    /** Postal code where the seller is located */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Postal code where the seller is located')
      .optional(),
    /** State where the seller is located */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe('State where the seller is located')
      .optional(),
    /** The seller's tax identification number. Currently populated for French merchants only. */
    tax_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The seller's tax identification number. Currently populated for French merchants only."
      )
      .optional(),
    /** An ID assigned by the seller to the location of the sale. */
    terminal_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('An ID assigned by the seller to the location of the sale.')
      .optional(),
    /** URL provided by the merchant on a 3DS request */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe('URL provided by the merchant on a 3DS request')
      .optional()
  })
  export type IssuingAuthorizationMerchantData = z.infer<
    typeof IssuingAuthorizationMerchantDataSchema
  >

  export const IssuingAuthorizationNetworkDataSchema = z.object({
    /** Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`. */
    acquiring_institution_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`.'
      )
      .optional(),
    /** The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements. */
    system_trace_audit_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements.'
      )
      .optional(),
    /** Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.'
      )
      .optional()
  })
  export type IssuingAuthorizationNetworkData = z.infer<
    typeof IssuingAuthorizationNetworkDataSchema
  >

  export const IssuingNetworkTokenDeviceSchema = z.object({
    /** An obfuscated ID derived from the device ID. */
    device_fingerprint: z
      .string()
      .max(5000)
      .describe('An obfuscated ID derived from the device ID.')
      .optional(),
    /** The IP address of the device at provisioning time. */
    ip_address: z
      .string()
      .max(5000)
      .describe('The IP address of the device at provisioning time.')
      .optional(),
    /** The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal. */
    location: z
      .string()
      .max(5000)
      .describe(
        'The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal.'
      )
      .optional(),
    /** The name of the device used for tokenization. */
    name: z
      .string()
      .max(5000)
      .describe('The name of the device used for tokenization.')
      .optional(),
    /** The phone number of the device used for tokenization. */
    phone_number: z
      .string()
      .max(5000)
      .describe('The phone number of the device used for tokenization.')
      .optional(),
    /** The type of device used for tokenization. */
    type: z
      .enum(['other', 'phone', 'watch'])
      .describe('The type of device used for tokenization.')
      .optional()
  })
  export type IssuingNetworkTokenDevice = z.infer<
    typeof IssuingNetworkTokenDeviceSchema
  >

  export const IssuingNetworkTokenMastercardSchema = z.object({
    /** A unique reference ID from MasterCard to represent the card account number. */
    card_reference_id: z
      .string()
      .max(5000)
      .describe(
        'A unique reference ID from MasterCard to represent the card account number.'
      )
      .optional(),
    /** The network-unique identifier for the token. */
    token_reference_id: z
      .string()
      .max(5000)
      .describe('The network-unique identifier for the token.'),
    /** The ID of the entity requesting tokenization, specific to MasterCard. */
    token_requestor_id: z
      .string()
      .max(5000)
      .describe(
        'The ID of the entity requesting tokenization, specific to MasterCard.'
      ),
    /** The name of the entity requesting tokenization, if known. This is directly provided from MasterCard. */
    token_requestor_name: z
      .string()
      .max(5000)
      .describe(
        'The name of the entity requesting tokenization, if known. This is directly provided from MasterCard.'
      )
      .optional()
  })
  export type IssuingNetworkTokenMastercard = z.infer<
    typeof IssuingNetworkTokenMastercardSchema
  >

  export const IssuingNetworkTokenVisaSchema = z.object({
    /** A unique reference ID from Visa to represent the card account number. */
    card_reference_id: z
      .string()
      .max(5000)
      .describe(
        'A unique reference ID from Visa to represent the card account number.'
      ),
    /** The network-unique identifier for the token. */
    token_reference_id: z
      .string()
      .max(5000)
      .describe('The network-unique identifier for the token.'),
    /** The ID of the entity requesting tokenization, specific to Visa. */
    token_requestor_id: z
      .string()
      .max(5000)
      .describe(
        'The ID of the entity requesting tokenization, specific to Visa.'
      ),
    /** Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa. */
    token_risk_score: z
      .string()
      .max(5000)
      .describe(
        'Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa.'
      )
      .optional()
  })
  export type IssuingNetworkTokenVisa = z.infer<
    typeof IssuingNetworkTokenVisaSchema
  >

  export const IssuingNetworkTokenAddressSchema = z.object({
    /** The street address of the cardholder tokenizing the card. */
    line1: z
      .string()
      .max(5000)
      .describe('The street address of the cardholder tokenizing the card.'),
    /** The postal code of the cardholder tokenizing the card. */
    postal_code: z
      .string()
      .max(5000)
      .describe('The postal code of the cardholder tokenizing the card.')
  })
  export type IssuingNetworkTokenAddress = z.infer<
    typeof IssuingNetworkTokenAddressSchema
  >

  export const IssuingTransactionAmountDetailsSchema = z.object({
    /** The fee charged by the ATM for the cash withdrawal. */
    atm_fee: z
      .number()
      .int()
      .nullable()
      .describe('The fee charged by the ATM for the cash withdrawal.')
      .optional(),
    /** The amount of cash requested by the cardholder. */
    cashback_amount: z
      .number()
      .int()
      .nullable()
      .describe('The amount of cash requested by the cardholder.')
      .optional()
  })
  export type IssuingTransactionAmountDetails = z.infer<
    typeof IssuingTransactionAmountDetailsSchema
  >

  export const IssuingDisputeTreasurySchema = z.object({
    /** The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute */
    debit_reversal: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute'
      )
      .optional(),
    /** The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed. */
    received_debit: z
      .string()
      .max(5000)
      .describe(
        'The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed.'
      )
  })
  export type IssuingDisputeTreasury = z.infer<
    typeof IssuingDisputeTreasurySchema
  >

  export const IssuingTransactionNetworkDataSchema = z.object({
    /** A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
    authorization_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.'
      )
      .optional(),
    /** The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network. */
    processing_date: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network.'
      )
      .optional(),
    /** Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.'
      )
      .optional()
  })
  export type IssuingTransactionNetworkData = z.infer<
    typeof IssuingTransactionNetworkDataSchema
  >

  export const IssuingTransactionFleetCardholderPromptDataSchema = z.object({
    /** Driver ID. */
    driver_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Driver ID.')
      .optional(),
    /** Odometer reading. */
    odometer: z
      .number()
      .int()
      .nullable()
      .describe('Odometer reading.')
      .optional(),
    /** An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
    unspecified_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.'
      )
      .optional(),
    /** User ID. */
    user_id: z.string().max(5000).nullable().describe('User ID.').optional(),
    /** Vehicle number. */
    vehicle_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Vehicle number.')
      .optional()
  })
  export type IssuingTransactionFleetCardholderPromptData = z.infer<
    typeof IssuingTransactionFleetCardholderPromptDataSchema
  >

  export const IssuingTransactionFleetFuelPriceDataSchema = z.object({
    /** Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes. */
    gross_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes.'
      )
      .optional()
  })
  export type IssuingTransactionFleetFuelPriceData = z.infer<
    typeof IssuingTransactionFleetFuelPriceDataSchema
  >

  export const IssuingTransactionFleetNonFuelPriceDataSchema = z.object({
    /** Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes. */
    gross_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.'
      )
      .optional()
  })
  export type IssuingTransactionFleetNonFuelPriceData = z.infer<
    typeof IssuingTransactionFleetNonFuelPriceDataSchema
  >

  export const IssuingTransactionFleetTaxDataSchema = z.object({
    /** Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax. */
    local_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax.'
      )
      .optional(),
    /** Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax. */
    national_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax.'
      )
      .optional()
  })
  export type IssuingTransactionFleetTaxData = z.infer<
    typeof IssuingTransactionFleetTaxDataSchema
  >

  export const IssuingTransactionFlightDataLegSchema = z.object({
    /** The three-letter IATA airport code of the flight's destination. */
    arrival_airport_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The three-letter IATA airport code of the flight's destination."
      )
      .optional(),
    /** The airline carrier code. */
    carrier: z
      .string()
      .max(5000)
      .nullable()
      .describe('The airline carrier code.')
      .optional(),
    /** The three-letter IATA airport code that the flight departed from. */
    departure_airport_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The three-letter IATA airport code that the flight departed from.'
      )
      .optional(),
    /** The flight number. */
    flight_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('The flight number.')
      .optional(),
    /** The flight's service class. */
    service_class: z
      .string()
      .max(5000)
      .nullable()
      .describe("The flight's service class.")
      .optional(),
    /** Whether a stopover is allowed on this flight. */
    stopover_allowed: z
      .boolean()
      .nullable()
      .describe('Whether a stopover is allowed on this flight.')
      .optional()
  })
  export type IssuingTransactionFlightDataLeg = z.infer<
    typeof IssuingTransactionFlightDataLegSchema
  >

  export const IssuingTransactionFuelDataSchema = z.object({
    /** [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
    industry_product_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '[Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.'
      )
      .optional(),
    /** The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places. */
    quantity_decimal: z
      .string()
      .nullable()
      .describe(
        'The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.'
      )
      .optional(),
    /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.'
      ),
    /** The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`. */
    unit: z
      .string()
      .max(5000)
      .describe(
        'The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`.'
      ),
    /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
    unit_cost_decimal: z
      .string()
      .describe(
        'The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.'
      )
  })
  export type IssuingTransactionFuelData = z.infer<
    typeof IssuingTransactionFuelDataSchema
  >

  export const IssuingTransactionLodgingDataSchema = z.object({
    /** The time of checking into the lodging. */
    check_in_at: z
      .number()
      .int()
      .nullable()
      .describe('The time of checking into the lodging.')
      .optional(),
    /** The number of nights stayed at the lodging. */
    nights: z
      .number()
      .int()
      .nullable()
      .describe('The number of nights stayed at the lodging.')
      .optional()
  })
  export type IssuingTransactionLodgingData = z.infer<
    typeof IssuingTransactionLodgingDataSchema
  >

  export const IssuingTransactionReceiptDataSchema = z.object({
    /** The description of the item. The maximum length of this field is 26 characters. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The description of the item. The maximum length of this field is 26 characters.'
      )
      .optional(),
    /** The quantity of the item. */
    quantity: z
      .number()
      .nullable()
      .describe('The quantity of the item.')
      .optional(),
    /** The total for this line item in cents. */
    total: z
      .number()
      .int()
      .nullable()
      .describe('The total for this line item in cents.')
      .optional(),
    /** The unit cost of the item in cents. */
    unit_cost: z
      .number()
      .int()
      .nullable()
      .describe('The unit cost of the item in cents.')
      .optional()
  })
  export type IssuingTransactionReceiptData = z.infer<
    typeof IssuingTransactionReceiptDataSchema
  >

  export const IssuingTransactionTreasurySchema = z.object({
    /** The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund */
    received_credit: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund'
      )
      .optional(),
    /** The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture */
    received_debit: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture'
      )
      .optional()
  })
  export type IssuingTransactionTreasury = z.infer<
    typeof IssuingTransactionTreasurySchema
  >

  export const IssuingAuthorizationTreasurySchema = z.object({
    /** The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization */
    received_credits: z
      .array(z.string().max(5000))
      .describe(
        'The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization'
      ),
    /** The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization */
    received_debits: z
      .array(z.string().max(5000))
      .describe(
        'The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization'
      ),
    /** The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization */
    transaction: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization'
      )
      .optional()
  })
  export type IssuingAuthorizationTreasury = z.infer<
    typeof IssuingAuthorizationTreasurySchema
  >

  export const IssuingAuthorizationAuthenticationExemptionSchema = z.object({
    /** The entity that requested the exemption, either the acquiring merchant or the Issuing user. */
    claimed_by: z
      .enum(['acquirer', 'issuer'])
      .describe(
        'The entity that requested the exemption, either the acquiring merchant or the Issuing user.'
      ),
    /** The specific exemption claimed for this authorization. */
    type: z
      .enum(['low_value_transaction', 'transaction_risk_analysis', 'unknown'])
      .describe('The specific exemption claimed for this authorization.')
  })
  export type IssuingAuthorizationAuthenticationExemption = z.infer<
    typeof IssuingAuthorizationAuthenticationExemptionSchema
  >

  export const IssuingAuthorizationThreeDSecureSchema = z.object({
    /** The outcome of the 3D Secure authentication request. */
    result: z
      .enum(['attempt_acknowledged', 'authenticated', 'failed', 'required'])
      .describe('The outcome of the 3D Secure authentication request.')
  })
  export type IssuingAuthorizationThreeDSecure = z.infer<
    typeof IssuingAuthorizationThreeDSecureSchema
  >

  export const DeletedBankAccountSchema = z.object({
    /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    currency: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.'
      )
      .optional(),
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('bank_account')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedBankAccount = z.infer<typeof DeletedBankAccountSchema>

  export const DeletedCardSchema = z.object({
    /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    currency: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.'
      )
      .optional(),
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('card')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedCard = z.infer<typeof DeletedCardSchema>

  export const PayoutsTraceIdSchema = z.object({
    /** Possible values are `pending`, `supported`, and `unsupported`. When `payout.status` is `pending` or `in_transit`, this will be `pending`. When the payout transitions to `paid`, `failed`, or `canceled`, this status will become `supported` or `unsupported` shortly after in most cases. In some cases, this may appear as `pending` for up to 10 days after `arrival_date` until transitioning to `supported` or `unsupported`. */
    status: z
      .string()
      .max(5000)
      .describe(
        'Possible values are `pending`, `supported`, and `unsupported`. When `payout.status` is `pending` or `in_transit`, this will be `pending`. When the payout transitions to `paid`, `failed`, or `canceled`, this status will become `supported` or `unsupported` shortly after in most cases. In some cases, this may appear as `pending` for up to 10 days after `arrival_date` until transitioning to `supported` or `unsupported`.'
      ),
    /** The trace ID value if `trace_id.status` is `supported`, otherwise `nil`. */
    value: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The trace ID value if `trace_id.status` is `supported`, otherwise `nil`.'
      )
      .optional()
  })
  export type PayoutsTraceId = z.infer<typeof PayoutsTraceIdSchema>

  export const ReserveTransactionSchema = z.object({
    amount: z.number().int(),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An arbitrary string attached to the object. Often useful for displaying to users.'
      )
      .optional(),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('reserve_transaction')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type ReserveTransaction = z.infer<typeof ReserveTransactionSchema>

  export const TaxDeductedAtSourceSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('tax_deducted_at_source')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
    period_end: z
      .number()
      .int()
      .describe(
        'The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.'
      ),
    /** The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
    period_start: z
      .number()
      .int()
      .describe(
        'The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.'
      ),
    /** The TAN that was supplied to Stripe when TDS was assessed */
    tax_deduction_account_number: z
      .string()
      .max(5000)
      .describe('The TAN that was supplied to Stripe when TDS was assessed')
  })
  export type TaxDeductedAtSource = z.infer<typeof TaxDeductedAtSourceSchema>

  export const PlatformEarningFeeSourceSchema = z.object({
    /** Charge ID that created this application fee. */
    charge: z
      .string()
      .max(5000)
      .describe('Charge ID that created this application fee.')
      .optional(),
    /** Payout ID that created this application fee. */
    payout: z
      .string()
      .max(5000)
      .describe('Payout ID that created this application fee.')
      .optional(),
    /** Type of object that created the application fee, either `charge` or `payout`. */
    type: z
      .enum(['charge', 'payout'])
      .describe(
        'Type of object that created the application fee, either `charge` or `payout`.'
      )
  })
  export type PlatformEarningFeeSource = z.infer<
    typeof PlatformEarningFeeSourceSchema
  >

  export const ChargeFraudDetailsSchema = z.object({
    /** Assessments from Stripe. If set, the value is `fraudulent`. */
    stripe_report: z
      .string()
      .max(5000)
      .describe('Assessments from Stripe. If set, the value is `fraudulent`.')
      .optional(),
    /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
    user_report: z
      .string()
      .max(5000)
      .describe(
        'Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.'
      )
      .optional()
  })
  export type ChargeFraudDetails = z.infer<typeof ChargeFraudDetailsSchema>

  export const RuleSchema = z.object({
    /** The action taken on the payment. */
    action: z.string().max(5000).describe('The action taken on the payment.'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** The predicate to evaluate the payment against. */
    predicate: z
      .string()
      .max(5000)
      .describe('The predicate to evaluate the payment against.')
  })
  export type Rule = z.infer<typeof RuleSchema>

  export const PaymentMethodDetailsAchCreditTransferSchema = z.object({
    /** Account number to transfer funds to. */
    account_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Account number to transfer funds to.')
      .optional(),
    /** Name of the bank associated with the routing number. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the routing number.')
      .optional(),
    /** Routing transit number for the bank account to transfer funds to. */
    routing_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Routing transit number for the bank account to transfer funds to.'
      )
      .optional(),
    /** SWIFT code of the bank associated with the routing number. */
    swift_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('SWIFT code of the bank associated with the routing number.')
      .optional()
  })
  export type PaymentMethodDetailsAchCreditTransfer = z.infer<
    typeof PaymentMethodDetailsAchCreditTransferSchema
  >

  export const PaymentMethodDetailsAchDebitSchema = z.object({
    /** Type of entity that holds the account. This can be either `individual` or `company`. */
    account_holder_type: z
      .enum(['company', 'individual'])
      .nullable()
      .describe(
        'Type of entity that holds the account. This can be either `individual` or `company`.'
      )
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Two-letter ISO code representing the country the bank account is located in. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country the bank account is located in.'
      )
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** Routing transit number of the bank account. */
    routing_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Routing transit number of the bank account.')
      .optional()
  })
  export type PaymentMethodDetailsAchDebit = z.infer<
    typeof PaymentMethodDetailsAchDebitSchema
  >

  export const PaymentMethodDetailsAcssDebitSchema = z.object({
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Institution number of the bank account */
    institution_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Institution number of the bank account')
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** ID of the mandate used to make this payment. */
    mandate: z
      .string()
      .max(5000)
      .describe('ID of the mandate used to make this payment.')
      .optional(),
    /** Transit number of the bank account. */
    transit_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Transit number of the bank account.')
      .optional()
  })
  export type PaymentMethodDetailsAcssDebit = z.infer<
    typeof PaymentMethodDetailsAcssDebitSchema
  >

  export const PaymentMethodDetailsAffirmSchema = z.object({
    /** The Affirm transaction ID associated with this payment. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('The Affirm transaction ID associated with this payment.')
      .optional()
  })
  export type PaymentMethodDetailsAffirm = z.infer<
    typeof PaymentMethodDetailsAffirmSchema
  >

  export const PaymentMethodDetailsAfterpayClearpaySchema = z.object({
    /** The Afterpay order ID associated with this payment intent. */
    order_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('The Afterpay order ID associated with this payment intent.')
      .optional(),
    /** Order identifier shown to the merchant in Afterpay’s online portal. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Order identifier shown to the merchant in Afterpay’s online portal.'
      )
      .optional()
  })
  export type PaymentMethodDetailsAfterpayClearpay = z.infer<
    typeof PaymentMethodDetailsAfterpayClearpaySchema
  >

  export const PaymentFlowsPrivatePaymentMethodsAlipayDetailsSchema = z.object({
    /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
    buyer_id: z
      .string()
      .max(5000)
      .describe(
        'Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.'
      )
      .optional(),
    /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.'
      )
      .optional(),
    /** Transaction ID of this particular Alipay transaction. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Transaction ID of this particular Alipay transaction.')
      .optional()
  })
  export type PaymentFlowsPrivatePaymentMethodsAlipayDetails = z.infer<
    typeof PaymentFlowsPrivatePaymentMethodsAlipayDetailsSchema
  >

  export const PaymentMethodDetailsAlmaSchema = z.object({})
  export type PaymentMethodDetailsAlma = z.infer<
    typeof PaymentMethodDetailsAlmaSchema
  >

  export const PaymentMethodDetailsPassthroughCardSchema = z.object({
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .nullable()
      .describe("Two-digit number representing the card's expiration month.")
      .optional(),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .nullable()
      .describe("Four-digit number representing the card's expiration year.")
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional()
  })
  export type PaymentMethodDetailsPassthroughCard = z.infer<
    typeof PaymentMethodDetailsPassthroughCardSchema
  >

  export const PaymentMethodDetailsAuBecsDebitSchema = z.object({
    /** Bank-State-Branch number of the bank account. */
    bsb_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank-State-Branch number of the bank account.')
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** ID of the mandate used to make this payment. */
    mandate: z
      .string()
      .max(5000)
      .describe('ID of the mandate used to make this payment.')
      .optional()
  })
  export type PaymentMethodDetailsAuBecsDebit = z.infer<
    typeof PaymentMethodDetailsAuBecsDebitSchema
  >

  export const PaymentMethodDetailsBacsDebitSchema = z.object({
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** ID of the mandate used to make this payment. */
    mandate: z
      .string()
      .max(5000)
      .nullable()
      .describe('ID of the mandate used to make this payment.')
      .optional(),
    /** Sort code of the bank account. (e.g., `10-20-30`) */
    sort_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Sort code of the bank account. (e.g., `10-20-30`)')
      .optional()
  })
  export type PaymentMethodDetailsBacsDebit = z.infer<
    typeof PaymentMethodDetailsBacsDebitSchema
  >

  export const PaymentMethodDetailsBlikSchema = z.object({
    /** A unique and immutable identifier assigned by BLIK to every buyer. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique and immutable identifier assigned by BLIK to every buyer.'
      )
      .optional()
  })
  export type PaymentMethodDetailsBlik = z.infer<
    typeof PaymentMethodDetailsBlikSchema
  >

  export const PaymentMethodDetailsBoletoSchema = z.object({
    /** The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
    tax_id: z
      .string()
      .max(5000)
      .describe(
        'The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)'
      )
  })
  export type PaymentMethodDetailsBoleto = z.infer<
    typeof PaymentMethodDetailsBoletoSchema
  >

  export const PaymentMethodDetailsCardChecksSchema = z.object({
    /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_line1_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    address_postal_code_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional(),
    /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    cvc_check: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.'
      )
      .optional()
  })
  export type PaymentMethodDetailsCardChecks = z.infer<
    typeof PaymentMethodDetailsCardChecksSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorizationSchema =
    z.object({
      /** Indicates whether or not the capture window is extended beyond the standard authorization. */
      status: z
        .enum(['disabled', 'enabled'])
        .describe(
          'Indicates whether or not the capture window is extended beyond the standard authorization.'
        )
    })
  export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorizationSchema
    >

  export const PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorizationSchema =
    z.object({
      /** Indicates whether or not the incremental authorization feature is supported. */
      status: z
        .enum(['available', 'unavailable'])
        .describe(
          'Indicates whether or not the incremental authorization feature is supported.'
        )
    })
  export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorizationSchema
    >

  export const PaymentMethodDetailsCardInstallmentsPlanSchema = z.object({
    /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
    count: z
      .number()
      .int()
      .nullable()
      .describe(
        'For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.'
      )
      .optional(),
    /**
     * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
     * One of `month`.
     */
    interval: z
      .literal('month')
      .nullable()
      .describe(
        'For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.\nOne of `month`.'
      )
      .optional(),
    /** Type of installment plan, one of `fixed_count`. */
    type: z
      .literal('fixed_count')
      .describe('Type of installment plan, one of `fixed_count`.')
  })
  export type PaymentMethodDetailsCardInstallmentsPlan = z.infer<
    typeof PaymentMethodDetailsCardInstallmentsPlanSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticaptureSchema =
    z.object({
      /** Indicates whether or not multiple captures are supported. */
      status: z
        .enum(['available', 'unavailable'])
        .describe('Indicates whether or not multiple captures are supported.')
    })
  export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticaptureSchema
    >

  export const PaymentMethodDetailsCardNetworkTokenSchema = z.object({
    /** Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction. */
    used: z
      .boolean()
      .describe(
        'Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction.'
      )
  })
  export type PaymentMethodDetailsCardNetworkToken = z.infer<
    typeof PaymentMethodDetailsCardNetworkTokenSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercaptureSchema =
    z.object({
      /** The maximum amount that can be captured. */
      maximum_amount_capturable: z
        .number()
        .int()
        .describe('The maximum amount that can be captured.'),
      /** Indicates whether or not the authorized amount can be over-captured. */
      status: z
        .enum(['available', 'unavailable'])
        .describe(
          'Indicates whether or not the authorized amount can be over-captured.'
        )
    })
  export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercaptureSchema
    >

  export const ThreeDSecureDetailsChargeSchema = z.object({
    /**
     * For authenticated transactions: how the customer was authenticated by
     * the issuing bank.
     */
    authentication_flow: z
      .enum(['challenge', 'frictionless'])
      .nullable()
      .describe(
        'For authenticated transactions: how the customer was authenticated by\nthe issuing bank.'
      )
      .optional(),
    /**
     * The Electronic Commerce Indicator (ECI). A protocol-level field
     * indicating what degree of authentication was performed.
     */
    electronic_commerce_indicator: z
      .enum(['01', '02', '05', '06', '07'])
      .nullable()
      .describe(
        'The Electronic Commerce Indicator (ECI). A protocol-level field\nindicating what degree of authentication was performed.'
      )
      .optional(),
    /** The exemption requested via 3DS and accepted by the issuer at authentication time. */
    exemption_indicator: z
      .enum(['low_risk', 'none'])
      .nullable()
      .describe(
        'The exemption requested via 3DS and accepted by the issuer at authentication time.'
      )
      .optional(),
    /**
     * Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
     * the outcome of Stripe's internal risk assessment.
     */
    exemption_indicator_applied: z
      .boolean()
      .describe(
        "Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on\nthe outcome of Stripe's internal risk assessment."
      )
      .optional(),
    /** Indicates the outcome of 3D Secure authentication. */
    result: z
      .enum([
        'attempt_acknowledged',
        'authenticated',
        'exempted',
        'failed',
        'not_supported',
        'processing_error'
      ])
      .nullable()
      .describe('Indicates the outcome of 3D Secure authentication.')
      .optional(),
    /**
     * Additional information about why 3D Secure succeeded or failed based
     * on the `result`.
     */
    result_reason: z
      .enum([
        'abandoned',
        'bypassed',
        'canceled',
        'card_not_enrolled',
        'network_not_supported',
        'protocol_error',
        'rejected'
      ])
      .nullable()
      .describe(
        'Additional information about why 3D Secure succeeded or failed based\non the `result`.'
      )
      .optional(),
    /**
     * The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
     * (dsTransId) for this payment.
     */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID\n(dsTransId) for this payment.'
      )
      .optional(),
    /** The version of 3D Secure that was used. */
    version: z
      .enum(['1.0.2', '2.1.0', '2.2.0'])
      .nullable()
      .describe('The version of 3D Secure that was used.')
      .optional()
  })
  export type ThreeDSecureDetailsCharge = z.infer<
    typeof ThreeDSecureDetailsChargeSchema
  >

  export const PaymentMethodDetailsCardWalletAmexExpressCheckoutSchema =
    z.object({})
  export type PaymentMethodDetailsCardWalletAmexExpressCheckout = z.infer<
    typeof PaymentMethodDetailsCardWalletAmexExpressCheckoutSchema
  >

  export const PaymentMethodDetailsCardWalletLinkSchema = z.object({})
  export type PaymentMethodDetailsCardWalletLink = z.infer<
    typeof PaymentMethodDetailsCardWalletLinkSchema
  >

  export const PaymentMethodDetailsCardWalletSamsungPaySchema = z.object({})
  export type PaymentMethodDetailsCardWalletSamsungPay = z.infer<
    typeof PaymentMethodDetailsCardWalletSamsungPaySchema
  >

  export const PaymentMethodDetailsCashappSchema = z.object({
    /** A unique and immutable identifier assigned by Cash App to every buyer. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique and immutable identifier assigned by Cash App to every buyer.'
      )
      .optional(),
    /** A public identifier for buyers using Cash App. */
    cashtag: z
      .string()
      .max(5000)
      .nullable()
      .describe('A public identifier for buyers using Cash App.')
      .optional()
  })
  export type PaymentMethodDetailsCashapp = z.infer<
    typeof PaymentMethodDetailsCashappSchema
  >

  export const PaymentMethodDetailsCustomerBalanceSchema = z.object({})
  export type PaymentMethodDetailsCustomerBalance = z.infer<
    typeof PaymentMethodDetailsCustomerBalanceSchema
  >

  export const PaymentMethodDetailsEpsSchema = z.object({
    /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
    bank: z
      .enum([
        'arzte_und_apotheker_bank',
        'austrian_anadi_bank_ag',
        'bank_austria',
        'bankhaus_carl_spangler',
        'bankhaus_schelhammer_und_schattera_ag',
        'bawag_psk_ag',
        'bks_bank_ag',
        'brull_kallmus_bank_ag',
        'btv_vier_lander_bank',
        'capital_bank_grawe_gruppe_ag',
        'deutsche_bank_ag',
        'dolomitenbank',
        'easybank_ag',
        'erste_bank_und_sparkassen',
        'hypo_alpeadriabank_international_ag',
        'hypo_bank_burgenland_aktiengesellschaft',
        'hypo_noe_lb_fur_niederosterreich_u_wien',
        'hypo_oberosterreich_salzburg_steiermark',
        'hypo_tirol_bank_ag',
        'hypo_vorarlberg_bank_ag',
        'marchfelder_bank',
        'oberbank_ag',
        'raiffeisen_bankengruppe_osterreich',
        'schoellerbank_ag',
        'sparda_bank_wien',
        'volksbank_gruppe',
        'volkskreditbank_ag',
        'vr_bank_braunau'
      ])
      .nullable()
      .describe(
        "The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by EPS directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     * EPS rarely provides this information so the attribute is usually empty.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by EPS directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nEPS rarely provides this information so the attribute is usually empty."
      )
      .optional()
  })
  export type PaymentMethodDetailsEps = z.infer<
    typeof PaymentMethodDetailsEpsSchema
  >

  export const PaymentMethodDetailsFpxSchema = z.object({
    /** The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`. */
    bank: z
      .enum([
        'affin_bank',
        'agrobank',
        'alliance_bank',
        'ambank',
        'bank_islam',
        'bank_muamalat',
        'bank_of_china',
        'bank_rakyat',
        'bsn',
        'cimb',
        'deutsche_bank',
        'hong_leong_bank',
        'hsbc',
        'kfh',
        'maybank2e',
        'maybank2u',
        'ocbc',
        'pb_enterprise',
        'public_bank',
        'rhb',
        'standard_chartered',
        'uob'
      ])
      .describe(
        "The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`."
      ),
    /** Unique transaction id generated by FPX for every request from the merchant */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Unique transaction id generated by FPX for every request from the merchant'
      )
      .optional()
  })
  export type PaymentMethodDetailsFpx = z.infer<
    typeof PaymentMethodDetailsFpxSchema
  >

  export const PaymentMethodDetailsGiropaySchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Bank Identifier Code of the bank associated with the bank account. */
    bic: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Bank Identifier Code of the bank associated with the bank account.'
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by Giropay directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     * Giropay rarely provides this information so the attribute is usually empty.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by Giropay directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nGiropay rarely provides this information so the attribute is usually empty."
      )
      .optional()
  })
  export type PaymentMethodDetailsGiropay = z.infer<
    typeof PaymentMethodDetailsGiropaySchema
  >

  export const PaymentMethodDetailsGrabpaySchema = z.object({
    /** Unique transaction id generated by GrabPay */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Unique transaction id generated by GrabPay')
      .optional()
  })
  export type PaymentMethodDetailsGrabpay = z.infer<
    typeof PaymentMethodDetailsGrabpaySchema
  >

  export const PaymentMethodDetailsInteracPresentReceiptSchema = z.object({
    /** The type of account being debited or credited */
    account_type: z
      .enum(['checking', 'savings', 'unknown'])
      .describe('The type of account being debited or credited')
      .optional(),
    /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
    application_cryptogram: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'EMV tag 9F26, cryptogram generated by the integrated circuit chip.'
      )
      .optional(),
    /** Mnenomic of the Application Identifier. */
    application_preferred_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Mnenomic of the Application Identifier.')
      .optional(),
    /** Identifier for this transaction. */
    authorization_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Identifier for this transaction.')
      .optional(),
    /** EMV tag 8A. A code returned by the card issuer. */
    authorization_response_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('EMV tag 8A. A code returned by the card issuer.')
      .optional(),
    /** Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`. */
    cardholder_verification_method: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.'
      )
      .optional(),
    /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
    dedicated_file_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.'
      )
      .optional(),
    /** The outcome of a series of EMV functions performed by the card reader. */
    terminal_verification_results: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The outcome of a series of EMV functions performed by the card reader.'
      )
      .optional(),
    /** An indication of various EMV functions performed during the transaction. */
    transaction_status_information: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An indication of various EMV functions performed during the transaction.'
      )
      .optional()
  })
  export type PaymentMethodDetailsInteracPresentReceipt = z.infer<
    typeof PaymentMethodDetailsInteracPresentReceiptSchema
  >

  export const PaymentMethodDetailsKakaoPaySchema = z.object({
    /** A unique identifier for the buyer as determined by the local payment processor. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique identifier for the buyer as determined by the local payment processor.'
      )
      .optional()
  })
  export type PaymentMethodDetailsKakaoPay = z.infer<
    typeof PaymentMethodDetailsKakaoPaySchema
  >

  export const KlarnaAddressSchema = z.object({
    /** The payer address country */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe('The payer address country')
      .optional()
  })
  export type KlarnaAddress = z.infer<typeof KlarnaAddressSchema>

  export const PaymentMethodDetailsKonbiniStoreSchema = z.object({
    /** The name of the convenience store chain where the payment was completed. */
    chain: z
      .enum(['familymart', 'lawson', 'ministop', 'seicomart'])
      .nullable()
      .describe(
        'The name of the convenience store chain where the payment was completed.'
      )
      .optional()
  })
  export type PaymentMethodDetailsKonbiniStore = z.infer<
    typeof PaymentMethodDetailsKonbiniStoreSchema
  >

  export const PaymentMethodDetailsKrCardSchema = z.object({
    /** The local credit or debit card brand. */
    brand: z
      .enum([
        'bc',
        'citi',
        'hana',
        'hyundai',
        'jeju',
        'jeonbuk',
        'kakaobank',
        'kbank',
        'kdbbank',
        'kookmin',
        'kwangju',
        'lotte',
        'mg',
        'nh',
        'post',
        'samsung',
        'savingsbank',
        'shinhan',
        'shinhyup',
        'suhyup',
        'tossbank',
        'woori'
      ])
      .nullable()
      .describe('The local credit or debit card brand.')
      .optional(),
    /** A unique identifier for the buyer as determined by the local payment processor. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique identifier for the buyer as determined by the local payment processor.'
      )
      .optional(),
    /** The last four digits of the card. This may not be present for American Express cards. */
    last4: z
      .string()
      .max(4)
      .nullable()
      .describe(
        'The last four digits of the card. This may not be present for American Express cards.'
      )
      .optional()
  })
  export type PaymentMethodDetailsKrCard = z.infer<
    typeof PaymentMethodDetailsKrCardSchema
  >

  export const PaymentMethodDetailsLinkSchema = z.object({
    /**
     * Two-letter ISO code representing the funding source country beneath the Link payment.
     * You could use this attribute to get a sense of international fees.
     */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the funding source country beneath the Link payment.\nYou could use this attribute to get a sense of international fees.'
      )
      .optional()
  })
  export type PaymentMethodDetailsLink = z.infer<
    typeof PaymentMethodDetailsLinkSchema
  >

  export const InternalCardSchema = z.object({
    /** Brand of the card used in the transaction */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe('Brand of the card used in the transaction')
      .optional(),
    /** Two-letter ISO code representing the country of the card */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe('Two-letter ISO code representing the country of the card')
      .optional(),
    /** Two digit number representing the card's expiration month */
    exp_month: z
      .number()
      .int()
      .nullable()
      .describe("Two digit number representing the card's expiration month")
      .optional(),
    /** Two digit number representing the card's expiration year */
    exp_year: z
      .number()
      .int()
      .nullable()
      .describe("Two digit number representing the card's expiration year")
      .optional(),
    /** The last 4 digits of the card */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last 4 digits of the card')
      .optional()
  })
  export type InternalCard = z.infer<typeof InternalCardSchema>

  export const PaymentMethodDetailsMultibancoSchema = z.object({
    /** Entity number associated with this Multibanco payment. */
    entity: z
      .string()
      .max(5000)
      .nullable()
      .describe('Entity number associated with this Multibanco payment.')
      .optional(),
    /** Reference number associated with this Multibanco payment. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('Reference number associated with this Multibanco payment.')
      .optional()
  })
  export type PaymentMethodDetailsMultibanco = z.infer<
    typeof PaymentMethodDetailsMultibancoSchema
  >

  export const PaymentMethodDetailsNaverPaySchema = z.object({
    /** A unique identifier for the buyer as determined by the local payment processor. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique identifier for the buyer as determined by the local payment processor.'
      )
      .optional()
  })
  export type PaymentMethodDetailsNaverPay = z.infer<
    typeof PaymentMethodDetailsNaverPaySchema
  >

  export const PaymentMethodDetailsOxxoSchema = z.object({
    /** OXXO reference number */
    number: z
      .string()
      .max(5000)
      .nullable()
      .describe('OXXO reference number')
      .optional()
  })
  export type PaymentMethodDetailsOxxo = z.infer<
    typeof PaymentMethodDetailsOxxoSchema
  >

  export const PaymentMethodDetailsP24Schema = z.object({
    /** The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
    bank: z
      .enum([
        'alior_bank',
        'bank_millennium',
        'bank_nowy_bfg_sa',
        'bank_pekao_sa',
        'banki_spbdzielcze',
        'blik',
        'bnp_paribas',
        'boz',
        'citi_handlowy',
        'credit_agricole',
        'envelobank',
        'etransfer_pocztowy24',
        'getin_bank',
        'ideabank',
        'ing',
        'inteligo',
        'mbank_mtransfer',
        'nest_przelew',
        'noble_pay',
        'pbac_z_ipko',
        'plus_bank',
        'santander_przelew24',
        'tmobile_usbugi_bankowe',
        'toyota_bank',
        'velobank',
        'volkswagen_bank'
      ])
      .nullable()
      .describe(
        "The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`."
      )
      .optional(),
    /** Unique reference for this Przelewy24 payment. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('Unique reference for this Przelewy24 payment.')
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by Przelewy24 directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     * Przelewy24 rarely provides this information so the attribute is usually empty.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by Przelewy24 directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.\nPrzelewy24 rarely provides this information so the attribute is usually empty."
      )
      .optional()
  })
  export type PaymentMethodDetailsP24 = z.infer<
    typeof PaymentMethodDetailsP24Schema
  >

  export const PaymentMethodDetailsPayByBankSchema = z.object({})
  export type PaymentMethodDetailsPayByBank = z.infer<
    typeof PaymentMethodDetailsPayByBankSchema
  >

  export const PaymentMethodDetailsPaycoSchema = z.object({
    /** A unique identifier for the buyer as determined by the local payment processor. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique identifier for the buyer as determined by the local payment processor.'
      )
      .optional()
  })
  export type PaymentMethodDetailsPayco = z.infer<
    typeof PaymentMethodDetailsPaycoSchema
  >

  export const PaymentMethodDetailsPaynowSchema = z.object({
    /** Reference number associated with this PayNow payment */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('Reference number associated with this PayNow payment')
      .optional()
  })
  export type PaymentMethodDetailsPaynow = z.infer<
    typeof PaymentMethodDetailsPaynowSchema
  >

  export const PaypalSellerProtectionSchema = z.object({
    /** An array of conditions that are covered for the transaction, if applicable. */
    dispute_categories: z
      .array(z.enum(['fraudulent', 'product_not_received']))
      .nullable()
      .describe(
        'An array of conditions that are covered for the transaction, if applicable.'
      )
      .optional(),
    /** Indicates whether the transaction is eligible for PayPal's seller protection. */
    status: z
      .enum(['eligible', 'not_eligible', 'partially_eligible'])
      .describe(
        "Indicates whether the transaction is eligible for PayPal's seller protection."
      )
  })
  export type PaypalSellerProtection = z.infer<
    typeof PaypalSellerProtectionSchema
  >

  export const PaymentMethodDetailsPixSchema = z.object({
    /** Unique transaction id generated by BCB */
    bank_transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Unique transaction id generated by BCB')
      .optional()
  })
  export type PaymentMethodDetailsPix = z.infer<
    typeof PaymentMethodDetailsPixSchema
  >

  export const PaymentMethodDetailsPromptpaySchema = z.object({
    /** Bill reference generated by PromptPay */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bill reference generated by PromptPay')
      .optional()
  })
  export type PaymentMethodDetailsPromptpay = z.infer<
    typeof PaymentMethodDetailsPromptpaySchema
  >

  export const PaymentMethodDetailsSamsungPaySchema = z.object({
    /** A unique identifier for the buyer as determined by the local payment processor. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique identifier for the buyer as determined by the local payment processor.'
      )
      .optional()
  })
  export type PaymentMethodDetailsSamsungPay = z.infer<
    typeof PaymentMethodDetailsSamsungPaySchema
  >

  export const PaymentMethodDetailsSepaDebitSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Branch code of bank associated with the bank account. */
    branch_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Branch code of bank associated with the bank account.')
      .optional(),
    /** Two-letter ISO code representing the country the bank account is located in. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country the bank account is located in.'
      )
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /** Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve). */
    mandate: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve).'
      )
      .optional()
  })
  export type PaymentMethodDetailsSepaDebit = z.infer<
    typeof PaymentMethodDetailsSepaDebitSchema
  >

  export const PaymentMethodDetailsStripeAccountSchema = z.object({})
  export type PaymentMethodDetailsStripeAccount = z.infer<
    typeof PaymentMethodDetailsStripeAccountSchema
  >

  export const PaymentMethodDetailsSwishSchema = z.object({
    /** Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer"
      )
      .optional(),
    /** Payer bank reference number for the payment */
    payment_reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('Payer bank reference number for the payment')
      .optional(),
    /** The last four digits of the Swish account phone number */
    verified_phone_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the Swish account phone number')
      .optional()
  })
  export type PaymentMethodDetailsSwish = z.infer<
    typeof PaymentMethodDetailsSwishSchema
  >

  export const PaymentMethodDetailsTwintSchema = z.object({})
  export type PaymentMethodDetailsTwint = z.infer<
    typeof PaymentMethodDetailsTwintSchema
  >

  export const PaymentMethodDetailsWechatSchema = z.object({})
  export type PaymentMethodDetailsWechat = z.infer<
    typeof PaymentMethodDetailsWechatSchema
  >

  export const PaymentMethodDetailsWechatPaySchema = z.object({
    /** Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.'
      )
      .optional(),
    /** Transaction ID of this particular WeChat Pay transaction. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Transaction ID of this particular WeChat Pay transaction.')
      .optional()
  })
  export type PaymentMethodDetailsWechatPay = z.infer<
    typeof PaymentMethodDetailsWechatPaySchema
  >

  export const PaymentMethodDetailsZipSchema = z.object({})
  export type PaymentMethodDetailsZip = z.infer<
    typeof PaymentMethodDetailsZipSchema
  >

  /** Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information. */
  export const RadarRadarOptionsSchema = z
    .object({
      /** A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
      session: z
        .string()
        .max(5000)
        .describe(
          'A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.'
        )
        .optional()
    })
    .describe(
      'Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.'
    )
  export type RadarRadarOptions = z.infer<typeof RadarRadarOptionsSchema>

  export const RadarReviewResourceLocationSchema = z.object({
    /** The city where the payment originated. */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('The city where the payment originated.')
      .optional(),
    /** Two-letter ISO code representing the country where the payment originated. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country where the payment originated.'
      )
      .optional(),
    /** The geographic latitude where the payment originated. */
    latitude: z
      .number()
      .nullable()
      .describe('The geographic latitude where the payment originated.')
      .optional(),
    /** The geographic longitude where the payment originated. */
    longitude: z
      .number()
      .nullable()
      .describe('The geographic longitude where the payment originated.')
      .optional(),
    /** The state/county/province/region where the payment originated. */
    region: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The state/county/province/region where the payment originated.'
      )
      .optional()
  })
  export type RadarReviewResourceLocation = z.infer<
    typeof RadarReviewResourceLocationSchema
  >

  export const RadarReviewResourceSessionSchema = z.object({
    /** The browser used in this browser session (e.g., `Chrome`). */
    browser: z
      .string()
      .max(5000)
      .nullable()
      .describe('The browser used in this browser session (e.g., `Chrome`).')
      .optional(),
    /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
    device: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Information about the device used for the browser session (e.g., `Samsung SM-G930T`).'
      )
      .optional(),
    /** The platform for the browser session (e.g., `Macintosh`). */
    platform: z
      .string()
      .max(5000)
      .nullable()
      .describe('The platform for the browser session (e.g., `Macintosh`).')
      .optional(),
    /** The version for the browser session (e.g., `61.0.3163.100`). */
    version: z
      .string()
      .max(5000)
      .nullable()
      .describe('The version for the browser session (e.g., `61.0.3163.100`).')
      .optional()
  })
  export type RadarReviewResourceSession = z.infer<
    typeof RadarReviewResourceSessionSchema
  >

  export const InvoicesResourceInvoiceTaxIdSchema = z.object({
    /** The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown` */
    type: z
      .enum([
        'ad_nrt',
        'ae_trn',
        'al_tin',
        'am_tin',
        'ao_tin',
        'ar_cuit',
        'au_abn',
        'au_arn',
        'ba_tin',
        'bb_tin',
        'bg_uic',
        'bh_vat',
        'bo_tin',
        'br_cnpj',
        'br_cpf',
        'bs_tin',
        'by_tin',
        'ca_bn',
        'ca_gst_hst',
        'ca_pst_bc',
        'ca_pst_mb',
        'ca_pst_sk',
        'ca_qst',
        'cd_nif',
        'ch_uid',
        'ch_vat',
        'cl_tin',
        'cn_tin',
        'co_nit',
        'cr_tin',
        'de_stn',
        'do_rcn',
        'ec_ruc',
        'eg_tin',
        'es_cif',
        'eu_oss_vat',
        'eu_vat',
        'gb_vat',
        'ge_vat',
        'gn_nif',
        'hk_br',
        'hr_oib',
        'hu_tin',
        'id_npwp',
        'il_vat',
        'in_gst',
        'is_vat',
        'jp_cn',
        'jp_rn',
        'jp_trn',
        'ke_pin',
        'kh_tin',
        'kr_brn',
        'kz_bin',
        'li_uid',
        'li_vat',
        'ma_vat',
        'md_vat',
        'me_pib',
        'mk_vat',
        'mr_nif',
        'mx_rfc',
        'my_frp',
        'my_itn',
        'my_sst',
        'ng_tin',
        'no_vat',
        'no_voec',
        'np_pan',
        'nz_gst',
        'om_vat',
        'pe_ruc',
        'ph_tin',
        'ro_tin',
        'rs_pib',
        'ru_inn',
        'ru_kpp',
        'sa_vat',
        'sg_gst',
        'sg_uen',
        'si_tin',
        'sn_ninea',
        'sr_fin',
        'sv_nit',
        'th_vat',
        'tj_tin',
        'tr_tin',
        'tw_vat',
        'tz_vat',
        'ua_vat',
        'ug_tin',
        'unknown',
        'us_ein',
        'uy_ruc',
        'uz_tin',
        'uz_vat',
        've_rif',
        'vn_tin',
        'za_vat',
        'zm_tin',
        'zw_tin'
      ])
      .describe(
        'The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown`'
      ),
    /** The value of the tax ID. */
    value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value of the tax ID.')
      .optional()
  })
  export type InvoicesResourceInvoiceTaxId = z.infer<
    typeof InvoicesResourceInvoiceTaxIdSchema
  >

  /** The amount of the tax rate when the `rate_type`` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate. */
  export const TaxRateFlatAmountSchema = z
    .object({
      /** Amount of the tax when the `rate_type` is `flat_amount`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: z
        .number()
        .int()
        .describe(
          'Amount of the tax when the `rate_type` is `flat_amount`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).'
        ),
      /** Three-letter ISO currency code, in lowercase. */
      currency: z
        .string()
        .max(5000)
        .describe('Three-letter ISO currency code, in lowercase.')
    })
    .describe(
      'The amount of the tax rate when the `rate_type`` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.'
    )
  export type TaxRateFlatAmount = z.infer<typeof TaxRateFlatAmountSchema>

  export const InvoiceLineItemPeriodSchema = z.object({
    /** The end of the period, which must be greater than or equal to the start. This value is inclusive. */
    end: z
      .number()
      .int()
      .describe(
        'The end of the period, which must be greater than or equal to the start. This value is inclusive.'
      ),
    /** The start of the period. This value is inclusive. */
    start: z
      .number()
      .int()
      .describe('The start of the period. This value is inclusive.')
  })
  export type InvoiceLineItemPeriod = z.infer<
    typeof InvoiceLineItemPeriodSchema
  >

  export const CustomUnitAmountSchema = z.object({
    /** The maximum unit amount the customer can specify for this item. */
    maximum: z
      .number()
      .int()
      .nullable()
      .describe(
        'The maximum unit amount the customer can specify for this item.'
      )
      .optional(),
    /** The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
    minimum: z
      .number()
      .int()
      .nullable()
      .describe(
        'The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.'
      )
      .optional(),
    /** The starting unit amount which can be updated by the customer. */
    preset: z
      .number()
      .int()
      .nullable()
      .describe(
        'The starting unit amount which can be updated by the customer.'
      )
      .optional()
  })
  export type CustomUnitAmount = z.infer<typeof CustomUnitAmountSchema>

  export const PriceTierSchema = z.object({
    /** Price for the entire tier. */
    flat_amount: z
      .number()
      .int()
      .nullable()
      .describe('Price for the entire tier.')
      .optional(),
    /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
    flat_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.'
      )
      .optional(),
    /** Per unit price for units relevant to the tier. */
    unit_amount: z
      .number()
      .int()
      .nullable()
      .describe('Per unit price for units relevant to the tier.')
      .optional(),
    /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
    unit_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.'
      )
      .optional(),
    /** Up to and including to this quantity will be contained in the tier. */
    up_to: z
      .number()
      .int()
      .nullable()
      .describe(
        'Up to and including to this quantity will be contained in the tier.'
      )
      .optional()
  })
  export type PriceTier = z.infer<typeof PriceTierSchema>

  export const ProductMarketingFeatureSchema = z.object({
    /** The marketing feature name. Up to 80 characters long. */
    name: z
      .string()
      .max(5000)
      .describe('The marketing feature name. Up to 80 characters long.')
      .optional()
  })
  export type ProductMarketingFeature = z.infer<
    typeof ProductMarketingFeatureSchema
  >

  export const PackageDimensionsSchema = z.object({
    /** Height, in inches. */
    height: z.number().describe('Height, in inches.'),
    /** Length, in inches. */
    length: z.number().describe('Length, in inches.'),
    /** Weight, in ounces. */
    weight: z.number().describe('Weight, in ounces.'),
    /** Width, in inches. */
    width: z.number().describe('Width, in inches.')
  })
  export type PackageDimensions = z.infer<typeof PackageDimensionsSchema>

  /** [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes. */
  export const TaxCodeSchema = z
    .object({
      /** A detailed description of which types of products the tax code represents. */
      description: z
        .string()
        .max(5000)
        .describe(
          'A detailed description of which types of products the tax code represents.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** A short name for the tax code. */
      name: z.string().max(5000).describe('A short name for the tax code.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax_code')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      '[Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.'
    )
  export type TaxCode = z.infer<typeof TaxCodeSchema>

  export const DeletedProductSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('product')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedProduct = z.infer<typeof DeletedProductSchema>

  export const RecurringSchema = z.object({
    /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`. */
    aggregate_usage: z
      .enum(['last_during_period', 'last_ever', 'max', 'sum'])
      .nullable()
      .describe(
        'Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`.'
      )
      .optional(),
    /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
    interval: z
      .enum(['day', 'month', 'week', 'year'])
      .describe(
        'The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.'
      ),
    /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
    interval_count: z
      .number()
      .int()
      .describe(
        'The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.'
      ),
    /** The meter tracking the usage of a metered price */
    meter: z
      .string()
      .max(5000)
      .nullable()
      .describe('The meter tracking the usage of a metered price')
      .optional(),
    /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
    usage_type: z
      .enum(['licensed', 'metered'])
      .describe(
        'Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.'
      )
  })
  export type Recurring = z.infer<typeof RecurringSchema>

  export const TransformQuantitySchema = z.object({
    /** Divide usage by this number. */
    divide_by: z.number().int().describe('Divide usage by this number.'),
    /** After division, either round the result `up` or `down`. */
    round: z
      .enum(['down', 'up'])
      .describe('After division, either round the result `up` or `down`.')
  })
  export type TransformQuantity = z.infer<typeof TransformQuantitySchema>

  export const SubscriptionsResourceBillingCycleAnchorConfigSchema = z.object({
    /** The day of the month of the billing_cycle_anchor. */
    day_of_month: z
      .number()
      .int()
      .describe('The day of the month of the billing_cycle_anchor.'),
    /** The hour of the day of the billing_cycle_anchor. */
    hour: z
      .number()
      .int()
      .nullable()
      .describe('The hour of the day of the billing_cycle_anchor.')
      .optional(),
    /** The minute of the hour of the billing_cycle_anchor. */
    minute: z
      .number()
      .int()
      .nullable()
      .describe('The minute of the hour of the billing_cycle_anchor.')
      .optional(),
    /** The month to start full cycle billing periods. */
    month: z
      .number()
      .int()
      .nullable()
      .describe('The month to start full cycle billing periods.')
      .optional(),
    /** The second of the minute of the billing_cycle_anchor. */
    second: z
      .number()
      .int()
      .nullable()
      .describe('The second of the minute of the billing_cycle_anchor.')
      .optional()
  })
  export type SubscriptionsResourceBillingCycleAnchorConfig = z.infer<
    typeof SubscriptionsResourceBillingCycleAnchorConfigSchema
  >

  export const SubscriptionBillingThresholdsSchema = z.object({
    /** Monetary threshold that triggers the subscription to create an invoice */
    amount_gte: z
      .number()
      .int()
      .nullable()
      .describe(
        'Monetary threshold that triggers the subscription to create an invoice'
      )
      .optional(),
    /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
    reset_billing_cycle_anchor: z
      .boolean()
      .nullable()
      .describe(
        'Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.'
      )
      .optional()
  })
  export type SubscriptionBillingThresholds = z.infer<
    typeof SubscriptionBillingThresholdsSchema
  >

  export const CancellationDetailsSchema = z.object({
    /** Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user. */
    comment: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user.'
      )
      .optional(),
    /** The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user. */
    feedback: z
      .enum([
        'customer_service',
        'low_quality',
        'missing_features',
        'other',
        'switched_service',
        'too_complex',
        'too_expensive',
        'unused'
      ])
      .nullable()
      .describe(
        'The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.'
      )
      .optional(),
    /** Why this subscription was canceled. */
    reason: z
      .enum(['cancellation_requested', 'payment_disputed', 'payment_failed'])
      .nullable()
      .describe('Why this subscription was canceled.')
      .optional()
  })
  export type CancellationDetails = z.infer<typeof CancellationDetailsSchema>

  export const SubscriptionItemBillingThresholdsSchema = z.object({
    /** Usage threshold that triggers the subscription to create an invoice */
    usage_gte: z
      .number()
      .int()
      .nullable()
      .describe(
        'Usage threshold that triggers the subscription to create an invoice'
      )
      .optional()
  })
  export type SubscriptionItemBillingThresholds = z.infer<
    typeof SubscriptionItemBillingThresholdsSchema
  >

  /**
   * The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
   * should be paused.
   */
  export const SubscriptionsResourcePauseCollectionSchema = z
    .object({
      /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
      behavior: z
        .enum(['keep_as_draft', 'mark_uncollectible', 'void'])
        .describe(
          'The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.'
        ),
      /** The time after which the subscription will resume collecting payments. */
      resumes_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'The time after which the subscription will resume collecting payments.'
        )
        .optional()
    })
    .describe(
      'The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription\nshould be paused.'
    )
  export type SubscriptionsResourcePauseCollection = z.infer<
    typeof SubscriptionsResourcePauseCollectionSchema
  >

  export const InvoicePaymentMethodOptionsAcssDebitMandateOptionsSchema =
    z.object({
      /** Transaction type of the mandate. */
      transaction_type: z
        .enum(['business', 'personal'])
        .nullable()
        .describe('Transaction type of the mandate.')
        .optional()
    })
  export type InvoicePaymentMethodOptionsAcssDebitMandateOptions = z.infer<
    typeof InvoicePaymentMethodOptionsAcssDebitMandateOptionsSchema
  >

  export const InvoicePaymentMethodOptionsBancontactSchema = z.object({
    /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
    preferred_language: z
      .enum(['de', 'en', 'fr', 'nl'])
      .describe(
        'Preferred language of the Bancontact authorization page that the customer is redirected to.'
      )
  })
  export type InvoicePaymentMethodOptionsBancontact = z.infer<
    typeof InvoicePaymentMethodOptionsBancontactSchema
  >

  export const InvoiceMandateOptionsCardSchema = z.object({
    /** Amount to be charged for future payments. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe('Amount to be charged for future payments.')
      .optional(),
    /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
    amount_type: z
      .enum(['fixed', 'maximum'])
      .nullable()
      .describe(
        'One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.'
      )
      .optional(),
    /** A description of the mandate or subscription that is meant to be displayed to the customer. */
    description: z
      .string()
      .max(200)
      .nullable()
      .describe(
        'A description of the mandate or subscription that is meant to be displayed to the customer.'
      )
      .optional()
  })
  export type InvoiceMandateOptionsCard = z.infer<
    typeof InvoiceMandateOptionsCardSchema
  >

  export const InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferSchema =
    z.object({
      /** The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`. */
      country: z
        .enum(['BE', 'DE', 'ES', 'FR', 'IE', 'NL'])
        .describe(
          'The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.'
        )
    })
  export type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer =
    z.infer<
      typeof InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferSchema
    >

  export const InvoicePaymentMethodOptionsKonbiniSchema = z.object({})
  export type InvoicePaymentMethodOptionsKonbini = z.infer<
    typeof InvoicePaymentMethodOptionsKonbiniSchema
  >

  export const InvoicePaymentMethodOptionsSepaDebitSchema = z.object({})
  export type InvoicePaymentMethodOptionsSepaDebit = z.infer<
    typeof InvoicePaymentMethodOptionsSepaDebitSchema
  >

  export const InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFiltersSchema =
    z.object({
      /** The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories: z
        .array(z.enum(['checking', 'savings']))
        .describe(
          'The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.'
        )
        .optional()
    })
  export type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFilters =
    z.infer<
      typeof InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFiltersSchema
    >

  export const SubscriptionPendingInvoiceItemIntervalSchema = z.object({
    /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
    interval: z
      .enum(['day', 'month', 'week', 'year'])
      .describe(
        'Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.'
      ),
    /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
    interval_count: z
      .number()
      .int()
      .describe(
        'The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).'
      )
  })
  export type SubscriptionPendingInvoiceItemInterval = z.infer<
    typeof SubscriptionPendingInvoiceItemIntervalSchema
  >

  export const PaymentFlowsAutomaticPaymentMethodsSetupIntentSchema = z.object({
    /**
     * Controls whether this SetupIntent will accept redirect-based payment methods.
     *
     * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
     */
    allow_redirects: z
      .enum(['always', 'never'])
      .describe(
        "Controls whether this SetupIntent will accept redirect-based payment methods.\n\nRedirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup."
      )
      .optional(),
    /** Automatically calculates compatible payment methods */
    enabled: z
      .boolean()
      .nullable()
      .describe('Automatically calculates compatible payment methods')
      .optional()
  })
  export type PaymentFlowsAutomaticPaymentMethodsSetupIntent = z.infer<
    typeof PaymentFlowsAutomaticPaymentMethodsSetupIntentSchema
  >

  export const PaymentIntentNextActionCashappQrCodeSchema = z.object({
    /** The date (unix timestamp) when the QR code expires. */
    expires_at: z
      .number()
      .int()
      .describe('The date (unix timestamp) when the QR code expires.'),
    /** The image_url_png string used to render QR code */
    image_url_png: z
      .string()
      .max(5000)
      .describe('The image_url_png string used to render QR code'),
    /** The image_url_svg string used to render QR code */
    image_url_svg: z
      .string()
      .max(5000)
      .describe('The image_url_svg string used to render QR code')
  })
  export type PaymentIntentNextActionCashappQrCode = z.infer<
    typeof PaymentIntentNextActionCashappQrCodeSchema
  >

  export const SetupIntentNextActionRedirectToUrlSchema = z.object({
    /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
    return_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.'
      )
      .optional(),
    /** The URL you must redirect your customer to in order to authenticate. */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL you must redirect your customer to in order to authenticate.'
      )
      .optional()
  })
  export type SetupIntentNextActionRedirectToUrl = z.infer<
    typeof SetupIntentNextActionRedirectToUrlSchema
  >

  export const SetupIntentNextActionVerifyWithMicrodepositsSchema = z.object({
    /** The timestamp when the microdeposits are expected to land. */
    arrival_date: z
      .number()
      .int()
      .describe('The timestamp when the microdeposits are expected to land.'),
    /** The URL for the hosted verification page, which allows customers to verify their bank account. */
    hosted_verification_url: z
      .string()
      .max(5000)
      .describe(
        'The URL for the hosted verification page, which allows customers to verify their bank account.'
      ),
    /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
    microdeposit_type: z
      .enum(['amounts', 'descriptor_code'])
      .nullable()
      .describe(
        'The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.'
      )
      .optional()
  })
  export type SetupIntentNextActionVerifyWithMicrodeposits = z.infer<
    typeof SetupIntentNextActionVerifyWithMicrodepositsSchema
  >

  export const PaymentMethodConfigBizPaymentMethodConfigurationDetailsSchema =
    z.object({
      /** ID of the payment method configuration used. */
      id: z
        .string()
        .max(5000)
        .describe('ID of the payment method configuration used.'),
      /** ID of the parent payment method configuration used. */
      parent: z
        .string()
        .max(5000)
        .nullable()
        .describe('ID of the parent payment method configuration used.')
        .optional()
    })
  export type PaymentMethodConfigBizPaymentMethodConfigurationDetails = z.infer<
    typeof PaymentMethodConfigBizPaymentMethodConfigurationDetailsSchema
  >

  export const SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema =
    z.object({
      /** A URL for custom mandate text */
      custom_mandate_url: z
        .string()
        .max(5000)
        .describe('A URL for custom mandate text')
        .optional(),
      /** List of Stripe products where this mandate can be selected automatically. */
      default_for: z
        .array(z.enum(['invoice', 'subscription']))
        .describe(
          'List of Stripe products where this mandate can be selected automatically.'
        )
        .optional(),
      /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      interval_description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
        )
        .optional(),
      /** Payment schedule for the mandate. */
      payment_schedule: z
        .enum(['combined', 'interval', 'sporadic'])
        .nullable()
        .describe('Payment schedule for the mandate.')
        .optional(),
      /** Transaction type of the mandate. */
      transaction_type: z
        .enum(['business', 'personal'])
        .nullable()
        .describe('Transaction type of the mandate.')
        .optional()
    })
  export type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema
  >

  export const SetupIntentTypeSpecificPaymentMethodOptionsClientSchema =
    z.object({
      /** Bank account verification method. */
      verification_method: z
        .enum(['automatic', 'instant', 'microdeposits'])
        .describe('Bank account verification method.')
        .optional()
    })
  export type SetupIntentTypeSpecificPaymentMethodOptionsClient = z.infer<
    typeof SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
  >

  export const SetupIntentPaymentMethodOptionsAmazonPaySchema = z.object({})
  export type SetupIntentPaymentMethodOptionsAmazonPay = z.infer<
    typeof SetupIntentPaymentMethodOptionsAmazonPaySchema
  >

  export const SetupIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'."
        )
        .optional()
    })
  export type SetupIntentPaymentMethodOptionsMandateOptionsBacsDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema
  >

  export const SetupIntentPaymentMethodOptionsCardMandateOptionsSchema =
    z.object({
      /** Amount to be charged for future payments. */
      amount: z
        .number()
        .int()
        .describe('Amount to be charged for future payments.'),
      /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
      amount_type: z
        .enum(['fixed', 'maximum'])
        .describe(
          'One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** A description of the mandate or subscription that is meant to be displayed to the customer. */
      description: z
        .string()
        .max(200)
        .nullable()
        .describe(
          'A description of the mandate or subscription that is meant to be displayed to the customer.'
        )
        .optional(),
      /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
      end_date: z
        .number()
        .int()
        .nullable()
        .describe(
          'End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.'
        )
        .optional(),
      /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
      interval: z
        .enum(['day', 'month', 'sporadic', 'week', 'year'])
        .describe(
          'Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.'
        ),
      /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
      interval_count: z
        .number()
        .int()
        .nullable()
        .describe(
          'The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.'
        )
        .optional(),
      /** Unique identifier for the mandate or subscription. */
      reference: z
        .string()
        .max(80)
        .describe('Unique identifier for the mandate or subscription.'),
      /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
      start_date: z
        .number()
        .int()
        .describe(
          'Start date of the mandate or subscription. Start date should not be lesser than yesterday.'
        ),
      /** Specifies the type of mandates supported. Possible values are `india`. */
      supported_types: z
        .array(z.literal('india'))
        .nullable()
        .describe(
          'Specifies the type of mandates supported. Possible values are `india`.'
        )
        .optional()
    })
  export type SetupIntentPaymentMethodOptionsCardMandateOptions = z.infer<
    typeof SetupIntentPaymentMethodOptionsCardMandateOptionsSchema
  >

  export const SetupIntentPaymentMethodOptionsCardPresentSchema = z.object({})
  export type SetupIntentPaymentMethodOptionsCardPresent = z.infer<
    typeof SetupIntentPaymentMethodOptionsCardPresentSchema
  >

  export const SetupIntentPaymentMethodOptionsLinkSchema = z.object({})
  export type SetupIntentPaymentMethodOptionsLink = z.infer<
    typeof SetupIntentPaymentMethodOptionsLinkSchema
  >

  export const SetupIntentPaymentMethodOptionsPaypalSchema = z.object({
    /** The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer. */
    billing_agreement_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.'
      )
      .optional()
  })
  export type SetupIntentPaymentMethodOptionsPaypal = z.infer<
    typeof SetupIntentPaymentMethodOptionsPaypalSchema
  >

  export const SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'."
        )
        .optional()
    })
  export type SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsUsBankAccountLinkedAccountOptionsFiltersSchema =
    z.object({
      /** The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`. */
      account_subcategories: z
        .array(z.enum(['checking', 'savings']))
        .describe(
          'The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.'
        )
        .optional()
    })
  export type PaymentFlowsPrivatePaymentMethodsUsBankAccountLinkedAccountOptionsFilters =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsUsBankAccountLinkedAccountOptionsFiltersSchema
    >

  export const PaymentMethodOptionsUsBankAccountMandateOptionsSchema = z.object(
    {
      /** Mandate collection method */
      collection_method: z
        .literal('paper')
        .describe('Mandate collection method')
        .optional()
    }
  )
  export type PaymentMethodOptionsUsBankAccountMandateOptions = z.infer<
    typeof PaymentMethodOptionsUsBankAccountMandateOptionsSchema
  >

  export const SubscriptionScheduleCurrentPhaseSchema = z.object({
    /** The end of this phase of the subscription schedule. */
    end_date: z
      .number()
      .int()
      .describe('The end of this phase of the subscription schedule.'),
    /** The start of this phase of the subscription schedule. */
    start_date: z
      .number()
      .int()
      .describe('The start of this phase of the subscription schedule.')
  })
  export type SubscriptionScheduleCurrentPhase = z.infer<
    typeof SubscriptionScheduleCurrentPhaseSchema
  >

  export const DeletedPriceSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('price')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedPrice = z.infer<typeof DeletedPriceSchema>

  export const DeletedCouponSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('coupon')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedCoupon = z.infer<typeof DeletedCouponSchema>

  export const BillingClocksResourceStatusDetailsAdvancingStatusDetailsSchema =
    z.object({
      /** The `frozen_time` that the Test Clock is advancing towards. */
      target_frozen_time: z
        .number()
        .int()
        .describe('The `frozen_time` that the Test Clock is advancing towards.')
    })
  export type BillingClocksResourceStatusDetailsAdvancingStatusDetails =
    z.infer<
      typeof BillingClocksResourceStatusDetailsAdvancingStatusDetailsSchema
    >

  /** Defines how a subscription behaves when a free trial ends. */
  export const SubscriptionsTrialsResourceEndBehaviorSchema = z
    .object({
      /** Indicates how the subscription should change when the trial ends if the user did not provide a payment method. */
      missing_payment_method: z
        .enum(['cancel', 'create_invoice', 'pause'])
        .describe(
          'Indicates how the subscription should change when the trial ends if the user did not provide a payment method.'
        )
    })
    .describe('Defines how a subscription behaves when a free trial ends.')
  export type SubscriptionsTrialsResourceEndBehavior = z.infer<
    typeof SubscriptionsTrialsResourceEndBehaviorSchema
  >

  export const BillingCreditGrantsResourceMonetaryAmountSchema = z.object({
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .max(5000)
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** A positive integer representing the amount. */
    value: z
      .number()
      .int()
      .describe('A positive integer representing the amount.')
  })
  export type BillingCreditGrantsResourceMonetaryAmount = z.infer<
    typeof BillingCreditGrantsResourceMonetaryAmountSchema
  >

  export const BillingCreditGrantsResourceApplicablePriceSchema = z.object({
    /** Unique identifier for the object. */
    id: z
      .string()
      .max(5000)
      .nullable()
      .describe('Unique identifier for the object.')
      .optional()
  })
  export type BillingCreditGrantsResourceApplicablePrice = z.infer<
    typeof BillingCreditGrantsResourceApplicablePriceSchema
  >

  export const InvoicesResourceLineItemsCreditedItemsSchema = z.object({
    /** Invoice containing the credited invoice line items */
    invoice: z
      .string()
      .max(5000)
      .describe('Invoice containing the credited invoice line items'),
    /** Credited invoice line items */
    invoice_line_items: z
      .array(z.string().max(5000))
      .describe('Credited invoice line items')
  })
  export type InvoicesResourceLineItemsCreditedItems = z.infer<
    typeof InvoicesResourceLineItemsCreditedItemsSchema
  >

  export const InvoiceInstallmentsCardSchema = z.object({
    /** Whether Installments are enabled for this Invoice. */
    enabled: z
      .boolean()
      .nullable()
      .describe('Whether Installments are enabled for this Invoice.')
      .optional()
  })
  export type InvoiceInstallmentsCard = z.infer<
    typeof InvoiceInstallmentsCardSchema
  >

  export const DeletedInvoiceSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('invoice')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedInvoice = z.infer<typeof DeletedInvoiceSchema>

  export const QuotesResourceStatusTransitionsSchema = z.object({
    /** The time that the quote was accepted. Measured in seconds since Unix epoch. */
    accepted_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'The time that the quote was accepted. Measured in seconds since Unix epoch.'
      )
      .optional(),
    /** The time that the quote was canceled. Measured in seconds since Unix epoch. */
    canceled_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'The time that the quote was canceled. Measured in seconds since Unix epoch.'
      )
      .optional(),
    /** The time that the quote was finalized. Measured in seconds since Unix epoch. */
    finalized_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'The time that the quote was finalized. Measured in seconds since Unix epoch.'
      )
      .optional()
  })
  export type QuotesResourceStatusTransitions = z.infer<
    typeof QuotesResourceStatusTransitionsSchema
  >

  export const QuotesResourceSubscriptionDataSubscriptionDataSchema = z.object({
    /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
      )
      .optional(),
    /** When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch. */
    effective_date: z
      .number()
      .int()
      .nullable()
      .describe(
        'When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.'
      )
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
    metadata: z
      .record(z.string().max(500))
      .nullable()
      .describe(
        "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values."
      )
      .optional(),
    /** Integer representing the number of trial period days before the customer is charged for the first time. */
    trial_period_days: z
      .number()
      .int()
      .nullable()
      .describe(
        'Integer representing the number of trial period days before the customer is charged for the first time.'
      )
      .optional()
  })
  export type QuotesResourceSubscriptionDataSubscriptionData = z.infer<
    typeof QuotesResourceSubscriptionDataSubscriptionDataSchema
  >

  export const InvoiceRenderingPdfSchema = z.object({
    /** Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale. */
    page_size: z
      .enum(['a4', 'auto', 'letter'])
      .nullable()
      .describe(
        'Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.'
      )
      .optional()
  })
  export type InvoiceRenderingPdf = z.infer<typeof InvoiceRenderingPdfSchema>

  export const ShippingRateDeliveryEstimateBoundSchema = z.object({
    /** A unit of time. */
    unit: z
      .enum(['business_day', 'day', 'hour', 'month', 'week'])
      .describe('A unit of time.'),
    /** Must be greater than 0. */
    value: z.number().int().describe('Must be greater than 0.')
  })
  export type ShippingRateDeliveryEstimateBound = z.infer<
    typeof ShippingRateDeliveryEstimateBoundSchema
  >

  export const ShippingRateCurrencyOptionSchema = z.object({
    /** A non-negative integer in cents representing how much to charge. */
    amount: z
      .number()
      .int()
      .describe(
        'A non-negative integer in cents representing how much to charge.'
      ),
    /** Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive', 'unspecified'])
      .describe(
        'Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.'
      )
  })
  export type ShippingRateCurrencyOption = z.infer<
    typeof ShippingRateCurrencyOptionSchema
  >

  export const InvoicesResourceStatusTransitionsSchema = z.object({
    /** The time that the invoice draft was finalized. */
    finalized_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the invoice draft was finalized.')
      .optional(),
    /** The time that the invoice was marked uncollectible. */
    marked_uncollectible_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the invoice was marked uncollectible.')
      .optional(),
    /** The time that the invoice was paid. */
    paid_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the invoice was paid.')
      .optional(),
    /** The time that the invoice was voided. */
    voided_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the invoice was voided.')
      .optional()
  })
  export type InvoicesResourceStatusTransitions = z.infer<
    typeof InvoicesResourceStatusTransitionsSchema
  >

  export const SubscriptionDetailsDataSchema = z.object({
    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
     *  *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
     */
    metadata: z
      .record(z.string().max(500))
      .nullable()
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.\n *Note: This attribute is populated only for invoices created on or after June 29, 2023.*'
      )
      .optional()
  })
  export type SubscriptionDetailsData = z.infer<
    typeof SubscriptionDetailsDataSchema
  >

  export const InvoiceItemThresholdReasonSchema = z.object({
    /** The IDs of the line items that triggered the threshold invoice. */
    line_item_ids: z
      .array(z.string().max(5000))
      .describe(
        'The IDs of the line items that triggered the threshold invoice.'
      ),
    /** The quantity threshold boundary that applied to the given line item. */
    usage_gte: z
      .number()
      .int()
      .describe(
        'The quantity threshold boundary that applied to the given line item.'
      )
  })
  export type InvoiceItemThresholdReason = z.infer<
    typeof InvoiceItemThresholdReasonSchema
  >

  export const PaymentIntentNextActionAlipayHandleRedirectSchema = z.object({
    /** The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
    native_data: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.'
      )
      .optional(),
    /** The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
    native_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.'
      )
      .optional(),
    /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
    return_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.'
      )
      .optional(),
    /** The URL you must redirect your customer to in order to authenticate the payment. */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL you must redirect your customer to in order to authenticate the payment.'
      )
      .optional()
  })
  export type PaymentIntentNextActionAlipayHandleRedirect = z.infer<
    typeof PaymentIntentNextActionAlipayHandleRedirectSchema
  >

  export const PaymentIntentNextActionBoletoSchema = z.object({
    /** The timestamp after which the boleto expires. */
    expires_at: z
      .number()
      .int()
      .nullable()
      .describe('The timestamp after which the boleto expires.')
      .optional(),
    /** The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
    hosted_voucher_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.'
      )
      .optional(),
    /** The boleto number. */
    number: z
      .string()
      .max(5000)
      .nullable()
      .describe('The boleto number.')
      .optional(),
    /** The URL to the downloadable boleto voucher PDF. */
    pdf: z
      .string()
      .max(5000)
      .nullable()
      .describe('The URL to the downloadable boleto voucher PDF.')
      .optional()
  })
  export type PaymentIntentNextActionBoleto = z.infer<
    typeof PaymentIntentNextActionBoletoSchema
  >

  export const PaymentIntentNextActionCardAwaitNotificationSchema = z.object({
    /** The time that payment will be attempted. If customer approval is required, they need to provide approval before this time. */
    charge_attempt_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.'
      )
      .optional(),
    /** For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required. */
    customer_approval_required: z
      .boolean()
      .nullable()
      .describe(
        'For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.'
      )
      .optional()
  })
  export type PaymentIntentNextActionCardAwaitNotification = z.infer<
    typeof PaymentIntentNextActionCardAwaitNotificationSchema
  >

  export const PaymentIntentNextActionKonbiniFamilymartSchema = z.object({
    /** The confirmation number. */
    confirmation_number: z
      .string()
      .max(5000)
      .describe('The confirmation number.')
      .optional(),
    /** The payment code. */
    payment_code: z.string().max(5000).describe('The payment code.')
  })
  export type PaymentIntentNextActionKonbiniFamilymart = z.infer<
    typeof PaymentIntentNextActionKonbiniFamilymartSchema
  >

  export const PaymentIntentNextActionKonbiniLawsonSchema = z.object({
    /** The confirmation number. */
    confirmation_number: z
      .string()
      .max(5000)
      .describe('The confirmation number.')
      .optional(),
    /** The payment code. */
    payment_code: z.string().max(5000).describe('The payment code.')
  })
  export type PaymentIntentNextActionKonbiniLawson = z.infer<
    typeof PaymentIntentNextActionKonbiniLawsonSchema
  >

  export const PaymentIntentNextActionKonbiniMinistopSchema = z.object({
    /** The confirmation number. */
    confirmation_number: z
      .string()
      .max(5000)
      .describe('The confirmation number.')
      .optional(),
    /** The payment code. */
    payment_code: z.string().max(5000).describe('The payment code.')
  })
  export type PaymentIntentNextActionKonbiniMinistop = z.infer<
    typeof PaymentIntentNextActionKonbiniMinistopSchema
  >

  export const PaymentIntentNextActionKonbiniSeicomartSchema = z.object({
    /** The confirmation number. */
    confirmation_number: z
      .string()
      .max(5000)
      .describe('The confirmation number.')
      .optional(),
    /** The payment code. */
    payment_code: z.string().max(5000).describe('The payment code.')
  })
  export type PaymentIntentNextActionKonbiniSeicomart = z.infer<
    typeof PaymentIntentNextActionKonbiniSeicomartSchema
  >

  export const PaymentIntentNextActionDisplayMultibancoDetailsSchema = z.object(
    {
      /** Entity number associated with this Multibanco payment. */
      entity: z
        .string()
        .max(5000)
        .nullable()
        .describe('Entity number associated with this Multibanco payment.')
        .optional(),
      /** The timestamp at which the Multibanco voucher expires. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe('The timestamp at which the Multibanco voucher expires.')
        .optional(),
      /** The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher. */
      hosted_voucher_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher.'
        )
        .optional(),
      /** Reference number associated with this Multibanco payment. */
      reference: z
        .string()
        .max(5000)
        .nullable()
        .describe('Reference number associated with this Multibanco payment.')
        .optional()
    }
  )
  export type PaymentIntentNextActionDisplayMultibancoDetails = z.infer<
    typeof PaymentIntentNextActionDisplayMultibancoDetailsSchema
  >

  export const PaymentIntentNextActionDisplayOxxoDetailsSchema = z.object({
    /** The timestamp after which the OXXO voucher expires. */
    expires_after: z
      .number()
      .int()
      .nullable()
      .describe('The timestamp after which the OXXO voucher expires.')
      .optional(),
    /** The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
    hosted_voucher_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.'
      )
      .optional(),
    /** OXXO reference number. */
    number: z
      .string()
      .max(5000)
      .nullable()
      .describe('OXXO reference number.')
      .optional()
  })
  export type PaymentIntentNextActionDisplayOxxoDetails = z.infer<
    typeof PaymentIntentNextActionDisplayOxxoDetailsSchema
  >

  export const PaymentIntentNextActionPaynowDisplayQrCodeSchema = z.object({
    /** The raw data string used to generate QR code, it should be used together with QR code library. */
    data: z
      .string()
      .max(5000)
      .describe(
        'The raw data string used to generate QR code, it should be used together with QR code library.'
      ),
    /** The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code. */
    hosted_instructions_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.'
      )
      .optional(),
    /** The image_url_png string used to render QR code */
    image_url_png: z
      .string()
      .max(5000)
      .describe('The image_url_png string used to render QR code'),
    /** The image_url_svg string used to render QR code */
    image_url_svg: z
      .string()
      .max(5000)
      .describe('The image_url_svg string used to render QR code')
  })
  export type PaymentIntentNextActionPaynowDisplayQrCode = z.infer<
    typeof PaymentIntentNextActionPaynowDisplayQrCodeSchema
  >

  export const PaymentIntentNextActionPixDisplayQrCodeSchema = z.object({
    /** The raw data string used to generate QR code, it should be used together with QR code library. */
    data: z
      .string()
      .max(5000)
      .describe(
        'The raw data string used to generate QR code, it should be used together with QR code library.'
      )
      .optional(),
    /** The date (unix timestamp) when the PIX expires. */
    expires_at: z
      .number()
      .int()
      .describe('The date (unix timestamp) when the PIX expires.')
      .optional(),
    /** The URL to the hosted pix instructions page, which allows customers to view the pix QR code. */
    hosted_instructions_url: z
      .string()
      .max(5000)
      .describe(
        'The URL to the hosted pix instructions page, which allows customers to view the pix QR code.'
      )
      .optional(),
    /** The image_url_png string used to render png QR code */
    image_url_png: z
      .string()
      .max(5000)
      .describe('The image_url_png string used to render png QR code')
      .optional(),
    /** The image_url_svg string used to render svg QR code */
    image_url_svg: z
      .string()
      .max(5000)
      .describe('The image_url_svg string used to render svg QR code')
      .optional()
  })
  export type PaymentIntentNextActionPixDisplayQrCode = z.infer<
    typeof PaymentIntentNextActionPixDisplayQrCodeSchema
  >

  export const PaymentIntentNextActionPromptpayDisplayQrCodeSchema = z.object({
    /** The raw data string used to generate QR code, it should be used together with QR code library. */
    data: z
      .string()
      .max(5000)
      .describe(
        'The raw data string used to generate QR code, it should be used together with QR code library.'
      ),
    /** The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code. */
    hosted_instructions_url: z
      .string()
      .max(5000)
      .describe(
        'The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.'
      ),
    /** The PNG path used to render the QR code, can be used as the source in an HTML img tag */
    image_url_png: z
      .string()
      .max(5000)
      .describe(
        'The PNG path used to render the QR code, can be used as the source in an HTML img tag'
      ),
    /** The SVG path used to render the QR code, can be used as the source in an HTML img tag */
    image_url_svg: z
      .string()
      .max(5000)
      .describe(
        'The SVG path used to render the QR code, can be used as the source in an HTML img tag'
      )
  })
  export type PaymentIntentNextActionPromptpayDisplayQrCode = z.infer<
    typeof PaymentIntentNextActionPromptpayDisplayQrCodeSchema
  >

  export const PaymentIntentNextActionRedirectToUrlSchema = z.object({
    /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
    return_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.'
      )
      .optional(),
    /** The URL you must redirect your customer to in order to authenticate the payment. */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL you must redirect your customer to in order to authenticate the payment.'
      )
      .optional()
  })
  export type PaymentIntentNextActionRedirectToUrl = z.infer<
    typeof PaymentIntentNextActionRedirectToUrlSchema
  >

  export const PaymentIntentNextActionSwishQrCodeSchema = z.object({
    /** The raw data string used to generate QR code, it should be used together with QR code library. */
    data: z
      .string()
      .max(5000)
      .describe(
        'The raw data string used to generate QR code, it should be used together with QR code library.'
      ),
    /** The image_url_png string used to render QR code */
    image_url_png: z
      .string()
      .max(5000)
      .describe('The image_url_png string used to render QR code'),
    /** The image_url_svg string used to render QR code */
    image_url_svg: z
      .string()
      .max(5000)
      .describe('The image_url_svg string used to render QR code')
  })
  export type PaymentIntentNextActionSwishQrCode = z.infer<
    typeof PaymentIntentNextActionSwishQrCodeSchema
  >

  export const PaymentIntentNextActionVerifyWithMicrodepositsSchema = z.object({
    /** The timestamp when the microdeposits are expected to land. */
    arrival_date: z
      .number()
      .int()
      .describe('The timestamp when the microdeposits are expected to land.'),
    /** The URL for the hosted verification page, which allows customers to verify their bank account. */
    hosted_verification_url: z
      .string()
      .max(5000)
      .describe(
        'The URL for the hosted verification page, which allows customers to verify their bank account.'
      ),
    /** The type of the microdeposit sent to the customer. Used to distinguish between different verification methods. */
    microdeposit_type: z
      .enum(['amounts', 'descriptor_code'])
      .nullable()
      .describe(
        'The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.'
      )
      .optional()
  })
  export type PaymentIntentNextActionVerifyWithMicrodeposits = z.infer<
    typeof PaymentIntentNextActionVerifyWithMicrodepositsSchema
  >

  export const PaymentIntentNextActionWechatPayDisplayQrCodeSchema = z.object({
    /** The data being used to generate QR code */
    data: z
      .string()
      .max(5000)
      .describe('The data being used to generate QR code'),
    /** The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code. */
    hosted_instructions_url: z
      .string()
      .max(5000)
      .describe(
        'The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.'
      ),
    /** The base64 image data for a pre-generated QR code */
    image_data_url: z
      .string()
      .max(5000)
      .describe('The base64 image data for a pre-generated QR code'),
    /** The image_url_png string used to render QR code */
    image_url_png: z
      .string()
      .max(5000)
      .describe('The image_url_png string used to render QR code'),
    /** The image_url_svg string used to render QR code */
    image_url_svg: z
      .string()
      .max(5000)
      .describe('The image_url_svg string used to render QR code')
  })
  export type PaymentIntentNextActionWechatPayDisplayQrCode = z.infer<
    typeof PaymentIntentNextActionWechatPayDisplayQrCodeSchema
  >

  export const PaymentIntentNextActionWechatPayRedirectToAndroidAppSchema =
    z.object({
      /** app_id is the APP ID registered on WeChat open platform */
      app_id: z
        .string()
        .max(5000)
        .describe('app_id is the APP ID registered on WeChat open platform'),
      /** nonce_str is a random string */
      nonce_str: z.string().max(5000).describe('nonce_str is a random string'),
      /** package is static value */
      package: z.string().max(5000).describe('package is static value'),
      /** an unique merchant ID assigned by WeChat Pay */
      partner_id: z
        .string()
        .max(5000)
        .describe('an unique merchant ID assigned by WeChat Pay'),
      /** an unique trading ID assigned by WeChat Pay */
      prepay_id: z
        .string()
        .max(5000)
        .describe('an unique trading ID assigned by WeChat Pay'),
      /** A signature */
      sign: z.string().max(5000).describe('A signature'),
      /** Specifies the current time in epoch format */
      timestamp: z
        .string()
        .max(5000)
        .describe('Specifies the current time in epoch format')
    })
  export type PaymentIntentNextActionWechatPayRedirectToAndroidApp = z.infer<
    typeof PaymentIntentNextActionWechatPayRedirectToAndroidAppSchema
  >

  export const PaymentIntentNextActionWechatPayRedirectToIosAppSchema =
    z.object({
      /** An universal link that redirect to WeChat Pay app */
      native_url: z
        .string()
        .max(5000)
        .describe('An universal link that redirect to WeChat Pay app')
    })
  export type PaymentIntentNextActionWechatPayRedirectToIosApp = z.infer<
    typeof PaymentIntentNextActionWechatPayRedirectToIosAppSchema
  >

  export const PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema =
    z.object({
      /** A URL for custom mandate text */
      custom_mandate_url: z
        .string()
        .max(5000)
        .describe('A URL for custom mandate text')
        .optional(),
      /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      interval_description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
        )
        .optional(),
      /** Payment schedule for the mandate. */
      payment_schedule: z
        .enum(['combined', 'interval', 'sporadic'])
        .nullable()
        .describe('Payment schedule for the mandate.')
        .optional(),
      /** Transaction type of the mandate. */
      transaction_type: z
        .enum(['business', 'personal'])
        .nullable()
        .describe('Transaction type of the mandate.')
        .optional()
    })
  export type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit =
    z.infer<
      typeof PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema
    >

  export const PaymentMethodOptionsCardPresentRoutingSchema = z.object({
    /** Requested routing priority */
    requested_priority: z
      .enum(['domestic', 'international'])
      .nullable()
      .describe('Requested routing priority')
      .optional()
  })
  export type PaymentMethodOptionsCardPresentRouting = z.infer<
    typeof PaymentMethodOptionsCardPresentRoutingSchema
  >

  export const PaymentMethodOptionsAffirmSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /** Preferred language of the Affirm authorization page that the customer is redirected to. */
    preferred_locale: z
      .string()
      .max(30)
      .describe(
        'Preferred language of the Affirm authorization page that the customer is redirected to.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsAffirm = z.infer<
    typeof PaymentMethodOptionsAffirmSchema
  >

  export const PaymentMethodOptionsAfterpayClearpaySchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
     * This field differs from the statement descriptor and item name.
     */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.\nThis field differs from the statement descriptor and item name.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsAfterpayClearpay = z.infer<
    typeof PaymentMethodOptionsAfterpayClearpaySchema
  >

  export const PaymentMethodOptionsAlipaySchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsAlipay = z.infer<
    typeof PaymentMethodOptionsAlipaySchema
  >

  export const PaymentMethodOptionsAlmaSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional()
  })
  export type PaymentMethodOptionsAlma = z.infer<
    typeof PaymentMethodOptionsAlmaSchema
  >

  export const PaymentMethodOptionsAmazonPaySchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsAmazonPay = z.infer<
    typeof PaymentMethodOptionsAmazonPaySchema
  >

  export const PaymentIntentPaymentMethodOptionsAuBecsDebitSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsAuBecsDebit = z.infer<
    typeof PaymentIntentPaymentMethodOptionsAuBecsDebitSchema
  >

  export const PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'."
        )
        .optional()
    })
  export type PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit =
    z.infer<
      typeof PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema
    >

  export const PaymentMethodOptionsBancontactSchema = z.object({
    /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
    preferred_language: z
      .enum(['de', 'en', 'fr', 'nl'])
      .describe(
        'Preferred language of the Bancontact authorization page that the customer is redirected to.'
      ),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsBancontact = z.infer<
    typeof PaymentMethodOptionsBancontactSchema
  >

  export const PaymentIntentPaymentMethodOptionsBlikSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsBlik = z.infer<
    typeof PaymentIntentPaymentMethodOptionsBlikSchema
  >

  export const PaymentMethodOptionsBoletoSchema = z.object({
    /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
    expires_after_days: z
      .number()
      .int()
      .describe(
        'The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.'
      ),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsBoleto = z.infer<
    typeof PaymentMethodOptionsBoletoSchema
  >

  export const PaymentMethodOptionsCardMandateOptionsSchema = z.object({
    /** Amount to be charged for future payments. */
    amount: z
      .number()
      .int()
      .describe('Amount to be charged for future payments.'),
    /** One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param. */
    amount_type: z
      .enum(['fixed', 'maximum'])
      .describe(
        'One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.'
      ),
    /** A description of the mandate or subscription that is meant to be displayed to the customer. */
    description: z
      .string()
      .max(200)
      .nullable()
      .describe(
        'A description of the mandate or subscription that is meant to be displayed to the customer.'
      )
      .optional(),
    /** End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date. */
    end_date: z
      .number()
      .int()
      .nullable()
      .describe(
        'End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.'
      )
      .optional(),
    /** Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`. */
    interval: z
      .enum(['day', 'month', 'sporadic', 'week', 'year'])
      .describe(
        'Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.'
      ),
    /** The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`. */
    interval_count: z
      .number()
      .int()
      .nullable()
      .describe(
        'The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.'
      )
      .optional(),
    /** Unique identifier for the mandate or subscription. */
    reference: z
      .string()
      .max(80)
      .describe('Unique identifier for the mandate or subscription.'),
    /** Start date of the mandate or subscription. Start date should not be lesser than yesterday. */
    start_date: z
      .number()
      .int()
      .describe(
        'Start date of the mandate or subscription. Start date should not be lesser than yesterday.'
      ),
    /** Specifies the type of mandates supported. Possible values are `india`. */
    supported_types: z
      .array(z.literal('india'))
      .nullable()
      .describe(
        'Specifies the type of mandates supported. Possible values are `india`.'
      )
      .optional()
  })
  export type PaymentMethodOptionsCardMandateOptions = z.infer<
    typeof PaymentMethodOptionsCardMandateOptionsSchema
  >

  export const PaymentMethodOptionsCashappSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsCashapp = z.infer<
    typeof PaymentMethodOptionsCashappSchema
  >

  export const PaymentMethodOptionsCustomerBalanceEuBankAccountSchema =
    z.object({
      /** The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`. */
      country: z
        .enum(['BE', 'DE', 'ES', 'FR', 'IE', 'NL'])
        .describe(
          'The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.'
        )
    })
  export type PaymentMethodOptionsCustomerBalanceEuBankAccount = z.infer<
    typeof PaymentMethodOptionsCustomerBalanceEuBankAccountSchema
  >

  export const PaymentIntentPaymentMethodOptionsEpsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsEps = z.infer<
    typeof PaymentIntentPaymentMethodOptionsEpsSchema
  >

  export const PaymentMethodOptionsFpxSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsFpx = z.infer<
    typeof PaymentMethodOptionsFpxSchema
  >

  export const PaymentMethodOptionsGiropaySchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsGiropay = z.infer<
    typeof PaymentMethodOptionsGiropaySchema
  >

  export const PaymentMethodOptionsGrabpaySchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsGrabpay = z.infer<
    typeof PaymentMethodOptionsGrabpaySchema
  >

  export const PaymentMethodOptionsIdealSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsIdeal = z.infer<
    typeof PaymentMethodOptionsIdealSchema
  >

  export const PaymentMethodOptionsInteracPresentSchema = z.object({})
  export type PaymentMethodOptionsInteracPresent = z.infer<
    typeof PaymentMethodOptionsInteracPresentSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptionsSchema =
    z.object({
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .literal('manual')
        .describe(
          "Controls when the funds will be captured from the customer's account."
        )
        .optional(),
      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
       */
      setup_future_usage: z
        .enum(['none', 'off_session'])
        .describe(
          "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
        )
        .optional()
    })
  export type PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptionsSchema
    >

  export const PaymentMethodOptionsKlarnaSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /** Preferred locale of the Klarna checkout page that the customer is redirected to. */
    preferred_locale: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Preferred locale of the Klarna checkout page that the customer is redirected to.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsKlarna = z.infer<
    typeof PaymentMethodOptionsKlarnaSchema
  >

  export const PaymentMethodOptionsKonbiniSchema = z.object({
    /** An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores. */
    confirmation_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.'
      )
      .optional(),
    /** The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
    expires_after_days: z
      .number()
      .int()
      .nullable()
      .describe(
        'The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.'
      )
      .optional(),
    /** The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set. */
    expires_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.'
      )
      .optional(),
    /** A product descriptor of up to 22 characters, which will appear to customers at the convenience store. */
    product_description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A product descriptor of up to 22 characters, which will appear to customers at the convenience store.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsKonbini = z.infer<
    typeof PaymentMethodOptionsKonbiniSchema
  >

  export const PaymentMethodOptionsKrCardSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsKrCard = z.infer<
    typeof PaymentMethodOptionsKrCardSchema
  >

  export const PaymentIntentPaymentMethodOptionsLinkSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsLink = z.infer<
    typeof PaymentIntentPaymentMethodOptionsLinkSchema
  >

  export const PaymentIntentPaymentMethodOptionsMobilepaySchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsMobilepay = z.infer<
    typeof PaymentIntentPaymentMethodOptionsMobilepaySchema
  >

  export const PaymentMethodOptionsMultibancoSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsMultibanco = z.infer<
    typeof PaymentMethodOptionsMultibancoSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptionsSchema =
    z.object({
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .literal('manual')
        .describe(
          "Controls when the funds will be captured from the customer's account."
        )
        .optional()
    })
  export type PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptionsSchema
    >

  export const PaymentMethodOptionsOxxoSchema = z.object({
    /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
    expires_after_days: z
      .number()
      .int()
      .describe(
        'The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.'
      ),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsOxxo = z.infer<
    typeof PaymentMethodOptionsOxxoSchema
  >

  export const PaymentMethodOptionsP24Schema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsP24 = z.infer<
    typeof PaymentMethodOptionsP24Schema
  >

  export const PaymentMethodOptionsPayByBankSchema = z.object({})
  export type PaymentMethodOptionsPayByBank = z.infer<
    typeof PaymentMethodOptionsPayByBankSchema
  >

  export const PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptionsSchema =
    z.object({
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .literal('manual')
        .describe(
          "Controls when the funds will be captured from the customer's account."
        )
        .optional()
    })
  export type PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptionsSchema
    >

  export const PaymentMethodOptionsPaynowSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsPaynow = z.infer<
    typeof PaymentMethodOptionsPaynowSchema
  >

  export const PaymentMethodOptionsPaypalSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /** Preferred locale of the PayPal checkout page that the customer is redirected to. */
    preferred_locale: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Preferred locale of the PayPal checkout page that the customer is redirected to.'
      )
      .optional(),
    /** A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsPaypal = z.infer<
    typeof PaymentMethodOptionsPaypalSchema
  >

  export const PaymentMethodOptionsPixSchema = z.object({
    /** The number of seconds (between 10 and 1209600) after which Pix payment will expire. */
    expires_after_seconds: z
      .number()
      .int()
      .nullable()
      .describe(
        'The number of seconds (between 10 and 1209600) after which Pix payment will expire.'
      )
      .optional(),
    /** The timestamp at which the Pix expires. */
    expires_at: z
      .number()
      .int()
      .nullable()
      .describe('The timestamp at which the Pix expires.')
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsPix = z.infer<
    typeof PaymentMethodOptionsPixSchema
  >

  export const PaymentMethodOptionsPromptpaySchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsPromptpay = z.infer<
    typeof PaymentMethodOptionsPromptpaySchema
  >

  export const PaymentMethodOptionsRevolutPaySchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsRevolutPay = z.infer<
    typeof PaymentMethodOptionsRevolutPaySchema
  >

  export const PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptionsSchema =
    z.object({
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .literal('manual')
        .describe(
          "Controls when the funds will be captured from the customer's account."
        )
        .optional()
    })
  export type PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions =
    z.infer<
      typeof PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptionsSchema
    >

  export const PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'."
        )
        .optional()
    })
  export type PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit =
    z.infer<
      typeof PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema
    >

  export const PaymentMethodOptionsSofortSchema = z.object({
    /** Preferred language of the SOFORT authorization page that the customer is redirected to. */
    preferred_language: z
      .enum(['de', 'en', 'es', 'fr', 'it', 'nl', 'pl'])
      .nullable()
      .describe(
        'Preferred language of the SOFORT authorization page that the customer is redirected to.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsSofort = z.infer<
    typeof PaymentMethodOptionsSofortSchema
  >

  export const PaymentIntentPaymentMethodOptionsSwishSchema = z.object({
    /** A reference for this payment to be displayed in the Swish app. */
    reference: z
      .string()
      .max(35)
      .nullable()
      .describe(
        'A reference for this payment to be displayed in the Swish app.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsSwish = z.infer<
    typeof PaymentIntentPaymentMethodOptionsSwishSchema
  >

  export const PaymentMethodOptionsTwintSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsTwint = z.infer<
    typeof PaymentMethodOptionsTwintSchema
  >

  export const PaymentMethodOptionsWechatPaySchema = z.object({
    /** The app ID registered with WeChat Pay. Only required when client is ios or android. */
    app_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The app ID registered with WeChat Pay. Only required when client is ios or android.'
      )
      .optional(),
    /** The client type that the end customer will pay from */
    client: z
      .enum(['android', 'ios', 'web'])
      .nullable()
      .describe('The client type that the end customer will pay from')
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsWechatPay = z.infer<
    typeof PaymentMethodOptionsWechatPaySchema
  >

  export const PaymentMethodOptionsZipSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsZip = z.infer<
    typeof PaymentMethodOptionsZipSchema
  >

  export const PaymentIntentProcessingCustomerNotificationSchema = z.object({
    /** Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank. */
    approval_requested: z
      .boolean()
      .nullable()
      .describe(
        'Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.'
      )
      .optional(),
    /** If customer approval is required, they need to provide approval before this time. */
    completes_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'If customer approval is required, they need to provide approval before this time.'
      )
      .optional()
  })
  export type PaymentIntentProcessingCustomerNotification = z.infer<
    typeof PaymentIntentProcessingCustomerNotificationSchema
  >

  export const NetworksSchema = z.object({
    /** All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network). */
    available: z
      .array(z.string().max(5000))
      .describe(
        'All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).'
      ),
    /** The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card. */
    preferred: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.'
      )
      .optional()
  })
  export type Networks = z.infer<typeof NetworksSchema>

  export const ThreeDSecureUsageSchema = z.object({
    /** Whether 3D Secure is supported on this card. */
    supported: z
      .boolean()
      .describe('Whether 3D Secure is supported on this card.')
  })
  export type ThreeDSecureUsage = z.infer<typeof ThreeDSecureUsageSchema>

  export const PaymentMethodCardWalletAmexExpressCheckoutSchema = z.object({})
  export type PaymentMethodCardWalletAmexExpressCheckout = z.infer<
    typeof PaymentMethodCardWalletAmexExpressCheckoutSchema
  >

  export const PaymentMethodCardWalletApplePaySchema = z.object({})
  export type PaymentMethodCardWalletApplePay = z.infer<
    typeof PaymentMethodCardWalletApplePaySchema
  >

  export const PaymentMethodCardWalletGooglePaySchema = z.object({})
  export type PaymentMethodCardWalletGooglePay = z.infer<
    typeof PaymentMethodCardWalletGooglePaySchema
  >

  export const PaymentMethodCardWalletLinkSchema = z.object({})
  export type PaymentMethodCardWalletLink = z.infer<
    typeof PaymentMethodCardWalletLinkSchema
  >

  export const PaymentMethodCardWalletSamsungPaySchema = z.object({})
  export type PaymentMethodCardWalletSamsungPay = z.infer<
    typeof PaymentMethodCardWalletSamsungPaySchema
  >

  export const PaymentMethodCardPresentNetworksSchema = z.object({
    /** All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network). */
    available: z
      .array(z.string().max(5000))
      .describe(
        'All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).'
      ),
    /** The preferred network for the card. */
    preferred: z
      .string()
      .max(5000)
      .nullable()
      .describe('The preferred network for the card.')
      .optional()
  })
  export type PaymentMethodCardPresentNetworks = z.infer<
    typeof PaymentMethodCardPresentNetworksSchema
  >

  export const PaymentMethodCashappSchema = z.object({
    /** A unique and immutable identifier assigned by Cash App to every buyer. */
    buyer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A unique and immutable identifier assigned by Cash App to every buyer.'
      )
      .optional(),
    /** A public identifier for buyers using Cash App. */
    cashtag: z
      .string()
      .max(5000)
      .nullable()
      .describe('A public identifier for buyers using Cash App.')
      .optional()
  })
  export type PaymentMethodCashapp = z.infer<typeof PaymentMethodCashappSchema>

  export const PaymentMethodCustomerBalanceSchema = z.object({})
  export type PaymentMethodCustomerBalance = z.infer<
    typeof PaymentMethodCustomerBalanceSchema
  >

  export const PaymentMethodEpsSchema = z.object({
    /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
    bank: z
      .enum([
        'arzte_und_apotheker_bank',
        'austrian_anadi_bank_ag',
        'bank_austria',
        'bankhaus_carl_spangler',
        'bankhaus_schelhammer_und_schattera_ag',
        'bawag_psk_ag',
        'bks_bank_ag',
        'brull_kallmus_bank_ag',
        'btv_vier_lander_bank',
        'capital_bank_grawe_gruppe_ag',
        'deutsche_bank_ag',
        'dolomitenbank',
        'easybank_ag',
        'erste_bank_und_sparkassen',
        'hypo_alpeadriabank_international_ag',
        'hypo_bank_burgenland_aktiengesellschaft',
        'hypo_noe_lb_fur_niederosterreich_u_wien',
        'hypo_oberosterreich_salzburg_steiermark',
        'hypo_tirol_bank_ag',
        'hypo_vorarlberg_bank_ag',
        'marchfelder_bank',
        'oberbank_ag',
        'raiffeisen_bankengruppe_osterreich',
        'schoellerbank_ag',
        'sparda_bank_wien',
        'volksbank_gruppe',
        'volkskreditbank_ag',
        'vr_bank_braunau'
      ])
      .nullable()
      .describe(
        "The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."
      )
      .optional()
  })
  export type PaymentMethodEps = z.infer<typeof PaymentMethodEpsSchema>

  export const PaymentMethodFpxSchema = z.object({
    /** The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`. */
    bank: z
      .enum([
        'affin_bank',
        'agrobank',
        'alliance_bank',
        'ambank',
        'bank_islam',
        'bank_muamalat',
        'bank_of_china',
        'bank_rakyat',
        'bsn',
        'cimb',
        'deutsche_bank',
        'hong_leong_bank',
        'hsbc',
        'kfh',
        'maybank2e',
        'maybank2u',
        'ocbc',
        'pb_enterprise',
        'public_bank',
        'rhb',
        'standard_chartered',
        'uob'
      ])
      .describe(
        "The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`."
      )
  })
  export type PaymentMethodFpx = z.infer<typeof PaymentMethodFpxSchema>

  export const PaymentMethodGiropaySchema = z.object({})
  export type PaymentMethodGiropay = z.infer<typeof PaymentMethodGiropaySchema>

  export const PaymentMethodGrabpaySchema = z.object({})
  export type PaymentMethodGrabpay = z.infer<typeof PaymentMethodGrabpaySchema>

  export const PaymentMethodIdealSchema = z.object({
    /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
    bank: z
      .enum([
        'abn_amro',
        'asn_bank',
        'bunq',
        'handelsbanken',
        'ing',
        'knab',
        'moneyou',
        'n26',
        'nn',
        'rabobank',
        'regiobank',
        'revolut',
        'sns_bank',
        'triodos_bank',
        'van_lanschot',
        'yoursafe'
      ])
      .nullable()
      .describe(
        "The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
      )
      .optional(),
    /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
    bic: z
      .enum([
        'ABNANL2A',
        'ASNBNL21',
        'BITSNL2A',
        'BUNQNL2A',
        'FVLBNL22',
        'HANDNL2A',
        'INGBNL2A',
        'KNABNL2H',
        'MOYONL21',
        'NNBANL2G',
        'NTSBDEB1',
        'RABONL2U',
        'RBRBNL21',
        'REVOIE23',
        'REVOLT21',
        'SNSBNL2A',
        'TRIONL2U'
      ])
      .nullable()
      .describe(
        "The Bank Identifier Code of the customer's bank, if the bank was provided."
      )
      .optional()
  })
  export type PaymentMethodIdeal = z.infer<typeof PaymentMethodIdealSchema>

  export const PaymentMethodKakaoPaySchema = z.object({})
  export type PaymentMethodKakaoPay = z.infer<
    typeof PaymentMethodKakaoPaySchema
  >

  export const PaymentFlowsPrivatePaymentMethodsKlarnaDobSchema = z.object({
    /** The day of birth, between 1 and 31. */
    day: z
      .number()
      .int()
      .nullable()
      .describe('The day of birth, between 1 and 31.')
      .optional(),
    /** The month of birth, between 1 and 12. */
    month: z
      .number()
      .int()
      .nullable()
      .describe('The month of birth, between 1 and 12.')
      .optional(),
    /** The four-digit year of birth. */
    year: z
      .number()
      .int()
      .nullable()
      .describe('The four-digit year of birth.')
      .optional()
  })
  export type PaymentFlowsPrivatePaymentMethodsKlarnaDob = z.infer<
    typeof PaymentFlowsPrivatePaymentMethodsKlarnaDobSchema
  >

  export const PaymentMethodKonbiniSchema = z.object({})
  export type PaymentMethodKonbini = z.infer<typeof PaymentMethodKonbiniSchema>

  export const PaymentMethodKrCardSchema = z.object({
    /** The local credit or debit card brand. */
    brand: z
      .enum([
        'bc',
        'citi',
        'hana',
        'hyundai',
        'jeju',
        'jeonbuk',
        'kakaobank',
        'kbank',
        'kdbbank',
        'kookmin',
        'kwangju',
        'lotte',
        'mg',
        'nh',
        'post',
        'samsung',
        'savingsbank',
        'shinhan',
        'shinhyup',
        'suhyup',
        'tossbank',
        'woori'
      ])
      .nullable()
      .describe('The local credit or debit card brand.')
      .optional(),
    /** The last four digits of the card. This may not be present for American Express cards. */
    last4: z
      .string()
      .max(4)
      .nullable()
      .describe(
        'The last four digits of the card. This may not be present for American Express cards.'
      )
      .optional()
  })
  export type PaymentMethodKrCard = z.infer<typeof PaymentMethodKrCardSchema>

  export const PaymentMethodLinkSchema = z.object({
    /** Account owner's email address. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe("Account owner's email address.")
      .optional()
  })
  export type PaymentMethodLink = z.infer<typeof PaymentMethodLinkSchema>

  export const PaymentMethodMobilepaySchema = z.object({})
  export type PaymentMethodMobilepay = z.infer<
    typeof PaymentMethodMobilepaySchema
  >

  export const PaymentMethodMultibancoSchema = z.object({})
  export type PaymentMethodMultibanco = z.infer<
    typeof PaymentMethodMultibancoSchema
  >

  export const PaymentMethodNaverPaySchema = z.object({
    /** Whether to fund this transaction with Naver Pay points or a card. */
    funding: z
      .enum(['card', 'points'])
      .describe(
        'Whether to fund this transaction with Naver Pay points or a card.'
      )
  })
  export type PaymentMethodNaverPay = z.infer<
    typeof PaymentMethodNaverPaySchema
  >

  export const PaymentMethodOxxoSchema = z.object({})
  export type PaymentMethodOxxo = z.infer<typeof PaymentMethodOxxoSchema>

  export const PaymentMethodP24Schema = z.object({
    /** The customer's bank, if provided. */
    bank: z
      .enum([
        'alior_bank',
        'bank_millennium',
        'bank_nowy_bfg_sa',
        'bank_pekao_sa',
        'banki_spbdzielcze',
        'blik',
        'bnp_paribas',
        'boz',
        'citi_handlowy',
        'credit_agricole',
        'envelobank',
        'etransfer_pocztowy24',
        'getin_bank',
        'ideabank',
        'ing',
        'inteligo',
        'mbank_mtransfer',
        'nest_przelew',
        'noble_pay',
        'pbac_z_ipko',
        'plus_bank',
        'santander_przelew24',
        'tmobile_usbugi_bankowe',
        'toyota_bank',
        'velobank',
        'volkswagen_bank'
      ])
      .nullable()
      .describe("The customer's bank, if provided.")
      .optional()
  })
  export type PaymentMethodP24 = z.infer<typeof PaymentMethodP24Schema>

  export const PaymentMethodPayByBankSchema = z.object({})
  export type PaymentMethodPayByBank = z.infer<
    typeof PaymentMethodPayByBankSchema
  >

  export const PaymentMethodPaycoSchema = z.object({})
  export type PaymentMethodPayco = z.infer<typeof PaymentMethodPaycoSchema>

  export const PaymentMethodPaynowSchema = z.object({})
  export type PaymentMethodPaynow = z.infer<typeof PaymentMethodPaynowSchema>

  export const PaymentMethodPaypalSchema = z.object({
    /** Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /**
     * Owner's email. Values are provided by PayPal directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    payer_email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's email. Values are provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
    payer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'PayPal account PayerID. This identifier uniquely identifies the PayPal customer.'
      )
      .optional()
  })
  export type PaymentMethodPaypal = z.infer<typeof PaymentMethodPaypalSchema>

  export const PaymentMethodPixSchema = z.object({})
  export type PaymentMethodPix = z.infer<typeof PaymentMethodPixSchema>

  export const PaymentMethodPromptpaySchema = z.object({})
  export type PaymentMethodPromptpay = z.infer<
    typeof PaymentMethodPromptpaySchema
  >

  export const PaymentMethodRevolutPaySchema = z.object({})
  export type PaymentMethodRevolutPay = z.infer<
    typeof PaymentMethodRevolutPaySchema
  >

  export const PaymentMethodSamsungPaySchema = z.object({})
  export type PaymentMethodSamsungPay = z.infer<
    typeof PaymentMethodSamsungPaySchema
  >

  export const PaymentMethodSofortSchema = z.object({
    /** Two-letter ISO code representing the country the bank account is located in. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country the bank account is located in.'
      )
      .optional()
  })
  export type PaymentMethodSofort = z.infer<typeof PaymentMethodSofortSchema>

  export const PaymentMethodSwishSchema = z.object({})
  export type PaymentMethodSwish = z.infer<typeof PaymentMethodSwishSchema>

  export const PaymentMethodTwintSchema = z.object({})
  export type PaymentMethodTwint = z.infer<typeof PaymentMethodTwintSchema>

  export const UsBankAccountNetworksSchema = z.object({
    /** The preferred network. */
    preferred: z
      .string()
      .max(5000)
      .nullable()
      .describe('The preferred network.')
      .optional(),
    /** All supported networks. */
    supported: z
      .array(z.enum(['ach', 'us_domestic_wire']))
      .describe('All supported networks.')
  })
  export type UsBankAccountNetworks = z.infer<
    typeof UsBankAccountNetworksSchema
  >

  export const PaymentMethodUsBankAccountBlockedSchema = z.object({
    /** The ACH network code that resulted in this block. */
    network_code: z
      .enum([
        'R02',
        'R03',
        'R04',
        'R05',
        'R07',
        'R08',
        'R10',
        'R11',
        'R16',
        'R20',
        'R29',
        'R31'
      ])
      .nullable()
      .describe('The ACH network code that resulted in this block.')
      .optional(),
    /** The reason why this PaymentMethod's fingerprint has been blocked */
    reason: z
      .enum([
        'bank_account_closed',
        'bank_account_frozen',
        'bank_account_invalid_details',
        'bank_account_restricted',
        'bank_account_unusable',
        'debit_not_authorized'
      ])
      .nullable()
      .describe(
        "The reason why this PaymentMethod's fingerprint has been blocked"
      )
      .optional()
  })
  export type PaymentMethodUsBankAccountBlocked = z.infer<
    typeof PaymentMethodUsBankAccountBlockedSchema
  >

  export const PaymentMethodWechatPaySchema = z.object({})
  export type PaymentMethodWechatPay = z.infer<
    typeof PaymentMethodWechatPaySchema
  >

  export const PaymentMethodZipSchema = z.object({})
  export type PaymentMethodZip = z.infer<typeof PaymentMethodZipSchema>

  export const InvoiceSettingCustomerRenderingOptionsSchema = z.object({
    /** How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
    amount_tax_display: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.'
      )
      .optional(),
    /** ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice. */
    template: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice."
      )
      .optional()
  })
  export type InvoiceSettingCustomerRenderingOptions = z.infer<
    typeof InvoiceSettingCustomerRenderingOptionsSchema
  >

  export const CustomerTaxLocationSchema = z.object({
    /** The customer's country as identified by Stripe Tax. */
    country: z
      .string()
      .max(5000)
      .describe("The customer's country as identified by Stripe Tax."),
    /** The data source used to infer the customer's location. */
    source: z
      .enum([
        'billing_address',
        'ip_address',
        'payment_method',
        'shipping_destination'
      ])
      .describe("The data source used to infer the customer's location."),
    /** The customer's state, county, province, or region as identified by Stripe Tax. */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The customer's state, county, province, or region as identified by Stripe Tax."
      )
      .optional()
  })
  export type CustomerTaxLocation = z.infer<typeof CustomerTaxLocationSchema>

  export const AccountRequirementsErrorSchema = z.object({
    /** The code for the type of error. */
    code: z
      .enum([
        'invalid_address_city_state_postal_code',
        'invalid_address_highway_contract_box',
        'invalid_address_private_mailbox',
        'invalid_business_profile_name',
        'invalid_business_profile_name_denylisted',
        'invalid_company_name_denylisted',
        'invalid_dob_age_over_maximum',
        'invalid_dob_age_under_18',
        'invalid_dob_age_under_minimum',
        'invalid_product_description_length',
        'invalid_product_description_url_match',
        'invalid_representative_country',
        'invalid_statement_descriptor_business_mismatch',
        'invalid_statement_descriptor_denylisted',
        'invalid_statement_descriptor_length',
        'invalid_statement_descriptor_prefix_denylisted',
        'invalid_statement_descriptor_prefix_mismatch',
        'invalid_street_address',
        'invalid_tax_id',
        'invalid_tax_id_format',
        'invalid_tos_acceptance',
        'invalid_url_denylisted',
        'invalid_url_format',
        'invalid_url_web_presence_detected',
        'invalid_url_website_business_information_mismatch',
        'invalid_url_website_empty',
        'invalid_url_website_inaccessible',
        'invalid_url_website_inaccessible_geoblocked',
        'invalid_url_website_inaccessible_password_protected',
        'invalid_url_website_incomplete',
        'invalid_url_website_incomplete_cancellation_policy',
        'invalid_url_website_incomplete_customer_service_details',
        'invalid_url_website_incomplete_legal_restrictions',
        'invalid_url_website_incomplete_refund_policy',
        'invalid_url_website_incomplete_return_policy',
        'invalid_url_website_incomplete_terms_and_conditions',
        'invalid_url_website_incomplete_under_construction',
        'invalid_url_website_other',
        'invalid_value_other',
        'verification_directors_mismatch',
        'verification_document_address_mismatch',
        'verification_document_address_missing',
        'verification_document_corrupt',
        'verification_document_country_not_supported',
        'verification_document_directors_mismatch',
        'verification_document_dob_mismatch',
        'verification_document_duplicate_type',
        'verification_document_expired',
        'verification_document_failed_copy',
        'verification_document_failed_greyscale',
        'verification_document_failed_other',
        'verification_document_failed_test_mode',
        'verification_document_fraudulent',
        'verification_document_id_number_mismatch',
        'verification_document_id_number_missing',
        'verification_document_incomplete',
        'verification_document_invalid',
        'verification_document_issue_or_expiry_date_missing',
        'verification_document_manipulated',
        'verification_document_missing_back',
        'verification_document_missing_front',
        'verification_document_name_mismatch',
        'verification_document_name_missing',
        'verification_document_nationality_mismatch',
        'verification_document_not_readable',
        'verification_document_not_signed',
        'verification_document_not_uploaded',
        'verification_document_photo_mismatch',
        'verification_document_too_large',
        'verification_document_type_not_supported',
        'verification_extraneous_directors',
        'verification_failed_address_match',
        'verification_failed_business_iec_number',
        'verification_failed_document_match',
        'verification_failed_id_number_match',
        'verification_failed_keyed_identity',
        'verification_failed_keyed_match',
        'verification_failed_name_match',
        'verification_failed_other',
        'verification_failed_representative_authority',
        'verification_failed_residential_address',
        'verification_failed_tax_id_match',
        'verification_failed_tax_id_not_issued',
        'verification_missing_directors',
        'verification_missing_executives',
        'verification_missing_owners',
        'verification_requires_additional_memorandum_of_associations',
        'verification_requires_additional_proof_of_registration',
        'verification_supportability'
      ])
      .describe('The code for the type of error.'),
    /** An informative message that indicates the error type and provides additional details about the error. */
    reason: z
      .string()
      .max(5000)
      .describe(
        'An informative message that indicates the error type and provides additional details about the error.'
      ),
    /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
    requirement: z
      .string()
      .max(5000)
      .describe(
        'The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.'
      )
  })
  export type AccountRequirementsError = z.infer<
    typeof AccountRequirementsErrorSchema
  >

  export const AccountRequirementsAlternativeSchema = z.object({
    /** Fields that can be provided to satisfy all fields in `original_fields_due`. */
    alternative_fields_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields that can be provided to satisfy all fields in `original_fields_due`.'
      ),
    /** Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
    original_fields_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.'
      )
  })
  export type AccountRequirementsAlternative = z.infer<
    typeof AccountRequirementsAlternativeSchema
  >

  export const AccountGroupMembershipSchema = z.object({
    /** The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details. */
    payments_pricing: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details.'
      )
      .optional()
  })
  export type AccountGroupMembership = z.infer<
    typeof AccountGroupMembershipSchema
  >

  export const PersonAdditionalTosAcceptanceSchema = z.object({
    /** The Unix timestamp marking when the legal guardian accepted the service agreement. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the legal guardian accepted the service agreement.'
      )
      .optional(),
    /** The IP address from which the legal guardian accepted the service agreement. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the legal guardian accepted the service agreement.'
      )
      .optional(),
    /** The user agent of the browser from which the legal guardian accepted the service agreement. */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The user agent of the browser from which the legal guardian accepted the service agreement.'
      )
      .optional()
  })
  export type PersonAdditionalTosAcceptance = z.infer<
    typeof PersonAdditionalTosAcceptanceSchema
  >

  export const LegalEntityDobSchema = z.object({
    /** The day of birth, between 1 and 31. */
    day: z
      .number()
      .int()
      .nullable()
      .describe('The day of birth, between 1 and 31.')
      .optional(),
    /** The month of birth, between 1 and 12. */
    month: z
      .number()
      .int()
      .nullable()
      .describe('The month of birth, between 1 and 12.')
      .optional(),
    /** The four-digit year of birth. */
    year: z
      .number()
      .int()
      .nullable()
      .describe('The four-digit year of birth.')
      .optional()
  })
  export type LegalEntityDob = z.infer<typeof LegalEntityDobSchema>

  export const PersonRelationshipSchema = z.object({
    /** Whether the person is the authorizer of the account's representative. */
    authorizer: z
      .boolean()
      .nullable()
      .describe(
        "Whether the person is the authorizer of the account's representative."
      )
      .optional(),
    /** Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
    director: z
      .boolean()
      .nullable()
      .describe(
        "Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations."
      )
      .optional(),
    /** Whether the person has significant responsibility to control, manage, or direct the organization. */
    executive: z
      .boolean()
      .nullable()
      .describe(
        'Whether the person has significant responsibility to control, manage, or direct the organization.'
      )
      .optional(),
    /** Whether the person is the legal guardian of the account's representative. */
    legal_guardian: z
      .boolean()
      .nullable()
      .describe(
        "Whether the person is the legal guardian of the account's representative."
      )
      .optional(),
    /** Whether the person is an owner of the account’s legal entity. */
    owner: z
      .boolean()
      .nullable()
      .describe('Whether the person is an owner of the account’s legal entity.')
      .optional(),
    /** The percent owned by the person of the account's legal entity. */
    percent_ownership: z
      .number()
      .nullable()
      .describe(
        "The percent owned by the person of the account's legal entity."
      )
      .optional(),
    /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
    representative: z
      .boolean()
      .nullable()
      .describe(
        'Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.'
      )
      .optional(),
    /** The person's title (e.g., CEO, Support Engineer). */
    title: z
      .string()
      .max(5000)
      .nullable()
      .describe("The person's title (e.g., CEO, Support Engineer).")
      .optional()
  })
  export type PersonRelationship = z.infer<typeof PersonRelationshipSchema>

  export const AccountBacsDebitPaymentsSettingsSchema = z.object({
    /** The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free. */
    display_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don\'t set the display name before requesting Bacs capability, it\'s automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free.'
      )
      .optional(),
    /** The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners. */
    service_user_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners.'
      )
      .optional()
  })
  export type AccountBacsDebitPaymentsSettings = z.infer<
    typeof AccountBacsDebitPaymentsSettingsSchema
  >

  export const CardIssuingAccountTermsOfServiceSchema = z.object({
    /** The Unix timestamp marking when the account representative accepted the service agreement. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the account representative accepted the service agreement.'
      )
      .optional(),
    /** The IP address from which the account representative accepted the service agreement. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the account representative accepted the service agreement.'
      )
      .optional(),
    /** The user agent of the browser from which the account representative accepted the service agreement. */
    user_agent: z
      .string()
      .max(5000)
      .describe(
        'The user agent of the browser from which the account representative accepted the service agreement.'
      )
      .optional()
  })
  export type CardIssuingAccountTermsOfService = z.infer<
    typeof CardIssuingAccountTermsOfServiceSchema
  >

  export const AccountDeclineChargeOnSchema = z.object({
    /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
    avs_failure: z
      .boolean()
      .describe(
        'Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.'
      ),
    /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
    cvc_failure: z
      .boolean()
      .describe(
        'Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.'
      )
  })
  export type AccountDeclineChargeOn = z.infer<
    typeof AccountDeclineChargeOnSchema
  >

  export const AccountDashboardSettingsSchema = z.object({
    /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
    display_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.'
      )
      .optional(),
    /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
    timezone: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).'
      )
      .optional()
  })
  export type AccountDashboardSettings = z.infer<
    typeof AccountDashboardSettingsSchema
  >

  export const AccountPaymentsSettingsSchema = z.object({
    /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
    statement_descriptor: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.'
      )
      .optional(),
    /** The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
    statement_descriptor_kana: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).'
      )
      .optional(),
    /** The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
    statement_descriptor_kanji: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).'
      )
      .optional()
  })
  export type AccountPaymentsSettings = z.infer<
    typeof AccountPaymentsSettingsSchema
  >

  export const TransferScheduleSchema = z.object({
    /** The number of days charges for the account will be held before being paid out. */
    delay_days: z
      .number()
      .int()
      .describe(
        'The number of days charges for the account will be held before being paid out.'
      ),
    /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
    interval: z
      .string()
      .max(5000)
      .describe(
        'How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.'
      ),
    /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
    monthly_anchor: z
      .number()
      .int()
      .describe(
        'The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.'
      )
      .optional(),
    /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
    weekly_anchor: z
      .string()
      .max(5000)
      .describe(
        "The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly."
      )
      .optional()
  })
  export type TransferSchedule = z.infer<typeof TransferScheduleSchema>

  export const AccountSepaDebitPaymentsSettingsSchema = z.object({
    /** SEPA creditor identifier that identifies the company making the payment. */
    creditor_id: z
      .string()
      .max(5000)
      .describe(
        'SEPA creditor identifier that identifies the company making the payment.'
      )
      .optional()
  })
  export type AccountSepaDebitPaymentsSettings = z.infer<
    typeof AccountSepaDebitPaymentsSettingsSchema
  >

  export const AccountTermsOfServiceSchema = z.object({
    /** The Unix timestamp marking when the account representative accepted the service agreement. */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the account representative accepted the service agreement.'
      )
      .optional(),
    /** The IP address from which the account representative accepted the service agreement. */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the account representative accepted the service agreement.'
      )
      .optional(),
    /** The user agent of the browser from which the account representative accepted the service agreement. */
    user_agent: z
      .string()
      .max(5000)
      .describe(
        'The user agent of the browser from which the account representative accepted the service agreement.'
      )
      .optional()
  })
  export type AccountTermsOfService = z.infer<
    typeof AccountTermsOfServiceSchema
  >

  export const AccountTosAcceptanceSchema = z.object({
    /** The Unix timestamp marking when the account representative accepted their service agreement */
    date: z
      .number()
      .int()
      .nullable()
      .describe(
        'The Unix timestamp marking when the account representative accepted their service agreement'
      )
      .optional(),
    /** The IP address from which the account representative accepted their service agreement */
    ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address from which the account representative accepted their service agreement'
      )
      .optional(),
    /** The user's service agreement type */
    service_agreement: z
      .string()
      .max(5000)
      .describe("The user's service agreement type")
      .optional(),
    /** The user agent of the browser from which the account representative accepted their service agreement */
    user_agent: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The user agent of the browser from which the account representative accepted their service agreement'
      )
      .optional()
  })
  export type AccountTosAcceptance = z.infer<typeof AccountTosAcceptanceSchema>

  /**
   * Account Links are the means by which a Connect platform grants a connected account permission to access
   * Stripe-hosted applications, such as Connect Onboarding.
   *
   * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
   */
  export const AccountLinkSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The timestamp at which this account link will expire. */
      expires_at: z
        .number()
        .int()
        .describe('The timestamp at which this account link will expire.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('account_link')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The URL for the account link. */
      url: z.string().max(5000).describe('The URL for the account link.')
    })
    .describe(
      'Account Links are the means by which a Connect platform grants a connected account permission to access\nStripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)'
    )
  export type AccountLink = z.infer<typeof AccountLinkSchema>

  export const ConnectEmbeddedAccountFeaturesClaimSchema = z.object({
    /** Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false. */
    disable_stripe_user_authentication: z
      .boolean()
      .describe(
        'Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.'
      ),
    /** Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`. */
    external_account_collection: z
      .boolean()
      .describe(
        'Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`.'
      )
  })
  export type ConnectEmbeddedAccountFeaturesClaim = z.infer<
    typeof ConnectEmbeddedAccountFeaturesClaimSchema
  >

  export const ConnectEmbeddedPayoutsFeaturesSchema = z.object({
    /** Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false. */
    disable_stripe_user_authentication: z
      .boolean()
      .describe(
        'Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.'
      ),
    /** Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
    edit_payout_schedule: z
      .boolean()
      .describe(
        'Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise.'
      ),
    /** Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`. */
    external_account_collection: z
      .boolean()
      .describe(
        'Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`.'
      ),
    /** Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
    instant_payouts: z
      .boolean()
      .describe(
        'Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.'
      ),
    /** Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise. */
    standard_payouts: z
      .boolean()
      .describe(
        'Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.'
      )
  })
  export type ConnectEmbeddedPayoutsFeatures = z.infer<
    typeof ConnectEmbeddedPayoutsFeaturesSchema
  >

  export const ConnectEmbeddedBaseFeaturesSchema = z.object({})
  export type ConnectEmbeddedBaseFeatures = z.infer<
    typeof ConnectEmbeddedBaseFeaturesSchema
  >

  export const ConnectEmbeddedFinancialAccountFeaturesSchema = z.object({
    /** Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false. */
    disable_stripe_user_authentication: z
      .boolean()
      .describe(
        'Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.'
      ),
    /** Whether to allow external accounts to be linked for money transfer. */
    external_account_collection: z
      .boolean()
      .describe(
        'Whether to allow external accounts to be linked for money transfer.'
      ),
    /** Whether to allow sending money. */
    send_money: z.boolean().describe('Whether to allow sending money.'),
    /** Whether to allow transferring balance. */
    transfer_balance: z
      .boolean()
      .describe('Whether to allow transferring balance.')
  })
  export type ConnectEmbeddedFinancialAccountFeatures = z.infer<
    typeof ConnectEmbeddedFinancialAccountFeaturesSchema
  >

  export const ConnectEmbeddedFinancialAccountTransactionsFeaturesSchema =
    z.object({
      /** Whether to allow card spend dispute management features. */
      card_spend_dispute_management: z
        .boolean()
        .describe('Whether to allow card spend dispute management features.')
    })
  export type ConnectEmbeddedFinancialAccountTransactionsFeatures = z.infer<
    typeof ConnectEmbeddedFinancialAccountTransactionsFeaturesSchema
  >

  export const ConnectEmbeddedIssuingCardFeaturesSchema = z.object({
    /** Whether to allow card management features. */
    card_management: z
      .boolean()
      .describe('Whether to allow card management features.'),
    /** Whether to allow card spend dispute management features. */
    card_spend_dispute_management: z
      .boolean()
      .describe('Whether to allow card spend dispute management features.'),
    /** Whether to allow cardholder management features. */
    cardholder_management: z
      .boolean()
      .describe('Whether to allow cardholder management features.'),
    /** Whether to allow spend control management features. */
    spend_control_management: z
      .boolean()
      .describe('Whether to allow spend control management features.')
  })
  export type ConnectEmbeddedIssuingCardFeatures = z.infer<
    typeof ConnectEmbeddedIssuingCardFeaturesSchema
  >

  export const ConnectEmbeddedIssuingCardsListFeaturesSchema = z.object({
    /** Whether to allow card management features. */
    card_management: z
      .boolean()
      .describe('Whether to allow card management features.'),
    /** Whether to allow card spend dispute management features. */
    card_spend_dispute_management: z
      .boolean()
      .describe('Whether to allow card spend dispute management features.'),
    /** Whether to allow cardholder management features. */
    cardholder_management: z
      .boolean()
      .describe('Whether to allow cardholder management features.'),
    /** Disables Stripe user authentication for this embedded component. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. */
    disable_stripe_user_authentication: z
      .boolean()
      .describe(
        'Disables Stripe user authentication for this embedded component. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts.'
      ),
    /** Whether to allow spend control management features. */
    spend_control_management: z
      .boolean()
      .describe('Whether to allow spend control management features.')
  })
  export type ConnectEmbeddedIssuingCardsListFeatures = z.infer<
    typeof ConnectEmbeddedIssuingCardsListFeaturesSchema
  >

  export const ConnectEmbeddedPaymentsFeaturesSchema = z.object({
    /** Whether to allow capturing and cancelling payment intents. This is `true` by default. */
    capture_payments: z
      .boolean()
      .describe(
        'Whether to allow capturing and cancelling payment intents. This is `true` by default.'
      ),
    /** Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default. */
    destination_on_behalf_of_charge_management: z
      .boolean()
      .describe(
        'Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default.'
      ),
    /** Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default. */
    dispute_management: z
      .boolean()
      .describe(
        'Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default.'
      ),
    /** Whether to allow sending refunds. This is `true` by default. */
    refund_management: z
      .boolean()
      .describe('Whether to allow sending refunds. This is `true` by default.')
  })
  export type ConnectEmbeddedPaymentsFeatures = z.infer<
    typeof ConnectEmbeddedPaymentsFeaturesSchema
  >

  export const DeletedAccountSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('account')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedAccount = z.infer<typeof DeletedAccountSchema>

  /** Login Links are single-use URLs for a connected account to access the Express Dashboard. The connected account's [account.controller.stripe_dashboard.type](/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard. */
  export const LoginLinkSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('login_link')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The URL for the login link. */
      url: z.string().max(5000).describe('The URL for the login link.')
    })
    .describe(
      "Login Links are single-use URLs for a connected account to access the Express Dashboard. The connected account's [account.controller.stripe_dashboard.type](/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard."
    )
  export type LoginLink = z.infer<typeof LoginLinkSchema>

  export const DeletedPersonSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('person')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedPerson = z.infer<typeof DeletedPersonSchema>

  export const ApplePayDomainSchema = z.object({
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: z
      .number()
      .int()
      .describe(
        'Time at which the object was created. Measured in seconds since the Unix epoch.'
      ),
    domain_name: z.string().max(5000),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('apple_pay_domain')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type ApplePayDomain = z.infer<typeof ApplePayDomainSchema>

  export const DeletedApplePayDomainSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('apple_pay_domain')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedApplePayDomain = z.infer<
    typeof DeletedApplePayDomainSchema
  >

  export const SecretServiceResourceScopeSchema = z.object({
    /** The secret scope type. */
    type: z.enum(['account', 'user']).describe('The secret scope type.'),
    /** The user ID, if type is set to "user" */
    user: z
      .string()
      .max(5000)
      .describe('The user ID, if type is set to "user"')
      .optional()
  })
  export type SecretServiceResourceScope = z.infer<
    typeof SecretServiceResourceScopeSchema
  >

  export const BalanceAmountBySourceTypeSchema = z.object({
    /** Amount coming from [legacy US ACH payments](https://docs.stripe.com/ach-deprecated). */
    bank_account: z
      .number()
      .int()
      .describe(
        'Amount coming from [legacy US ACH payments](https://docs.stripe.com/ach-deprecated).'
      )
      .optional(),
    /** Amount coming from most payment methods, including cards as well as [non-legacy bank debits](https://docs.stripe.com/payments/bank-debits). */
    card: z
      .number()
      .int()
      .describe(
        'Amount coming from most payment methods, including cards as well as [non-legacy bank debits](https://docs.stripe.com/payments/bank-debits).'
      )
      .optional(),
    /** Amount coming from [FPX](https://docs.stripe.com/payments/fpx), a Malaysian payment method. */
    fpx: z
      .number()
      .int()
      .describe(
        'Amount coming from [FPX](https://docs.stripe.com/payments/fpx), a Malaysian payment method.'
      )
      .optional()
  })
  export type BalanceAmountBySourceType = z.infer<
    typeof BalanceAmountBySourceTypeSchema
  >

  export const BillingMeterResourceCustomerMappingSettingsSchema = z.object({
    /** The key in the meter event payload to use for mapping the event to a customer. */
    event_payload_key: z
      .string()
      .max(5000)
      .describe(
        'The key in the meter event payload to use for mapping the event to a customer.'
      ),
    /** The method for mapping a meter event to a customer. */
    type: z
      .literal('by_id')
      .describe('The method for mapping a meter event to a customer.')
  })
  export type BillingMeterResourceCustomerMappingSettings = z.infer<
    typeof BillingMeterResourceCustomerMappingSettingsSchema
  >

  export const BillingMeterResourceAggregationSettingsSchema = z.object({
    /** Specifies how events are aggregated. */
    formula: z
      .enum(['count', 'sum'])
      .describe('Specifies how events are aggregated.')
  })
  export type BillingMeterResourceAggregationSettings = z.infer<
    typeof BillingMeterResourceAggregationSettingsSchema
  >

  export const BillingMeterResourceBillingMeterStatusTransitionsSchema =
    z.object({
      /** The time the meter was deactivated, if any. Measured in seconds since Unix epoch. */
      deactivated_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'The time the meter was deactivated, if any. Measured in seconds since Unix epoch.'
        )
        .optional()
    })
  export type BillingMeterResourceBillingMeterStatusTransitions = z.infer<
    typeof BillingMeterResourceBillingMeterStatusTransitionsSchema
  >

  export const BillingMeterResourceBillingMeterValueSchema = z.object({
    /** The key in the meter event payload to use as the value for this meter. */
    event_payload_key: z
      .string()
      .max(5000)
      .describe(
        'The key in the meter event payload to use as the value for this meter.'
      )
  })
  export type BillingMeterResourceBillingMeterValue = z.infer<
    typeof BillingMeterResourceBillingMeterValueSchema
  >

  export const BillingMeterResourceBillingMeterEventAdjustmentCancelSchema =
    z.object({
      /** Unique identifier for the event. */
      identifier: z
        .string()
        .max(100)
        .nullable()
        .describe('Unique identifier for the event.')
        .optional()
    })
  export type BillingMeterResourceBillingMeterEventAdjustmentCancel = z.infer<
    typeof BillingMeterResourceBillingMeterEventAdjustmentCancelSchema
  >

  /** Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event’s payload and how to aggregate those events. */
  export const BillingMeterEventSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The name of the meter event. Corresponds with the `event_name` field on a meter. */
      event_name: z
        .string()
        .max(100)
        .describe(
          'The name of the meter event. Corresponds with the `event_name` field on a meter.'
        ),
      /** A unique identifier for the event. */
      identifier: z
        .string()
        .max(5000)
        .describe('A unique identifier for the event.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.meter_event')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides). */
      payload: z
        .record(z.string().max(100))
        .describe(
          "The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides)."
        ),
      /** The timestamp passed in when creating the event. Measured in seconds since the Unix epoch. */
      timestamp: z
        .number()
        .int()
        .describe(
          'The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.'
        )
    })
    .describe(
      'Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event’s payload and how to aggregate those events.'
    )
  export type BillingMeterEvent = z.infer<typeof BillingMeterEventSchema>

  /**
   * A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
   * usage was accrued by a customer for that period.
   *
   * Note: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage.
   */
  export const BillingMeterEventSummarySchema = z
    .object({
      /** Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`. */
      aggregated_value: z
        .number()
        .describe(
          'Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.'
        ),
      /** End timestamp for this event summary (exclusive). Must be aligned with minute boundaries. */
      end_time: z
        .number()
        .int()
        .describe(
          'End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The meter associated with this event summary. */
      meter: z
        .string()
        .max(5000)
        .describe('The meter associated with this event summary.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.meter_event_summary')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries. */
      start_time: z
        .number()
        .int()
        .describe(
          'Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.'
        )
    })
    .describe(
      "A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much\nusage was accrued by a customer for that period.\n\nNote: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage."
    )
  export type BillingMeterEventSummary = z.infer<
    typeof BillingMeterEventSummarySchema
  >

  export const PortalBusinessProfileSchema = z.object({
    /** The messaging shown to customers in the portal. */
    headline: z
      .string()
      .max(5000)
      .nullable()
      .describe('The messaging shown to customers in the portal.')
      .optional(),
    /** A link to the business’s publicly available privacy policy. */
    privacy_policy_url: z
      .string()
      .max(5000)
      .nullable()
      .describe('A link to the business’s publicly available privacy policy.')
      .optional(),
    /** A link to the business’s publicly available terms of service. */
    terms_of_service_url: z
      .string()
      .max(5000)
      .nullable()
      .describe('A link to the business’s publicly available terms of service.')
      .optional()
  })
  export type PortalBusinessProfile = z.infer<
    typeof PortalBusinessProfileSchema
  >

  export const PortalCustomerUpdateSchema = z.object({
    /** The types of customer updates that are supported. When empty, customers are not updateable. */
    allowed_updates: z
      .array(
        z.enum(['address', 'email', 'name', 'phone', 'shipping', 'tax_id'])
      )
      .describe(
        'The types of customer updates that are supported. When empty, customers are not updateable.'
      ),
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.')
  })
  export type PortalCustomerUpdate = z.infer<typeof PortalCustomerUpdateSchema>

  export const PortalInvoiceListSchema = z.object({
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.')
  })
  export type PortalInvoiceList = z.infer<typeof PortalInvoiceListSchema>

  export const PortalPaymentMethodUpdateSchema = z.object({
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.')
  })
  export type PortalPaymentMethodUpdate = z.infer<
    typeof PortalPaymentMethodUpdateSchema
  >

  export const PortalSubscriptionCancellationReasonSchema = z.object({
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.'),
    /** Which cancellation reasons will be given as options to the customer. */
    options: z
      .array(
        z.enum([
          'customer_service',
          'low_quality',
          'missing_features',
          'other',
          'switched_service',
          'too_complex',
          'too_expensive',
          'unused'
        ])
      )
      .describe(
        'Which cancellation reasons will be given as options to the customer.'
      )
  })
  export type PortalSubscriptionCancellationReason = z.infer<
    typeof PortalSubscriptionCancellationReasonSchema
  >

  export const PortalSubscriptionUpdateProductSchema = z.object({
    /** The list of price IDs which, when subscribed to, a subscription can be updated. */
    prices: z
      .array(z.string().max(5000))
      .describe(
        'The list of price IDs which, when subscribed to, a subscription can be updated.'
      ),
    /** The product ID. */
    product: z.string().max(5000).describe('The product ID.')
  })
  export type PortalSubscriptionUpdateProduct = z.infer<
    typeof PortalSubscriptionUpdateProductSchema
  >

  export const PortalResourceScheduleUpdateAtPeriodEndConditionSchema =
    z.object({
      /** The type of condition. */
      type: z
        .enum(['decreasing_item_amount', 'shortening_interval'])
        .describe('The type of condition.')
    })
  export type PortalResourceScheduleUpdateAtPeriodEndCondition = z.infer<
    typeof PortalResourceScheduleUpdateAtPeriodEndConditionSchema
  >

  export const PortalLoginPageSchema = z.object({
    /**
     * If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.
     *
     * If `false`, the previously generated `url`, if any, will be deactivated.
     */
    enabled: z
      .boolean()
      .describe(
        'If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.\n\nIf `false`, the previously generated `url`, if any, will be deactivated.'
      ),
    /** A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal. */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal.'
      )
      .optional()
  })
  export type PortalLoginPage = z.infer<typeof PortalLoginPageSchema>

  export const PortalFlowsAfterCompletionHostedConfirmationSchema = z.object({
    /** A custom message to display to the customer after the flow is completed. */
    custom_message: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A custom message to display to the customer after the flow is completed.'
      )
      .optional()
  })
  export type PortalFlowsAfterCompletionHostedConfirmation = z.infer<
    typeof PortalFlowsAfterCompletionHostedConfirmationSchema
  >

  export const PortalFlowsAfterCompletionRedirectSchema = z.object({
    /** The URL the customer will be redirected to after the flow is completed. */
    return_url: z
      .string()
      .max(5000)
      .describe(
        'The URL the customer will be redirected to after the flow is completed.'
      )
  })
  export type PortalFlowsAfterCompletionRedirect = z.infer<
    typeof PortalFlowsAfterCompletionRedirectSchema
  >

  export const PortalFlowsCouponOfferSchema = z.object({
    /** The ID of the coupon to be offered. */
    coupon: z.string().max(5000).describe('The ID of the coupon to be offered.')
  })
  export type PortalFlowsCouponOffer = z.infer<
    typeof PortalFlowsCouponOfferSchema
  >

  export const PortalFlowsFlowSubscriptionUpdateSchema = z.object({
    /** The ID of the subscription to be updated. */
    subscription: z
      .string()
      .max(5000)
      .describe('The ID of the subscription to be updated.')
  })
  export type PortalFlowsFlowSubscriptionUpdate = z.infer<
    typeof PortalFlowsFlowSubscriptionUpdateSchema
  >

  export const PortalFlowsSubscriptionUpdateConfirmDiscountSchema = z.object({
    /** The ID of the coupon to apply to this subscription update. */
    coupon: z
      .string()
      .max(5000)
      .nullable()
      .describe('The ID of the coupon to apply to this subscription update.')
      .optional(),
    /** The ID of a promotion code to apply to this subscription update. */
    promotion_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of a promotion code to apply to this subscription update.'
      )
      .optional()
  })
  export type PortalFlowsSubscriptionUpdateConfirmDiscount = z.infer<
    typeof PortalFlowsSubscriptionUpdateConfirmDiscountSchema
  >

  export const PortalFlowsSubscriptionUpdateConfirmItemSchema = z.object({
    /** The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated. */
    id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated.'
      )
      .optional(),
    /** The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products). */
    price: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products)."
      )
      .optional(),
    /** [Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow. */
    quantity: z
      .number()
      .int()
      .describe(
        '[Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow.'
      )
      .optional()
  })
  export type PortalFlowsSubscriptionUpdateConfirmItem = z.infer<
    typeof PortalFlowsSubscriptionUpdateConfirmItemSchema
  >

  export const PaymentPagesCheckoutSessionAdaptivePricingSchema = z.object({
    /** Whether Adaptive Pricing is enabled. */
    enabled: z.boolean().describe('Whether Adaptive Pricing is enabled.')
  })
  export type PaymentPagesCheckoutSessionAdaptivePricing = z.infer<
    typeof PaymentPagesCheckoutSessionAdaptivePricingSchema
  >

  export const PaymentPagesCheckoutSessionAfterExpirationRecoverySchema =
    z.object({
      /** Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false` */
      allow_promotion_codes: z
        .boolean()
        .describe(
          'Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`'
        ),
      /**
       * If `true`, a recovery url will be generated to recover this Checkout Session if it
       * expires before a transaction is completed. It will be attached to the
       * Checkout Session object upon expiration.
       */
      enabled: z
        .boolean()
        .describe(
          'If `true`, a recovery url will be generated to recover this Checkout Session if it\nexpires before a transaction is completed. It will be attached to the\nCheckout Session object upon expiration.'
        ),
      /** The timestamp at which the recovery URL will expire. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe('The timestamp at which the recovery URL will expire.')
        .optional(),
      /** URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session'
        )
        .optional()
    })
  export type PaymentPagesCheckoutSessionAfterExpirationRecovery = z.infer<
    typeof PaymentPagesCheckoutSessionAfterExpirationRecoverySchema
  >

  export const PaymentPagesCheckoutSessionConsentSchema = z.object({
    /**
     * If `opt_in`, the customer consents to receiving promotional communications
     * from the merchant about this Checkout Session.
     */
    promotions: z
      .enum(['opt_in', 'opt_out'])
      .nullable()
      .describe(
        'If `opt_in`, the customer consents to receiving promotional communications\nfrom the merchant about this Checkout Session.'
      )
      .optional(),
    /** If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service. */
    terms_of_service: z
      .literal('accepted')
      .nullable()
      .describe(
        "If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service."
      )
      .optional()
  })
  export type PaymentPagesCheckoutSessionConsent = z.infer<
    typeof PaymentPagesCheckoutSessionConsentSchema
  >

  export const PaymentPagesCheckoutSessionPaymentMethodReuseAgreementSchema =
    z.object({
      /**
       * Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
       *
       * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
       */
      position: z
        .enum(['auto', 'hidden'])
        .describe(
          "Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.\n\nWhen set to `hidden`, the payment method reuse agreement text will always be hidden in the UI."
        )
    })
  export type PaymentPagesCheckoutSessionPaymentMethodReuseAgreement = z.infer<
    typeof PaymentPagesCheckoutSessionPaymentMethodReuseAgreementSchema
  >

  export const PaymentPagesCheckoutSessionCurrencyConversionSchema = z.object({
    /** Total of all items in source currency before discounts or taxes are applied. */
    amount_subtotal: z
      .number()
      .int()
      .describe(
        'Total of all items in source currency before discounts or taxes are applied.'
      ),
    /** Total of all items in source currency after discounts and taxes are applied. */
    amount_total: z
      .number()
      .int()
      .describe(
        'Total of all items in source currency after discounts and taxes are applied.'
      ),
    /** Exchange rate used to convert source currency amounts to customer currency amounts */
    fx_rate: z
      .string()
      .describe(
        'Exchange rate used to convert source currency amounts to customer currency amounts'
      ),
    /** Creation currency of the CheckoutSession before localization */
    source_currency: z
      .string()
      .max(5000)
      .describe('Creation currency of the CheckoutSession before localization')
  })
  export type PaymentPagesCheckoutSessionCurrencyConversion = z.infer<
    typeof PaymentPagesCheckoutSessionCurrencyConversionSchema
  >

  export const PaymentPagesCheckoutSessionCustomFieldsOptionSchema = z.object({
    /** The label for the option, displayed to the customer. Up to 100 characters. */
    label: z
      .string()
      .max(5000)
      .describe(
        'The label for the option, displayed to the customer. Up to 100 characters.'
      ),
    /** The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters. */
    value: z
      .string()
      .max(5000)
      .describe(
        'The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.'
      )
  })
  export type PaymentPagesCheckoutSessionCustomFieldsOption = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsOptionSchema
  >

  export const PaymentPagesCheckoutSessionCustomFieldsLabelSchema = z.object({
    /** Custom text for the label, displayed to the customer. Up to 50 characters. */
    custom: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Custom text for the label, displayed to the customer. Up to 50 characters.'
      )
      .optional(),
    /** The type of the label. */
    type: z.literal('custom').describe('The type of the label.')
  })
  export type PaymentPagesCheckoutSessionCustomFieldsLabel = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsLabelSchema
  >

  export const PaymentPagesCheckoutSessionCustomFieldsNumericSchema = z.object({
    /** The value that will pre-fill the field on the payment page. */
    default_value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value that will pre-fill the field on the payment page.')
      .optional(),
    /** The maximum character length constraint for the customer's input. */
    maximum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The maximum character length constraint for the customer's input."
      )
      .optional(),
    /** The minimum character length requirement for the customer's input. */
    minimum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The minimum character length requirement for the customer's input."
      )
      .optional(),
    /** The value entered by the customer, containing only digits. */
    value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value entered by the customer, containing only digits.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionCustomFieldsNumeric = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsNumericSchema
  >

  export const PaymentPagesCheckoutSessionCustomFieldsTextSchema = z.object({
    /** The value that will pre-fill the field on the payment page. */
    default_value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value that will pre-fill the field on the payment page.')
      .optional(),
    /** The maximum character length constraint for the customer's input. */
    maximum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The maximum character length constraint for the customer's input."
      )
      .optional(),
    /** The minimum character length requirement for the customer's input. */
    minimum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The minimum character length requirement for the customer's input."
      )
      .optional(),
    /** The value entered by the customer. */
    value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value entered by the customer.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionCustomFieldsText = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsTextSchema
  >

  export const PaymentPagesCheckoutSessionCustomTextPositionSchema = z.object({
    /** Text may be up to 1200 characters in length. */
    message: z
      .string()
      .max(500)
      .describe('Text may be up to 1200 characters in length.')
  })
  export type PaymentPagesCheckoutSessionCustomTextPosition = z.infer<
    typeof PaymentPagesCheckoutSessionCustomTextPositionSchema
  >

  export const PaymentPagesCheckoutSessionTaxIdSchema = z.object({
    /** The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown` */
    type: z
      .enum([
        'ad_nrt',
        'ae_trn',
        'al_tin',
        'am_tin',
        'ao_tin',
        'ar_cuit',
        'au_abn',
        'au_arn',
        'ba_tin',
        'bb_tin',
        'bg_uic',
        'bh_vat',
        'bo_tin',
        'br_cnpj',
        'br_cpf',
        'bs_tin',
        'by_tin',
        'ca_bn',
        'ca_gst_hst',
        'ca_pst_bc',
        'ca_pst_mb',
        'ca_pst_sk',
        'ca_qst',
        'cd_nif',
        'ch_uid',
        'ch_vat',
        'cl_tin',
        'cn_tin',
        'co_nit',
        'cr_tin',
        'de_stn',
        'do_rcn',
        'ec_ruc',
        'eg_tin',
        'es_cif',
        'eu_oss_vat',
        'eu_vat',
        'gb_vat',
        'ge_vat',
        'gn_nif',
        'hk_br',
        'hr_oib',
        'hu_tin',
        'id_npwp',
        'il_vat',
        'in_gst',
        'is_vat',
        'jp_cn',
        'jp_rn',
        'jp_trn',
        'ke_pin',
        'kh_tin',
        'kr_brn',
        'kz_bin',
        'li_uid',
        'li_vat',
        'ma_vat',
        'md_vat',
        'me_pib',
        'mk_vat',
        'mr_nif',
        'mx_rfc',
        'my_frp',
        'my_itn',
        'my_sst',
        'ng_tin',
        'no_vat',
        'no_voec',
        'np_pan',
        'nz_gst',
        'om_vat',
        'pe_ruc',
        'ph_tin',
        'ro_tin',
        'rs_pib',
        'ru_inn',
        'ru_kpp',
        'sa_vat',
        'sg_gst',
        'sg_uen',
        'si_tin',
        'sn_ninea',
        'sr_fin',
        'sv_nit',
        'th_vat',
        'tj_tin',
        'tr_tin',
        'tw_vat',
        'tz_vat',
        'ua_vat',
        'ug_tin',
        'unknown',
        'us_ein',
        'uy_ruc',
        'uz_tin',
        'uz_vat',
        've_rif',
        'vn_tin',
        'za_vat',
        'zm_tin',
        'zw_tin'
      ])
      .describe(
        'The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown`'
      ),
    /** The value of the tax ID. */
    value: z
      .string()
      .max(5000)
      .nullable()
      .describe('The value of the tax ID.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionTaxId = z.infer<
    typeof PaymentPagesCheckoutSessionTaxIdSchema
  >

  export const InvoiceSettingCheckoutRenderingOptionsSchema = z.object({
    /** How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
    amount_tax_display: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.'
      )
      .optional()
  })
  export type InvoiceSettingCheckoutRenderingOptions = z.infer<
    typeof InvoiceSettingCheckoutRenderingOptionsSchema
  >

  export const PaymentLinksResourceCompletionBehaviorConfirmationPageSchema =
    z.object({
      /** The custom message that is displayed to the customer after the purchase is complete. */
      custom_message: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The custom message that is displayed to the customer after the purchase is complete.'
        )
        .optional()
    })
  export type PaymentLinksResourceCompletionBehaviorConfirmationPage = z.infer<
    typeof PaymentLinksResourceCompletionBehaviorConfirmationPageSchema
  >

  export const PaymentLinksResourceCompletionBehaviorRedirectSchema = z.object({
    /** The URL the customer will be redirected to after the purchase is complete. */
    url: z
      .string()
      .max(5000)
      .describe(
        'The URL the customer will be redirected to after the purchase is complete.'
      )
  })
  export type PaymentLinksResourceCompletionBehaviorRedirect = z.infer<
    typeof PaymentLinksResourceCompletionBehaviorRedirectSchema
  >

  export const PaymentLinksResourcePaymentMethodReuseAgreementSchema = z.object(
    {
      /**
       * Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
       *
       * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
       */
      position: z
        .enum(['auto', 'hidden'])
        .describe(
          "Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.\n\nWhen set to `hidden`, the payment method reuse agreement text will always be hidden in the UI."
        )
    }
  )
  export type PaymentLinksResourcePaymentMethodReuseAgreement = z.infer<
    typeof PaymentLinksResourcePaymentMethodReuseAgreementSchema
  >

  export const PaymentLinksResourceCustomFieldsDropdownOptionSchema = z.object({
    /** The label for the option, displayed to the customer. Up to 100 characters. */
    label: z
      .string()
      .max(5000)
      .describe(
        'The label for the option, displayed to the customer. Up to 100 characters.'
      ),
    /** The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters. */
    value: z
      .string()
      .max(5000)
      .describe(
        'The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.'
      )
  })
  export type PaymentLinksResourceCustomFieldsDropdownOption = z.infer<
    typeof PaymentLinksResourceCustomFieldsDropdownOptionSchema
  >

  export const PaymentLinksResourceCustomFieldsLabelSchema = z.object({
    /** Custom text for the label, displayed to the customer. Up to 50 characters. */
    custom: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Custom text for the label, displayed to the customer. Up to 50 characters.'
      )
      .optional(),
    /** The type of the label. */
    type: z.literal('custom').describe('The type of the label.')
  })
  export type PaymentLinksResourceCustomFieldsLabel = z.infer<
    typeof PaymentLinksResourceCustomFieldsLabelSchema
  >

  export const PaymentLinksResourceCustomFieldsNumericSchema = z.object({
    /** The maximum character length constraint for the customer's input. */
    maximum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The maximum character length constraint for the customer's input."
      )
      .optional(),
    /** The minimum character length requirement for the customer's input. */
    minimum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The minimum character length requirement for the customer's input."
      )
      .optional()
  })
  export type PaymentLinksResourceCustomFieldsNumeric = z.infer<
    typeof PaymentLinksResourceCustomFieldsNumericSchema
  >

  export const PaymentLinksResourceCustomFieldsTextSchema = z.object({
    /** The maximum character length constraint for the customer's input. */
    maximum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The maximum character length constraint for the customer's input."
      )
      .optional(),
    /** The minimum character length requirement for the customer's input. */
    minimum_length: z
      .number()
      .int()
      .nullable()
      .describe(
        "The minimum character length requirement for the customer's input."
      )
      .optional()
  })
  export type PaymentLinksResourceCustomFieldsText = z.infer<
    typeof PaymentLinksResourceCustomFieldsTextSchema
  >

  export const PaymentLinksResourceCustomTextPositionSchema = z.object({
    /** Text may be up to 1200 characters in length. */
    message: z
      .string()
      .max(500)
      .describe('Text may be up to 1200 characters in length.')
  })
  export type PaymentLinksResourceCustomTextPosition = z.infer<
    typeof PaymentLinksResourceCustomTextPositionSchema
  >

  export const PaymentLinksResourcePaymentIntentDataSchema = z.object({
    /** Indicates when the funds will be captured from the customer's account. */
    capture_method: z
      .enum(['automatic', 'automatic_async', 'manual'])
      .nullable()
      .describe(
        "Indicates when the funds will be captured from the customer's account."
      )
      .optional(),
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An arbitrary string attached to the object. Often useful for displaying to users.'
      )
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link. */
    metadata: z
      .record(z.string().max(500))
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link.'
      ),
    /** Indicates that you intend to make future payments with the payment method collected during checkout. */
    setup_future_usage: z
      .enum(['off_session', 'on_session'])
      .nullable()
      .describe(
        'Indicates that you intend to make future payments with the payment method collected during checkout.'
      )
      .optional(),
    /** For a non-card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. */
    statement_descriptor: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "For a non-card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge."
      )
      .optional(),
    /** For a card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. Concatenated with the account's statement descriptor prefix to form the complete statement descriptor. */
    statement_descriptor_suffix: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "For a card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. Concatenated with the account's statement descriptor prefix to form the complete statement descriptor."
      )
      .optional(),
    /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
    transfer_group: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.'
      )
      .optional()
  })
  export type PaymentLinksResourcePaymentIntentData = z.infer<
    typeof PaymentLinksResourcePaymentIntentDataSchema
  >

  export const PaymentLinksResourcePhoneNumberCollectionSchema = z.object({
    /** If `true`, a phone number will be collected during checkout. */
    enabled: z
      .boolean()
      .describe('If `true`, a phone number will be collected during checkout.')
  })
  export type PaymentLinksResourcePhoneNumberCollection = z.infer<
    typeof PaymentLinksResourcePhoneNumberCollectionSchema
  >

  export const PaymentLinksResourceCompletedSessionsSchema = z.object({
    /** The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met. */
    count: z
      .number()
      .int()
      .describe(
        'The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met.'
      ),
    /** The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met. */
    limit: z
      .number()
      .int()
      .describe(
        'The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met.'
      )
  })
  export type PaymentLinksResourceCompletedSessions = z.infer<
    typeof PaymentLinksResourceCompletedSessionsSchema
  >

  export const PaymentLinksResourceShippingAddressCollectionSchema = z.object({
    /** An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
    allowed_countries: z
      .array(
        z.enum([
          'AC',
          'AD',
          'AE',
          'AF',
          'AG',
          'AI',
          'AL',
          'AM',
          'AO',
          'AQ',
          'AR',
          'AT',
          'AU',
          'AW',
          'AX',
          'AZ',
          'BA',
          'BB',
          'BD',
          'BE',
          'BF',
          'BG',
          'BH',
          'BI',
          'BJ',
          'BL',
          'BM',
          'BN',
          'BO',
          'BQ',
          'BR',
          'BS',
          'BT',
          'BV',
          'BW',
          'BY',
          'BZ',
          'CA',
          'CD',
          'CF',
          'CG',
          'CH',
          'CI',
          'CK',
          'CL',
          'CM',
          'CN',
          'CO',
          'CR',
          'CV',
          'CW',
          'CY',
          'CZ',
          'DE',
          'DJ',
          'DK',
          'DM',
          'DO',
          'DZ',
          'EC',
          'EE',
          'EG',
          'EH',
          'ER',
          'ES',
          'ET',
          'FI',
          'FJ',
          'FK',
          'FO',
          'FR',
          'GA',
          'GB',
          'GD',
          'GE',
          'GF',
          'GG',
          'GH',
          'GI',
          'GL',
          'GM',
          'GN',
          'GP',
          'GQ',
          'GR',
          'GS',
          'GT',
          'GU',
          'GW',
          'GY',
          'HK',
          'HN',
          'HR',
          'HT',
          'HU',
          'ID',
          'IE',
          'IL',
          'IM',
          'IN',
          'IO',
          'IQ',
          'IS',
          'IT',
          'JE',
          'JM',
          'JO',
          'JP',
          'KE',
          'KG',
          'KH',
          'KI',
          'KM',
          'KN',
          'KR',
          'KW',
          'KY',
          'KZ',
          'LA',
          'LB',
          'LC',
          'LI',
          'LK',
          'LR',
          'LS',
          'LT',
          'LU',
          'LV',
          'LY',
          'MA',
          'MC',
          'MD',
          'ME',
          'MF',
          'MG',
          'MK',
          'ML',
          'MM',
          'MN',
          'MO',
          'MQ',
          'MR',
          'MS',
          'MT',
          'MU',
          'MV',
          'MW',
          'MX',
          'MY',
          'MZ',
          'NA',
          'NC',
          'NE',
          'NG',
          'NI',
          'NL',
          'NO',
          'NP',
          'NR',
          'NU',
          'NZ',
          'OM',
          'PA',
          'PE',
          'PF',
          'PG',
          'PH',
          'PK',
          'PL',
          'PM',
          'PN',
          'PR',
          'PS',
          'PT',
          'PY',
          'QA',
          'RE',
          'RO',
          'RS',
          'RU',
          'RW',
          'SA',
          'SB',
          'SC',
          'SD',
          'SE',
          'SG',
          'SH',
          'SI',
          'SJ',
          'SK',
          'SL',
          'SM',
          'SN',
          'SO',
          'SR',
          'SS',
          'ST',
          'SV',
          'SX',
          'SZ',
          'TA',
          'TC',
          'TD',
          'TF',
          'TG',
          'TH',
          'TJ',
          'TK',
          'TL',
          'TM',
          'TN',
          'TO',
          'TR',
          'TT',
          'TV',
          'TW',
          'TZ',
          'UA',
          'UG',
          'US',
          'UY',
          'UZ',
          'VA',
          'VC',
          'VE',
          'VG',
          'VN',
          'VU',
          'WF',
          'WS',
          'XK',
          'YE',
          'YT',
          'ZA',
          'ZM',
          'ZW',
          'ZZ'
        ])
      )
      .describe(
        'An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.'
      )
  })
  export type PaymentLinksResourceShippingAddressCollection = z.infer<
    typeof PaymentLinksResourceShippingAddressCollectionSchema
  >

  export const PaymentLinksResourceTaxIdCollectionSchema = z.object({
    /** Indicates whether tax ID collection is enabled for the session. */
    enabled: z
      .boolean()
      .describe(
        'Indicates whether tax ID collection is enabled for the session.'
      ),
    required: z.enum(['if_supported', 'never'])
  })
  export type PaymentLinksResourceTaxIdCollection = z.infer<
    typeof PaymentLinksResourceTaxIdCollectionSchema
  >

  export const CheckoutAcssDebitMandateOptionsSchema = z.object({
    /** A URL for custom mandate text */
    custom_mandate_url: z
      .string()
      .max(5000)
      .describe('A URL for custom mandate text')
      .optional(),
    /** List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode. */
    default_for: z
      .array(z.enum(['invoice', 'subscription']))
      .describe(
        'List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.'
      )
      .optional(),
    /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
    interval_description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."
      )
      .optional(),
    /** Payment schedule for the mandate. */
    payment_schedule: z
      .enum(['combined', 'interval', 'sporadic'])
      .nullable()
      .describe('Payment schedule for the mandate.')
      .optional(),
    /** Transaction type of the mandate. */
    transaction_type: z
      .enum(['business', 'personal'])
      .nullable()
      .describe('Transaction type of the mandate.')
      .optional()
  })
  export type CheckoutAcssDebitMandateOptions = z.infer<
    typeof CheckoutAcssDebitMandateOptionsSchema
  >

  export const CheckoutAffirmPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutAffirmPaymentMethodOptions = z.infer<
    typeof CheckoutAffirmPaymentMethodOptionsSchema
  >

  export const CheckoutAfterpayClearpayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutAfterpayClearpayPaymentMethodOptions = z.infer<
    typeof CheckoutAfterpayClearpayPaymentMethodOptionsSchema
  >

  export const CheckoutAlipayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutAlipayPaymentMethodOptions = z.infer<
    typeof CheckoutAlipayPaymentMethodOptionsSchema
  >

  export const CheckoutAmazonPayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutAmazonPayPaymentMethodOptions = z.infer<
    typeof CheckoutAmazonPayPaymentMethodOptionsSchema
  >

  export const CheckoutAuBecsDebitPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type CheckoutAuBecsDebitPaymentMethodOptions = z.infer<
    typeof CheckoutAuBecsDebitPaymentMethodOptionsSchema
  >

  export const CheckoutPaymentMethodOptionsMandateOptionsBacsDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'."
        )
        .optional()
    })
  export type CheckoutPaymentMethodOptionsMandateOptionsBacsDebit = z.infer<
    typeof CheckoutPaymentMethodOptionsMandateOptionsBacsDebitSchema
  >

  export const CheckoutBancontactPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutBancontactPaymentMethodOptions = z.infer<
    typeof CheckoutBancontactPaymentMethodOptionsSchema
  >

  export const CheckoutBoletoPaymentMethodOptionsSchema = z.object({
    /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
    expires_after_days: z
      .number()
      .int()
      .describe(
        'The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.'
      ),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutBoletoPaymentMethodOptions = z.infer<
    typeof CheckoutBoletoPaymentMethodOptionsSchema
  >

  export const CheckoutCardInstallmentsOptionsSchema = z.object({
    /** Indicates if installments are enabled */
    enabled: z
      .boolean()
      .describe('Indicates if installments are enabled')
      .optional()
  })
  export type CheckoutCardInstallmentsOptions = z.infer<
    typeof CheckoutCardInstallmentsOptionsSchema
  >

  export const PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictionsSchema =
    z.object({
      /** Specify the card brands to block in the Checkout Session. If a customer enters or selects a card belonging to a blocked brand, they can't complete the Session. */
      brands_blocked: z
        .array(
          z.enum([
            'american_express',
            'discover_global_network',
            'mastercard',
            'visa'
          ])
        )
        .describe(
          "Specify the card brands to block in the Checkout Session. If a customer enters or selects a card belonging to a blocked brand, they can't complete the Session."
        )
        .optional()
    })
  export type PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions =
    z.infer<
      typeof PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictionsSchema
    >

  export const CheckoutCashappPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutCashappPaymentMethodOptions = z.infer<
    typeof CheckoutCashappPaymentMethodOptionsSchema
  >

  export const CheckoutEpsPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutEpsPaymentMethodOptions = z.infer<
    typeof CheckoutEpsPaymentMethodOptionsSchema
  >

  export const CheckoutFpxPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutFpxPaymentMethodOptions = z.infer<
    typeof CheckoutFpxPaymentMethodOptionsSchema
  >

  export const CheckoutGiropayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutGiropayPaymentMethodOptions = z.infer<
    typeof CheckoutGiropayPaymentMethodOptionsSchema
  >

  export const CheckoutGrabPayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutGrabPayPaymentMethodOptions = z.infer<
    typeof CheckoutGrabPayPaymentMethodOptionsSchema
  >

  export const CheckoutIdealPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutIdealPaymentMethodOptions = z.infer<
    typeof CheckoutIdealPaymentMethodOptionsSchema
  >

  export const CheckoutKakaoPayPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutKakaoPayPaymentMethodOptions = z.infer<
    typeof CheckoutKakaoPayPaymentMethodOptionsSchema
  >

  export const CheckoutKlarnaPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutKlarnaPaymentMethodOptions = z.infer<
    typeof CheckoutKlarnaPaymentMethodOptionsSchema
  >

  export const CheckoutKonbiniPaymentMethodOptionsSchema = z.object({
    /** The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. */
    expires_after_days: z
      .number()
      .int()
      .nullable()
      .describe(
        'The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutKonbiniPaymentMethodOptions = z.infer<
    typeof CheckoutKonbiniPaymentMethodOptionsSchema
  >

  export const CheckoutKrCardPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutKrCardPaymentMethodOptions = z.infer<
    typeof CheckoutKrCardPaymentMethodOptionsSchema
  >

  export const CheckoutLinkPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutLinkPaymentMethodOptions = z.infer<
    typeof CheckoutLinkPaymentMethodOptionsSchema
  >

  export const CheckoutMobilepayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutMobilepayPaymentMethodOptions = z.infer<
    typeof CheckoutMobilepayPaymentMethodOptionsSchema
  >

  export const CheckoutMultibancoPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutMultibancoPaymentMethodOptions = z.infer<
    typeof CheckoutMultibancoPaymentMethodOptionsSchema
  >

  export const CheckoutNaverPayPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional()
  })
  export type CheckoutNaverPayPaymentMethodOptions = z.infer<
    typeof CheckoutNaverPayPaymentMethodOptionsSchema
  >

  export const CheckoutOxxoPaymentMethodOptionsSchema = z.object({
    /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
    expires_after_days: z
      .number()
      .int()
      .describe(
        'The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.'
      ),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutOxxoPaymentMethodOptions = z.infer<
    typeof CheckoutOxxoPaymentMethodOptionsSchema
  >

  export const CheckoutP24PaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutP24PaymentMethodOptions = z.infer<
    typeof CheckoutP24PaymentMethodOptionsSchema
  >

  export const CheckoutPaycoPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional()
  })
  export type CheckoutPaycoPaymentMethodOptions = z.infer<
    typeof CheckoutPaycoPaymentMethodOptionsSchema
  >

  export const CheckoutPaynowPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutPaynowPaymentMethodOptions = z.infer<
    typeof CheckoutPaynowPaymentMethodOptionsSchema
  >

  export const CheckoutPaypalPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /** Preferred locale of the PayPal checkout page that the customer is redirected to. */
    preferred_locale: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Preferred locale of the PayPal checkout page that the customer is redirected to.'
      )
      .optional(),
    /** A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID."
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutPaypalPaymentMethodOptions = z.infer<
    typeof CheckoutPaypalPaymentMethodOptionsSchema
  >

  export const CheckoutPixPaymentMethodOptionsSchema = z.object({
    /** The number of seconds after which Pix payment will expire. */
    expires_after_seconds: z
      .number()
      .int()
      .nullable()
      .describe('The number of seconds after which Pix payment will expire.')
      .optional()
  })
  export type CheckoutPixPaymentMethodOptions = z.infer<
    typeof CheckoutPixPaymentMethodOptionsSchema
  >

  export const CheckoutRevolutPayPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutRevolutPayPaymentMethodOptions = z.infer<
    typeof CheckoutRevolutPayPaymentMethodOptionsSchema
  >

  export const CheckoutSamsungPayPaymentMethodOptionsSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional()
  })
  export type CheckoutSamsungPayPaymentMethodOptions = z.infer<
    typeof CheckoutSamsungPayPaymentMethodOptionsSchema
  >

  export const CheckoutPaymentMethodOptionsMandateOptionsSepaDebitSchema =
    z.object({
      /** Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'. */
      reference_prefix: z
        .string()
        .max(5000)
        .describe(
          "Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'."
        )
        .optional()
    })
  export type CheckoutPaymentMethodOptionsMandateOptionsSepaDebit = z.infer<
    typeof CheckoutPaymentMethodOptionsMandateOptionsSepaDebitSchema
  >

  export const CheckoutSofortPaymentMethodOptionsSchema = z.object({
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutSofortPaymentMethodOptions = z.infer<
    typeof CheckoutSofortPaymentMethodOptionsSchema
  >

  export const CheckoutSwishPaymentMethodOptionsSchema = z.object({
    /** The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent.'
      )
      .optional()
  })
  export type CheckoutSwishPaymentMethodOptions = z.infer<
    typeof CheckoutSwishPaymentMethodOptionsSchema
  >

  export const PaymentPagesCheckoutSessionPhoneNumberCollectionSchema =
    z.object({
      /** Indicates whether phone number collection is enabled for the session */
      enabled: z
        .boolean()
        .describe(
          'Indicates whether phone number collection is enabled for the session'
        )
    })
  export type PaymentPagesCheckoutSessionPhoneNumberCollection = z.infer<
    typeof PaymentPagesCheckoutSessionPhoneNumberCollectionSchema
  >

  export const PaymentPagesCheckoutSessionSavedPaymentMethodOptionsSchema =
    z.object({
      /** Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout. */
      allow_redisplay_filters: z
        .array(z.enum(['always', 'limited', 'unspecified']))
        .nullable()
        .describe(
          'Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout.'
        )
        .optional(),
      /** Enable customers to choose if they wish to remove their saved payment methods. Disabled by default. */
      payment_method_remove: z
        .enum(['disabled', 'enabled'])
        .nullable()
        .describe(
          'Enable customers to choose if they wish to remove their saved payment methods. Disabled by default.'
        )
        .optional(),
      /** Enable customers to choose if they wish to save their payment method for future use. Disabled by default. */
      payment_method_save: z
        .enum(['disabled', 'enabled'])
        .nullable()
        .describe(
          'Enable customers to choose if they wish to save their payment method for future use. Disabled by default.'
        )
        .optional()
    })
  export type PaymentPagesCheckoutSessionSavedPaymentMethodOptions = z.infer<
    typeof PaymentPagesCheckoutSessionSavedPaymentMethodOptionsSchema
  >

  export const PaymentPagesCheckoutSessionShippingAddressCollectionSchema =
    z.object({
      /**
       * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
       * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SY, UM, VI`.
       */
      allowed_countries: z
        .array(
          z.enum([
            'AC',
            'AD',
            'AE',
            'AF',
            'AG',
            'AI',
            'AL',
            'AM',
            'AO',
            'AQ',
            'AR',
            'AT',
            'AU',
            'AW',
            'AX',
            'AZ',
            'BA',
            'BB',
            'BD',
            'BE',
            'BF',
            'BG',
            'BH',
            'BI',
            'BJ',
            'BL',
            'BM',
            'BN',
            'BO',
            'BQ',
            'BR',
            'BS',
            'BT',
            'BV',
            'BW',
            'BY',
            'BZ',
            'CA',
            'CD',
            'CF',
            'CG',
            'CH',
            'CI',
            'CK',
            'CL',
            'CM',
            'CN',
            'CO',
            'CR',
            'CV',
            'CW',
            'CY',
            'CZ',
            'DE',
            'DJ',
            'DK',
            'DM',
            'DO',
            'DZ',
            'EC',
            'EE',
            'EG',
            'EH',
            'ER',
            'ES',
            'ET',
            'FI',
            'FJ',
            'FK',
            'FO',
            'FR',
            'GA',
            'GB',
            'GD',
            'GE',
            'GF',
            'GG',
            'GH',
            'GI',
            'GL',
            'GM',
            'GN',
            'GP',
            'GQ',
            'GR',
            'GS',
            'GT',
            'GU',
            'GW',
            'GY',
            'HK',
            'HN',
            'HR',
            'HT',
            'HU',
            'ID',
            'IE',
            'IL',
            'IM',
            'IN',
            'IO',
            'IQ',
            'IS',
            'IT',
            'JE',
            'JM',
            'JO',
            'JP',
            'KE',
            'KG',
            'KH',
            'KI',
            'KM',
            'KN',
            'KR',
            'KW',
            'KY',
            'KZ',
            'LA',
            'LB',
            'LC',
            'LI',
            'LK',
            'LR',
            'LS',
            'LT',
            'LU',
            'LV',
            'LY',
            'MA',
            'MC',
            'MD',
            'ME',
            'MF',
            'MG',
            'MK',
            'ML',
            'MM',
            'MN',
            'MO',
            'MQ',
            'MR',
            'MS',
            'MT',
            'MU',
            'MV',
            'MW',
            'MX',
            'MY',
            'MZ',
            'NA',
            'NC',
            'NE',
            'NG',
            'NI',
            'NL',
            'NO',
            'NP',
            'NR',
            'NU',
            'NZ',
            'OM',
            'PA',
            'PE',
            'PF',
            'PG',
            'PH',
            'PK',
            'PL',
            'PM',
            'PN',
            'PR',
            'PS',
            'PT',
            'PY',
            'QA',
            'RE',
            'RO',
            'RS',
            'RU',
            'RW',
            'SA',
            'SB',
            'SC',
            'SD',
            'SE',
            'SG',
            'SH',
            'SI',
            'SJ',
            'SK',
            'SL',
            'SM',
            'SN',
            'SO',
            'SR',
            'SS',
            'ST',
            'SV',
            'SX',
            'SZ',
            'TA',
            'TC',
            'TD',
            'TF',
            'TG',
            'TH',
            'TJ',
            'TK',
            'TL',
            'TM',
            'TN',
            'TO',
            'TR',
            'TT',
            'TV',
            'TW',
            'TZ',
            'UA',
            'UG',
            'US',
            'UY',
            'UZ',
            'VA',
            'VC',
            'VE',
            'VG',
            'VN',
            'VU',
            'WF',
            'WS',
            'XK',
            'YE',
            'YT',
            'ZA',
            'ZM',
            'ZW',
            'ZZ'
          ])
        )
        .describe(
          'An array of two-letter ISO country codes representing which countries Checkout should provide as options for\nshipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SY, UM, VI`.'
        )
    })
  export type PaymentPagesCheckoutSessionShippingAddressCollection = z.infer<
    typeof PaymentPagesCheckoutSessionShippingAddressCollectionSchema
  >

  export const PaymentPagesCheckoutSessionTaxIdCollectionSchema = z.object({
    /** Indicates whether tax ID collection is enabled for the session */
    enabled: z
      .boolean()
      .describe(
        'Indicates whether tax ID collection is enabled for the session'
      ),
    /** Indicates whether a tax ID is required on the payment page */
    required: z
      .enum(['if_supported', 'never'])
      .describe('Indicates whether a tax ID is required on the payment page')
  })
  export type PaymentPagesCheckoutSessionTaxIdCollection = z.infer<
    typeof PaymentPagesCheckoutSessionTaxIdCollectionSchema
  >

  export const ClimateRemovalsBeneficiarySchema = z.object({
    /** Publicly displayable name for the end beneficiary of carbon removal. */
    public_name: z
      .string()
      .max(5000)
      .describe(
        'Publicly displayable name for the end beneficiary of carbon removal.'
      )
  })
  export type ClimateRemovalsBeneficiary = z.infer<
    typeof ClimateRemovalsBeneficiarySchema
  >

  export const ClimateRemovalsLocationSchema = z.object({
    /** The city where the supplier is located. */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('The city where the supplier is located.')
      .optional(),
    /** Two-letter ISO code representing the country where the supplier is located. */
    country: z
      .string()
      .max(5000)
      .describe(
        'Two-letter ISO code representing the country where the supplier is located.'
      ),
    /** The geographic latitude where the supplier is located. */
    latitude: z
      .number()
      .nullable()
      .describe('The geographic latitude where the supplier is located.')
      .optional(),
    /** The geographic longitude where the supplier is located. */
    longitude: z
      .number()
      .nullable()
      .describe('The geographic longitude where the supplier is located.')
      .optional(),
    /** The state/county/province/region where the supplier is located. */
    region: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The state/county/province/region where the supplier is located.'
      )
      .optional()
  })
  export type ClimateRemovalsLocation = z.infer<
    typeof ClimateRemovalsLocationSchema
  >

  export const ClimateRemovalsProductsPriceSchema = z.object({
    /** Fees for one metric ton of carbon removal in the currency's smallest unit. */
    amount_fees: z
      .number()
      .int()
      .describe(
        "Fees for one metric ton of carbon removal in the currency's smallest unit."
      ),
    /** Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit. */
    amount_subtotal: z
      .number()
      .int()
      .describe(
        "Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit."
      ),
    /** Total for one metric ton of carbon removal (including fees) in the currency's smallest unit. */
    amount_total: z
      .number()
      .int()
      .describe(
        "Total for one metric ton of carbon removal (including fees) in the currency's smallest unit."
      )
  })
  export type ClimateRemovalsProductsPrice = z.infer<
    typeof ClimateRemovalsProductsPriceSchema
  >

  /** This hash contains details about the online acceptance. */
  export const ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnlineSchema =
    z
      .object({
        /** The IP address from which the Mandate was accepted by the customer. */
        ip_address: z
          .string()
          .max(5000)
          .nullable()
          .describe(
            'The IP address from which the Mandate was accepted by the customer.'
          )
          .optional(),
        /** The user agent of the browser from which the Mandate was accepted by the customer. */
        user_agent: z
          .string()
          .max(5000)
          .nullable()
          .describe(
            'The user agent of the browser from which the Mandate was accepted by the customer.'
          )
          .optional()
      })
      .describe('This hash contains details about the online acceptance.')
  export type ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline =
    z.infer<
      typeof ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnlineSchema
    >

  /** This hash contains the card payment method options. */
  export const ConfirmationTokensResourcePaymentMethodOptionsResourceCardSchema =
    z
      .object({
        /** The `cvc_update` Token collected from the Payment Element. */
        cvc_token: z
          .string()
          .max(5000)
          .nullable()
          .describe(
            'The `cvc_update` Token collected from the Payment Element.'
          )
          .optional()
      })
      .describe('This hash contains the card payment method options.')
  export type ConfirmationTokensResourcePaymentMethodOptionsResourceCard =
    z.infer<
      typeof ConfirmationTokensResourcePaymentMethodOptionsResourceCardSchema
    >

  export const CountrySpecVerificationFieldDetailsSchema = z.object({
    /** Additional fields which are only required for some users. */
    additional: z
      .array(z.string().max(5000))
      .describe('Additional fields which are only required for some users.'),
    /** Fields which every account must eventually provide. */
    minimum: z
      .array(z.string().max(5000))
      .describe('Fields which every account must eventually provide.')
  })
  export type CountrySpecVerificationFieldDetails = z.infer<
    typeof CountrySpecVerificationFieldDetailsSchema
  >

  /** This hash contains whether the buy button is enabled. */
  export const CustomerSessionResourceComponentsResourceBuyButtonSchema = z
    .object({
      /** Whether the buy button is enabled. */
      enabled: z.boolean().describe('Whether the buy button is enabled.')
    })
    .describe('This hash contains whether the buy button is enabled.')
  export type CustomerSessionResourceComponentsResourceBuyButton = z.infer<
    typeof CustomerSessionResourceComponentsResourceBuyButtonSchema
  >

  /** This hash contains the features the Payment Element supports. */
  export const CustomerSessionResourceComponentsResourcePaymentElementResourceFeaturesSchema =
    z
      .object({
        /**
         * A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.
         *
         * If not specified, defaults to ["always"]. In order to display all saved payment methods, specify ["always", "limited", "unspecified"].
         */
        payment_method_allow_redisplay_filters: z
          .array(z.enum(['always', 'limited', 'unspecified']))
          .describe(
            'A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.\n\nIf not specified, defaults to ["always"]. In order to display all saved payment methods, specify ["always", "limited", "unspecified"].'
          ),
        /** Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`. */
        payment_method_redisplay: z
          .enum(['disabled', 'enabled'])
          .describe(
            'Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`.'
          ),
        /** Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`. */
        payment_method_redisplay_limit: z
          .number()
          .int()
          .nullable()
          .describe(
            'Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`.'
          )
          .optional(),
        /**
         * Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.
         *
         * Allowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).
         */
        payment_method_remove: z
          .enum(['disabled', 'enabled'])
          .describe(
            'Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.\n\nAllowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).'
          ),
        /**
         * Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.
         *
         * If a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`.
         */
        payment_method_save: z
          .enum(['disabled', 'enabled'])
          .describe(
            "Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.\n\nIf a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`."
          ),
        /**
         * When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.
         *
         * When using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.
         */
        payment_method_save_usage: z
          .enum(['off_session', 'on_session'])
          .nullable()
          .describe(
            'When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.\n\nWhen using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.'
          )
          .optional()
      })
      .describe('This hash contains the features the Payment Element supports.')
  export type CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures =
    z.infer<
      typeof CustomerSessionResourceComponentsResourcePaymentElementResourceFeaturesSchema
    >

  /** This hash contains whether the pricing table is enabled. */
  export const CustomerSessionResourceComponentsResourcePricingTableSchema = z
    .object({
      /** Whether the pricing table is enabled. */
      enabled: z.boolean().describe('Whether the pricing table is enabled.')
    })
    .describe('This hash contains whether the pricing table is enabled.')
  export type CustomerSessionResourceComponentsResourcePricingTable = z.infer<
    typeof CustomerSessionResourceComponentsResourcePricingTableSchema
  >

  /**
   * A feature represents a monetizable ability or functionality in your system.
   * Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
   */
  export const EntitlementsFeatureSchema = z
    .object({
      /** Inactive features cannot be attached to new products and will not be returned from the features list endpoint. */
      active: z
        .boolean()
        .describe(
          'Inactive features cannot be attached to new products and will not be returned from the features list endpoint.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A unique key you provide as your own system identifier. This may be up to 80 characters. */
      lookup_key: z
        .string()
        .max(5000)
        .describe(
          'A unique key you provide as your own system identifier. This may be up to 80 characters.'
        ),
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The feature's name, for your own purpose, not meant to be displayable to the customer. */
      name: z
        .string()
        .max(80)
        .describe(
          "The feature's name, for your own purpose, not meant to be displayable to the customer."
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('entitlements.feature')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'A feature represents a monetizable ability or functionality in your system.\nFeatures can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.'
    )
  export type EntitlementsFeature = z.infer<typeof EntitlementsFeatureSchema>

  export const EphemeralKeySchema = z.object({
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: z
      .number()
      .int()
      .describe(
        'Time at which the object was created. Measured in seconds since the Unix epoch.'
      ),
    /** Time at which the key will expire. Measured in seconds since the Unix epoch. */
    expires: z
      .number()
      .int()
      .describe(
        'Time at which the key will expire. Measured in seconds since the Unix epoch.'
      ),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('ephemeral_key')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The key's secret. You can use this value to make authorized requests to the Stripe API. */
    secret: z
      .string()
      .max(5000)
      .describe(
        "The key's secret. You can use this value to make authorized requests to the Stripe API."
      )
      .optional()
  })
  export type EphemeralKey = z.infer<typeof EphemeralKeySchema>

  export const NotificationEventDataSchema = z.object({
    /** Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
    object: z
      .record(z.any())
      .describe(
        'Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.'
      ),
    /** Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements. */
    previous_attributes: z
      .record(z.any())
      .describe(
        'Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.'
      )
      .optional()
  })
  export type NotificationEventData = z.infer<
    typeof NotificationEventDataSchema
  >

  export const NotificationEventRequestSchema = z.object({
    /** ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
    id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API."
      )
      .optional(),
    /** The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
    idempotency_key: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.'
      )
      .optional()
  })
  export type NotificationEventRequest = z.infer<
    typeof NotificationEventRequestSchema
  >

  /**
   * `ExchangeRate` objects allow you to determine the rates that Stripe is currently
   * using to convert from one currency to another. Since this number is variable
   * throughout the day, there are various reasons why you might want to know the current
   * rate (for example, to dynamically price an item for a user with a default
   * payment in a foreign currency).
   *
   * Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.
   *
   * *[Note: this integration path is supported but no longer recommended]* Additionally,
   * you can guarantee that a charge is made with an exchange rate that you expect is
   * current. To do so, you must pass in the exchange_rate to charges endpoints. If the
   * value is no longer up to date, the charge won't go through. Please refer to our
   * [Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.
   *
   * -----
   *
   * &nbsp;
   *
   * *This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*
   *
   * - *localize prices for processing payments on Stripe*
   * - *reconcile Stripe transactions*
   * - *determine how much money to send to a connected account*
   * - *determine app fees to charge a connected account*
   *
   * *Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
   */
  export const ExchangeRateSchema = z
    .object({
      /** Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
      id: z
        .string()
        .max(5000)
        .describe(
          'Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('exchange_rate')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
      rates: z
        .record(z.number())
        .describe(
          'Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.'
        )
    })
    .describe(
      "`ExchangeRate` objects allow you to determine the rates that Stripe is currently\nusing to convert from one currency to another. Since this number is variable\nthroughout the day, there are various reasons why you might want to know the current\nrate (for example, to dynamically price an item for a user with a default\npayment in a foreign currency).\n\nPlease refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.\n\n*[Note: this integration path is supported but no longer recommended]* Additionally,\nyou can guarantee that a charge is made with an exchange rate that you expect is\ncurrent. To do so, you must pass in the exchange_rate to charges endpoints. If the\nvalue is no longer up to date, the charge won't go through. Please refer to our\n[Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.\n\n-----\n\n&nbsp;\n\n*This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*\n\n- *localize prices for processing payments on Stripe*\n- *reconcile Stripe transactions*\n- *determine how much money to send to a connected account*\n- *determine app fees to charge a connected account*\n\n*Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*"
    )
  export type ExchangeRate = z.infer<typeof ExchangeRateSchema>

  export const BankConnectionsResourceBalanceApiResourceCashBalanceSchema =
    z.object({
      /**
       * The funds available to the account holder. Typically this is the current balance after subtracting any outbound pending transactions and adding any inbound pending transactions.
       *
       * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
       *
       * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
       */
      available: z
        .record(z.number().int())
        .nullable()
        .describe(
          'The funds available to the account holder. Typically this is the current balance after subtracting any outbound pending transactions and adding any inbound pending transactions.\n\nEach key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n\nEach value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.'
        )
        .optional()
    })
  export type BankConnectionsResourceBalanceApiResourceCashBalance = z.infer<
    typeof BankConnectionsResourceBalanceApiResourceCashBalanceSchema
  >

  export const BankConnectionsResourceBalanceApiResourceCreditBalanceSchema =
    z.object({
      /**
       * The credit that has been used by the account holder.
       *
       * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
       *
       * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
       */
      used: z
        .record(z.number().int())
        .nullable()
        .describe(
          'The credit that has been used by the account holder.\n\nEach key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n\nEach value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.'
        )
        .optional()
    })
  export type BankConnectionsResourceBalanceApiResourceCreditBalance = z.infer<
    typeof BankConnectionsResourceBalanceApiResourceCreditBalanceSchema
  >

  export const BankConnectionsResourceBalanceRefreshSchema = z.object({
    /** The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch. */
    last_attempted_at: z
      .number()
      .int()
      .describe(
        'The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.'
      ),
    /** Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch. */
    next_refresh_available_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.'
      )
      .optional(),
    /** The status of the last refresh attempt. */
    status: z
      .enum(['failed', 'pending', 'succeeded'])
      .describe('The status of the last refresh attempt.')
  })
  export type BankConnectionsResourceBalanceRefresh = z.infer<
    typeof BankConnectionsResourceBalanceRefreshSchema
  >

  /** Describes an owner of an account. */
  export const FinancialConnectionsAccountOwnerSchema = z
    .object({
      /** The email address of the owner. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe('The email address of the owner.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The full name of the owner. */
      name: z.string().max(5000).describe('The full name of the owner.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('financial_connections.account_owner')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The ownership object that this owner belongs to. */
      ownership: z
        .string()
        .max(5000)
        .describe('The ownership object that this owner belongs to.'),
      /** The raw phone number of the owner. */
      phone: z
        .string()
        .max(5000)
        .nullable()
        .describe('The raw phone number of the owner.')
        .optional(),
      /** The raw physical address of the owner. */
      raw_address: z
        .string()
        .max(5000)
        .nullable()
        .describe('The raw physical address of the owner.')
        .optional(),
      /** The timestamp of the refresh that updated this owner. */
      refreshed_at: z
        .number()
        .int()
        .nullable()
        .describe('The timestamp of the refresh that updated this owner.')
        .optional()
    })
    .describe('Describes an owner of an account.')
  export type FinancialConnectionsAccountOwner = z.infer<
    typeof FinancialConnectionsAccountOwnerSchema
  >

  export const BankConnectionsResourceOwnershipRefreshSchema = z.object({
    /** The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch. */
    last_attempted_at: z
      .number()
      .int()
      .describe(
        'The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.'
      ),
    /** Time at which the next ownership refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch. */
    next_refresh_available_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'Time at which the next ownership refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.'
      )
      .optional(),
    /** The status of the last refresh attempt. */
    status: z
      .enum(['failed', 'pending', 'succeeded'])
      .describe('The status of the last refresh attempt.')
  })
  export type BankConnectionsResourceOwnershipRefresh = z.infer<
    typeof BankConnectionsResourceOwnershipRefreshSchema
  >

  export const BankConnectionsResourceTransactionRefreshSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch. */
    last_attempted_at: z
      .number()
      .int()
      .describe(
        'The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.'
      ),
    /** Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch. */
    next_refresh_available_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.'
      )
      .optional(),
    /** The status of the last refresh attempt. */
    status: z
      .enum(['failed', 'pending', 'succeeded'])
      .describe('The status of the last refresh attempt.')
  })
  export type BankConnectionsResourceTransactionRefresh = z.infer<
    typeof BankConnectionsResourceTransactionRefreshSchema
  >

  export const BankConnectionsResourceLinkAccountSessionFiltersSchema =
    z.object({
      /** Restricts the Session to subcategories of accounts that can be linked. Valid subcategories are: `checking`, `savings`, `mortgage`, `line_of_credit`, `credit_card`. */
      account_subcategories: z
        .array(
          z.enum([
            'checking',
            'credit_card',
            'line_of_credit',
            'mortgage',
            'savings'
          ])
        )
        .nullable()
        .describe(
          'Restricts the Session to subcategories of accounts that can be linked. Valid subcategories are: `checking`, `savings`, `mortgage`, `line_of_credit`, `credit_card`.'
        )
        .optional(),
      /** List of countries from which to filter accounts. */
      countries: z
        .array(z.string().max(5000))
        .nullable()
        .describe('List of countries from which to filter accounts.')
        .optional()
    })
  export type BankConnectionsResourceLinkAccountSessionFilters = z.infer<
    typeof BankConnectionsResourceLinkAccountSessionFiltersSchema
  >

  export const BankConnectionsResourceTransactionResourceStatusTransitionsSchema =
    z.object({
      /** Time at which this transaction posted. Measured in seconds since the Unix epoch. */
      posted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which this transaction posted. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Time at which this transaction was voided. Measured in seconds since the Unix epoch. */
      void_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which this transaction was voided. Measured in seconds since the Unix epoch.'
        )
        .optional()
    })
  export type BankConnectionsResourceTransactionResourceStatusTransitions =
    z.infer<
      typeof BankConnectionsResourceTransactionResourceStatusTransitionsSchema
    >

  /** Metadata about the forwarded request. */
  export const ForwardedRequestContextSchema = z
    .object({
      /** The time it took in milliseconds for the destination endpoint to respond. */
      destination_duration: z
        .number()
        .int()
        .describe(
          'The time it took in milliseconds for the destination endpoint to respond.'
        ),
      /** The IP address of the destination. */
      destination_ip_address: z
        .string()
        .max(5000)
        .describe('The IP address of the destination.')
    })
    .describe('Metadata about the forwarded request.')
  export type ForwardedRequestContext = z.infer<
    typeof ForwardedRequestContextSchema
  >

  /** Header data. */
  export const ForwardedRequestHeaderSchema = z
    .object({
      /** The header name. */
      name: z.string().max(5000).describe('The header name.'),
      /** The header value. */
      value: z.string().max(5000).describe('The header value.')
    })
    .describe('Header data.')
  export type ForwardedRequestHeader = z.infer<
    typeof ForwardedRequestHeaderSchema
  >

  /** Point in Time */
  export const GelatoDataDocumentReportDateOfBirthSchema = z
    .object({
      /** Numerical day between 1 and 31. */
      day: z
        .number()
        .int()
        .nullable()
        .describe('Numerical day between 1 and 31.')
        .optional(),
      /** Numerical month between 1 and 12. */
      month: z
        .number()
        .int()
        .nullable()
        .describe('Numerical month between 1 and 12.')
        .optional(),
      /** The four-digit year. */
      year: z
        .number()
        .int()
        .nullable()
        .describe('The four-digit year.')
        .optional()
    })
    .describe('Point in Time')
  export type GelatoDataDocumentReportDateOfBirth = z.infer<
    typeof GelatoDataDocumentReportDateOfBirthSchema
  >

  export const GelatoDocumentReportErrorSchema = z.object({
    /** A short machine-readable string giving the reason for the verification failure. */
    code: z
      .enum([
        'document_expired',
        'document_type_not_supported',
        'document_unverified_other'
      ])
      .nullable()
      .describe(
        'A short machine-readable string giving the reason for the verification failure.'
      )
      .optional(),
    /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable message giving the reason for the failure. These messages can be shown to your users.'
      )
      .optional()
  })
  export type GelatoDocumentReportError = z.infer<
    typeof GelatoDocumentReportErrorSchema
  >

  /** Point in Time */
  export const GelatoDataDocumentReportExpirationDateSchema = z
    .object({
      /** Numerical day between 1 and 31. */
      day: z
        .number()
        .int()
        .nullable()
        .describe('Numerical day between 1 and 31.')
        .optional(),
      /** Numerical month between 1 and 12. */
      month: z
        .number()
        .int()
        .nullable()
        .describe('Numerical month between 1 and 12.')
        .optional(),
      /** The four-digit year. */
      year: z
        .number()
        .int()
        .nullable()
        .describe('The four-digit year.')
        .optional()
    })
    .describe('Point in Time')
  export type GelatoDataDocumentReportExpirationDate = z.infer<
    typeof GelatoDataDocumentReportExpirationDateSchema
  >

  /** Point in Time */
  export const GelatoDataDocumentReportIssuedDateSchema = z
    .object({
      /** Numerical day between 1 and 31. */
      day: z
        .number()
        .int()
        .nullable()
        .describe('Numerical day between 1 and 31.')
        .optional(),
      /** Numerical month between 1 and 12. */
      month: z
        .number()
        .int()
        .nullable()
        .describe('Numerical month between 1 and 12.')
        .optional(),
      /** The four-digit year. */
      year: z
        .number()
        .int()
        .nullable()
        .describe('The four-digit year.')
        .optional()
    })
    .describe('Point in Time')
  export type GelatoDataDocumentReportIssuedDate = z.infer<
    typeof GelatoDataDocumentReportIssuedDateSchema
  >

  export const GelatoEmailReportErrorSchema = z.object({
    /** A short machine-readable string giving the reason for the verification failure. */
    code: z
      .enum(['email_unverified_other', 'email_verification_declined'])
      .nullable()
      .describe(
        'A short machine-readable string giving the reason for the verification failure.'
      )
      .optional(),
    /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable message giving the reason for the failure. These messages can be shown to your users.'
      )
      .optional()
  })
  export type GelatoEmailReportError = z.infer<
    typeof GelatoEmailReportErrorSchema
  >

  /** Point in Time */
  export const GelatoDataIdNumberReportDateSchema = z
    .object({
      /** Numerical day between 1 and 31. */
      day: z
        .number()
        .int()
        .nullable()
        .describe('Numerical day between 1 and 31.')
        .optional(),
      /** Numerical month between 1 and 12. */
      month: z
        .number()
        .int()
        .nullable()
        .describe('Numerical month between 1 and 12.')
        .optional(),
      /** The four-digit year. */
      year: z
        .number()
        .int()
        .nullable()
        .describe('The four-digit year.')
        .optional()
    })
    .describe('Point in Time')
  export type GelatoDataIdNumberReportDate = z.infer<
    typeof GelatoDataIdNumberReportDateSchema
  >

  export const GelatoIdNumberReportErrorSchema = z.object({
    /** A short machine-readable string giving the reason for the verification failure. */
    code: z
      .enum([
        'id_number_insufficient_document_data',
        'id_number_mismatch',
        'id_number_unverified_other'
      ])
      .nullable()
      .describe(
        'A short machine-readable string giving the reason for the verification failure.'
      )
      .optional(),
    /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable message giving the reason for the failure. These messages can be shown to your users.'
      )
      .optional()
  })
  export type GelatoIdNumberReportError = z.infer<
    typeof GelatoIdNumberReportErrorSchema
  >

  export const GelatoReportDocumentOptionsSchema = z.object({
    /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
    allowed_types: z
      .array(z.enum(['driving_license', 'id_card', 'passport']))
      .describe(
        'Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.'
      )
      .optional(),
    /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
    require_id_number: z
      .boolean()
      .describe(
        'Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.'
      )
      .optional(),
    /** Disable image uploads, identity document images have to be captured using the device’s camera. */
    require_live_capture: z
      .boolean()
      .describe(
        'Disable image uploads, identity document images have to be captured using the device’s camera.'
      )
      .optional(),
    /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
    require_matching_selfie: z
      .boolean()
      .describe(
        'Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).'
      )
      .optional()
  })
  export type GelatoReportDocumentOptions = z.infer<
    typeof GelatoReportDocumentOptionsSchema
  >

  export const GelatoReportIdNumberOptionsSchema = z.object({})
  export type GelatoReportIdNumberOptions = z.infer<
    typeof GelatoReportIdNumberOptionsSchema
  >

  export const GelatoPhoneReportErrorSchema = z.object({
    /** A short machine-readable string giving the reason for the verification failure. */
    code: z
      .enum(['phone_unverified_other', 'phone_verification_declined'])
      .nullable()
      .describe(
        'A short machine-readable string giving the reason for the verification failure.'
      )
      .optional(),
    /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable message giving the reason for the failure. These messages can be shown to your users.'
      )
      .optional()
  })
  export type GelatoPhoneReportError = z.infer<
    typeof GelatoPhoneReportErrorSchema
  >

  export const GelatoSelfieReportErrorSchema = z.object({
    /** A short machine-readable string giving the reason for the verification failure. */
    code: z
      .enum([
        'selfie_document_missing_photo',
        'selfie_face_mismatch',
        'selfie_manipulated',
        'selfie_unverified_other'
      ])
      .nullable()
      .describe(
        'A short machine-readable string giving the reason for the verification failure.'
      )
      .optional(),
    /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable message giving the reason for the failure. These messages can be shown to your users.'
      )
      .optional()
  })
  export type GelatoSelfieReportError = z.infer<
    typeof GelatoSelfieReportErrorSchema
  >

  /** Shows last VerificationSession error */
  export const GelatoSessionLastErrorSchema = z
    .object({
      /** A short machine-readable string giving the reason for the verification or user-session failure. */
      code: z
        .enum([
          'abandoned',
          'consent_declined',
          'country_not_supported',
          'device_not_supported',
          'document_expired',
          'document_type_not_supported',
          'document_unverified_other',
          'email_unverified_other',
          'email_verification_declined',
          'id_number_insufficient_document_data',
          'id_number_mismatch',
          'id_number_unverified_other',
          'phone_unverified_other',
          'phone_verification_declined',
          'selfie_document_missing_photo',
          'selfie_face_mismatch',
          'selfie_manipulated',
          'selfie_unverified_other',
          'under_supported_age'
        ])
        .nullable()
        .describe(
          'A short machine-readable string giving the reason for the verification or user-session failure.'
        )
        .optional(),
      /** A message that explains the reason for verification or user-session failure. */
      reason: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A message that explains the reason for verification or user-session failure.'
        )
        .optional()
    })
    .describe('Shows last VerificationSession error')
  export type GelatoSessionLastError = z.infer<
    typeof GelatoSessionLastErrorSchema
  >

  export const GelatoSessionDocumentOptionsSchema = z.object({
    /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
    allowed_types: z
      .array(z.enum(['driving_license', 'id_card', 'passport']))
      .describe(
        'Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.'
      )
      .optional(),
    /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
    require_id_number: z
      .boolean()
      .describe(
        'Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.'
      )
      .optional(),
    /** Disable image uploads, identity document images have to be captured using the device’s camera. */
    require_live_capture: z
      .boolean()
      .describe(
        'Disable image uploads, identity document images have to be captured using the device’s camera.'
      )
      .optional(),
    /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
    require_matching_selfie: z
      .boolean()
      .describe(
        'Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).'
      )
      .optional()
  })
  export type GelatoSessionDocumentOptions = z.infer<
    typeof GelatoSessionDocumentOptionsSchema
  >

  export const GelatoSessionEmailOptionsSchema = z.object({
    /** Request one time password verification of `provided_details.email`. */
    require_verification: z
      .boolean()
      .describe(
        'Request one time password verification of `provided_details.email`.'
      )
      .optional()
  })
  export type GelatoSessionEmailOptions = z.infer<
    typeof GelatoSessionEmailOptionsSchema
  >

  export const GelatoSessionIdNumberOptionsSchema = z.object({})
  export type GelatoSessionIdNumberOptions = z.infer<
    typeof GelatoSessionIdNumberOptionsSchema
  >

  export const GelatoSessionPhoneOptionsSchema = z.object({
    /** Request one time password verification of `provided_details.phone`. */
    require_verification: z
      .boolean()
      .describe(
        'Request one time password verification of `provided_details.phone`.'
      )
      .optional()
  })
  export type GelatoSessionPhoneOptions = z.infer<
    typeof GelatoSessionPhoneOptionsSchema
  >

  export const GelatoProvidedDetailsSchema = z.object({
    /** Email of user being verified */
    email: z
      .string()
      .max(5000)
      .describe('Email of user being verified')
      .optional(),
    /** Phone number of user being verified */
    phone: z
      .string()
      .max(5000)
      .describe('Phone number of user being verified')
      .optional()
  })
  export type GelatoProvidedDetails = z.infer<
    typeof GelatoProvidedDetailsSchema
  >

  export const VerificationSessionRedactionSchema = z.object({
    /** Indicates whether this object and its related objects have been redacted or not. */
    status: z
      .enum(['processing', 'redacted'])
      .describe(
        'Indicates whether this object and its related objects have been redacted or not.'
      )
  })
  export type VerificationSessionRedaction = z.infer<
    typeof VerificationSessionRedactionSchema
  >

  /** Point in Time */
  export const GelatoDataVerifiedOutputsDateSchema = z
    .object({
      /** Numerical day between 1 and 31. */
      day: z
        .number()
        .int()
        .nullable()
        .describe('Numerical day between 1 and 31.')
        .optional(),
      /** Numerical month between 1 and 12. */
      month: z
        .number()
        .int()
        .nullable()
        .describe('Numerical month between 1 and 12.')
        .optional(),
      /** The four-digit year. */
      year: z
        .number()
        .int()
        .nullable()
        .describe('The four-digit year.')
        .optional()
    })
    .describe('Point in Time')
  export type GelatoDataVerifiedOutputsDate = z.infer<
    typeof GelatoDataVerifiedOutputsDateSchema
  >

  /**
   * Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
   * can be created from within the Dashboard, and they can be used over the API when creating invoices.
   */
  export const InvoiceRenderingTemplateSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** A brief description of the template, hidden from customers */
      nickname: z
        .string()
        .max(5000)
        .nullable()
        .describe('A brief description of the template, hidden from customers')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('invoice_rendering_template')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The status of the template, one of `active` or `archived`. */
      status: z
        .enum(['active', 'archived'])
        .describe('The status of the template, one of `active` or `archived`.'),
      /** Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering */
      version: z
        .number()
        .int()
        .describe(
          'Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering'
        )
    })
    .describe(
      'Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates\ncan be created from within the Dashboard, and they can be used over the API when creating invoices.'
    )
  export type InvoiceRenderingTemplate = z.infer<
    typeof InvoiceRenderingTemplateSchema
  >

  export const DeletedInvoiceitemSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('invoiceitem')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedInvoiceitem = z.infer<typeof DeletedInvoiceitemSchema>

  /** When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object. */
  export const IssuingSettlementSchema = z
    .object({
      /** The Bank Identification Number reflecting this settlement record. */
      bin: z
        .string()
        .max(5000)
        .describe(
          'The Bank Identification Number reflecting this settlement record.'
        ),
      /** The date that the transactions are cleared and posted to user's accounts. */
      clearing_date: z
        .number()
        .int()
        .describe(
          "The date that the transactions are cleared and posted to user's accounts."
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The total interchange received as reimbursement for the transactions. */
      interchange_fees: z
        .number()
        .int()
        .describe(
          'The total interchange received as reimbursement for the transactions.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The total net amount required to settle with the network. */
      net_total: z
        .number()
        .int()
        .describe('The total net amount required to settle with the network.'),
      /** The card network for this settlement report. One of ["visa", "maestro"] */
      network: z
        .enum(['maestro', 'visa'])
        .describe(
          'The card network for this settlement report. One of ["visa", "maestro"]'
        ),
      /** The total amount of fees owed to the network. */
      network_fees: z
        .number()
        .int()
        .describe('The total amount of fees owed to the network.'),
      /** The Settlement Identification Number assigned by the network. */
      network_settlement_identifier: z
        .string()
        .max(5000)
        .describe(
          'The Settlement Identification Number assigned by the network.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.settlement')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** One of `international` or `uk_national_net`. */
      settlement_service: z
        .string()
        .max(5000)
        .describe('One of `international` or `uk_national_net`.'),
      /** The current processing status of this settlement. */
      status: z
        .enum(['complete', 'pending'])
        .describe('The current processing status of this settlement.'),
      /** The total number of transactions reflected in this settlement. */
      transaction_count: z
        .number()
        .int()
        .describe(
          'The total number of transactions reflected in this settlement.'
        ),
      /** The total transaction amount reflected in this settlement. */
      transaction_volume: z
        .number()
        .int()
        .describe('The total transaction amount reflected in this settlement.')
    })
    .describe(
      'When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.'
    )
  export type IssuingSettlement = z.infer<typeof IssuingSettlementSchema>

  export const PaymentMethodConfigResourceDisplayPreferenceSchema = z.object({
    /** For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used. */
    overridable: z
      .boolean()
      .nullable()
      .describe(
        "For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used."
      )
      .optional(),
    /** The account's display preference. */
    preference: z
      .enum(['none', 'off', 'on'])
      .describe("The account's display preference."),
    /** The effective display preference value. */
    value: z
      .enum(['off', 'on'])
      .describe('The effective display preference value.')
  })
  export type PaymentMethodConfigResourceDisplayPreference = z.infer<
    typeof PaymentMethodConfigResourceDisplayPreferenceSchema
  >

  /** Contains additional details about the status of a payment method for a specific payment method domain. */
  export const PaymentMethodDomainResourcePaymentMethodStatusDetailsSchema = z
    .object({
      /** The error message associated with the status of the payment method on the domain. */
      error_message: z
        .string()
        .max(5000)
        .describe(
          'The error message associated with the status of the payment method on the domain.'
        )
    })
    .describe(
      'Contains additional details about the status of a payment method for a specific payment method domain.'
    )
  export type PaymentMethodDomainResourcePaymentMethodStatusDetails = z.infer<
    typeof PaymentMethodDomainResourcePaymentMethodStatusDetailsSchema
  >

  export const PlanTierSchema = z.object({
    /** Price for the entire tier. */
    flat_amount: z
      .number()
      .int()
      .nullable()
      .describe('Price for the entire tier.')
      .optional(),
    /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
    flat_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.'
      )
      .optional(),
    /** Per unit price for units relevant to the tier. */
    unit_amount: z
      .number()
      .int()
      .nullable()
      .describe('Per unit price for units relevant to the tier.')
      .optional(),
    /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
    unit_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.'
      )
      .optional(),
    /** Up to and including to this quantity will be contained in the tier. */
    up_to: z
      .number()
      .int()
      .nullable()
      .describe(
        'Up to and including to this quantity will be contained in the tier.'
      )
      .optional()
  })
  export type PlanTier = z.infer<typeof PlanTierSchema>

  export const TransformUsageSchema = z.object({
    /** Divide usage by this number. */
    divide_by: z.number().int().describe('Divide usage by this number.'),
    /** After division, either round the result `up` or `down`. */
    round: z
      .enum(['down', 'up'])
      .describe('After division, either round the result `up` or `down`.')
  })
  export type TransformUsage = z.infer<typeof TransformUsageSchema>

  export const DeletedPlanSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('plan')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedPlan = z.infer<typeof DeletedPlanSchema>

  export const DeletedProductFeatureSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('product_feature')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedProductFeature = z.infer<
    typeof DeletedProductFeatureSchema
  >

  /**
   * Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
   *
   * Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
   */
  export const RadarValueListItemSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The name or email address of the user who added this item to the value list. */
      created_by: z
        .string()
        .max(5000)
        .describe(
          'The name or email address of the user who added this item to the value list.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('radar.value_list_item')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The value of the item. */
      value: z.string().max(5000).describe('The value of the item.'),
      /** The identifier of the value list this item belongs to. */
      value_list: z
        .string()
        .max(5000)
        .describe('The identifier of the value list this item belongs to.')
    })
    .describe(
      'Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.\n\nRelated guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)'
    )
  export type RadarValueListItem = z.infer<typeof RadarValueListItemSchema>

  export const DeletedRadarValueListItemSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('radar.value_list_item')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedRadarValueListItem = z.infer<
    typeof DeletedRadarValueListItemSchema
  >

  export const DeletedRadarValueListSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('radar.value_list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedRadarValueList = z.infer<
    typeof DeletedRadarValueListSchema
  >

  export const FinancialReportingFinanceReportRunRunParametersSchema = z.object(
    {
      /** The set of output columns requested for inclusion in the report run. */
      columns: z
        .array(z.string().max(5000))
        .describe(
          'The set of output columns requested for inclusion in the report run.'
        )
        .optional(),
      /** Connected account ID by which to filter the report run. */
      connected_account: z
        .string()
        .max(5000)
        .describe('Connected account ID by which to filter the report run.')
        .optional(),
      /** Currency of objects to be included in the report run. */
      currency: z
        .string()
        .describe('Currency of objects to be included in the report run.')
        .optional(),
      /** Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value. */
      interval_end: z
        .number()
        .int()
        .describe(
          "Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value."
        )
        .optional(),
      /** Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value. */
      interval_start: z
        .number()
        .int()
        .describe(
          "Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value."
        )
        .optional(),
      /** Payout ID by which to filter the report run. */
      payout: z
        .string()
        .max(5000)
        .describe('Payout ID by which to filter the report run.')
        .optional(),
      /** Category of balance transactions to be included in the report run. */
      reporting_category: z
        .string()
        .max(5000)
        .describe(
          'Category of balance transactions to be included in the report run.'
        )
        .optional(),
      /** Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
      timezone: z
        .string()
        .max(5000)
        .describe(
          'Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.'
        )
        .optional()
    }
  )
  export type FinancialReportingFinanceReportRunRunParameters = z.infer<
    typeof FinancialReportingFinanceReportRunRunParametersSchema
  >

  /**
   * The Report Type resource corresponds to a particular type of report, such as
   * the "Activity summary" or "Itemized payouts" reports. These objects are
   * identified by an ID belonging to a set of enumerated values. See
   * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
   * for those Report Type IDs, along with required and optional parameters.
   *
   * Note that certain report types can only be run based on your live-mode data (not test-mode
   * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
   */
  export const ReportingReportTypeSchema = z
    .object({
      /** Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch. */
      data_available_end: z
        .number()
        .int()
        .describe(
          'Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.'
        ),
      /** Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch. */
      data_available_start: z
        .number()
        .int()
        .describe(
          'Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.'
        ),
      /** List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
      default_columns: z
        .array(z.string().max(5000))
        .nullable()
        .describe(
          "List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)"
        )
        .optional(),
      /** The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
      id: z
        .string()
        .max(5000)
        .describe(
          'The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Human-readable name of the Report Type */
      name: z
        .string()
        .max(5000)
        .describe('Human-readable name of the Report Type'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('reporting.report_type')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** When this Report Type was latest updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'When this Report Type was latest updated. Measured in seconds since the Unix epoch.'
        ),
      /** Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
      version: z
        .number()
        .int()
        .describe(
          'Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.'
        )
    })
    .describe(
      'The Report Type resource corresponds to a particular type of report, such as\nthe "Activity summary" or "Itemized payouts" reports. These objects are\nidentified by an ID belonging to a set of enumerated values. See\n[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)\nfor those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode\ndata), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).'
    )
  export type ReportingReportType = z.infer<typeof ReportingReportTypeSchema>

  export const SigmaScheduledQueryRunErrorSchema = z.object({
    /** Information about the run failure. */
    message: z.string().max(5000).describe('Information about the run failure.')
  })
  export type SigmaScheduledQueryRunError = z.infer<
    typeof SigmaScheduledQueryRunErrorSchema
  >

  export const SourceMandateNotificationAcssDebitDataSchema = z.object({
    /** The statement descriptor associate with the debit. */
    statement_descriptor: z
      .string()
      .max(5000)
      .describe('The statement descriptor associate with the debit.')
      .optional()
  })
  export type SourceMandateNotificationAcssDebitData = z.infer<
    typeof SourceMandateNotificationAcssDebitDataSchema
  >

  export const SourceMandateNotificationBacsDebitDataSchema = z.object({
    /** Last 4 digits of the account number associated with the debit. */
    last4: z
      .string()
      .max(5000)
      .describe(
        'Last 4 digits of the account number associated with the debit.'
      )
      .optional()
  })
  export type SourceMandateNotificationBacsDebitData = z.infer<
    typeof SourceMandateNotificationBacsDebitDataSchema
  >

  export const SourceMandateNotificationSepaDebitDataSchema = z.object({
    /** SEPA creditor ID. */
    creditor_identifier: z
      .string()
      .max(5000)
      .describe('SEPA creditor ID.')
      .optional(),
    /** Last 4 digits of the account number associated with the debit. */
    last4: z
      .string()
      .max(5000)
      .describe(
        'Last 4 digits of the account number associated with the debit.'
      )
      .optional(),
    /** Mandate reference associated with the debit. */
    mandate_reference: z
      .string()
      .max(5000)
      .describe('Mandate reference associated with the debit.')
      .optional()
  })
  export type SourceMandateNotificationSepaDebitData = z.infer<
    typeof SourceMandateNotificationSepaDebitDataSchema
  >

  export const SourceTransactionAchCreditTransferDataSchema = z.object({
    /** Customer data associated with the transfer. */
    customer_data: z
      .string()
      .max(5000)
      .describe('Customer data associated with the transfer.')
      .optional(),
    /** Bank account fingerprint associated with the transfer. */
    fingerprint: z
      .string()
      .max(5000)
      .describe('Bank account fingerprint associated with the transfer.')
      .optional(),
    /** Last 4 digits of the account number associated with the transfer. */
    last4: z
      .string()
      .max(5000)
      .describe(
        'Last 4 digits of the account number associated with the transfer.'
      )
      .optional(),
    /** Routing number associated with the transfer. */
    routing_number: z
      .string()
      .max(5000)
      .describe('Routing number associated with the transfer.')
      .optional()
  })
  export type SourceTransactionAchCreditTransferData = z.infer<
    typeof SourceTransactionAchCreditTransferDataSchema
  >

  export const SourceTransactionChfCreditTransferDataSchema = z.object({
    /** Reference associated with the transfer. */
    reference: z
      .string()
      .max(5000)
      .describe('Reference associated with the transfer.')
      .optional(),
    /** Sender's country address. */
    sender_address_country: z
      .string()
      .max(5000)
      .describe("Sender's country address.")
      .optional(),
    /** Sender's line 1 address. */
    sender_address_line1: z
      .string()
      .max(5000)
      .describe("Sender's line 1 address.")
      .optional(),
    /** Sender's bank account IBAN. */
    sender_iban: z
      .string()
      .max(5000)
      .describe("Sender's bank account IBAN.")
      .optional(),
    /** Sender's name. */
    sender_name: z.string().max(5000).describe("Sender's name.").optional()
  })
  export type SourceTransactionChfCreditTransferData = z.infer<
    typeof SourceTransactionChfCreditTransferDataSchema
  >

  export const SourceTransactionGbpCreditTransferDataSchema = z.object({
    /** Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
    fingerprint: z
      .string()
      .max(5000)
      .describe(
        'Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.'
      )
      .optional(),
    /** The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
    funding_method: z
      .string()
      .max(5000)
      .describe(
        'The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.'
      )
      .optional(),
    /** Last 4 digits of sender account number associated with the transfer. */
    last4: z
      .string()
      .max(5000)
      .describe(
        'Last 4 digits of sender account number associated with the transfer.'
      )
      .optional(),
    /** Sender entered arbitrary information about the transfer. */
    reference: z
      .string()
      .max(5000)
      .describe('Sender entered arbitrary information about the transfer.')
      .optional(),
    /** Sender account number associated with the transfer. */
    sender_account_number: z
      .string()
      .max(5000)
      .describe('Sender account number associated with the transfer.')
      .optional(),
    /** Sender name associated with the transfer. */
    sender_name: z
      .string()
      .max(5000)
      .describe('Sender name associated with the transfer.')
      .optional(),
    /** Sender sort code associated with the transfer. */
    sender_sort_code: z
      .string()
      .max(5000)
      .describe('Sender sort code associated with the transfer.')
      .optional()
  })
  export type SourceTransactionGbpCreditTransferData = z.infer<
    typeof SourceTransactionGbpCreditTransferDataSchema
  >

  export const SourceTransactionPaperCheckDataSchema = z.object({
    /** Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
    available_at: z
      .string()
      .max(5000)
      .describe(
        'Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.'
      )
      .optional(),
    /** Comma-separated list of invoice IDs associated with the paper check. */
    invoices: z
      .string()
      .max(5000)
      .describe(
        'Comma-separated list of invoice IDs associated with the paper check.'
      )
      .optional()
  })
  export type SourceTransactionPaperCheckData = z.infer<
    typeof SourceTransactionPaperCheckDataSchema
  >

  export const SourceTransactionSepaCreditTransferDataSchema = z.object({
    /** Reference associated with the transfer. */
    reference: z
      .string()
      .max(5000)
      .describe('Reference associated with the transfer.')
      .optional(),
    /** Sender's bank account IBAN. */
    sender_iban: z
      .string()
      .max(5000)
      .describe("Sender's bank account IBAN.")
      .optional(),
    /** Sender's name. */
    sender_name: z.string().max(5000).describe("Sender's name.").optional()
  })
  export type SourceTransactionSepaCreditTransferData = z.infer<
    typeof SourceTransactionSepaCreditTransferDataSchema
  >

  export const DeletedSubscriptionItemSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('subscription_item')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedSubscriptionItem = z.infer<
    typeof DeletedSubscriptionItemSchema
  >

  export const PeriodSchema = z.object({
    /** The end date of this usage period. All usage up to and including this point in time is included. */
    end: z
      .number()
      .int()
      .nullable()
      .describe(
        'The end date of this usage period. All usage up to and including this point in time is included.'
      )
      .optional(),
    /** The start date of this usage period. All usage after this point in time is included. */
    start: z
      .number()
      .int()
      .nullable()
      .describe(
        'The start date of this usage period. All usage after this point in time is included.'
      )
      .optional()
  })
  export type Period = z.infer<typeof PeriodSchema>

  /**
   * Usage records allow you to report customer usage and metrics to Stripe for
   * metered billing of subscription prices.
   *
   * Related guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)
   *
   * This is our legacy usage-based billing API. See the [updated usage-based billing docs](https://docs.stripe.com/billing/subscriptions/usage-based).
   */
  export const UsageRecordSchema = z
    .object({
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('usage_record')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The usage quantity for the specified date. */
      quantity: z
        .number()
        .int()
        .describe('The usage quantity for the specified date.'),
      /** The ID of the subscription item this usage record contains data for. */
      subscription_item: z
        .string()
        .max(5000)
        .describe(
          'The ID of the subscription item this usage record contains data for.'
        ),
      /** The timestamp when this usage occurred. */
      timestamp: z
        .number()
        .int()
        .describe('The timestamp when this usage occurred.')
    })
    .describe(
      'Usage records allow you to report customer usage and metrics to Stripe for\nmetered billing of subscription prices.\n\nRelated guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)\n\nThis is our legacy usage-based billing API. See the [updated usage-based billing docs](https://docs.stripe.com/billing/subscriptions/usage-based).'
    )
  export type UsageRecord = z.infer<typeof UsageRecordSchema>

  export const TaxProductResourcePostalAddressSchema = z.object({
    /** City, district, suburb, town, or village. */
    city: z
      .string()
      .max(5000)
      .nullable()
      .describe('City, district, suburb, town, or village.')
      .optional(),
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      ),
    /** Address line 1 (e.g., street, PO Box, or company name). */
    line1: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 1 (e.g., street, PO Box, or company name).')
      .optional(),
    /** Address line 2 (e.g., apartment, suite, unit, or building). */
    line2: z
      .string()
      .max(5000)
      .nullable()
      .describe('Address line 2 (e.g., apartment, suite, unit, or building).')
      .optional(),
    /** ZIP or postal code. */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('ZIP or postal code.')
      .optional(),
    /** State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX". */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX".'
      )
      .optional()
  })
  export type TaxProductResourcePostalAddress = z.infer<
    typeof TaxProductResourcePostalAddressSchema
  >

  export const TaxProductResourceCustomerDetailsResourceTaxIdSchema = z.object({
    /** The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown` */
    type: z
      .enum([
        'ad_nrt',
        'ae_trn',
        'al_tin',
        'am_tin',
        'ao_tin',
        'ar_cuit',
        'au_abn',
        'au_arn',
        'ba_tin',
        'bb_tin',
        'bg_uic',
        'bh_vat',
        'bo_tin',
        'br_cnpj',
        'br_cpf',
        'bs_tin',
        'by_tin',
        'ca_bn',
        'ca_gst_hst',
        'ca_pst_bc',
        'ca_pst_mb',
        'ca_pst_sk',
        'ca_qst',
        'cd_nif',
        'ch_uid',
        'ch_vat',
        'cl_tin',
        'cn_tin',
        'co_nit',
        'cr_tin',
        'de_stn',
        'do_rcn',
        'ec_ruc',
        'eg_tin',
        'es_cif',
        'eu_oss_vat',
        'eu_vat',
        'gb_vat',
        'ge_vat',
        'gn_nif',
        'hk_br',
        'hr_oib',
        'hu_tin',
        'id_npwp',
        'il_vat',
        'in_gst',
        'is_vat',
        'jp_cn',
        'jp_rn',
        'jp_trn',
        'ke_pin',
        'kh_tin',
        'kr_brn',
        'kz_bin',
        'li_uid',
        'li_vat',
        'ma_vat',
        'md_vat',
        'me_pib',
        'mk_vat',
        'mr_nif',
        'mx_rfc',
        'my_frp',
        'my_itn',
        'my_sst',
        'ng_tin',
        'no_vat',
        'no_voec',
        'np_pan',
        'nz_gst',
        'om_vat',
        'pe_ruc',
        'ph_tin',
        'ro_tin',
        'rs_pib',
        'ru_inn',
        'ru_kpp',
        'sa_vat',
        'sg_gst',
        'sg_uen',
        'si_tin',
        'sn_ninea',
        'sr_fin',
        'sv_nit',
        'th_vat',
        'tj_tin',
        'tr_tin',
        'tw_vat',
        'tz_vat',
        'ua_vat',
        'ug_tin',
        'unknown',
        'us_ein',
        'uy_ruc',
        'uz_tin',
        'uz_vat',
        've_rif',
        'vn_tin',
        'za_vat',
        'zm_tin',
        'zw_tin'
      ])
      .describe(
        'The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, or `unknown`'
      ),
    /** The value of the tax ID. */
    value: z.string().max(5000).describe('The value of the tax ID.')
  })
  export type TaxProductResourceCustomerDetailsResourceTaxId = z.infer<
    typeof TaxProductResourceCustomerDetailsResourceTaxIdSchema
  >

  export const TaxProductResourceJurisdictionSchema = z.object({
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      ),
    /** A human-readable name for the jurisdiction imposing the tax. */
    display_name: z
      .string()
      .max(5000)
      .describe('A human-readable name for the jurisdiction imposing the tax.'),
    /** Indicates the level of the jurisdiction imposing the tax. */
    level: z
      .enum(['city', 'country', 'county', 'district', 'state'])
      .describe('Indicates the level of the jurisdiction imposing the tax.'),
    /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States. */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.'
      )
      .optional()
  })
  export type TaxProductResourceJurisdiction = z.infer<
    typeof TaxProductResourceJurisdictionSchema
  >

  export const TaxProductResourceLineItemTaxRateDetailsSchema = z.object({
    /** A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)". */
    display_name: z
      .string()
      .max(5000)
      .describe(
        'A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)".'
      ),
    /** The tax rate percentage as a string. For example, 8.5% is represented as "8.5". */
    percentage_decimal: z
      .string()
      .max(5000)
      .describe(
        'The tax rate percentage as a string. For example, 8.5% is represented as "8.5".'
      ),
    /** The tax type, such as `vat` or `sales_tax`. */
    tax_type: z
      .enum([
        'amusement_tax',
        'communications_tax',
        'gst',
        'hst',
        'igst',
        'jct',
        'lease_tax',
        'pst',
        'qst',
        'retail_delivery_fee',
        'rst',
        'sales_tax',
        'service_tax',
        'vat'
      ])
      .describe('The tax type, such as `vat` or `sales_tax`.')
  })
  export type TaxProductResourceLineItemTaxRateDetails = z.infer<
    typeof TaxProductResourceLineItemTaxRateDetailsSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsDefaultSchema =
    z.object({
      /** Type of registration in `country`. */
      type: z.literal('standard').describe('Type of registration in `country`.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsDefault = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsDefaultSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema =
    z.object({
      /** Type of registration in `country`. */
      type: z
        .literal('simplified')
        .describe('Type of registration in `country`.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsSimplified = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsEuStandardSchema =
    z.object({
      /** Place of supply scheme used in an EU standard registration. */
      place_of_supply_scheme: z
        .enum(['small_seller', 'standard'])
        .describe('Place of supply scheme used in an EU standard registration.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsEuStandard = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsEuStandardSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsCaProvinceStandardSchema =
    z.object({
      /** Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
      province: z
        .string()
        .max(5000)
        .describe(
          'Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).'
        )
    })
  export type TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsCaProvinceStandardSchema
    >

  export const TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTaxSchema =
    z.object({
      /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
      jurisdiction: z
        .string()
        .max(5000)
        .describe(
          'A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.'
        )
    })
  export type TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTaxSchema
    >

  export const TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTaxSchema =
    z.object({
      /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
      jurisdiction: z
        .string()
        .max(5000)
        .describe(
          'A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.'
        )
    })
  export type TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTaxSchema
    >

  export const TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElectionSchema =
    z.object({
      /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. */
      jurisdiction: z
        .string()
        .max(5000)
        .describe(
          'A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.'
        )
        .optional(),
      /** The type of the election for the state sales tax registration. */
      type: z
        .enum([
          'local_use_tax',
          'simplified_sellers_use_tax',
          'single_local_use_tax'
        ])
        .describe(
          'The type of the election for the state sales tax registration.'
        )
    })
  export type TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElectionSchema
    >

  export const TaxProductResourceTaxSettingsDefaultsSchema = z.object({
    /** Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive', 'inferred_by_currency'])
      .nullable()
      .describe(
        "Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior."
      )
      .optional(),
    /** Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices. */
    tax_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices.'
      )
      .optional()
  })
  export type TaxProductResourceTaxSettingsDefaults = z.infer<
    typeof TaxProductResourceTaxSettingsDefaultsSchema
  >

  export const TaxProductResourceTaxSettingsStatusDetailsResourceActiveSchema =
    z.object({})
  export type TaxProductResourceTaxSettingsStatusDetailsResourceActive =
    z.infer<
      typeof TaxProductResourceTaxSettingsStatusDetailsResourceActiveSchema
    >

  export const TaxProductResourceTaxSettingsStatusDetailsResourcePendingSchema =
    z.object({
      /** The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call. */
      missing_fields: z
        .array(z.string().max(5000))
        .nullable()
        .describe(
          "The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call."
        )
        .optional()
    })
  export type TaxProductResourceTaxSettingsStatusDetailsResourcePending =
    z.infer<
      typeof TaxProductResourceTaxSettingsStatusDetailsResourcePendingSchema
    >

  export const TaxProductResourceTaxTransactionLineItemResourceReversalSchema =
    z.object({
      /** The `id` of the line item to reverse in the original transaction. */
      original_line_item: z
        .string()
        .max(5000)
        .describe(
          'The `id` of the line item to reverse in the original transaction.'
        )
    })
  export type TaxProductResourceTaxTransactionLineItemResourceReversal =
    z.infer<
      typeof TaxProductResourceTaxTransactionLineItemResourceReversalSchema
    >

  export const TaxProductResourceTaxTransactionResourceReversalSchema =
    z.object({
      /** The `id` of the reversed `Transaction` object. */
      original_transaction: z
        .string()
        .max(5000)
        .nullable()
        .describe('The `id` of the reversed `Transaction` object.')
        .optional()
    })
  export type TaxProductResourceTaxTransactionResourceReversal = z.infer<
    typeof TaxProductResourceTaxTransactionResourceReversalSchema
  >

  export const TaxProductResourceTaxTransactionShippingCostSchema = z.object({
    /** The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.'
      ),
    /** The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_tax: z
      .number()
      .int()
      .describe(
        'The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object). */
    shipping_rate: z
      .string()
      .max(5000)
      .describe(
        'The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).'
      )
      .optional(),
    /** Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive'])
      .describe(
        'Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.'
      ),
    /** The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping. */
    tax_code: z
      .string()
      .max(5000)
      .describe(
        'The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.'
      )
  })
  export type TaxProductResourceTaxTransactionShippingCost = z.infer<
    typeof TaxProductResourceTaxTransactionShippingCostSchema
  >

  export const TerminalConfigurationConfigurationResourceOfflineConfigSchema =
    z.object({
      /** Determines whether to allow transactions to be collected while reader is offline. Defaults to false. */
      enabled: z
        .boolean()
        .nullable()
        .describe(
          'Determines whether to allow transactions to be collected while reader is offline. Defaults to false.'
        )
        .optional()
    })
  export type TerminalConfigurationConfigurationResourceOfflineConfig = z.infer<
    typeof TerminalConfigurationConfigurationResourceOfflineConfigSchema
  >

  export const TerminalConfigurationConfigurationResourceRebootWindowSchema =
    z.object({
      /** Integer between 0 to 23 that represents the end hour of the reboot time window. The value must be different than the start_hour. */
      end_hour: z
        .number()
        .int()
        .describe(
          'Integer between 0 to 23 that represents the end hour of the reboot time window. The value must be different than the start_hour.'
        ),
      /** Integer between 0 to 23 that represents the start hour of the reboot time window. */
      start_hour: z
        .number()
        .int()
        .describe(
          'Integer between 0 to 23 that represents the start hour of the reboot time window.'
        )
    })
  export type TerminalConfigurationConfigurationResourceRebootWindow = z.infer<
    typeof TerminalConfigurationConfigurationResourceRebootWindowSchema
  >

  export const TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema =
    z.object({
      /** Fixed amounts displayed when collecting a tip */
      fixed_amounts: z
        .array(z.number().int())
        .nullable()
        .describe('Fixed amounts displayed when collecting a tip')
        .optional(),
      /** Percentages displayed when collecting a tip */
      percentages: z
        .array(z.number().int())
        .nullable()
        .describe('Percentages displayed when collecting a tip')
        .optional(),
      /** Below this amount, fixed amounts will be displayed; above it, percentages will be displayed */
      smart_tip_threshold: z
        .number()
        .int()
        .describe(
          'Below this amount, fixed amounts will be displayed; above it, percentages will be displayed'
        )
        .optional()
    })
  export type TerminalConfigurationConfigurationResourceCurrencySpecificConfig =
    z.infer<
      typeof TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema
    >

  export const DeletedTerminalConfigurationSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('terminal.configuration')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedTerminalConfiguration = z.infer<
    typeof DeletedTerminalConfigurationSchema
  >

  /**
   * A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
   *
   * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
   */
  export const TerminalConnectionTokenSchema = z
    .object({
      /** The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens). */
      location: z
        .string()
        .max(5000)
        .describe(
          'The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('terminal.connection_token')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Your application should pass this token to the Stripe Terminal SDK. */
      secret: z
        .string()
        .max(5000)
        .describe(
          'Your application should pass this token to the Stripe Terminal SDK.'
        )
    })
    .describe(
      'A Connection Token is used by the Stripe Terminal SDK to connect to a reader.\n\nRelated guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)'
    )
  export type TerminalConnectionToken = z.infer<
    typeof TerminalConnectionTokenSchema
  >

  export const DeletedTerminalLocationSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('terminal.location')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedTerminalLocation = z.infer<
    typeof DeletedTerminalLocationSchema
  >

  /** Represents a per-transaction tipping configuration */
  export const TerminalReaderReaderResourceTippingConfigSchema = z
    .object({
      /** Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency). */
      amount_eligible: z
        .number()
        .int()
        .describe(
          'Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency).'
        )
        .optional()
    })
    .describe('Represents a per-transaction tipping configuration')
  export type TerminalReaderReaderResourceTippingConfig = z.infer<
    typeof TerminalReaderReaderResourceTippingConfigSchema
  >

  /** Represents a per-setup override of a reader configuration */
  export const TerminalReaderReaderResourceProcessSetupConfigSchema = z
    .object({
      /** Enable customer initiated cancellation when processing this SetupIntent. */
      enable_customer_cancellation: z
        .boolean()
        .describe(
          'Enable customer initiated cancellation when processing this SetupIntent.'
        )
        .optional()
    })
    .describe('Represents a per-setup override of a reader configuration')
  export type TerminalReaderReaderResourceProcessSetupConfig = z.infer<
    typeof TerminalReaderReaderResourceProcessSetupConfigSchema
  >

  /** Represents a per-transaction override of a reader configuration */
  export const TerminalReaderReaderResourceRefundPaymentConfigSchema = z
    .object({
      /** Enable customer initiated cancellation when refunding this payment. */
      enable_customer_cancellation: z
        .boolean()
        .describe(
          'Enable customer initiated cancellation when refunding this payment.'
        )
        .optional()
    })
    .describe('Represents a per-transaction override of a reader configuration')
  export type TerminalReaderReaderResourceRefundPaymentConfig = z.infer<
    typeof TerminalReaderReaderResourceRefundPaymentConfigSchema
  >

  /** Represents a line item to be displayed on the reader */
  export const TerminalReaderReaderResourceLineItemSchema = z
    .object({
      /** The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount: z
        .number()
        .int()
        .describe(
          'The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        ),
      /** Description of the line item. */
      description: z
        .string()
        .max(5000)
        .describe('Description of the line item.'),
      /** The quantity of the line item. */
      quantity: z.number().int().describe('The quantity of the line item.')
    })
    .describe('Represents a line item to be displayed on the reader')
  export type TerminalReaderReaderResourceLineItem = z.infer<
    typeof TerminalReaderReaderResourceLineItemSchema
  >

  export const DeletedTerminalReaderSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('terminal.reader')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedTerminalReader = z.infer<
    typeof DeletedTerminalReaderSchema
  >

  export const DeletedTestHelpersTestClockSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('test_helpers.test_clock')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedTestHelpersTestClock = z.infer<
    typeof DeletedTestHelpersTestClockSchema
  >

  export const TreasuryInboundTransfersResourceFailureDetailsSchema = z.object({
    /** Reason for the failure. */
    code: z
      .enum([
        'account_closed',
        'account_frozen',
        'bank_account_restricted',
        'bank_ownership_changed',
        'debit_not_authorized',
        'incorrect_account_holder_address',
        'incorrect_account_holder_name',
        'incorrect_account_holder_tax_id',
        'insufficient_funds',
        'invalid_account_number',
        'invalid_currency',
        'no_account',
        'other'
      ])
      .describe('Reason for the failure.')
  })
  export type TreasuryInboundTransfersResourceFailureDetails = z.infer<
    typeof TreasuryInboundTransfersResourceFailureDetailsSchema
  >

  export const TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlowsSchema =
    z.object({
      /** If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return. */
      received_debit: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return.'
        )
        .optional()
    })
  export type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows =
    z.infer<
      typeof TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlowsSchema
    >

  export const TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitionsSchema =
    z.object({
      /** Timestamp describing when an InboundTransfer changed status to `canceled`. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an InboundTransfer changed status to `canceled`.'
        )
        .optional(),
      /** Timestamp describing when an InboundTransfer changed status to `failed`. */
      failed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an InboundTransfer changed status to `failed`.'
        )
        .optional(),
      /** Timestamp describing when an InboundTransfer changed status to `succeeded`. */
      succeeded_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an InboundTransfer changed status to `succeeded`.'
        )
        .optional()
    })
  export type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions =
    z.infer<
      typeof TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitionsSchema
    >

  /** Change to a FinancialAccount's balance */
  export const TreasuryTransactionsResourceBalanceImpactSchema = z
    .object({
      /** The change made to funds the user can spend right now. */
      cash: z
        .number()
        .int()
        .describe('The change made to funds the user can spend right now.'),
      /** The change made to funds that are not spendable yet, but will become available at a later time. */
      inbound_pending: z
        .number()
        .int()
        .describe(
          'The change made to funds that are not spendable yet, but will become available at a later time.'
        ),
      /** The change made to funds in the account, but not spendable because they are being held for pending outbound flows. */
      outbound_pending: z
        .number()
        .int()
        .describe(
          'The change made to funds in the account, but not spendable because they are being held for pending outbound flows.'
        )
    })
    .describe("Change to a FinancialAccount's balance")
  export type TreasuryTransactionsResourceBalanceImpact = z.infer<
    typeof TreasuryTransactionsResourceBalanceImpactSchema
  >

  export const TreasuryReceivedCreditsResourceStatusTransitionsSchema =
    z.object({
      /** Timestamp describing when the CreditReversal changed status to `posted` */
      posted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when the CreditReversal changed status to `posted`'
        )
        .optional()
    })
  export type TreasuryReceivedCreditsResourceStatusTransitions = z.infer<
    typeof TreasuryReceivedCreditsResourceStatusTransitionsSchema
  >

  export const TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsSchema =
    z.object({
      /** Set if there is an Issuing dispute associated with the DebitReversal. */
      issuing_dispute: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Set if there is an Issuing dispute associated with the DebitReversal.'
        )
        .optional()
    })
  export type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows = z.infer<
    typeof TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsSchema
  >

  export const TreasuryReceivedDebitsResourceStatusTransitionsSchema = z.object(
    {
      /** Timestamp describing when the DebitReversal changed status to `completed`. */
      completed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when the DebitReversal changed status to `completed`.'
        )
        .optional()
    }
  )
  export type TreasuryReceivedDebitsResourceStatusTransitions = z.infer<
    typeof TreasuryReceivedDebitsResourceStatusTransitionsSchema
  >

  export const OutboundPaymentsPaymentMethodDetailsFinancialAccountSchema =
    z.object({
      /** Token of the FinancialAccount. */
      id: z.string().max(5000).describe('Token of the FinancialAccount.'),
      /** The rails used to send funds. */
      network: z.literal('stripe').describe('The rails used to send funds.')
    })
  export type OutboundPaymentsPaymentMethodDetailsFinancialAccount = z.infer<
    typeof OutboundPaymentsPaymentMethodDetailsFinancialAccountSchema
  >

  export const TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsSchema =
    z.object({
      /** IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked. */
      ip_address: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.'
        )
        .optional(),
      /** `true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`. */
      present: z
        .boolean()
        .describe(
          '`true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`.'
        )
    })
  export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails =
    z.infer<
      typeof TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsSchema
    >

  export const TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitionsSchema =
    z.object({
      /** Timestamp describing when an OutboundPayment changed status to `canceled`. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundPayment changed status to `canceled`.'
        )
        .optional(),
      /** Timestamp describing when an OutboundPayment changed status to `failed`. */
      failed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundPayment changed status to `failed`.'
        )
        .optional(),
      /** Timestamp describing when an OutboundPayment changed status to `posted`. */
      posted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundPayment changed status to `posted`.'
        )
        .optional(),
      /** Timestamp describing when an OutboundPayment changed status to `returned`. */
      returned_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundPayment changed status to `returned`.'
        )
        .optional()
    })
  export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions =
    z.infer<
      typeof TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitionsSchema
    >

  export const TreasuryOutboundPaymentsResourceAchTrackingDetailsSchema =
    z.object({
      /** ACH trace ID of the OutboundPayment for payments sent over the `ach` network. */
      trace_id: z
        .string()
        .max(5000)
        .describe(
          'ACH trace ID of the OutboundPayment for payments sent over the `ach` network.'
        )
    })
  export type TreasuryOutboundPaymentsResourceAchTrackingDetails = z.infer<
    typeof TreasuryOutboundPaymentsResourceAchTrackingDetailsSchema
  >

  export const TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetailsSchema =
    z.object({
      /** CHIPS System Sequence Number (SSN) of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
      chips: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'CHIPS System Sequence Number (SSN) of the OutboundPayment for payments sent over the `us_domestic_wire` network.'
        )
        .optional(),
      /** IMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
      imad: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'IMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.'
        )
        .optional(),
      /** OMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network. */
      omad: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'OMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.'
        )
        .optional()
    })
  export type TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetails =
    z.infer<
      typeof TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetailsSchema
    >

  export const OutboundTransfersPaymentMethodDetailsFinancialAccountSchema =
    z.object({
      /** Token of the FinancialAccount. */
      id: z.string().max(5000).describe('Token of the FinancialAccount.'),
      /** The rails used to send funds. */
      network: z.literal('stripe').describe('The rails used to send funds.')
    })
  export type OutboundTransfersPaymentMethodDetailsFinancialAccount = z.infer<
    typeof OutboundTransfersPaymentMethodDetailsFinancialAccountSchema
  >

  export const TreasuryOutboundTransfersResourceStatusTransitionsSchema =
    z.object({
      /** Timestamp describing when an OutboundTransfer changed status to `canceled` */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundTransfer changed status to `canceled`'
        )
        .optional(),
      /** Timestamp describing when an OutboundTransfer changed status to `failed` */
      failed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundTransfer changed status to `failed`'
        )
        .optional(),
      /** Timestamp describing when an OutboundTransfer changed status to `posted` */
      posted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundTransfer changed status to `posted`'
        )
        .optional(),
      /** Timestamp describing when an OutboundTransfer changed status to `returned` */
      returned_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when an OutboundTransfer changed status to `returned`'
        )
        .optional()
    })
  export type TreasuryOutboundTransfersResourceStatusTransitions = z.infer<
    typeof TreasuryOutboundTransfersResourceStatusTransitionsSchema
  >

  export const TreasuryOutboundTransfersResourceAchTrackingDetailsSchema =
    z.object({
      /** ACH trace ID of the OutboundTransfer for transfers sent over the `ach` network. */
      trace_id: z
        .string()
        .max(5000)
        .describe(
          'ACH trace ID of the OutboundTransfer for transfers sent over the `ach` network.'
        )
    })
  export type TreasuryOutboundTransfersResourceAchTrackingDetails = z.infer<
    typeof TreasuryOutboundTransfersResourceAchTrackingDetailsSchema
  >

  export const TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetailsSchema =
    z.object({
      /** CHIPS System Sequence Number (SSN) of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
      chips: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'CHIPS System Sequence Number (SSN) of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.'
        )
        .optional(),
      /** IMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
      imad: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'IMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.'
        )
        .optional(),
      /** OMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network. */
      omad: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'OMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.'
        )
        .optional()
    })
  export type TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetails =
    z.infer<
      typeof TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetailsSchema
    >

  export const ReceivedPaymentMethodDetailsFinancialAccountSchema = z.object({
    /** The FinancialAccount ID. */
    id: z.string().max(5000).describe('The FinancialAccount ID.'),
    /** The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`. */
    network: z
      .literal('stripe')
      .describe(
        'The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.'
      )
  })
  export type ReceivedPaymentMethodDetailsFinancialAccount = z.infer<
    typeof ReceivedPaymentMethodDetailsFinancialAccountSchema
  >

  export const TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccountSchema =
    z.object({
      /** Bank name. */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Bank name.')
        .optional(),
      /** The last four digits of the bank account number. */
      last4: z
        .string()
        .max(5000)
        .nullable()
        .describe('The last four digits of the bank account number.')
        .optional(),
      /** The routing number for the bank account. */
      routing_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('The routing number for the bank account.')
        .optional()
    })
  export type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount =
    z.infer<
      typeof TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccountSchema
    >

  export const TreasuryReceivedCreditsResourceReversalDetailsSchema = z.object({
    /** Time before which a ReceivedCredit can be reversed. */
    deadline: z
      .number()
      .int()
      .nullable()
      .describe('Time before which a ReceivedCredit can be reversed.')
      .optional(),
    /** Set if a ReceivedCredit cannot be reversed. */
    restricted_reason: z
      .enum([
        'already_reversed',
        'deadline_passed',
        'network_restricted',
        'other',
        'source_flow_restricted'
      ])
      .nullable()
      .describe('Set if a ReceivedCredit cannot be reversed.')
      .optional()
  })
  export type TreasuryReceivedCreditsResourceReversalDetails = z.infer<
    typeof TreasuryReceivedCreditsResourceReversalDetailsSchema
  >

  export const TreasuryReceivedDebitsResourceLinkedFlowsSchema = z.object({
    /** The DebitReversal created as a result of this ReceivedDebit being reversed. */
    debit_reversal: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The DebitReversal created as a result of this ReceivedDebit being reversed.'
      )
      .optional(),
    /** Set if the ReceivedDebit is associated with an InboundTransfer's return of funds. */
    inbound_transfer: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Set if the ReceivedDebit is associated with an InboundTransfer's return of funds."
      )
      .optional(),
    /** Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object. */
    issuing_authorization: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.'
      )
      .optional(),
    /** Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object. */
    issuing_transaction: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object.'
      )
      .optional(),
    /** Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object. */
    payout: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object.'
      )
      .optional()
  })
  export type TreasuryReceivedDebitsResourceLinkedFlows = z.infer<
    typeof TreasuryReceivedDebitsResourceLinkedFlowsSchema
  >

  export const TreasuryReceivedDebitsResourceReversalDetailsSchema = z.object({
    /** Time before which a ReceivedDebit can be reversed. */
    deadline: z
      .number()
      .int()
      .nullable()
      .describe('Time before which a ReceivedDebit can be reversed.')
      .optional(),
    /** Set if a ReceivedDebit can't be reversed. */
    restricted_reason: z
      .enum([
        'already_reversed',
        'deadline_passed',
        'network_restricted',
        'other',
        'source_flow_restricted'
      ])
      .nullable()
      .describe("Set if a ReceivedDebit can't be reversed.")
      .optional()
  })
  export type TreasuryReceivedDebitsResourceReversalDetails = z.infer<
    typeof TreasuryReceivedDebitsResourceReversalDetailsSchema
  >

  export const TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitionsSchema =
    z.object({
      /** Timestamp describing when the Transaction changed status to `posted`. */
      posted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when the Transaction changed status to `posted`.'
        )
        .optional(),
      /** Timestamp describing when the Transaction changed status to `void`. */
      void_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp describing when the Transaction changed status to `void`.'
        )
        .optional()
    })
  export type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions =
    z.infer<
      typeof TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitionsSchema
    >

  /** Balance information for the FinancialAccount */
  export const TreasuryFinancialAccountsResourceBalanceSchema = z
    .object({
      /** Funds the user can spend right now. */
      cash: z
        .record(z.number().int())
        .describe('Funds the user can spend right now.'),
      /** Funds not spendable yet, but will become available at a later time. */
      inbound_pending: z
        .record(z.number().int())
        .describe(
          'Funds not spendable yet, but will become available at a later time.'
        ),
      /** Funds in the account, but not spendable because they are being held for pending outbound flows. */
      outbound_pending: z
        .record(z.number().int())
        .describe(
          'Funds in the account, but not spendable because they are being held for pending outbound flows.'
        )
    })
    .describe('Balance information for the FinancialAccount')
  export type TreasuryFinancialAccountsResourceBalance = z.infer<
    typeof TreasuryFinancialAccountsResourceBalanceSchema
  >

  /** Additional details on the FinancialAccount Features information. */
  export const TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema =
    z
      .object({
        /** Represents the reason why the status is `pending` or `restricted`. */
        code: z
          .enum([
            'activating',
            'capability_not_requested',
            'financial_account_closed',
            'rejected_other',
            'rejected_unsupported_business',
            'requirements_past_due',
            'requirements_pending_verification',
            'restricted_by_platform',
            'restricted_other'
          ])
          .describe(
            'Represents the reason why the status is `pending` or `restricted`.'
          ),
        /** Represents what the user should do, if anything, to activate the Feature. */
        resolution: z
          .enum(['contact_stripe', 'provide_information', 'remove_restriction'])
          .nullable()
          .describe(
            'Represents what the user should do, if anything, to activate the Feature.'
          )
          .optional(),
        /** The `platform_restrictions` that are restricting this Feature. */
        restriction: z
          .enum(['inbound_flows', 'outbound_flows'])
          .describe(
            'The `platform_restrictions` that are restricting this Feature.'
          )
          .optional()
      })
      .describe(
        'Additional details on the FinancialAccount Features information.'
      )
  export type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails =
    z.infer<
      typeof TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
    >

  /** ABA Records contain U.S. bank account details per the ABA format. */
  export const TreasuryFinancialAccountsResourceAbaRecordSchema = z
    .object({
      /** The name of the person or business that owns the bank account. */
      account_holder_name: z
        .string()
        .max(5000)
        .describe(
          'The name of the person or business that owns the bank account.'
        ),
      /** The account number. */
      account_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('The account number.')
        .optional(),
      /** The last four characters of the account number. */
      account_number_last4: z
        .string()
        .max(5000)
        .describe('The last four characters of the account number.'),
      /** Name of the bank. */
      bank_name: z.string().max(5000).describe('Name of the bank.'),
      /** Routing number for the account. */
      routing_number: z
        .string()
        .max(5000)
        .describe('Routing number for the account.')
    })
    .describe(
      'ABA Records contain U.S. bank account details per the ABA format.'
    )
  export type TreasuryFinancialAccountsResourceAbaRecord = z.infer<
    typeof TreasuryFinancialAccountsResourceAbaRecordSchema
  >

  /** Restrictions that a Connect Platform has placed on this FinancialAccount. */
  export const TreasuryFinancialAccountsResourcePlatformRestrictionsSchema = z
    .object({
      /** Restricts all inbound money movement. */
      inbound_flows: z
        .enum(['restricted', 'unrestricted'])
        .nullable()
        .describe('Restricts all inbound money movement.')
        .optional(),
      /** Restricts all outbound money movement. */
      outbound_flows: z
        .enum(['restricted', 'unrestricted'])
        .nullable()
        .describe('Restricts all outbound money movement.')
        .optional()
    })
    .describe(
      'Restrictions that a Connect Platform has placed on this FinancialAccount.'
    )
  export type TreasuryFinancialAccountsResourcePlatformRestrictions = z.infer<
    typeof TreasuryFinancialAccountsResourcePlatformRestrictionsSchema
  >

  export const TreasuryFinancialAccountsResourceClosedStatusDetailsSchema =
    z.object({
      /** The array that contains reasons for a FinancialAccount closure. */
      reasons: z
        .array(z.enum(['account_rejected', 'closed_by_platform', 'other']))
        .describe(
          'The array that contains reasons for a FinancialAccount closure.'
        )
    })
  export type TreasuryFinancialAccountsResourceClosedStatusDetails = z.infer<
    typeof TreasuryFinancialAccountsResourceClosedStatusDetailsSchema
  >

  /**
   * You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be
   * notified about events that happen in your Stripe account or connected
   * accounts.
   *
   * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
   *
   * Related guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)
   */
  export const WebhookEndpointSchema = z
    .object({
      /** The API version events are rendered as for this webhook endpoint. */
      api_version: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The API version events are rendered as for this webhook endpoint.'
        )
        .optional(),
      /** The ID of the associated Connect application. */
      application: z
        .string()
        .max(5000)
        .nullable()
        .describe('The ID of the associated Connect application.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** An optional description of what the webhook is used for. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe('An optional description of what the webhook is used for.')
        .optional(),
      /** The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
      enabled_events: z
        .array(z.string().max(5000))
        .describe(
          "The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection."
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('webhook_endpoint')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The endpoint's secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation. */
      secret: z
        .string()
        .max(5000)
        .describe(
          "The endpoint's secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation."
        )
        .optional(),
      /** The status of the webhook. It can be `enabled` or `disabled`. */
      status: z
        .string()
        .max(5000)
        .describe(
          'The status of the webhook. It can be `enabled` or `disabled`.'
        ),
      /** The URL of the webhook endpoint. */
      url: z.string().max(5000).describe('The URL of the webhook endpoint.')
    })
    .describe(
      'You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be\nnotified about events that happen in your Stripe account or connected\naccounts.\n\nMost users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.\n\nRelated guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)'
    )
  export type WebhookEndpoint = z.infer<typeof WebhookEndpointSchema>

  export const DeletedWebhookEndpointSchema = z.object({
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('webhook_endpoint')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type DeletedWebhookEndpoint = z.infer<
    typeof DeletedWebhookEndpointSchema
  >

  /**
   * This object represents files hosted on Stripe's servers. You can upload
   * files with the [create file](https://stripe.com/docs/api#create_file) request
   * (for example, when uploading dispute evidence). Stripe also
   * creates files independently (for example, the results of a [Sigma scheduled
   * query](#scheduled_queries)).
   *
   * Related guide: [File upload guide](https://stripe.com/docs/file-upload)
   */
  export const FileSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The file expires and isn't available at this time in epoch seconds. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The file expires and isn't available at this time in epoch seconds."
        )
        .optional(),
      /** The suitable name for saving the file to a filesystem. */
      filename: z
        .string()
        .max(5000)
        .nullable()
        .describe('The suitable name for saving the file to a filesystem.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
      links: z
        .object({
          /** Details about each object. */
          data: z.array(FileLinkSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .regex(new RegExp('^/v1/file_links'))
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .nullable()
        .describe(
          'A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('file')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
      purpose: z
        .enum([
          'account_requirement',
          'additional_verification',
          'business_icon',
          'business_logo',
          'customer_signature',
          'dispute_evidence',
          'document_provider_identity_document',
          'finance_report_run',
          'financial_account_statement',
          'identity_document',
          'identity_document_downloadable',
          'issuing_regulatory_reporting',
          'pci_document',
          'selfie',
          'sigma_scheduled_query',
          'tax_document_user_upload',
          'terminal_reader_splashscreen'
        ])
        .describe(
          'The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.'
        ),
      /** The size of the file object in bytes. */
      size: z.number().int().describe('The size of the file object in bytes.'),
      /** A suitable title for the document. */
      title: z
        .string()
        .max(5000)
        .nullable()
        .describe('A suitable title for the document.')
        .optional(),
      /** The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`). */
      type: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).'
        )
        .optional(),
      /** Use your live secret API key to download the file from this URL. */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Use your live secret API key to download the file from this URL.'
        )
        .optional()
    })
    .describe(
      "This object represents files hosted on Stripe's servers. You can upload\nfiles with the [create file](https://stripe.com/docs/api#create_file) request\n(for example, when uploading dispute evidence). Stripe also\ncreates files independently (for example, the results of a [Sigma scheduled\nquery](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://stripe.com/docs/file-upload)"
    )
  export type File = z.infer<typeof FileSchema>

  /**
   * To share the contents of a `File` object with non-Stripe users, you can
   * create a `FileLink`. `FileLink`s contain a URL that you can use to
   * retrieve the contents of the file without authentication.
   */
  export const FileLinkSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Returns if the link is already expired. */
      expired: z.boolean().describe('Returns if the link is already expired.'),
      /** Time that the link expires. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe('Time that the link expires.')
        .optional(),
      /** The file object this link points to. */
      file: z
        .union([z.string().max(5000), FileSchema])
        .describe('The file object this link points to.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('file_link')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The publicly accessible URL to download the file. */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe('The publicly accessible URL to download the file.')
        .optional()
    })
    .describe(
      'To share the contents of a `File` object with non-Stripe users, you can\ncreate a `FileLink`. `FileLink`s contain a URL that you can use to\nretrieve the contents of the file without authentication.'
    )
  export type FileLink = z.infer<typeof FileLinkSchema>

  /** A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account. */
  export const CashBalanceSchema = z
    .object({
      /** A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      available: z
        .record(z.number().int())
        .nullable()
        .describe(
          'A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        )
        .optional(),
      /** The ID of the customer whose cash balance this object represents. */
      customer: z
        .string()
        .max(5000)
        .describe(
          'The ID of the customer whose cash balance this object represents.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('cash_balance')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      settings: CustomerBalanceCustomerBalanceSettingsSchema
    })
    .describe(
      "A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account."
    )
  export type CashBalance = z.infer<typeof CashBalanceSchema>

  export const SourceOwnerSchema = z.object({
    /** Owner's address. */
    address: AddressSchema.nullable().describe("Owner's address.").optional(),
    /** Owner's email address. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe("Owner's email address.")
      .optional(),
    /** Owner's full name. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe("Owner's full name.")
      .optional(),
    /** Owner's phone number (including extension). */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe("Owner's phone number (including extension).")
      .optional(),
    /** Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    verified_address: AddressSchema.nullable()
      .describe(
        "Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    verified_email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    verified_phone: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type SourceOwner = z.infer<typeof SourceOwnerSchema>

  export const ShippingSchema = z.object({
    address: AddressSchema.optional(),
    /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
    carrier: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.'
      )
      .optional(),
    /** Recipient name. */
    name: z.string().max(5000).describe('Recipient name.').optional(),
    /** Recipient phone (including extension). */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe('Recipient phone (including extension).')
      .optional(),
    /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
    tracking_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.'
      )
      .optional()
  })
  export type Shipping = z.infer<typeof ShippingSchema>

  export const PromotionCodesResourceRestrictionsSchema = z.object({
    /** Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
    currency_options: z
      .record(PromotionCodeCurrencyOptionSchema)
      .describe(
        'Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).'
      )
      .optional(),
    /** A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
    first_time_transaction: z
      .boolean()
      .describe(
        'A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices'
      ),
    /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
    minimum_amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).'
      )
      .optional(),
    /** Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
    minimum_amount_currency: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount'
      )
      .optional()
  })
  export type PromotionCodesResourceRestrictions = z.infer<
    typeof PromotionCodesResourceRestrictionsSchema
  >

  export const BillingDetailsSchema = z.object({
    /** Billing address. */
    address: AddressSchema.nullable().describe('Billing address.').optional(),
    /** Email address. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe('Email address.')
      .optional(),
    /** Full name. */
    name: z.string().max(5000).nullable().describe('Full name.').optional(),
    /** Billing phone number (including extension). */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe('Billing phone number (including extension).')
      .optional()
  })
  export type BillingDetails = z.infer<typeof BillingDetailsSchema>

  export const PaymentFlowsAmountDetailsSchema = z.object({
    tip: PaymentFlowsAmountDetailsClientResourceTipSchema.optional()
  })
  export type PaymentFlowsAmountDetails = z.infer<
    typeof PaymentFlowsAmountDetailsSchema
  >

  export const PaymentFlowsAmountDetailsClientSchema = z.object({
    tip: PaymentFlowsAmountDetailsClientResourceTipSchema.optional()
  })
  export type PaymentFlowsAmountDetailsClient = z.infer<
    typeof PaymentFlowsAmountDetailsClientSchema
  >

  export const RefundNextActionDisplayDetailsSchema = z.object({
    email_sent: EmailSentSchema,
    /** The expiry timestamp. */
    expires_at: z.number().int().describe('The expiry timestamp.')
  })
  export type RefundNextActionDisplayDetails = z.infer<
    typeof RefundNextActionDisplayDetailsSchema
  >

  export const DisputeVisaCompellingEvidence3DisputedTransactionSchema =
    z.object({
      /** User Account ID used to log into business platform. Must be recognizable by the user. */
      customer_account_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'User Account ID used to log into business platform. Must be recognizable by the user.'
        )
        .optional(),
      /** Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters. */
      customer_device_fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.'
        )
        .optional(),
      /** Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters. */
      customer_device_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.'
        )
        .optional(),
      /** The email address of the customer. */
      customer_email_address: z
        .string()
        .max(5000)
        .nullable()
        .describe('The email address of the customer.')
        .optional(),
      /** The IP address that the customer used when making the purchase. */
      customer_purchase_ip: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The IP address that the customer used when making the purchase.'
        )
        .optional(),
      /** Categorization of disputed payment. */
      merchandise_or_services: z
        .enum(['merchandise', 'services'])
        .nullable()
        .describe('Categorization of disputed payment.')
        .optional(),
      /** A description of the product or service that was sold. */
      product_description: z
        .string()
        .max(150_000)
        .nullable()
        .describe('A description of the product or service that was sold.')
        .optional(),
      /** The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission. */
      shipping_address: DisputeTransactionShippingAddressSchema.nullable()
        .describe(
          'The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.'
        )
        .optional()
    })
  export type DisputeVisaCompellingEvidence3DisputedTransaction = z.infer<
    typeof DisputeVisaCompellingEvidence3DisputedTransactionSchema
  >

  export const DisputeVisaCompellingEvidence3PriorUndisputedTransactionSchema =
    z.object({
      /** Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge. */
      charge: z
        .string()
        .max(5000)
        .describe(
          'Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge.'
        ),
      /** User Account ID used to log into business platform. Must be recognizable by the user. */
      customer_account_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'User Account ID used to log into business platform. Must be recognizable by the user.'
        )
        .optional(),
      /** Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters. */
      customer_device_fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.'
        )
        .optional(),
      /** Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters. */
      customer_device_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.'
        )
        .optional(),
      /** The email address of the customer. */
      customer_email_address: z
        .string()
        .max(5000)
        .nullable()
        .describe('The email address of the customer.')
        .optional(),
      /** The IP address that the customer used when making the purchase. */
      customer_purchase_ip: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The IP address that the customer used when making the purchase.'
        )
        .optional(),
      /** A description of the product or service that was sold. */
      product_description: z
        .string()
        .max(150_000)
        .nullable()
        .describe('A description of the product or service that was sold.')
        .optional(),
      /** The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission. */
      shipping_address: DisputeTransactionShippingAddressSchema.nullable()
        .describe(
          'The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.'
        )
        .optional()
    })
  export type DisputeVisaCompellingEvidence3PriorUndisputedTransaction =
    z.infer<
      typeof DisputeVisaCompellingEvidence3PriorUndisputedTransactionSchema
    >

  export const IssuingCardholderAddressSchema = z.object({
    address: AddressSchema
  })
  export type IssuingCardholderAddress = z.infer<
    typeof IssuingCardholderAddressSchema
  >

  export const IssuingCardholderCardIssuingSchema = z.object({
    /** Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program. */
    user_terms_acceptance: IssuingCardholderUserTermsAcceptanceSchema.nullable()
      .describe(
        'Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program.'
      )
      .optional()
  })
  export type IssuingCardholderCardIssuing = z.infer<
    typeof IssuingCardholderCardIssuingSchema
  >

  export const IssuingCardholderAuthorizationControlsSchema = z.object({
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
    allowed_categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.'
      )
      .optional(),
    /** Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
    allowed_merchant_countries: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.'
      )
      .optional(),
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
    blocked_categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.'
      )
      .optional(),
    /** Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
    blocked_merchant_countries: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.'
      )
      .optional(),
    /** Limit spending with amount-based rules that apply across this cardholder's cards. */
    spending_limits: z
      .array(IssuingCardholderSpendingLimitSchema)
      .nullable()
      .describe(
        "Limit spending with amount-based rules that apply across this cardholder's cards."
      )
      .optional(),
    /** Currency of the amounts within `spending_limits`. */
    spending_limits_currency: z
      .string()
      .nullable()
      .describe('Currency of the amounts within `spending_limits`.')
      .optional()
  })
  export type IssuingCardholderAuthorizationControls = z.infer<
    typeof IssuingCardholderAuthorizationControlsSchema
  >

  /** A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card. */
  export const IssuingPhysicalBundleSchema = z
    .object({
      features: IssuingPhysicalBundleFeaturesSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Friendly display name. */
      name: z.string().max(5000).describe('Friendly display name.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.physical_bundle')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Whether this physical bundle can be used to create cards. */
      status: z
        .enum(['active', 'inactive', 'review'])
        .describe('Whether this physical bundle can be used to create cards.'),
      /** Whether this physical bundle is a standard Stripe offering or custom-made for you. */
      type: z
        .enum(['custom', 'standard'])
        .describe(
          'Whether this physical bundle is a standard Stripe offering or custom-made for you.'
        )
    })
    .describe(
      'A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.'
    )
  export type IssuingPhysicalBundle = z.infer<
    typeof IssuingPhysicalBundleSchema
  >

  export const IssuingCardShippingAddressValidationSchema = z.object({
    /** The address validation capabilities to use. */
    mode: z
      .enum(['disabled', 'normalization_only', 'validation_and_normalization'])
      .describe('The address validation capabilities to use.'),
    /** The normalized shipping address. */
    normalized_address: AddressSchema.nullable()
      .describe('The normalized shipping address.')
      .optional(),
    /** The validation result for the shipping address. */
    result: z
      .enum(['indeterminate', 'likely_deliverable', 'likely_undeliverable'])
      .nullable()
      .describe('The validation result for the shipping address.')
      .optional()
  })
  export type IssuingCardShippingAddressValidation = z.infer<
    typeof IssuingCardShippingAddressValidationSchema
  >

  export const IssuingCardAuthorizationControlsSchema = z.object({
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
    allowed_categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.'
      )
      .optional(),
    /** Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control. */
    allowed_merchant_countries: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.'
      )
      .optional(),
    /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
    blocked_categories: z
      .array(
        z.enum([
          'ac_refrigeration_repair',
          'accounting_bookkeeping_services',
          'advertising_services',
          'agricultural_cooperative',
          'airlines_air_carriers',
          'airports_flying_fields',
          'ambulance_services',
          'amusement_parks_carnivals',
          'antique_reproductions',
          'antique_shops',
          'aquariums',
          'architectural_surveying_services',
          'art_dealers_and_galleries',
          'artists_supply_and_craft_shops',
          'auto_and_home_supply_stores',
          'auto_body_repair_shops',
          'auto_paint_shops',
          'auto_service_shops',
          'automated_cash_disburse',
          'automated_fuel_dispensers',
          'automobile_associations',
          'automotive_parts_and_accessories_stores',
          'automotive_tire_stores',
          'bail_and_bond_payments',
          'bakeries',
          'bands_orchestras',
          'barber_and_beauty_shops',
          'betting_casino_gambling',
          'bicycle_shops',
          'billiard_pool_establishments',
          'boat_dealers',
          'boat_rentals_and_leases',
          'book_stores',
          'books_periodicals_and_newspapers',
          'bowling_alleys',
          'bus_lines',
          'business_secretarial_schools',
          'buying_shopping_services',
          'cable_satellite_and_other_pay_television_and_radio',
          'camera_and_photographic_supply_stores',
          'candy_nut_and_confectionery_stores',
          'car_and_truck_dealers_new_used',
          'car_and_truck_dealers_used_only',
          'car_rental_agencies',
          'car_washes',
          'carpentry_services',
          'carpet_upholstery_cleaning',
          'caterers',
          'charitable_and_social_service_organizations_fundraising',
          'chemicals_and_allied_products',
          'child_care_services',
          'childrens_and_infants_wear_stores',
          'chiropodists_podiatrists',
          'chiropractors',
          'cigar_stores_and_stands',
          'civic_social_fraternal_associations',
          'cleaning_and_maintenance',
          'clothing_rental',
          'colleges_universities',
          'commercial_equipment',
          'commercial_footwear',
          'commercial_photography_art_and_graphics',
          'commuter_transport_and_ferries',
          'computer_network_services',
          'computer_programming',
          'computer_repair',
          'computer_software_stores',
          'computers_peripherals_and_software',
          'concrete_work_services',
          'construction_materials',
          'consulting_public_relations',
          'correspondence_schools',
          'cosmetic_stores',
          'counseling_services',
          'country_clubs',
          'courier_services',
          'court_costs',
          'credit_reporting_agencies',
          'cruise_lines',
          'dairy_products_stores',
          'dance_hall_studios_schools',
          'dating_escort_services',
          'dentists_orthodontists',
          'department_stores',
          'detective_agencies',
          'digital_goods_applications',
          'digital_goods_games',
          'digital_goods_large_volume',
          'digital_goods_media',
          'direct_marketing_catalog_merchant',
          'direct_marketing_combination_catalog_and_retail_merchant',
          'direct_marketing_inbound_telemarketing',
          'direct_marketing_insurance_services',
          'direct_marketing_other',
          'direct_marketing_outbound_telemarketing',
          'direct_marketing_subscription',
          'direct_marketing_travel',
          'discount_stores',
          'doctors',
          'door_to_door_sales',
          'drapery_window_covering_and_upholstery_stores',
          'drinking_places',
          'drug_stores_and_pharmacies',
          'drugs_drug_proprietaries_and_druggist_sundries',
          'dry_cleaners',
          'durable_goods',
          'duty_free_stores',
          'eating_places_restaurants',
          'educational_services',
          'electric_razor_stores',
          'electric_vehicle_charging',
          'electrical_parts_and_equipment',
          'electrical_services',
          'electronics_repair_shops',
          'electronics_stores',
          'elementary_secondary_schools',
          'emergency_services_gcas_visa_use_only',
          'employment_temp_agencies',
          'equipment_rental',
          'exterminating_services',
          'family_clothing_stores',
          'fast_food_restaurants',
          'financial_institutions',
          'fines_government_administrative_entities',
          'fireplace_fireplace_screens_and_accessories_stores',
          'floor_covering_stores',
          'florists',
          'florists_supplies_nursery_stock_and_flowers',
          'freezer_and_locker_meat_provisioners',
          'fuel_dealers_non_automotive',
          'funeral_services_crematories',
          'furniture_home_furnishings_and_equipment_stores_except_appliances',
          'furniture_repair_refinishing',
          'furriers_and_fur_shops',
          'general_services',
          'gift_card_novelty_and_souvenir_shops',
          'glass_paint_and_wallpaper_stores',
          'glassware_crystal_stores',
          'golf_courses_public',
          'government_licensed_horse_dog_racing_us_region_only',
          'government_licensed_online_casions_online_gambling_us_region_only',
          'government_owned_lotteries_non_us_region',
          'government_owned_lotteries_us_region_only',
          'government_services',
          'grocery_stores_supermarkets',
          'hardware_equipment_and_supplies',
          'hardware_stores',
          'health_and_beauty_spas',
          'hearing_aids_sales_and_supplies',
          'heating_plumbing_a_c',
          'hobby_toy_and_game_shops',
          'home_supply_warehouse_stores',
          'hospitals',
          'hotels_motels_and_resorts',
          'household_appliance_stores',
          'industrial_supplies',
          'information_retrieval_services',
          'insurance_default',
          'insurance_underwriting_premiums',
          'intra_company_purchases',
          'jewelry_stores_watches_clocks_and_silverware_stores',
          'landscaping_services',
          'laundries',
          'laundry_cleaning_services',
          'legal_services_attorneys',
          'luggage_and_leather_goods_stores',
          'lumber_building_materials_stores',
          'manual_cash_disburse',
          'marinas_service_and_supplies',
          'marketplaces',
          'masonry_stonework_and_plaster',
          'massage_parlors',
          'medical_and_dental_labs',
          'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
          'medical_services',
          'membership_organizations',
          'mens_and_boys_clothing_and_accessories_stores',
          'mens_womens_clothing_stores',
          'metal_service_centers',
          'miscellaneous',
          'miscellaneous_apparel_and_accessory_shops',
          'miscellaneous_auto_dealers',
          'miscellaneous_business_services',
          'miscellaneous_food_stores',
          'miscellaneous_general_merchandise',
          'miscellaneous_general_services',
          'miscellaneous_home_furnishing_specialty_stores',
          'miscellaneous_publishing_and_printing',
          'miscellaneous_recreation_services',
          'miscellaneous_repair_shops',
          'miscellaneous_specialty_retail',
          'mobile_home_dealers',
          'motion_picture_theaters',
          'motor_freight_carriers_and_trucking',
          'motor_homes_dealers',
          'motor_vehicle_supplies_and_new_parts',
          'motorcycle_shops_and_dealers',
          'motorcycle_shops_dealers',
          'music_stores_musical_instruments_pianos_and_sheet_music',
          'news_dealers_and_newsstands',
          'non_fi_money_orders',
          'non_fi_stored_value_card_purchase_load',
          'nondurable_goods',
          'nurseries_lawn_and_garden_supply_stores',
          'nursing_personal_care',
          'office_and_commercial_furniture',
          'opticians_eyeglasses',
          'optometrists_ophthalmologist',
          'orthopedic_goods_prosthetic_devices',
          'osteopaths',
          'package_stores_beer_wine_and_liquor',
          'paints_varnishes_and_supplies',
          'parking_lots_garages',
          'passenger_railways',
          'pawn_shops',
          'pet_shops_pet_food_and_supplies',
          'petroleum_and_petroleum_products',
          'photo_developing',
          'photographic_photocopy_microfilm_equipment_and_supplies',
          'photographic_studios',
          'picture_video_production',
          'piece_goods_notions_and_other_dry_goods',
          'plumbing_heating_equipment_and_supplies',
          'political_organizations',
          'postal_services_government_only',
          'precious_stones_and_metals_watches_and_jewelry',
          'professional_services',
          'public_warehousing_and_storage',
          'quick_copy_repro_and_blueprint',
          'railroads',
          'real_estate_agents_and_managers_rentals',
          'record_stores',
          'recreational_vehicle_rentals',
          'religious_goods_stores',
          'religious_organizations',
          'roofing_siding_sheet_metal',
          'secretarial_support_services',
          'security_brokers_dealers',
          'service_stations',
          'sewing_needlework_fabric_and_piece_goods_stores',
          'shoe_repair_hat_cleaning',
          'shoe_stores',
          'small_appliance_repair',
          'snowmobile_dealers',
          'special_trade_services',
          'specialty_cleaning',
          'sporting_goods_stores',
          'sporting_recreation_camps',
          'sports_and_riding_apparel_stores',
          'sports_clubs_fields',
          'stamp_and_coin_stores',
          'stationary_office_supplies_printing_and_writing_paper',
          'stationery_stores_office_and_school_supply_stores',
          'swimming_pools_sales',
          't_ui_travel_germany',
          'tailors_alterations',
          'tax_payments_government_agencies',
          'tax_preparation_services',
          'taxicabs_limousines',
          'telecommunication_equipment_and_telephone_sales',
          'telecommunication_services',
          'telegraph_services',
          'tent_and_awning_shops',
          'testing_laboratories',
          'theatrical_ticket_agencies',
          'timeshares',
          'tire_retreading_and_repair',
          'tolls_bridge_fees',
          'tourist_attractions_and_exhibits',
          'towing_services',
          'trailer_parks_campgrounds',
          'transportation_services',
          'travel_agencies_tour_operators',
          'truck_stop_iteration',
          'truck_utility_trailer_rentals',
          'typesetting_plate_making_and_related_services',
          'typewriter_stores',
          'u_s_federal_government_agencies_or_departments',
          'uniforms_commercial_clothing',
          'used_merchandise_and_secondhand_stores',
          'utilities',
          'variety_stores',
          'veterinary_services',
          'video_amusement_game_supplies',
          'video_game_arcades',
          'video_tape_rental_stores',
          'vocational_trade_schools',
          'watch_jewelry_repair',
          'welding_repair',
          'wholesale_clubs',
          'wig_and_toupee_stores',
          'wires_money_orders',
          'womens_accessory_and_specialty_shops',
          'womens_ready_to_wear_stores',
          'wrecking_and_salvage_yards'
        ])
      )
      .nullable()
      .describe(
        'Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.'
      )
      .optional(),
    /** Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control. */
    blocked_merchant_countries: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.'
      )
      .optional(),
    /** Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
    spending_limits: z
      .array(IssuingCardSpendingLimitSchema)
      .nullable()
      .describe(
        "Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain)."
      )
      .optional(),
    /** Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
    spending_limits_currency: z
      .string()
      .nullable()
      .describe(
        'Currency of the amounts within `spending_limits`. Always the same as the currency of the card.'
      )
      .optional()
  })
  export type IssuingCardAuthorizationControls = z.infer<
    typeof IssuingCardAuthorizationControlsSchema
  >

  export const IssuingAuthorizationPendingRequestSchema = z.object({
    /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        "The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."
      ),
    /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_details: IssuingAuthorizationAmountDetailsSchema.nullable()
      .describe(
        'Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      )
      .optional(),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
    is_amount_controllable: z
      .boolean()
      .describe(
        'If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.'
      ),
    /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    merchant_amount: z
      .number()
      .int()
      .describe(
        'The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** The local currency the merchant is requesting to authorize. */
    merchant_currency: z
      .string()
      .describe('The local currency the merchant is requesting to authorize.'),
    /** The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99. */
    network_risk_score: z
      .number()
      .int()
      .nullable()
      .describe(
        "The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99."
      )
      .optional()
  })
  export type IssuingAuthorizationPendingRequest = z.infer<
    typeof IssuingAuthorizationPendingRequestSchema
  >

  export const IssuingAuthorizationRequestSchema = z.object({
    /** The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
    amount: z
      .number()
      .int()
      .describe(
        "The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved."
      ),
    /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_details: IssuingAuthorizationAmountDetailsSchema.nullable()
      .describe(
        'Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      )
      .optional(),
    /** Whether this request was approved. */
    approved: z.boolean().describe('Whether this request was approved.'),
    /** A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations. */
    authorization_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.'
      )
      .optional(),
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: z
      .number()
      .int()
      .describe(
        'Time at which the object was created. Measured in seconds since the Unix epoch.'
      ),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .max(5000)
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    merchant_amount: z
      .number()
      .int()
      .describe(
        'The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    merchant_currency: z
      .string()
      .max(5000)
      .describe(
        'The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99. */
    network_risk_score: z
      .number()
      .int()
      .nullable()
      .describe(
        "The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99."
      )
      .optional(),
    /** When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome. */
    reason: z
      .enum([
        'account_disabled',
        'card_active',
        'card_canceled',
        'card_expired',
        'card_inactive',
        'cardholder_blocked',
        'cardholder_inactive',
        'cardholder_verification_required',
        'insecure_authorization_method',
        'insufficient_funds',
        'not_allowed',
        'pin_blocked',
        'spending_controls',
        'suspected_fraud',
        'verification_failed',
        'webhook_approved',
        'webhook_declined',
        'webhook_error',
        'webhook_timeout'
      ])
      .describe(
        'When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.'
      ),
    /** If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field. */
    reason_message: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.'
      )
      .optional(),
    /** Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time. */
    requested_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.'
      )
      .optional()
  })
  export type IssuingAuthorizationRequest = z.infer<
    typeof IssuingAuthorizationRequestSchema
  >

  export const IssuingNetworkTokenWalletProviderSchema = z.object({
    /** The wallet provider-given account ID of the digital wallet the token belongs to. */
    account_id: z
      .string()
      .max(5000)
      .describe(
        'The wallet provider-given account ID of the digital wallet the token belongs to.'
      )
      .optional(),
    /** An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy. */
    account_trust_score: z
      .number()
      .int()
      .describe(
        'An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.'
      )
      .optional(),
    /** The method used for tokenizing a card. */
    card_number_source: z
      .enum(['app', 'manual', 'on_file', 'other'])
      .describe('The method used for tokenizing a card.')
      .optional(),
    cardholder_address: IssuingNetworkTokenAddressSchema.optional(),
    /** The name of the cardholder tokenizing the card. */
    cardholder_name: z
      .string()
      .max(5000)
      .describe('The name of the cardholder tokenizing the card.')
      .optional(),
    /** An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy. */
    device_trust_score: z
      .number()
      .int()
      .describe(
        'An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.'
      )
      .optional(),
    /** The hashed email address of the cardholder's account with the wallet provider. */
    hashed_account_email_address: z
      .string()
      .max(5000)
      .describe(
        "The hashed email address of the cardholder's account with the wallet provider."
      )
      .optional(),
    /** The reasons for suggested tokenization given by the card network. */
    reason_codes: z
      .array(
        z.enum([
          'account_card_too_new',
          'account_recently_changed',
          'account_too_new',
          'account_too_new_since_launch',
          'additional_device',
          'data_expired',
          'defer_id_v_decision',
          'device_recently_lost',
          'good_activity_history',
          'has_suspended_tokens',
          'high_risk',
          'inactive_account',
          'long_account_tenure',
          'low_account_score',
          'low_device_score',
          'low_phone_number_score',
          'network_service_error',
          'outside_home_territory',
          'provisioning_cardholder_mismatch',
          'provisioning_device_and_cardholder_mismatch',
          'provisioning_device_mismatch',
          'same_device_no_prior_authentication',
          'same_device_successful_prior_authentication',
          'software_update',
          'suspicious_activity',
          'too_many_different_cardholders',
          'too_many_recent_attempts',
          'too_many_recent_tokens'
        ])
      )
      .describe(
        'The reasons for suggested tokenization given by the card network.'
      )
      .optional(),
    /** The recommendation on responding to the tokenization request. */
    suggested_decision: z
      .enum(['approve', 'decline', 'require_auth'])
      .describe('The recommendation on responding to the tokenization request.')
      .optional(),
    /** The version of the standard for mapping reason codes followed by the wallet provider. */
    suggested_decision_version: z
      .string()
      .max(5000)
      .describe(
        'The version of the standard for mapping reason codes followed by the wallet provider.'
      )
      .optional()
  })
  export type IssuingNetworkTokenWalletProvider = z.infer<
    typeof IssuingNetworkTokenWalletProviderSchema
  >

  export const IssuingTransactionFlightDataSchema = z.object({
    /** The time that the flight departed. */
    departure_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the flight departed.')
      .optional(),
    /** The name of the passenger. */
    passenger_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The name of the passenger.')
      .optional(),
    /** Whether the ticket is refundable. */
    refundable: z
      .boolean()
      .nullable()
      .describe('Whether the ticket is refundable.')
      .optional(),
    /** The legs of the trip. */
    segments: z
      .array(IssuingTransactionFlightDataLegSchema)
      .nullable()
      .describe('The legs of the trip.')
      .optional(),
    /** The travel agency that issued the ticket. */
    travel_agency: z
      .string()
      .max(5000)
      .nullable()
      .describe('The travel agency that issued the ticket.')
      .optional()
  })
  export type IssuingTransactionFlightData = z.infer<
    typeof IssuingTransactionFlightDataSchema
  >

  export const ChargeOutcomeSchema = z.object({
    /** An enumerated value providing a more detailed explanation on [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines). */
    advice_code: z
      .enum(['confirm_card_data', 'do_not_try_again', 'try_again_later'])
      .nullable()
      .describe(
        'An enumerated value providing a more detailed explanation on [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines).'
      )
      .optional(),
    /** For charges declined by the network, a 2 digit code which indicates the advice returned by the network on how to proceed with an error. */
    network_advice_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'For charges declined by the network, a 2 digit code which indicates the advice returned by the network on how to proceed with an error.'
      )
      .optional(),
    /** For charges declined by the network, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed. */
    network_decline_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'For charges declined by the network, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.'
      )
      .optional(),
    /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
    network_status: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder\'s statement.'
      )
      .optional(),
    /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
    reason: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details."
      )
      .optional(),
    /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
    risk_level: z
      .string()
      .max(5000)
      .describe(
        "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar."
      )
      .optional(),
    /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
    risk_score: z
      .number()
      .int()
      .describe(
        "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams."
      )
      .optional(),
    /** The ID of the Radar rule that matched the payment, if applicable. */
    rule: z
      .union([z.string().max(5000), RuleSchema])
      .describe(
        'The ID of the Radar rule that matched the payment, if applicable.'
      )
      .optional(),
    /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
    seller_message: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.'
      )
      .optional(),
    /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.'
      )
  })
  export type ChargeOutcome = z.infer<typeof ChargeOutcomeSchema>

  export const AmazonPayUnderlyingPaymentMethodFundingDetailsSchema = z.object({
    card: PaymentMethodDetailsPassthroughCardSchema.optional(),
    /** funding type of the underlying payment method. */
    type: z
      .literal('card')
      .nullable()
      .describe('funding type of the underlying payment method.')
      .optional()
  })
  export type AmazonPayUnderlyingPaymentMethodFundingDetails = z.infer<
    typeof AmazonPayUnderlyingPaymentMethodFundingDetailsSchema
  >

  export const PaymentMethodDetailsCardInstallmentsSchema = z.object({
    /** Installment plan selected for the payment. */
    plan: PaymentMethodDetailsCardInstallmentsPlanSchema.nullable()
      .describe('Installment plan selected for the payment.')
      .optional()
  })
  export type PaymentMethodDetailsCardInstallments = z.infer<
    typeof PaymentMethodDetailsCardInstallmentsSchema
  >

  export const PaymentMethodDetailsCardWalletMasterpassSchema = z.object({
    /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    billing_address: AddressSchema.nullable()
      .describe(
        "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    shipping_address: AddressSchema.nullable()
      .describe(
        "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodDetailsCardWalletMasterpass = z.infer<
    typeof PaymentMethodDetailsCardWalletMasterpassSchema
  >

  export const PaymentMethodDetailsCardWalletVisaCheckoutSchema = z.object({
    /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    billing_address: AddressSchema.nullable()
      .describe(
        "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    shipping_address: AddressSchema.nullable()
      .describe(
        "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodDetailsCardWalletVisaCheckout = z.infer<
    typeof PaymentMethodDetailsCardWalletVisaCheckoutSchema
  >

  export const PaymentMethodDetailsInteracPresentSchema = z.object({
    /** Card brand. Can be `interac`, `mastercard` or `visa`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe('Card brand. Can be `interac`, `mastercard` or `visa`.')
      .optional(),
    /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
    cardholder_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** A high-level description of the type of cards issued in this range. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A high-level description of the type of cards issued in this range.'
      )
      .optional(),
    /** Authorization response cryptogram. */
    emv_auth_data: z
      .string()
      .max(5000)
      .nullable()
      .describe('Authorization response cryptogram.')
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
    generated_card: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.'
      )
      .optional(),
    /** The name of the card's issuing bank. */
    issuer: z
      .string()
      .max(5000)
      .nullable()
      .describe("The name of the card's issuing bank.")
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    network: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise. */
    network_transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.'
      )
      .optional(),
    /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
    preferred_locales: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.'
      )
      .optional(),
    /** How card details were read in this transaction. */
    read_method: z
      .enum([
        'contact_emv',
        'contactless_emv',
        'contactless_magstripe_mode',
        'magnetic_stripe_fallback',
        'magnetic_stripe_track2'
      ])
      .nullable()
      .describe('How card details were read in this transaction.')
      .optional(),
    /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
    receipt: PaymentMethodDetailsInteracPresentReceiptSchema.nullable()
      .describe(
        'A collection of fields required to be displayed on receipts. Only required for EMV transactions.'
      )
      .optional()
  })
  export type PaymentMethodDetailsInteracPresent = z.infer<
    typeof PaymentMethodDetailsInteracPresentSchema
  >

  export const KlarnaPayerDetailsSchema = z.object({
    /** The payer's address */
    address: KlarnaAddressSchema.nullable()
      .describe("The payer's address")
      .optional()
  })
  export type KlarnaPayerDetails = z.infer<typeof KlarnaPayerDetailsSchema>

  export const PaymentMethodDetailsKonbiniSchema = z.object({
    /** If the payment succeeded, this contains the details of the convenience store where the payment was completed. */
    store: PaymentMethodDetailsKonbiniStoreSchema.nullable()
      .describe(
        'If the payment succeeded, this contains the details of the convenience store where the payment was completed.'
      )
      .optional()
  })
  export type PaymentMethodDetailsKonbini = z.infer<
    typeof PaymentMethodDetailsKonbiniSchema
  >

  export const PaymentMethodDetailsMobilepaySchema = z.object({
    /** Internal card details */
    card: InternalCardSchema.nullable()
      .describe('Internal card details')
      .optional()
  })
  export type PaymentMethodDetailsMobilepay = z.infer<
    typeof PaymentMethodDetailsMobilepaySchema
  >

  export const PaymentMethodDetailsPaypalSchema = z.object({
    /** Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /**
     * Owner's email. Values are provided by PayPal directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    payer_email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's email. Values are provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** PayPal account PayerID. This identifier uniquely identifies the PayPal customer. */
    payer_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'PayPal account PayerID. This identifier uniquely identifies the PayPal customer.'
      )
      .optional(),
    /**
     * Owner's full name. Values provided by PayPal directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    payer_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's full name. Values provided by PayPal directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction. */
    seller_protection: PaypalSellerProtectionSchema.nullable()
      .describe(
        'The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction.'
      )
      .optional(),
    /** A unique ID generated by PayPal for this transaction. */
    transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe('A unique ID generated by PayPal for this transaction.')
      .optional()
  })
  export type PaymentMethodDetailsPaypal = z.infer<
    typeof PaymentMethodDetailsPaypalSchema
  >

  export const RevolutPayUnderlyingPaymentMethodFundingDetailsSchema = z.object(
    {
      card: PaymentMethodDetailsPassthroughCardSchema.optional(),
      /** funding type of the underlying payment method. */
      type: z
        .literal('card')
        .nullable()
        .describe('funding type of the underlying payment method.')
        .optional()
    }
  )
  export type RevolutPayUnderlyingPaymentMethodFundingDetails = z.infer<
    typeof RevolutPayUnderlyingPaymentMethodFundingDetailsSchema
  >

  /**
   * Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.
   *
   * Related guide: [Tax rates](/billing/taxes/tax-rates)
   */
  export const TaxRateSchema = z
    .object({
      /** Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
      active: z
        .boolean()
        .describe(
          'Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.'
        ),
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.'
        )
        .optional(),
      /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
      display_name: z
        .string()
        .max(5000)
        .describe(
          'The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.'
        ),
      /**
       * Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
       * this percentage reflects the rate actually used to calculate tax based on the product's taxability
       * and whether the user is registered to collect taxes in the corresponding jurisdiction.
       */
      effective_percentage: z
        .number()
        .nullable()
        .describe(
          "Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,\nthis percentage reflects the rate actually used to calculate tax based on the product's taxability\nand whether the user is registered to collect taxes in the corresponding jurisdiction."
        )
        .optional(),
      /** The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate. */
      flat_amount: TaxRateFlatAmountSchema.nullable()
        .describe(
          'The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** This specifies if the tax rate is inclusive or exclusive. */
      inclusive: z
        .boolean()
        .describe('This specifies if the tax rate is inclusive or exclusive.'),
      /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
      jurisdiction: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.'
        )
        .optional(),
      /** The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates. */
      jurisdiction_level: z
        .enum(['city', 'country', 'county', 'district', 'multiple', 'state'])
        .nullable()
        .describe(
          'The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax_rate')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions. */
      percentage: z
        .number()
        .describe(
          'Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.'
        ),
      /** Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. */
      rate_type: z
        .enum(['flat_amount', 'percentage'])
        .nullable()
        .describe(
          'Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location.'
        )
        .optional(),
      /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States. */
      state: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          '[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.'
        )
        .optional(),
      /** The high-level tax type, such as `vat` or `sales_tax`. */
      tax_type: z
        .enum([
          'amusement_tax',
          'communications_tax',
          'gst',
          'hst',
          'igst',
          'jct',
          'lease_tax',
          'pst',
          'qst',
          'retail_delivery_fee',
          'rst',
          'sales_tax',
          'service_tax',
          'vat'
        ])
        .nullable()
        .describe('The high-level tax type, such as `vat` or `sales_tax`.')
        .optional()
    })
    .describe(
      'Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.\n\nRelated guide: [Tax rates](/billing/taxes/tax-rates)'
    )
  export type TaxRate = z.infer<typeof TaxRateSchema>

  export const InvoicePaymentMethodOptionsAcssDebitSchema = z.object({
    mandate_options:
      InvoicePaymentMethodOptionsAcssDebitMandateOptionsSchema.optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type InvoicePaymentMethodOptionsAcssDebit = z.infer<
    typeof InvoicePaymentMethodOptionsAcssDebitSchema
  >

  export const SubscriptionPaymentMethodOptionsCardSchema = z.object({
    mandate_options: InvoiceMandateOptionsCardSchema.optional(),
    /** Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time. */
    network: z
      .enum([
        'amex',
        'cartes_bancaires',
        'diners',
        'discover',
        'eftpos_au',
        'girocard',
        'interac',
        'jcb',
        'link',
        'mastercard',
        'unionpay',
        'unknown',
        'visa'
      ])
      .nullable()
      .describe(
        'Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.'
      )
      .optional(),
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure: z
      .enum(['any', 'automatic', 'challenge'])
      .nullable()
      .describe(
        'We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.'
      )
      .optional()
  })
  export type SubscriptionPaymentMethodOptionsCard = z.infer<
    typeof SubscriptionPaymentMethodOptionsCardSchema
  >

  export const InvoicePaymentMethodOptionsCustomerBalanceBankTransferSchema =
    z.object({
      eu_bank_transfer:
        InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransferSchema.optional(),
      /** The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: z
        .string()
        .nullable()
        .describe(
          'The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.'
        )
        .optional()
    })
  export type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer = z.infer<
    typeof InvoicePaymentMethodOptionsCustomerBalanceBankTransferSchema
  >

  export const InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsSchema =
    z.object({
      filters:
        InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFiltersSchema.optional(),
      /** The list of permissions to request. The `payment_method` permission must be included. */
      permissions: z
        .array(
          z.enum(['balances', 'ownership', 'payment_method', 'transactions'])
        )
        .describe(
          'The list of permissions to request. The `payment_method` permission must be included.'
        )
        .optional(),
      /** Data features requested to be retrieved upon account creation. */
      prefetch: z
        .array(z.enum(['balances', 'ownership', 'transactions']))
        .nullable()
        .describe(
          'Data features requested to be retrieved upon account creation.'
        )
        .optional()
    })
  export type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions =
    z.infer<
      typeof InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsSchema
    >

  export const PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema =
    z.object({
      /** The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration. */
      hosted_instructions_url: z
        .string()
        .max(5000)
        .describe(
          'The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.'
        ),
      /** The url for mobile redirect based auth */
      mobile_auth_url: z
        .string()
        .max(5000)
        .describe('The url for mobile redirect based auth'),
      qr_code: PaymentIntentNextActionCashappQrCodeSchema
    })
  export type PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode =
    z.infer<
      typeof PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema
    >

  export const SetupIntentPaymentMethodOptionsAcssDebitSchema = z.object({
    /** Currency supported by the bank account */
    currency: z
      .enum(['cad', 'usd'])
      .nullable()
      .describe('Currency supported by the bank account')
      .optional(),
    mandate_options:
      SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema.optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type SetupIntentPaymentMethodOptionsAcssDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsAcssDebitSchema
  >

  export const SetupIntentPaymentMethodOptionsBacsDebitSchema = z.object({
    mandate_options:
      SetupIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema.optional()
  })
  export type SetupIntentPaymentMethodOptionsBacsDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsBacsDebitSchema
  >

  export const SetupIntentPaymentMethodOptionsCardSchema = z.object({
    /** Configuration options for setting up an eMandate for cards issued in India. */
    mandate_options:
      SetupIntentPaymentMethodOptionsCardMandateOptionsSchema.nullable()
        .describe(
          'Configuration options for setting up an eMandate for cards issued in India.'
        )
        .optional(),
    /** Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time. */
    network: z
      .enum([
        'amex',
        'cartes_bancaires',
        'diners',
        'discover',
        'eftpos_au',
        'girocard',
        'interac',
        'jcb',
        'link',
        'mastercard',
        'unionpay',
        'unknown',
        'visa'
      ])
      .nullable()
      .describe(
        'Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.'
      )
      .optional(),
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure: z
      .enum(['any', 'automatic', 'challenge'])
      .nullable()
      .describe(
        'We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.'
      )
      .optional()
  })
  export type SetupIntentPaymentMethodOptionsCard = z.infer<
    typeof SetupIntentPaymentMethodOptionsCardSchema
  >

  export const SetupIntentPaymentMethodOptionsSepaDebitSchema = z.object({
    mandate_options:
      SetupIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema.optional()
  })
  export type SetupIntentPaymentMethodOptionsSepaDebit = z.infer<
    typeof SetupIntentPaymentMethodOptionsSepaDebitSchema
  >

  export const LinkedAccountOptionsUsBankAccountSchema = z.object({
    filters:
      PaymentFlowsPrivatePaymentMethodsUsBankAccountLinkedAccountOptionsFiltersSchema.optional(),
    /** The list of permissions to request. The `payment_method` permission must be included. */
    permissions: z
      .array(
        z.enum(['balances', 'ownership', 'payment_method', 'transactions'])
      )
      .describe(
        'The list of permissions to request. The `payment_method` permission must be included.'
      )
      .optional(),
    /** Data features requested to be retrieved upon account creation. */
    prefetch: z
      .array(z.enum(['balances', 'ownership', 'transactions']))
      .nullable()
      .describe(
        'Data features requested to be retrieved upon account creation.'
      )
      .optional(),
    /** For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
    return_url: z
      .string()
      .max(5000)
      .describe(
        'For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.'
      )
      .optional()
  })
  export type LinkedAccountOptionsUsBankAccount = z.infer<
    typeof LinkedAccountOptionsUsBankAccountSchema
  >

  export const BillingClocksResourceStatusDetailsStatusDetailsSchema = z.object(
    {
      advancing:
        BillingClocksResourceStatusDetailsAdvancingStatusDetailsSchema.optional()
    }
  )
  export type BillingClocksResourceStatusDetailsStatusDetails = z.infer<
    typeof BillingClocksResourceStatusDetailsStatusDetailsSchema
  >

  /** Configures how this subscription behaves during the trial period. */
  export const SubscriptionsTrialsResourceTrialSettingsSchema = z
    .object({ end_behavior: SubscriptionsTrialsResourceEndBehaviorSchema })
    .describe(
      'Configures how this subscription behaves during the trial period.'
    )
  export type SubscriptionsTrialsResourceTrialSettings = z.infer<
    typeof SubscriptionsTrialsResourceTrialSettingsSchema
  >

  export const BillingCreditGrantsResourceAmountSchema = z.object({
    /** The monetary amount. */
    monetary: BillingCreditGrantsResourceMonetaryAmountSchema.nullable()
      .describe('The monetary amount.')
      .optional(),
    /** The type of this amount. We currently only support `monetary` billing credits. */
    type: z
      .literal('monetary')
      .describe(
        'The type of this amount. We currently only support `monetary` billing credits.'
      )
  })
  export type BillingCreditGrantsResourceAmount = z.infer<
    typeof BillingCreditGrantsResourceAmountSchema
  >

  export const BillingCreditGrantsResourceScopeSchema = z.object({
    /** The price type that credit grants can apply to. We currently only support the `metered` price type. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. */
    price_type: z
      .literal('metered')
      .describe(
        'The price type that credit grants can apply to. We currently only support the `metered` price type. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them.'
      )
      .optional(),
    /** The prices that credit grants can apply to. We currently only support `metered` prices. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. */
    prices: z
      .array(BillingCreditGrantsResourceApplicablePriceSchema)
      .describe(
        'The prices that credit grants can apply to. We currently only support `metered` prices. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them.'
      )
      .optional()
  })
  export type BillingCreditGrantsResourceScope = z.infer<
    typeof BillingCreditGrantsResourceScopeSchema
  >

  export const InvoicesResourceLineItemsProrationDetailsSchema = z.object({
    /** For a credit proration `line_item`, the original debit line_items to which the credit proration applies. */
    credited_items: InvoicesResourceLineItemsCreditedItemsSchema.nullable()
      .describe(
        'For a credit proration `line_item`, the original debit line_items to which the credit proration applies.'
      )
      .optional()
  })
  export type InvoicesResourceLineItemsProrationDetails = z.infer<
    typeof InvoicesResourceLineItemsProrationDetailsSchema
  >

  export const InvoicePaymentMethodOptionsCardSchema = z.object({
    installments: InvoiceInstallmentsCardSchema.optional(),
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure: z
      .enum(['any', 'automatic', 'challenge'])
      .nullable()
      .describe(
        'We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.'
      )
      .optional()
  })
  export type InvoicePaymentMethodOptionsCard = z.infer<
    typeof InvoicePaymentMethodOptionsCardSchema
  >

  export const InvoicesResourceInvoiceRenderingSchema = z.object({
    /** How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. */
    amount_tax_display: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.'
      )
      .optional(),
    /** Invoice pdf rendering options */
    pdf: InvoiceRenderingPdfSchema.nullable()
      .describe('Invoice pdf rendering options')
      .optional(),
    /** ID of the rendering template that the invoice is formatted by. */
    template: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'ID of the rendering template that the invoice is formatted by.'
      )
      .optional(),
    /** Version of the rendering template that the invoice is using. */
    template_version: z
      .number()
      .int()
      .nullable()
      .describe('Version of the rendering template that the invoice is using.')
      .optional()
  })
  export type InvoicesResourceInvoiceRendering = z.infer<
    typeof InvoicesResourceInvoiceRenderingSchema
  >

  export const ShippingRateDeliveryEstimateSchema = z.object({
    /** The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite. */
    maximum: ShippingRateDeliveryEstimateBoundSchema.nullable()
      .describe(
        'The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.'
      )
      .optional(),
    /** The lower bound of the estimated range. If empty, represents no lower bound. */
    minimum: ShippingRateDeliveryEstimateBoundSchema.nullable()
      .describe(
        'The lower bound of the estimated range. If empty, represents no lower bound.'
      )
      .optional()
  })
  export type ShippingRateDeliveryEstimate = z.infer<
    typeof ShippingRateDeliveryEstimateSchema
  >

  export const ShippingRateFixedAmountSchema = z.object({
    /** A non-negative integer in cents representing how much to charge. */
    amount: z
      .number()
      .int()
      .describe(
        'A non-negative integer in cents representing how much to charge.'
      ),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
    currency_options: z
      .record(ShippingRateCurrencyOptionSchema)
      .describe(
        'Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).'
      )
      .optional()
  })
  export type ShippingRateFixedAmount = z.infer<
    typeof ShippingRateFixedAmountSchema
  >

  export const InvoiceThresholdReasonSchema = z.object({
    /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
    amount_gte: z
      .number()
      .int()
      .nullable()
      .describe(
        'The total invoice amount threshold boundary if it triggered the threshold invoice.'
      )
      .optional(),
    /** Indicates which line items triggered a threshold invoice. */
    item_reasons: z
      .array(InvoiceItemThresholdReasonSchema)
      .describe('Indicates which line items triggered a threshold invoice.')
  })
  export type InvoiceThresholdReason = z.infer<
    typeof InvoiceThresholdReasonSchema
  >

  /** ABA Records contain U.S. bank account details per the ABA format. */
  export const FundingInstructionsBankTransferAbaRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The account holder name */
      account_holder_name: z
        .string()
        .max(5000)
        .describe('The account holder name'),
      /** The ABA account number */
      account_number: z.string().max(5000).describe('The ABA account number'),
      /** The account type */
      account_type: z.string().max(5000).describe('The account type'),
      bank_address: AddressSchema,
      /** The bank name */
      bank_name: z.string().max(5000).describe('The bank name'),
      /** The ABA routing number */
      routing_number: z.string().max(5000).describe('The ABA routing number')
    })
    .describe(
      'ABA Records contain U.S. bank account details per the ABA format.'
    )
  export type FundingInstructionsBankTransferAbaRecord = z.infer<
    typeof FundingInstructionsBankTransferAbaRecordSchema
  >

  /** Iban Records contain E.U. bank account details per the SEPA format. */
  export const FundingInstructionsBankTransferIbanRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The name of the person or business that owns the bank account */
      account_holder_name: z
        .string()
        .max(5000)
        .describe(
          'The name of the person or business that owns the bank account'
        ),
      bank_address: AddressSchema,
      /** The BIC/SWIFT code of the account. */
      bic: z.string().max(5000).describe('The BIC/SWIFT code of the account.'),
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: z
        .string()
        .max(5000)
        .describe(
          'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
        ),
      /** The IBAN of the account. */
      iban: z.string().max(5000).describe('The IBAN of the account.')
    })
    .describe(
      'Iban Records contain E.U. bank account details per the SEPA format.'
    )
  export type FundingInstructionsBankTransferIbanRecord = z.infer<
    typeof FundingInstructionsBankTransferIbanRecordSchema
  >

  /** Sort Code Records contain U.K. bank account details per the sort code format. */
  export const FundingInstructionsBankTransferSortCodeRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The name of the person or business that owns the bank account */
      account_holder_name: z
        .string()
        .max(5000)
        .describe(
          'The name of the person or business that owns the bank account'
        ),
      /** The account number */
      account_number: z.string().max(5000).describe('The account number'),
      bank_address: AddressSchema,
      /** The six-digit sort code */
      sort_code: z.string().max(5000).describe('The six-digit sort code')
    })
    .describe(
      'Sort Code Records contain U.K. bank account details per the sort code format.'
    )
  export type FundingInstructionsBankTransferSortCodeRecord = z.infer<
    typeof FundingInstructionsBankTransferSortCodeRecordSchema
  >

  /** SPEI Records contain Mexico bank account details per the SPEI format. */
  export const FundingInstructionsBankTransferSpeiRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The account holder name */
      account_holder_name: z
        .string()
        .max(5000)
        .describe('The account holder name'),
      bank_address: AddressSchema,
      /** The three-digit bank code */
      bank_code: z.string().max(5000).describe('The three-digit bank code'),
      /** The short banking institution name */
      bank_name: z
        .string()
        .max(5000)
        .describe('The short banking institution name'),
      /** The CLABE number */
      clabe: z.string().max(5000).describe('The CLABE number')
    })
    .describe(
      'SPEI Records contain Mexico bank account details per the SPEI format.'
    )
  export type FundingInstructionsBankTransferSpeiRecord = z.infer<
    typeof FundingInstructionsBankTransferSpeiRecordSchema
  >

  /** SWIFT Records contain U.S. bank account details per the SWIFT format. */
  export const FundingInstructionsBankTransferSwiftRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The account holder name */
      account_holder_name: z
        .string()
        .max(5000)
        .describe('The account holder name'),
      /** The account number */
      account_number: z.string().max(5000).describe('The account number'),
      /** The account type */
      account_type: z.string().max(5000).describe('The account type'),
      bank_address: AddressSchema,
      /** The bank name */
      bank_name: z.string().max(5000).describe('The bank name'),
      /** The SWIFT code */
      swift_code: z.string().max(5000).describe('The SWIFT code')
    })
    .describe(
      'SWIFT Records contain U.S. bank account details per the SWIFT format.'
    )
  export type FundingInstructionsBankTransferSwiftRecord = z.infer<
    typeof FundingInstructionsBankTransferSwiftRecordSchema
  >

  /** Zengin Records contain Japan bank account details per the Zengin format. */
  export const FundingInstructionsBankTransferZenginRecordSchema = z
    .object({
      account_holder_address: AddressSchema,
      /** The account holder name */
      account_holder_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('The account holder name')
        .optional(),
      /** The account number */
      account_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('The account number')
        .optional(),
      /** The bank account type. In Japan, this can only be `futsu` or `toza`. */
      account_type: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The bank account type. In Japan, this can only be `futsu` or `toza`.'
        )
        .optional(),
      bank_address: AddressSchema,
      /** The bank code of the account */
      bank_code: z
        .string()
        .max(5000)
        .nullable()
        .describe('The bank code of the account')
        .optional(),
      /** The bank name of the account */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('The bank name of the account')
        .optional(),
      /** The branch code of the account */
      branch_code: z
        .string()
        .max(5000)
        .nullable()
        .describe('The branch code of the account')
        .optional(),
      /** The branch name of the account */
      branch_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('The branch name of the account')
        .optional()
    })
    .describe(
      'Zengin Records contain Japan bank account details per the Zengin format.'
    )
  export type FundingInstructionsBankTransferZenginRecord = z.infer<
    typeof FundingInstructionsBankTransferZenginRecordSchema
  >

  export const PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCodeSchema =
    z.object({
      /** The URL to the hosted Swish instructions page, which allows customers to view the QR code. */
      hosted_instructions_url: z
        .string()
        .max(5000)
        .describe(
          'The URL to the hosted Swish instructions page, which allows customers to view the QR code.'
        ),
      qr_code: PaymentIntentNextActionSwishQrCodeSchema
    })
  export type PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode =
    z.infer<
      typeof PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCodeSchema
    >

  export const PaymentIntentPaymentMethodOptionsAcssDebitSchema = z.object({
    mandate_options:
      PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsAcssDebit = z.infer<
    typeof PaymentIntentPaymentMethodOptionsAcssDebitSchema
  >

  export const PaymentFlowsInstallmentOptionsSchema = z.object({
    enabled: z.boolean(),
    plan: PaymentMethodDetailsCardInstallmentsPlanSchema.optional()
  })
  export type PaymentFlowsInstallmentOptions = z.infer<
    typeof PaymentFlowsInstallmentOptionsSchema
  >

  export const PaymentIntentPaymentMethodOptionsBacsDebitSchema = z.object({
    mandate_options:
      PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebitSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsBacsDebit = z.infer<
    typeof PaymentIntentPaymentMethodOptionsBacsDebitSchema
  >

  export const PaymentMethodOptionsCardInstallmentsSchema = z.object({
    /** Installment plans that may be selected for this PaymentIntent. */
    available_plans: z
      .array(PaymentMethodDetailsCardInstallmentsPlanSchema)
      .nullable()
      .describe(
        'Installment plans that may be selected for this PaymentIntent.'
      )
      .optional(),
    /** Whether Installments are enabled for this PaymentIntent. */
    enabled: z
      .boolean()
      .describe('Whether Installments are enabled for this PaymentIntent.'),
    /** Installment plan selected for this PaymentIntent. */
    plan: PaymentMethodDetailsCardInstallmentsPlanSchema.nullable()
      .describe('Installment plan selected for this PaymentIntent.')
      .optional()
  })
  export type PaymentMethodOptionsCardInstallments = z.infer<
    typeof PaymentMethodOptionsCardInstallmentsSchema
  >

  export const PaymentMethodOptionsCardPresentSchema = z.object({
    /** Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity) */
    request_extended_authorization: z
      .boolean()
      .nullable()
      .describe(
        'Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)'
      )
      .optional(),
    /** Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
    request_incremental_authorization_support: z
      .boolean()
      .nullable()
      .describe(
        'Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.'
      )
      .optional(),
    routing: PaymentMethodOptionsCardPresentRoutingSchema.optional()
  })
  export type PaymentMethodOptionsCardPresent = z.infer<
    typeof PaymentMethodOptionsCardPresentSchema
  >

  export const PaymentMethodOptionsCustomerBalanceBankTransferSchema = z.object(
    {
      eu_bank_transfer:
        PaymentMethodOptionsCustomerBalanceEuBankAccountSchema.optional(),
      /**
       * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
       *
       * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
       */
      requested_address_types: z
        .array(
          z.enum([
            'aba',
            'iban',
            'sepa',
            'sort_code',
            'spei',
            'swift',
            'zengin'
          ])
        )
        .describe(
          'List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.\n\nPermitted values include: `sort_code`, `zengin`, `iban`, or `spei`.'
        )
        .optional(),
      /** The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: z
        .enum([
          'eu_bank_transfer',
          'gb_bank_transfer',
          'jp_bank_transfer',
          'mx_bank_transfer',
          'us_bank_transfer'
        ])
        .nullable()
        .describe(
          'The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.'
        )
        .optional()
    }
  )
  export type PaymentMethodOptionsCustomerBalanceBankTransfer = z.infer<
    typeof PaymentMethodOptionsCustomerBalanceBankTransferSchema
  >

  export const PaymentIntentPaymentMethodOptionsSepaDebitSchema = z.object({
    mandate_options:
      PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebitSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsSepaDebit = z.infer<
    typeof PaymentIntentPaymentMethodOptionsSepaDebitSchema
  >

  export const PaymentIntentCardProcessingSchema = z.object({
    customer_notification:
      PaymentIntentProcessingCustomerNotificationSchema.optional()
  })
  export type PaymentIntentCardProcessing = z.infer<
    typeof PaymentIntentCardProcessingSchema
  >

  export const PaymentMethodCardWalletMasterpassSchema = z.object({
    /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    billing_address: AddressSchema.nullable()
      .describe(
        "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    shipping_address: AddressSchema.nullable()
      .describe(
        "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodCardWalletMasterpass = z.infer<
    typeof PaymentMethodCardWalletMasterpassSchema
  >

  export const PaymentMethodCardWalletVisaCheckoutSchema = z.object({
    /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    billing_address: AddressSchema.nullable()
      .describe(
        "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional(),
    /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    shipping_address: AddressSchema.nullable()
      .describe(
        "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodCardWalletVisaCheckout = z.infer<
    typeof PaymentMethodCardWalletVisaCheckoutSchema
  >

  export const PaymentMethodInteracPresentSchema = z.object({
    /** Card brand. Can be `interac`, `mastercard` or `visa`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe('Card brand. Can be `interac`, `mastercard` or `visa`.')
      .optional(),
    /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
    cardholder_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** A high-level description of the type of cards issued in this range. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A high-level description of the type of cards issued in this range.'
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** The name of the card's issuing bank. */
    issuer: z
      .string()
      .max(5000)
      .nullable()
      .describe("The name of the card's issuing bank.")
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** Contains information about card networks that can be used to process the payment. */
    networks: PaymentMethodCardPresentNetworksSchema.nullable()
      .describe(
        'Contains information about card networks that can be used to process the payment.'
      )
      .optional(),
    /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
    preferred_locales: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.'
      )
      .optional(),
    /** How card details were read in this transaction. */
    read_method: z
      .enum([
        'contact_emv',
        'contactless_emv',
        'contactless_magstripe_mode',
        'magnetic_stripe_fallback',
        'magnetic_stripe_track2'
      ])
      .nullable()
      .describe('How card details were read in this transaction.')
      .optional()
  })
  export type PaymentMethodInteracPresent = z.infer<
    typeof PaymentMethodInteracPresentSchema
  >

  export const PaymentMethodKlarnaSchema = z.object({
    /** The customer's date of birth, if provided. */
    dob: PaymentFlowsPrivatePaymentMethodsKlarnaDobSchema.nullable()
      .describe("The customer's date of birth, if provided.")
      .optional()
  })
  export type PaymentMethodKlarna = z.infer<typeof PaymentMethodKlarnaSchema>

  export const PaymentMethodUsBankAccountStatusDetailsSchema = z.object({
    blocked: PaymentMethodUsBankAccountBlockedSchema.optional()
  })
  export type PaymentMethodUsBankAccountStatusDetails = z.infer<
    typeof PaymentMethodUsBankAccountStatusDetailsSchema
  >

  export const CustomerTaxSchema = z.object({
    /** Surfaces if automatic tax computation is possible given the current customer location information. */
    automatic_tax: z
      .enum(['failed', 'not_collecting', 'supported', 'unrecognized_location'])
      .describe(
        'Surfaces if automatic tax computation is possible given the current customer location information.'
      ),
    /** A recent IP address of the customer used for tax reporting and tax location inference. */
    ip_address: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A recent IP address of the customer used for tax reporting and tax location inference.'
      )
      .optional(),
    /** The customer's location as identified by Stripe Tax. */
    location: CustomerTaxLocationSchema.nullable()
      .describe("The customer's location as identified by Stripe Tax.")
      .optional()
  })
  export type CustomerTax = z.infer<typeof CustomerTaxSchema>

  export const ExternalAccountRequirementsSchema = z.object({
    /** Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
    currently_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.'
      )
      .optional(),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .nullable()
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      )
      .optional(),
    /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account. */
    past_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account."
      )
      .optional(),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
      .optional()
  })
  export type ExternalAccountRequirements = z.infer<
    typeof ExternalAccountRequirementsSchema
  >

  export const PersonAdditionalTosAcceptancesSchema = z.object({
    /** Details on the legal guardian's acceptance of the main Stripe service agreement. */
    account: PersonAdditionalTosAcceptanceSchema.nullable()
      .describe(
        "Details on the legal guardian's acceptance of the main Stripe service agreement."
      )
      .optional()
  })
  export type PersonAdditionalTosAcceptances = z.infer<
    typeof PersonAdditionalTosAcceptancesSchema
  >

  export const AccountCardIssuingSettingsSchema = z.object({
    tos_acceptance: CardIssuingAccountTermsOfServiceSchema.optional()
  })
  export type AccountCardIssuingSettings = z.infer<
    typeof AccountCardIssuingSettingsSchema
  >

  export const AccountCardPaymentsSettingsSchema = z.object({
    decline_on: AccountDeclineChargeOnSchema.optional(),
    /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
    statement_descriptor_prefix: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.'
      )
      .optional(),
    /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion. */
    statement_descriptor_prefix_kana: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.'
      )
      .optional(),
    /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion. */
    statement_descriptor_prefix_kanji: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.'
      )
      .optional()
  })
  export type AccountCardPaymentsSettings = z.infer<
    typeof AccountCardPaymentsSettingsSchema
  >

  export const AccountPayoutSettingsSchema = z.object({
    /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`. */
    debit_negative_balances: z
      .boolean()
      .describe(
        'A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`.'
      ),
    schedule: TransferScheduleSchema,
    /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
    statement_descriptor: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard."
      )
      .optional()
  })
  export type AccountPayoutSettings = z.infer<
    typeof AccountPayoutSettingsSchema
  >

  export const AccountTreasurySettingsSchema = z.object({
    tos_acceptance: AccountTermsOfServiceSchema.optional()
  })
  export type AccountTreasurySettings = z.infer<
    typeof AccountTreasurySettingsSchema
  >

  export const ConnectEmbeddedAccountConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedAccountFeaturesClaimSchema
  })
  export type ConnectEmbeddedAccountConfigClaim = z.infer<
    typeof ConnectEmbeddedAccountConfigClaimSchema
  >

  export const ConnectEmbeddedPayoutsConfigSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedPayoutsFeaturesSchema
  })
  export type ConnectEmbeddedPayoutsConfig = z.infer<
    typeof ConnectEmbeddedPayoutsConfigSchema
  >

  export const ConnectEmbeddedBaseConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedBaseFeaturesSchema
  })
  export type ConnectEmbeddedBaseConfigClaim = z.infer<
    typeof ConnectEmbeddedBaseConfigClaimSchema
  >

  export const ConnectEmbeddedFinancialAccountConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedFinancialAccountFeaturesSchema
  })
  export type ConnectEmbeddedFinancialAccountConfigClaim = z.infer<
    typeof ConnectEmbeddedFinancialAccountConfigClaimSchema
  >

  export const ConnectEmbeddedFinancialAccountTransactionsConfigClaimSchema =
    z.object({
      /** Whether the embedded component is enabled. */
      enabled: z
        .boolean()
        .describe('Whether the embedded component is enabled.'),
      features: ConnectEmbeddedFinancialAccountTransactionsFeaturesSchema
    })
  export type ConnectEmbeddedFinancialAccountTransactionsConfigClaim = z.infer<
    typeof ConnectEmbeddedFinancialAccountTransactionsConfigClaimSchema
  >

  export const ConnectEmbeddedIssuingCardConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedIssuingCardFeaturesSchema
  })
  export type ConnectEmbeddedIssuingCardConfigClaim = z.infer<
    typeof ConnectEmbeddedIssuingCardConfigClaimSchema
  >

  export const ConnectEmbeddedIssuingCardsListConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedIssuingCardsListFeaturesSchema
  })
  export type ConnectEmbeddedIssuingCardsListConfigClaim = z.infer<
    typeof ConnectEmbeddedIssuingCardsListConfigClaimSchema
  >

  export const ConnectEmbeddedPaymentsConfigClaimSchema = z.object({
    /** Whether the embedded component is enabled. */
    enabled: z.boolean().describe('Whether the embedded component is enabled.'),
    features: ConnectEmbeddedPaymentsFeaturesSchema
  })
  export type ConnectEmbeddedPaymentsConfigClaim = z.infer<
    typeof ConnectEmbeddedPaymentsConfigClaimSchema
  >

  /**
   * Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
   *
   * The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
   *
   * All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
   *
   * A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
   *
   * Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
   */
  export const AppsSecretSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** If true, indicates that this secret has been deleted */
      deleted: z
        .boolean()
        .describe('If true, indicates that this secret has been deleted')
        .optional(),
      /** The Unix timestamp for the expiry time of the secret, after which the secret deletes. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'The Unix timestamp for the expiry time of the secret, after which the secret deletes.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A name for the secret that's unique within the scope. */
      name: z
        .string()
        .max(5000)
        .describe("A name for the secret that's unique within the scope."),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('apps.secret')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The plaintext secret value to be stored. */
      payload: z
        .string()
        .max(5000)
        .nullable()
        .describe('The plaintext secret value to be stored.')
        .optional(),
      scope: SecretServiceResourceScopeSchema
    })
    .describe(
      "Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)"
    )
  export type AppsSecret = z.infer<typeof AppsSecretSchema>

  export const BalanceAmountSchema = z.object({
    /** Balance amount. */
    amount: z.number().int().describe('Balance amount.'),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    source_types: BalanceAmountBySourceTypeSchema.optional()
  })
  export type BalanceAmount = z.infer<typeof BalanceAmountSchema>

  export const BalanceNetAvailableSchema = z.object({
    /** Net balance amount, subtracting fees from platform-set pricing. */
    amount: z
      .number()
      .int()
      .describe(
        'Net balance amount, subtracting fees from platform-set pricing.'
      ),
    /** ID of the external account for this net balance (not expandable). */
    destination: z
      .string()
      .max(5000)
      .describe(
        'ID of the external account for this net balance (not expandable).'
      ),
    source_types: BalanceAmountBySourceTypeSchema.optional()
  })
  export type BalanceNetAvailable = z.infer<typeof BalanceNetAvailableSchema>

  /** A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer. */
  export const BillingMeterEventAdjustmentSchema = z
    .object({
      /** Specifies which event to cancel. */
      cancel:
        BillingMeterResourceBillingMeterEventAdjustmentCancelSchema.nullable()
          .describe('Specifies which event to cancel.')
          .optional(),
      /** The name of the meter event. Corresponds with the `event_name` field on a meter. */
      event_name: z
        .string()
        .max(100)
        .describe(
          'The name of the meter event. Corresponds with the `event_name` field on a meter.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.meter_event_adjustment')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The meter event adjustment's status. */
      status: z
        .enum(['complete', 'pending'])
        .describe("The meter event adjustment's status."),
      /** Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet. */
      type: z
        .literal('cancel')
        .describe(
          'Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.'
        )
    })
    .describe(
      'A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.'
    )
  export type BillingMeterEventAdjustment = z.infer<
    typeof BillingMeterEventAdjustmentSchema
  >

  export const PortalSubscriptionCancelSchema = z.object({
    cancellation_reason: PortalSubscriptionCancellationReasonSchema,
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.'),
    /** Whether to cancel subscriptions immediately or at the end of the billing period. */
    mode: z
      .enum(['at_period_end', 'immediately'])
      .describe(
        'Whether to cancel subscriptions immediately or at the end of the billing period.'
      ),
    /** Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`. */
    proration_behavior: z
      .enum(['always_invoice', 'create_prorations', 'none'])
      .describe(
        'Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.'
      )
  })
  export type PortalSubscriptionCancel = z.infer<
    typeof PortalSubscriptionCancelSchema
  >

  export const PortalResourceScheduleUpdateAtPeriodEndSchema = z.object({
    /** List of conditions. When any condition is true, an update will be scheduled at the end of the current period. */
    conditions: z
      .array(PortalResourceScheduleUpdateAtPeriodEndConditionSchema)
      .describe(
        'List of conditions. When any condition is true, an update will be scheduled at the end of the current period.'
      )
  })
  export type PortalResourceScheduleUpdateAtPeriodEnd = z.infer<
    typeof PortalResourceScheduleUpdateAtPeriodEndSchema
  >

  export const PortalFlowsRetentionSchema = z.object({
    /** Configuration when `retention.type=coupon_offer`. */
    coupon_offer: PortalFlowsCouponOfferSchema.nullable()
      .describe('Configuration when `retention.type=coupon_offer`.')
      .optional(),
    /** Type of retention strategy that will be used. */
    type: z
      .literal('coupon_offer')
      .describe('Type of retention strategy that will be used.')
  })
  export type PortalFlowsRetention = z.infer<typeof PortalFlowsRetentionSchema>

  export const PaymentPagesCheckoutSessionAfterExpirationSchema = z.object({
    /** When set, configuration used to recover the Checkout Session on expiry. */
    recovery:
      PaymentPagesCheckoutSessionAfterExpirationRecoverySchema.nullable()
        .describe(
          'When set, configuration used to recover the Checkout Session on expiry.'
        )
        .optional()
  })
  export type PaymentPagesCheckoutSessionAfterExpiration = z.infer<
    typeof PaymentPagesCheckoutSessionAfterExpirationSchema
  >

  export const PaymentPagesCheckoutSessionConsentCollectionSchema = z.object({
    /** If set to `hidden`, it will hide legal text related to the reuse of a payment method. */
    payment_method_reuse_agreement:
      PaymentPagesCheckoutSessionPaymentMethodReuseAgreementSchema.nullable()
        .describe(
          'If set to `hidden`, it will hide legal text related to the reuse of a payment method.'
        )
        .optional(),
    /**
     * If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
     * Session will determine whether to display an option to opt into promotional communication
     * from the merchant depending on the customer's locale. Only available to US merchants.
     */
    promotions: z
      .enum(['auto', 'none'])
      .nullable()
      .describe(
        "If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout\nSession will determine whether to display an option to opt into promotional communication\nfrom the merchant depending on the customer's locale. Only available to US merchants."
      )
      .optional(),
    /** If set to `required`, it requires customers to accept the terms of service before being able to pay. */
    terms_of_service: z
      .enum(['none', 'required'])
      .nullable()
      .describe(
        'If set to `required`, it requires customers to accept the terms of service before being able to pay.'
      )
      .optional()
  })
  export type PaymentPagesCheckoutSessionConsentCollection = z.infer<
    typeof PaymentPagesCheckoutSessionConsentCollectionSchema
  >

  export const PaymentPagesCheckoutSessionCustomFieldsDropdownSchema = z.object(
    {
      /** The value that will pre-fill on the payment page. */
      default_value: z
        .string()
        .max(5000)
        .nullable()
        .describe('The value that will pre-fill on the payment page.')
        .optional(),
      /** The options available for the customer to select. Up to 200 options allowed. */
      options: z
        .array(PaymentPagesCheckoutSessionCustomFieldsOptionSchema)
        .describe(
          'The options available for the customer to select. Up to 200 options allowed.'
        ),
      /** The option selected by the customer. This will be the `value` for the option. */
      value: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The option selected by the customer. This will be the `value` for the option.'
        )
        .optional()
    }
  )
  export type PaymentPagesCheckoutSessionCustomFieldsDropdown = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsDropdownSchema
  >

  export const PaymentPagesCheckoutSessionCustomTextSchema = z.object({
    /** Custom text that should be displayed after the payment confirmation button. */
    after_submit: PaymentPagesCheckoutSessionCustomTextPositionSchema.nullable()
      .describe(
        'Custom text that should be displayed after the payment confirmation button.'
      )
      .optional(),
    /** Custom text that should be displayed alongside shipping address collection. */
    shipping_address:
      PaymentPagesCheckoutSessionCustomTextPositionSchema.nullable()
        .describe(
          'Custom text that should be displayed alongside shipping address collection.'
        )
        .optional(),
    /** Custom text that should be displayed alongside the payment confirmation button. */
    submit: PaymentPagesCheckoutSessionCustomTextPositionSchema.nullable()
      .describe(
        'Custom text that should be displayed alongside the payment confirmation button.'
      )
      .optional(),
    /** Custom text that should be displayed in place of the default terms of service agreement text. */
    terms_of_service_acceptance:
      PaymentPagesCheckoutSessionCustomTextPositionSchema.nullable()
        .describe(
          'Custom text that should be displayed in place of the default terms of service agreement text.'
        )
        .optional()
  })
  export type PaymentPagesCheckoutSessionCustomText = z.infer<
    typeof PaymentPagesCheckoutSessionCustomTextSchema
  >

  export const PaymentLinksResourceConsentCollectionSchema = z.object({
    /** Settings related to the payment method reuse text shown in the Checkout UI. */
    payment_method_reuse_agreement:
      PaymentLinksResourcePaymentMethodReuseAgreementSchema.nullable()
        .describe(
          'Settings related to the payment method reuse text shown in the Checkout UI.'
        )
        .optional(),
    /** If set to `auto`, enables the collection of customer consent for promotional communications. */
    promotions: z
      .enum(['auto', 'none'])
      .nullable()
      .describe(
        'If set to `auto`, enables the collection of customer consent for promotional communications.'
      )
      .optional(),
    /** If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service. */
    terms_of_service: z
      .enum(['none', 'required'])
      .nullable()
      .describe(
        "If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service."
      )
      .optional()
  })
  export type PaymentLinksResourceConsentCollection = z.infer<
    typeof PaymentLinksResourceConsentCollectionSchema
  >

  export const PaymentLinksResourceCustomFieldsDropdownSchema = z.object({
    /** The options available for the customer to select. Up to 200 options allowed. */
    options: z
      .array(PaymentLinksResourceCustomFieldsDropdownOptionSchema)
      .describe(
        'The options available for the customer to select. Up to 200 options allowed.'
      )
  })
  export type PaymentLinksResourceCustomFieldsDropdown = z.infer<
    typeof PaymentLinksResourceCustomFieldsDropdownSchema
  >

  export const PaymentLinksResourceCustomTextSchema = z.object({
    /** Custom text that should be displayed after the payment confirmation button. */
    after_submit: PaymentLinksResourceCustomTextPositionSchema.nullable()
      .describe(
        'Custom text that should be displayed after the payment confirmation button.'
      )
      .optional(),
    /** Custom text that should be displayed alongside shipping address collection. */
    shipping_address: PaymentLinksResourceCustomTextPositionSchema.nullable()
      .describe(
        'Custom text that should be displayed alongside shipping address collection.'
      )
      .optional(),
    /** Custom text that should be displayed alongside the payment confirmation button. */
    submit: PaymentLinksResourceCustomTextPositionSchema.nullable()
      .describe(
        'Custom text that should be displayed alongside the payment confirmation button.'
      )
      .optional(),
    /** Custom text that should be displayed in place of the default terms of service agreement text. */
    terms_of_service_acceptance:
      PaymentLinksResourceCustomTextPositionSchema.nullable()
        .describe(
          'Custom text that should be displayed in place of the default terms of service agreement text.'
        )
        .optional()
  })
  export type PaymentLinksResourceCustomText = z.infer<
    typeof PaymentLinksResourceCustomTextSchema
  >

  export const PaymentLinksResourceRestrictionsSchema = z.object({
    completed_sessions: PaymentLinksResourceCompletedSessionsSchema
  })
  export type PaymentLinksResourceRestrictions = z.infer<
    typeof PaymentLinksResourceRestrictionsSchema
  >

  export const CheckoutAcssDebitPaymentMethodOptionsSchema = z.object({
    /** Currency supported by the bank account. Returned when the Session is in `setup` mode. */
    currency: z
      .enum(['cad', 'usd'])
      .describe(
        'Currency supported by the bank account. Returned when the Session is in `setup` mode.'
      )
      .optional(),
    mandate_options: CheckoutAcssDebitMandateOptionsSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type CheckoutAcssDebitPaymentMethodOptions = z.infer<
    typeof CheckoutAcssDebitPaymentMethodOptionsSchema
  >

  export const CheckoutBacsDebitPaymentMethodOptionsSchema = z.object({
    mandate_options:
      CheckoutPaymentMethodOptionsMandateOptionsBacsDebitSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type CheckoutBacsDebitPaymentMethodOptions = z.infer<
    typeof CheckoutBacsDebitPaymentMethodOptionsSchema
  >

  export const CheckoutCustomerBalanceBankTransferPaymentMethodOptionsSchema =
    z.object({
      eu_bank_transfer:
        PaymentMethodOptionsCustomerBalanceEuBankAccountSchema.optional(),
      /**
       * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
       *
       * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
       */
      requested_address_types: z
        .array(
          z.enum([
            'aba',
            'iban',
            'sepa',
            'sort_code',
            'spei',
            'swift',
            'zengin'
          ])
        )
        .describe(
          'List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.\n\nPermitted values include: `sort_code`, `zengin`, `iban`, or `spei`.'
        )
        .optional(),
      /** The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: z
        .enum([
          'eu_bank_transfer',
          'gb_bank_transfer',
          'jp_bank_transfer',
          'mx_bank_transfer',
          'us_bank_transfer'
        ])
        .nullable()
        .describe(
          'The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.'
        )
        .optional()
    })
  export type CheckoutCustomerBalanceBankTransferPaymentMethodOptions = z.infer<
    typeof CheckoutCustomerBalanceBankTransferPaymentMethodOptionsSchema
  >

  export const CheckoutSepaDebitPaymentMethodOptionsSchema = z.object({
    mandate_options:
      CheckoutPaymentMethodOptionsMandateOptionsSepaDebitSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional()
  })
  export type CheckoutSepaDebitPaymentMethodOptions = z.infer<
    typeof CheckoutSepaDebitPaymentMethodOptionsSchema
  >

  /** A supplier of carbon removal. */
  export const ClimateSupplierSchema = z
    .object({
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Link to a webpage to learn more about the supplier. */
      info_url: z
        .string()
        .max(5000)
        .describe('Link to a webpage to learn more about the supplier.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The locations in which this supplier operates. */
      locations: z
        .array(ClimateRemovalsLocationSchema)
        .describe('The locations in which this supplier operates.'),
      /** Name of this carbon removal supplier. */
      name: z
        .string()
        .max(5000)
        .describe('Name of this carbon removal supplier.'),
      /** String representing the object’s type. Objects of the same type share the same value. */
      object: z
        .literal('climate.supplier')
        .describe(
          'String representing the object’s type. Objects of the same type share the same value.'
        ),
      /** The scientific pathway used for carbon removal. */
      removal_pathway: z
        .enum([
          'biomass_carbon_removal_and_storage',
          'direct_air_capture',
          'enhanced_weathering'
        ])
        .describe('The scientific pathway used for carbon removal.')
    })
    .describe('A supplier of carbon removal.')
  export type ClimateSupplier = z.infer<typeof ClimateSupplierSchema>

  /** This hash contains details about the customer acceptance of the Mandate. */
  export const ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceSchema =
    z
      .object({
        /** If this is a Mandate accepted online, this hash contains details about the online acceptance. */
        online:
          ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnlineSchema.nullable()
            .describe(
              'If this is a Mandate accepted online, this hash contains details about the online acceptance.'
            )
            .optional(),
        /** The type of customer acceptance information included with the Mandate. */
        type: z
          .string()
          .max(5000)
          .describe(
            'The type of customer acceptance information included with the Mandate.'
          )
      })
      .describe(
        'This hash contains details about the customer acceptance of the Mandate.'
      )
  export type ConfirmationTokensResourceMandateDataResourceCustomerAcceptance =
    z.infer<
      typeof ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceSchema
    >

  /** Payment-method-specific configuration */
  export const ConfirmationTokensResourcePaymentMethodOptionsSchema = z
    .object({
      /** This hash contains the card payment method options. */
      card: ConfirmationTokensResourcePaymentMethodOptionsResourceCardSchema.nullable()
        .describe('This hash contains the card payment method options.')
        .optional()
    })
    .describe('Payment-method-specific configuration')
  export type ConfirmationTokensResourcePaymentMethodOptions = z.infer<
    typeof ConfirmationTokensResourcePaymentMethodOptionsSchema
  >

  export const ConfirmationTokensResourceShippingSchema = z.object({
    address: AddressSchema,
    /** Recipient name. */
    name: z.string().max(5000).describe('Recipient name.'),
    /** Recipient phone (including extension). */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe('Recipient phone (including extension).')
      .optional()
  })
  export type ConfirmationTokensResourceShipping = z.infer<
    typeof ConfirmationTokensResourceShippingSchema
  >

  export const CountrySpecVerificationFieldsSchema = z.object({
    company: CountrySpecVerificationFieldDetailsSchema,
    individual: CountrySpecVerificationFieldDetailsSchema
  })
  export type CountrySpecVerificationFields = z.infer<
    typeof CountrySpecVerificationFieldsSchema
  >

  /** This hash contains whether the Payment Element is enabled and the features it supports. */
  export const CustomerSessionResourceComponentsResourcePaymentElementSchema = z
    .object({
      /** Whether the Payment Element is enabled. */
      enabled: z.boolean().describe('Whether the Payment Element is enabled.'),
      /** This hash defines whether the Payment Element supports certain features. */
      features:
        CustomerSessionResourceComponentsResourcePaymentElementResourceFeaturesSchema.nullable()
          .describe(
            'This hash defines whether the Payment Element supports certain features.'
          )
          .optional()
    })
    .describe(
      'This hash contains whether the Payment Element is enabled and the features it supports.'
    )
  export type CustomerSessionResourceComponentsResourcePaymentElement = z.infer<
    typeof CustomerSessionResourceComponentsResourcePaymentElementSchema
  >

  /** An active entitlement describes access to a feature for a customer. */
  export const EntitlementsActiveEntitlementSchema = z
    .object({
      /** The [Feature](https://stripe.com/docs/api/entitlements/feature) that the customer is entitled to. */
      feature: z
        .union([z.string().max(5000), EntitlementsFeatureSchema])
        .describe(
          'The [Feature](https://stripe.com/docs/api/entitlements/feature) that the customer is entitled to.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A unique key you provide as your own system identifier. This may be up to 80 characters. */
      lookup_key: z
        .string()
        .max(5000)
        .describe(
          'A unique key you provide as your own system identifier. This may be up to 80 characters.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('entitlements.active_entitlement')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'An active entitlement describes access to a feature for a customer.'
    )
  export type EntitlementsActiveEntitlement = z.infer<
    typeof EntitlementsActiveEntitlementSchema
  >

  /** Describes a snapshot of the owners of an account at a particular point in time. */
  export const FinancialConnectionsAccountOwnershipSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('financial_connections.account_ownership')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** A paginated list of owners for this account. */
      owners: z
        .object({
          /** Details about each object. */
          data: z
            .array(FinancialConnectionsAccountOwnerSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('A paginated list of owners for this account.')
    })
    .describe(
      'Describes a snapshot of the owners of an account at a particular point in time.'
    )
  export type FinancialConnectionsAccountOwnership = z.infer<
    typeof FinancialConnectionsAccountOwnershipSchema
  >

  /** A Transaction represents a real transaction that affects a Financial Connections Account balance. */
  export const FinancialConnectionsTransactionSchema = z
    .object({
      /** The ID of the Financial Connections Account this transaction belongs to. */
      account: z
        .string()
        .max(5000)
        .describe(
          'The ID of the Financial Connections Account this transaction belongs to.'
        ),
      /** The amount of this transaction, in cents (or local equivalent). */
      amount: z
        .number()
        .int()
        .describe(
          'The amount of this transaction, in cents (or local equivalent).'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The description of this transaction. */
      description: z
        .string()
        .max(5000)
        .describe('The description of this transaction.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('financial_connections.transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The status of the transaction. */
      status: z
        .enum(['pending', 'posted', 'void'])
        .describe('The status of the transaction.'),
      status_transitions:
        BankConnectionsResourceTransactionResourceStatusTransitionsSchema,
      /** Time at which the transaction was transacted. Measured in seconds since the Unix epoch. */
      transacted_at: z
        .number()
        .int()
        .describe(
          'Time at which the transaction was transacted. Measured in seconds since the Unix epoch.'
        ),
      /** The token of the transaction refresh that last updated or created this transaction. */
      transaction_refresh: z
        .string()
        .max(5000)
        .describe(
          'The token of the transaction refresh that last updated or created this transaction.'
        ),
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'Time at which the object was last updated. Measured in seconds since the Unix epoch.'
        )
    })
    .describe(
      'A Transaction represents a real transaction that affects a Financial Connections Account balance.'
    )
  export type FinancialConnectionsTransaction = z.infer<
    typeof FinancialConnectionsTransactionSchema
  >

  /** Details about the request forwarded to the destination endpoint. */
  export const ForwardedRequestDetailsSchema = z
    .object({
      /** The body payload to send to the destination endpoint. */
      body: z
        .string()
        .max(5000)
        .describe('The body payload to send to the destination endpoint.'),
      /** The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included. */
      headers: z
        .array(ForwardedRequestHeaderSchema)
        .describe(
          'The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included.'
        ),
      /** The HTTP method used to call the destination endpoint. */
      http_method: z
        .literal('POST')
        .describe('The HTTP method used to call the destination endpoint.')
    })
    .describe(
      'Details about the request forwarded to the destination endpoint.'
    )
  export type ForwardedRequestDetails = z.infer<
    typeof ForwardedRequestDetailsSchema
  >

  /** Details about the response from the destination endpoint. */
  export const ForwardedResponseDetailsSchema = z
    .object({
      /** The response body from the destination endpoint to Stripe. */
      body: z
        .string()
        .max(5000)
        .describe('The response body from the destination endpoint to Stripe.'),
      /** HTTP headers that the destination endpoint returned. */
      headers: z
        .array(ForwardedRequestHeaderSchema)
        .describe('HTTP headers that the destination endpoint returned.'),
      /** The HTTP status code that the destination endpoint returned. */
      status: z
        .number()
        .int()
        .describe(
          'The HTTP status code that the destination endpoint returned.'
        )
    })
    .describe('Details about the response from the destination endpoint.')
  export type ForwardedResponseDetails = z.infer<
    typeof ForwardedResponseDetailsSchema
  >

  /** Result from a email check */
  export const GelatoEmailReportSchema = z
    .object({
      /** Email to be verified. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe('Email to be verified.')
        .optional(),
      /** Details on the verification error. Present when status is `unverified`. */
      error: GelatoEmailReportErrorSchema.nullable()
        .describe(
          'Details on the verification error. Present when status is `unverified`.'
        )
        .optional(),
      /** Status of this `email` check. */
      status: z
        .enum(['unverified', 'verified'])
        .describe('Status of this `email` check.')
    })
    .describe('Result from a email check')
  export type GelatoEmailReport = z.infer<typeof GelatoEmailReportSchema>

  /** Result from a phone check */
  export const GelatoPhoneReportSchema = z
    .object({
      /** Details on the verification error. Present when status is `unverified`. */
      error: GelatoPhoneReportErrorSchema.nullable()
        .describe(
          'Details on the verification error. Present when status is `unverified`.'
        )
        .optional(),
      /** Phone to be verified. */
      phone: z
        .string()
        .max(5000)
        .nullable()
        .describe('Phone to be verified.')
        .optional(),
      /** Status of this `phone` check. */
      status: z
        .enum(['unverified', 'verified'])
        .describe('Status of this `phone` check.')
    })
    .describe('Result from a phone check')
  export type GelatoPhoneReport = z.infer<typeof GelatoPhoneReportSchema>

  /** Result from a selfie check */
  export const GelatoSelfieReportSchema = z
    .object({
      /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check. */
      document: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.'
        )
        .optional(),
      /** Details on the verification error. Present when status is `unverified`. */
      error: GelatoSelfieReportErrorSchema.nullable()
        .describe(
          'Details on the verification error. Present when status is `unverified`.'
        )
        .optional(),
      /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check. */
      selfie: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.'
        )
        .optional(),
      /** Status of this `selfie` check. */
      status: z
        .enum(['unverified', 'verified'])
        .describe('Status of this `selfie` check.')
    })
    .describe('Result from a selfie check')
  export type GelatoSelfieReport = z.infer<typeof GelatoSelfieReportSchema>

  export const PaymentMethodConfigResourcePaymentMethodPropertiesSchema =
    z.object({
      /** Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active. */
      available: z
        .boolean()
        .describe(
          "Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active."
        ),
      display_preference: PaymentMethodConfigResourceDisplayPreferenceSchema
    })
  export type PaymentMethodConfigResourcePaymentMethodProperties = z.infer<
    typeof PaymentMethodConfigResourcePaymentMethodPropertiesSchema
  >

  /** Indicates the status of a specific payment method on a payment method domain. */
  export const PaymentMethodDomainResourcePaymentMethodStatusSchema = z
    .object({
      /** The status of the payment method on the domain. */
      status: z
        .enum(['active', 'inactive'])
        .describe('The status of the payment method on the domain.'),
      status_details:
        PaymentMethodDomainResourcePaymentMethodStatusDetailsSchema.optional()
    })
    .describe(
      'Indicates the status of a specific payment method on a payment method domain.'
    )
  export type PaymentMethodDomainResourcePaymentMethodStatus = z.infer<
    typeof PaymentMethodDomainResourcePaymentMethodStatusSchema
  >

  /**
   * A product_feature represents an attachment between a feature and a product.
   * When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
   */
  export const ProductFeatureSchema = z
    .object({
      entitlement_feature: EntitlementsFeatureSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('product_feature')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'A product_feature represents an attachment between a feature and a product.\nWhen a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.'
    )
  export type ProductFeature = z.infer<typeof ProductFeatureSchema>

  /**
   * Value lists allow you to group values together which can then be referenced in rules.
   *
   * Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
   */
  export const RadarValueListSchema = z
    .object({
      /** The name of the value list for use in rules. */
      alias: z
        .string()
        .max(5000)
        .describe('The name of the value list for use in rules.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The name or email address of the user who created this value list. */
      created_by: z
        .string()
        .max(5000)
        .describe(
          'The name or email address of the user who created this value list.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. */
      item_type: z
        .enum([
          'card_bin',
          'card_fingerprint',
          'case_sensitive_string',
          'country',
          'customer_id',
          'email',
          'ip_address',
          'sepa_debit_fingerprint',
          'string',
          'us_bank_account_fingerprint'
        ])
        .describe(
          'The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.'
        ),
      /** List of items contained within this value list. */
      list_items: z
        .object({
          /** Details about each object. */
          data: z
            .array(RadarValueListItemSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('List of items contained within this value list.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The name of the value list. */
      name: z.string().max(5000).describe('The name of the value list.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('radar.value_list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'Value lists allow you to group values together which can then be referenced in rules.\n\nRelated guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)'
    )
  export type RadarValueList = z.infer<typeof RadarValueListSchema>

  /** A usage record summary represents an aggregated view of how much usage was accrued for a subscription item within a subscription billing period. */
  export const UsageRecordSummarySchema = z
    .object({
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The invoice in which this usage period has been billed for. */
      invoice: z
        .string()
        .max(5000)
        .nullable()
        .describe('The invoice in which this usage period has been billed for.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('usage_record_summary')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      period: PeriodSchema,
      /** The ID of the subscription item this summary is describing. */
      subscription_item: z
        .string()
        .max(5000)
        .describe(
          'The ID of the subscription item this summary is describing.'
        ),
      /** The total usage within this usage period. */
      total_usage: z
        .number()
        .int()
        .describe('The total usage within this usage period.')
    })
    .describe(
      'A usage record summary represents an aggregated view of how much usage was accrued for a subscription item within a subscription billing period.'
    )
  export type UsageRecordSummary = z.infer<typeof UsageRecordSummarySchema>

  export const TaxProductResourceShipFromDetailsSchema = z.object({
    address: TaxProductResourcePostalAddressSchema
  })
  export type TaxProductResourceShipFromDetails = z.infer<
    typeof TaxProductResourceShipFromDetailsSchema
  >

  export const TaxProductResourceTaxRateDetailsSchema = z.object({
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
      )
      .optional(),
    /** The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate. */
    flat_amount: TaxRateFlatAmountSchema.nullable()
      .describe(
        'The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.'
      )
      .optional(),
    /** The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`. */
    percentage_decimal: z
      .string()
      .max(5000)
      .describe(
        'The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`.'
      ),
    /** Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. */
    rate_type: z
      .enum(['flat_amount', 'percentage'])
      .nullable()
      .describe(
        'Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location.'
      )
      .optional(),
    /** State, county, province, or region. */
    state: z
      .string()
      .max(5000)
      .nullable()
      .describe('State, county, province, or region.')
      .optional(),
    /** The tax type, such as `vat` or `sales_tax`. */
    tax_type: z
      .enum([
        'amusement_tax',
        'communications_tax',
        'gst',
        'hst',
        'igst',
        'jct',
        'lease_tax',
        'pst',
        'qst',
        'retail_delivery_fee',
        'rst',
        'sales_tax',
        'service_tax',
        'vat'
      ])
      .nullable()
      .describe('The tax type, such as `vat` or `sales_tax`.')
      .optional()
  })
  export type TaxProductResourceTaxRateDetails = z.infer<
    typeof TaxProductResourceTaxRateDetailsSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsEuropeSchema =
    z.object({
      standard:
        TaxProductRegistrationsResourceCountryOptionsEuStandardSchema.optional(),
      /** Type of registration in an EU country. */
      type: z
        .enum(['ioss', 'oss_non_union', 'oss_union', 'standard'])
        .describe('Type of registration in an EU country.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsEurope = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsEuropeSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsCanadaSchema =
    z.object({
      province_standard:
        TaxProductRegistrationsResourceCountryOptionsCaProvinceStandardSchema.optional(),
      /** Type of registration in Canada. */
      type: z
        .enum(['province_standard', 'simplified', 'standard'])
        .describe('Type of registration in Canada.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsCanada = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsCanadaSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxSchema =
    z.object({
      /** Elections for the state sales tax registration. */
      elections: z
        .array(
          TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElectionSchema
        )
        .describe('Elections for the state sales tax registration.')
        .optional()
    })
  export type TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxSchema
    >

  export const TaxProductResourceTaxSettingsHeadOfficeSchema = z.object({
    address: AddressSchema
  })
  export type TaxProductResourceTaxSettingsHeadOffice = z.infer<
    typeof TaxProductResourceTaxSettingsHeadOfficeSchema
  >

  export const TaxTransactionLineItemSchema = z.object({
    /** The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.'
      ),
    /** The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_tax: z
      .number()
      .int()
      .describe(
        'The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata: z
      .record(z.string().max(500))
      .nullable()
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
      )
      .optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('tax.transaction_line_item')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The ID of an existing [Product](https://stripe.com/docs/api/products/object). */
    product: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of an existing [Product](https://stripe.com/docs/api/products/object).'
      )
      .optional(),
    /** The number of units of the item being purchased. For reversals, this is the quantity reversed. */
    quantity: z
      .number()
      .int()
      .describe(
        'The number of units of the item being purchased. For reversals, this is the quantity reversed.'
      ),
    /** A custom identifier for this line item in the transaction. */
    reference: z
      .string()
      .max(5000)
      .describe('A custom identifier for this line item in the transaction.'),
    /** If `type=reversal`, contains information about what was reversed. */
    reversal:
      TaxProductResourceTaxTransactionLineItemResourceReversalSchema.nullable()
        .describe(
          'If `type=reversal`, contains information about what was reversed.'
        )
        .optional(),
    /** Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive'])
      .describe(
        'Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.'
      ),
    /** The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource. */
    tax_code: z
      .string()
      .max(5000)
      .describe(
        'The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.'
      ),
    /** If `reversal`, this line item reverses an earlier transaction. */
    type: z
      .enum(['reversal', 'transaction'])
      .describe(
        'If `reversal`, this line item reverses an earlier transaction.'
      )
  })
  export type TaxTransactionLineItem = z.infer<
    typeof TaxTransactionLineItemSchema
  >

  export const TerminalConfigurationConfigurationResourceTippingSchema =
    z.object({
      aud: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      cad: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      chf: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      czk: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      dkk: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      eur: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      gbp: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      hkd: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      jpy: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      myr: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      nok: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      nzd: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      pln: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      sek: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      sgd: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional(),
      usd: TerminalConfigurationConfigurationResourceCurrencySpecificConfigSchema.optional()
    })
  export type TerminalConfigurationConfigurationResourceTipping = z.infer<
    typeof TerminalConfigurationConfigurationResourceTippingSchema
  >

  /**
   * A Location represents a grouping of readers.
   *
   * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
   */
  export const TerminalLocationSchema = z
    .object({
      address: AddressSchema,
      /** The ID of a configuration that will be used to customize all readers in this location. */
      configuration_overrides: z
        .string()
        .max(5000)
        .describe(
          'The ID of a configuration that will be used to customize all readers in this location.'
        )
        .optional(),
      /** The display name of the location. */
      display_name: z
        .string()
        .max(5000)
        .describe('The display name of the location.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('terminal.location')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'A Location represents a grouping of readers.\n\nRelated guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)'
    )
  export type TerminalLocation = z.infer<typeof TerminalLocationSchema>

  /** Represents a per-transaction override of a reader configuration */
  export const TerminalReaderReaderResourceProcessConfigSchema = z
    .object({
      /** Enable customer initiated cancellation when processing this payment. */
      enable_customer_cancellation: z
        .boolean()
        .describe(
          'Enable customer initiated cancellation when processing this payment.'
        )
        .optional(),
      /** Override showing a tipping selection screen on this transaction. */
      skip_tipping: z
        .boolean()
        .describe(
          'Override showing a tipping selection screen on this transaction.'
        )
        .optional(),
      tipping: TerminalReaderReaderResourceTippingConfigSchema.optional()
    })
    .describe('Represents a per-transaction override of a reader configuration')
  export type TerminalReaderReaderResourceProcessConfig = z.infer<
    typeof TerminalReaderReaderResourceProcessConfigSchema
  >

  /** Represents a cart to be displayed on the reader */
  export const TerminalReaderReaderResourceCartSchema = z
    .object({
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** List of line items in the cart. */
      line_items: z
        .array(TerminalReaderReaderResourceLineItemSchema)
        .describe('List of line items in the cart.'),
      /** Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        )
        .optional(),
      /** Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      total: z
        .number()
        .int()
        .describe(
          'Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        )
    })
    .describe('Represents a cart to be displayed on the reader')
  export type TerminalReaderReaderResourceCart = z.infer<
    typeof TerminalReaderReaderResourceCartSchema
  >

  export const TreasurySharedResourceBillingDetailsSchema = z.object({
    address: AddressSchema,
    /** Email address. */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe('Email address.')
      .optional(),
    /** Full name. */
    name: z.string().max(5000).nullable().describe('Full name.').optional()
  })
  export type TreasurySharedResourceBillingDetails = z.infer<
    typeof TreasurySharedResourceBillingDetailsSchema
  >

  /** Toggle settings for enabling/disabling a feature */
  export const TreasuryFinancialAccountsResourceToggleSettingsSchema = z
    .object({
      /** Whether the FinancialAccount should have the Feature. */
      requested: z
        .boolean()
        .describe('Whether the FinancialAccount should have the Feature.'),
      /** Whether the Feature is operational. */
      status: z
        .enum(['active', 'pending', 'restricted'])
        .describe('Whether the Feature is operational.'),
      /** Additional details; includes at least one entry when the status is not `active`. */
      status_details: z
        .array(
          TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
        )
        .describe(
          'Additional details; includes at least one entry when the status is not `active`.'
        )
    })
    .describe('Toggle settings for enabling/disabling a feature')
  export type TreasuryFinancialAccountsResourceToggleSettings = z.infer<
    typeof TreasuryFinancialAccountsResourceToggleSettingsSchema
  >

  /** Toggle settings for enabling/disabling the ABA address feature */
  export const TreasuryFinancialAccountsResourceAbaToggleSettingsSchema = z
    .object({
      /** Whether the FinancialAccount should have the Feature. */
      requested: z
        .boolean()
        .describe('Whether the FinancialAccount should have the Feature.'),
      /** Whether the Feature is operational. */
      status: z
        .enum(['active', 'pending', 'restricted'])
        .describe('Whether the Feature is operational.'),
      /** Additional details; includes at least one entry when the status is not `active`. */
      status_details: z
        .array(
          TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
        )
        .describe(
          'Additional details; includes at least one entry when the status is not `active`.'
        )
    })
    .describe('Toggle settings for enabling/disabling the ABA address feature')
  export type TreasuryFinancialAccountsResourceAbaToggleSettings = z.infer<
    typeof TreasuryFinancialAccountsResourceAbaToggleSettingsSchema
  >

  /** Toggle settings for enabling/disabling an inbound ACH specific feature */
  export const TreasuryFinancialAccountsResourceInboundAchToggleSettingsSchema =
    z
      .object({
        /** Whether the FinancialAccount should have the Feature. */
        requested: z
          .boolean()
          .describe('Whether the FinancialAccount should have the Feature.'),
        /** Whether the Feature is operational. */
        status: z
          .enum(['active', 'pending', 'restricted'])
          .describe('Whether the Feature is operational.'),
        /** Additional details; includes at least one entry when the status is not `active`. */
        status_details: z
          .array(
            TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
          )
          .describe(
            'Additional details; includes at least one entry when the status is not `active`.'
          )
      })
      .describe(
        'Toggle settings for enabling/disabling an inbound ACH specific feature'
      )
  export type TreasuryFinancialAccountsResourceInboundAchToggleSettings =
    z.infer<
      typeof TreasuryFinancialAccountsResourceInboundAchToggleSettingsSchema
    >

  /** Toggle settings for enabling/disabling an outbound ACH specific feature */
  export const TreasuryFinancialAccountsResourceOutboundAchToggleSettingsSchema =
    z
      .object({
        /** Whether the FinancialAccount should have the Feature. */
        requested: z
          .boolean()
          .describe('Whether the FinancialAccount should have the Feature.'),
        /** Whether the Feature is operational. */
        status: z
          .enum(['active', 'pending', 'restricted'])
          .describe('Whether the Feature is operational.'),
        /** Additional details; includes at least one entry when the status is not `active`. */
        status_details: z
          .array(
            TreasuryFinancialAccountsResourceTogglesSettingStatusDetailsSchema
          )
          .describe(
            'Additional details; includes at least one entry when the status is not `active`.'
          )
      })
      .describe(
        'Toggle settings for enabling/disabling an outbound ACH specific feature'
      )
  export type TreasuryFinancialAccountsResourceOutboundAchToggleSettings =
    z.infer<
      typeof TreasuryFinancialAccountsResourceOutboundAchToggleSettingsSchema
    >

  /** FinancialAddresses contain identifying information that resolves to a FinancialAccount. */
  export const TreasuryFinancialAccountsResourceFinancialAddressSchema = z
    .object({
      aba: TreasuryFinancialAccountsResourceAbaRecordSchema.optional(),
      /** The list of networks that the address supports */
      supported_networks: z
        .array(z.enum(['ach', 'us_domestic_wire']))
        .describe('The list of networks that the address supports')
        .optional(),
      /** The type of financial address */
      type: z.literal('aba').describe('The type of financial address')
    })
    .describe(
      'FinancialAddresses contain identifying information that resolves to a FinancialAccount.'
    )
  export type TreasuryFinancialAccountsResourceFinancialAddress = z.infer<
    typeof TreasuryFinancialAccountsResourceFinancialAddressSchema
  >

  export const TreasuryFinancialAccountsResourceStatusDetailsSchema = z.object({
    /** Details related to the closure of this FinancialAccount */
    closed:
      TreasuryFinancialAccountsResourceClosedStatusDetailsSchema.nullable()
        .describe('Details related to the closure of this FinancialAccount')
        .optional()
  })
  export type TreasuryFinancialAccountsResourceStatusDetails = z.infer<
    typeof TreasuryFinancialAccountsResourceStatusDetailsSchema
  >

  export const LegalEntityCompanyVerificationDocumentSchema = z.object({
    /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
    back: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.'
      )
      .optional(),
    /** A user-displayable string describing the verification state of this document. */
    details: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A user-displayable string describing the verification state of this document.'
      )
      .optional(),
    /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
    details_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.'
      )
      .optional(),
    /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
    front: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.'
      )
      .optional()
  })
  export type LegalEntityCompanyVerificationDocument = z.infer<
    typeof LegalEntityCompanyVerificationDocumentSchema
  >

  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
   * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
   */
  export const CouponSchema = z
    .object({
      /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
      amount_off: z
        .number()
        .int()
        .nullable()
        .describe(
          'Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.'
        )
        .optional(),
      applies_to: CouponAppliesToSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
      currency: z
        .string()
        .nullable()
        .describe(
          'If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.'
        )
        .optional(),
      /** Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options: z
        .record(CouponCurrencyOptionSchema)
        .describe(
          'Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).'
        )
        .optional(),
      /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
      duration: z
        .enum(['forever', 'once', 'repeating'])
        .describe(
          'One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.'
        ),
      /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
      duration_in_months: z
        .number()
        .int()
        .nullable()
        .describe(
          'If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
      max_redemptions: z
        .number()
        .int()
        .nullable()
        .describe(
          'Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** Name of the coupon displayed to customers on for instance invoices or receipts. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Name of the coupon displayed to customers on for instance invoices or receipts.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('coupon')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead. */
      percent_off: z
        .number()
        .nullable()
        .describe(
          'Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.'
        )
        .optional(),
      /** Date after which the coupon can no longer be redeemed. */
      redeem_by: z
        .number()
        .int()
        .nullable()
        .describe('Date after which the coupon can no longer be redeemed.')
        .optional(),
      /** Number of times this coupon has been applied to a customer. */
      times_redeemed: z
        .number()
        .int()
        .describe(
          'Number of times this coupon has been applied to a customer.'
        ),
      /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
      valid: z
        .boolean()
        .describe(
          'Taking account of the above properties, whether this coupon can still be applied to a customer.'
        )
    })
    .describe(
      'A coupon contains information about a percent-off or amount-off discount you\nmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),\n[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).'
    )
  export type Coupon = z.infer<typeof CouponSchema>

  export const CustomerAcceptanceSchema = z.object({
    /** The time that the customer accepts the mandate. */
    accepted_at: z
      .number()
      .int()
      .nullable()
      .describe('The time that the customer accepts the mandate.')
      .optional(),
    offline: OfflineAcceptanceSchema.optional(),
    online: OnlineAcceptanceSchema.optional(),
    /** The mandate includes the type of customer acceptance information, such as: `online` or `offline`. */
    type: z
      .enum(['offline', 'online'])
      .describe(
        'The mandate includes the type of customer acceptance information, such as: `online` or `offline`.'
      )
  })
  export type CustomerAcceptance = z.infer<typeof CustomerAcceptanceSchema>

  export const SetupAttemptPaymentMethodDetailsCardWalletSchema = z.object({
    apple_pay: PaymentMethodDetailsCardWalletApplePaySchema.optional(),
    google_pay: PaymentMethodDetailsCardWalletGooglePaySchema.optional(),
    /** The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
    type: z
      .enum(['apple_pay', 'google_pay', 'link'])
      .describe(
        'The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.'
      )
  })
  export type SetupAttemptPaymentMethodDetailsCardWallet = z.infer<
    typeof SetupAttemptPaymentMethodDetailsCardWalletSchema
  >

  export const RefundNextActionSchema = z.object({
    display_details: RefundNextActionDisplayDetailsSchema.optional(),
    /** Type of the next action to perform. */
    type: z.string().max(5000).describe('Type of the next action to perform.')
  })
  export type RefundNextAction = z.infer<typeof RefundNextActionSchema>

  export const DisputeEnhancedEligibilitySchema = z.object({
    visa_compelling_evidence_3:
      DisputeEnhancedEligibilityVisaCompellingEvidence3Schema.optional(),
    visa_compliance: DisputeEnhancedEligibilityVisaComplianceSchema.optional()
  })
  export type DisputeEnhancedEligibility = z.infer<
    typeof DisputeEnhancedEligibilitySchema
  >

  export const IssuingCardholderIdDocumentSchema = z.object({
    /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    back: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.'
      )
      .optional(),
    /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    front: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.'
      )
      .optional()
  })
  export type IssuingCardholderIdDocument = z.infer<
    typeof IssuingCardholderIdDocumentSchema
  >

  export const IssuingCardWalletsSchema = z.object({
    apple_pay: IssuingCardApplePaySchema,
    google_pay: IssuingCardGooglePaySchema,
    /** Unique identifier for a card used with digital wallets */
    primary_account_identifier: z
      .string()
      .max(5000)
      .nullable()
      .describe('Unique identifier for a card used with digital wallets')
      .optional()
  })
  export type IssuingCardWallets = z.infer<typeof IssuingCardWalletsSchema>

  export const IssuingDisputeCanceledEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Date when order was canceled. */
    canceled_at: z
      .number()
      .int()
      .nullable()
      .describe('Date when order was canceled.')
      .optional(),
    /** Whether the cardholder was provided with a cancellation policy. */
    cancellation_policy_provided: z
      .boolean()
      .nullable()
      .describe(
        'Whether the cardholder was provided with a cancellation policy.'
      )
      .optional(),
    /** Reason for canceling the order. */
    cancellation_reason: z
      .string()
      .max(5000)
      .nullable()
      .describe('Reason for canceling the order.')
      .optional(),
    /** Date when the cardholder expected to receive the product. */
    expected_at: z
      .number()
      .int()
      .nullable()
      .describe('Date when the cardholder expected to receive the product.')
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional(),
    /** Description of the merchandise or service that was purchased. */
    product_description: z
      .string()
      .max(5000)
      .nullable()
      .describe('Description of the merchandise or service that was purchased.')
      .optional(),
    /** Whether the product was a merchandise or service. */
    product_type: z
      .enum(['merchandise', 'service'])
      .nullable()
      .describe('Whether the product was a merchandise or service.')
      .optional(),
    /** Result of cardholder's attempt to return the product. */
    return_status: z
      .enum(['merchant_rejected', 'successful'])
      .nullable()
      .describe("Result of cardholder's attempt to return the product.")
      .optional(),
    /** Date when the product was returned or attempted to be returned. */
    returned_at: z
      .number()
      .int()
      .nullable()
      .describe(
        'Date when the product was returned or attempted to be returned.'
      )
      .optional()
  })
  export type IssuingDisputeCanceledEvidence = z.infer<
    typeof IssuingDisputeCanceledEvidenceSchema
  >

  export const IssuingDisputeDuplicateEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
    card_statement: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
    cash_receipt: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
    check_image: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.'
      )
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional(),
    /** Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
    original_transaction: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.'
      )
      .optional()
  })
  export type IssuingDisputeDuplicateEvidence = z.infer<
    typeof IssuingDisputeDuplicateEvidenceSchema
  >

  export const IssuingDisputeFraudulentEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional()
  })
  export type IssuingDisputeFraudulentEvidence = z.infer<
    typeof IssuingDisputeFraudulentEvidenceSchema
  >

  export const IssuingDisputeMerchandiseNotAsDescribedEvidenceSchema = z.object(
    {
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      additional_documentation: z
        .union([z.string().max(5000), FileSchema])
        .nullable()
        .describe(
          '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
        )
        .optional(),
      /** Explanation of why the cardholder is disputing this transaction. */
      explanation: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Explanation of why the cardholder is disputing this transaction.'
        )
        .optional(),
      /** Date when the product was received. */
      received_at: z
        .number()
        .int()
        .nullable()
        .describe('Date when the product was received.')
        .optional(),
      /** Description of the cardholder's attempt to return the product. */
      return_description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Description of the cardholder's attempt to return the product."
        )
        .optional(),
      /** Result of cardholder's attempt to return the product. */
      return_status: z
        .enum(['merchant_rejected', 'successful'])
        .nullable()
        .describe("Result of cardholder's attempt to return the product.")
        .optional(),
      /** Date when the product was returned or attempted to be returned. */
      returned_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Date when the product was returned or attempted to be returned.'
        )
        .optional()
    }
  )
  export type IssuingDisputeMerchandiseNotAsDescribedEvidence = z.infer<
    typeof IssuingDisputeMerchandiseNotAsDescribedEvidenceSchema
  >

  export const IssuingDisputeNoValidAuthorizationEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional()
  })
  export type IssuingDisputeNoValidAuthorizationEvidence = z.infer<
    typeof IssuingDisputeNoValidAuthorizationEvidenceSchema
  >

  export const IssuingDisputeNotReceivedEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Date when the cardholder expected to receive the product. */
    expected_at: z
      .number()
      .int()
      .nullable()
      .describe('Date when the cardholder expected to receive the product.')
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional(),
    /** Description of the merchandise or service that was purchased. */
    product_description: z
      .string()
      .max(5000)
      .nullable()
      .describe('Description of the merchandise or service that was purchased.')
      .optional(),
    /** Whether the product was a merchandise or service. */
    product_type: z
      .enum(['merchandise', 'service'])
      .nullable()
      .describe('Whether the product was a merchandise or service.')
      .optional()
  })
  export type IssuingDisputeNotReceivedEvidence = z.infer<
    typeof IssuingDisputeNotReceivedEvidenceSchema
  >

  export const IssuingDisputeOtherEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional(),
    /** Description of the merchandise or service that was purchased. */
    product_description: z
      .string()
      .max(5000)
      .nullable()
      .describe('Description of the merchandise or service that was purchased.')
      .optional(),
    /** Whether the product was a merchandise or service. */
    product_type: z
      .enum(['merchandise', 'service'])
      .nullable()
      .describe('Whether the product was a merchandise or service.')
      .optional()
  })
  export type IssuingDisputeOtherEvidence = z.infer<
    typeof IssuingDisputeOtherEvidenceSchema
  >

  export const IssuingDisputeServiceNotAsDescribedEvidenceSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
    additional_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.'
      )
      .optional(),
    /** Date when order was canceled. */
    canceled_at: z
      .number()
      .int()
      .nullable()
      .describe('Date when order was canceled.')
      .optional(),
    /** Reason for canceling the order. */
    cancellation_reason: z
      .string()
      .max(5000)
      .nullable()
      .describe('Reason for canceling the order.')
      .optional(),
    /** Explanation of why the cardholder is disputing this transaction. */
    explanation: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Explanation of why the cardholder is disputing this transaction.'
      )
      .optional(),
    /** Date when the product was received. */
    received_at: z
      .number()
      .int()
      .nullable()
      .describe('Date when the product was received.')
      .optional()
  })
  export type IssuingDisputeServiceNotAsDescribedEvidence = z.infer<
    typeof IssuingDisputeServiceNotAsDescribedEvidenceSchema
  >

  export const IssuingAuthorizationVerificationDataSchema = z.object({
    /** Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`. */
    address_line1_check: z
      .enum(['match', 'mismatch', 'not_provided'])
      .describe(
        'Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.'
      ),
    /** Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`. */
    address_postal_code_check: z
      .enum(['match', 'mismatch', 'not_provided'])
      .describe(
        'Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.'
      ),
    /** The exemption applied to this authorization. */
    authentication_exemption:
      IssuingAuthorizationAuthenticationExemptionSchema.nullable()
        .describe('The exemption applied to this authorization.')
        .optional(),
    /** Whether the cardholder provided a CVC and if it matched Stripe’s record. */
    cvc_check: z
      .enum(['match', 'mismatch', 'not_provided'])
      .describe(
        'Whether the cardholder provided a CVC and if it matched Stripe’s record.'
      ),
    /** Whether the cardholder provided an expiry date and if it matched Stripe’s record. */
    expiry_check: z
      .enum(['match', 'mismatch', 'not_provided'])
      .describe(
        'Whether the cardholder provided an expiry date and if it matched Stripe’s record.'
      ),
    /** The postal code submitted as part of the authorization used for postal code verification. */
    postal_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The postal code submitted as part of the authorization used for postal code verification.'
      )
      .optional(),
    /** 3D Secure details. */
    three_d_secure: IssuingAuthorizationThreeDSecureSchema.nullable()
      .describe('3D Secure details.')
      .optional()
  })
  export type IssuingAuthorizationVerificationData = z.infer<
    typeof IssuingAuthorizationVerificationDataSchema
  >

  export const PaymentMethodDetailsAmazonPaySchema = z.object({
    funding: AmazonPayUnderlyingPaymentMethodFundingDetailsSchema.optional()
  })
  export type PaymentMethodDetailsAmazonPay = z.infer<
    typeof PaymentMethodDetailsAmazonPaySchema
  >

  export const PaymentMethodDetailsKlarnaSchema = z.object({
    /** The payer details for this transaction. */
    payer_details: KlarnaPayerDetailsSchema.nullable()
      .describe('The payer details for this transaction.')
      .optional(),
    /**
     * The Klarna payment method used for this transaction.
     * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
     */
    payment_method_category: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Klarna payment method used for this transaction.\nCan be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`'
      )
      .optional(),
    /**
     * Preferred language of the Klarna authorization page that the customer is redirected to.
     * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
     */
    preferred_locale: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Preferred language of the Klarna authorization page that the customer is redirected to.\nCan be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`'
      )
      .optional()
  })
  export type PaymentMethodDetailsKlarna = z.infer<
    typeof PaymentMethodDetailsKlarnaSchema
  >

  export const PaymentMethodDetailsRevolutPaySchema = z.object({
    funding: RevolutPayUnderlyingPaymentMethodFundingDetailsSchema.optional()
  })
  export type PaymentMethodDetailsRevolutPay = z.infer<
    typeof PaymentMethodDetailsRevolutPaySchema
  >

  export const CurrencyOptionSchema = z.object({
    /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
    custom_unit_amount: CustomUnitAmountSchema.nullable()
      .describe(
        'When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.'
      )
      .optional(),
    /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive', 'unspecified'])
      .nullable()
      .describe(
        'Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.'
      )
      .optional(),
    /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
    tiers: z
      .array(PriceTierSchema)
      .describe(
        'Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.'
      )
      .optional(),
    /** The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
    unit_amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.'
      )
      .optional(),
    /** The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
    unit_amount_decimal: z
      .string()
      .nullable()
      .describe(
        'The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.'
      )
      .optional()
  })
  export type CurrencyOption = z.infer<typeof CurrencyOptionSchema>

  export const InvoicePaymentMethodOptionsCustomerBalanceSchema = z.object({
    bank_transfer:
      InvoicePaymentMethodOptionsCustomerBalanceBankTransferSchema.optional(),
    /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
    funding_type: z
      .literal('bank_transfer')
      .nullable()
      .describe(
        'The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.'
      )
      .optional()
  })
  export type InvoicePaymentMethodOptionsCustomerBalance = z.infer<
    typeof InvoicePaymentMethodOptionsCustomerBalanceSchema
  >

  export const InvoicePaymentMethodOptionsUsBankAccountSchema = z.object({
    financial_connections:
      InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsSchema.optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type InvoicePaymentMethodOptionsUsBankAccount = z.infer<
    typeof InvoicePaymentMethodOptionsUsBankAccountSchema
  >

  /**
   * A test clock enables deterministic control over objects in testmode. With a test clock, you can create
   * objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
   * you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
   */
  export const TestHelpersTestClockSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Time at which this clock is scheduled to auto delete. */
      deletes_after: z
        .number()
        .int()
        .describe('Time at which this clock is scheduled to auto delete.'),
      /** Time at which all objects belonging to this clock are frozen. */
      frozen_time: z
        .number()
        .int()
        .describe(
          'Time at which all objects belonging to this clock are frozen.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The custom name supplied at creation. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe('The custom name supplied at creation.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('test_helpers.test_clock')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The status of the Test Clock. */
      status: z
        .enum(['advancing', 'internal_failure', 'ready'])
        .describe('The status of the Test Clock.'),
      status_details: BillingClocksResourceStatusDetailsStatusDetailsSchema
    })
    .describe(
      'A test clock enables deterministic control over objects in testmode. With a test clock, you can create\nobjects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,\nyou can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.'
    )
  export type TestHelpersTestClock = z.infer<typeof TestHelpersTestClockSchema>

  export const BillingCreditGrantsResourceApplicabilityConfigSchema = z.object({
    scope: BillingCreditGrantsResourceScopeSchema
  })
  export type BillingCreditGrantsResourceApplicabilityConfig = z.infer<
    typeof BillingCreditGrantsResourceApplicabilityConfigSchema
  >

  export const InvoiceTaxAmountSchema = z.object({
    /** The amount, in cents (or local equivalent), of the tax. */
    amount: z
      .number()
      .int()
      .describe('The amount, in cents (or local equivalent), of the tax.'),
    /** Whether this tax amount is inclusive or exclusive. */
    inclusive: z
      .boolean()
      .describe('Whether this tax amount is inclusive or exclusive.'),
    /** The tax rate that was applied to get this tax amount. */
    tax_rate: z
      .union([z.string().max(5000), TaxRateSchema])
      .describe('The tax rate that was applied to get this tax amount.'),
    /** The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
    taxability_reason: z
      .enum([
        'customer_exempt',
        'not_collecting',
        'not_subject_to_tax',
        'not_supported',
        'portion_product_exempt',
        'portion_reduced_rated',
        'portion_standard_rated',
        'product_exempt',
        'product_exempt_holiday',
        'proportionally_rated',
        'reduced_rated',
        'reverse_charge',
        'standard_rated',
        'taxable_basis_reduced',
        'zero_rated'
      ])
      .nullable()
      .describe(
        'The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.'
      )
      .optional(),
    /** The amount on which tax is calculated, in cents (or local equivalent). */
    taxable_amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount on which tax is calculated, in cents (or local equivalent).'
      )
      .optional()
  })
  export type InvoiceTaxAmount = z.infer<typeof InvoiceTaxAmountSchema>

  export const LineItemsTaxAmountSchema = z.object({
    /** Amount of tax applied for this rate. */
    amount: z.number().int().describe('Amount of tax applied for this rate.'),
    rate: TaxRateSchema,
    /** The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
    taxability_reason: z
      .enum([
        'customer_exempt',
        'not_collecting',
        'not_subject_to_tax',
        'not_supported',
        'portion_product_exempt',
        'portion_reduced_rated',
        'portion_standard_rated',
        'product_exempt',
        'product_exempt_holiday',
        'proportionally_rated',
        'reduced_rated',
        'reverse_charge',
        'standard_rated',
        'taxable_basis_reduced',
        'zero_rated'
      ])
      .nullable()
      .describe(
        'The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.'
      )
      .optional(),
    /** The amount on which tax is calculated, in cents (or local equivalent). */
    taxable_amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount on which tax is calculated, in cents (or local equivalent).'
      )
      .optional()
  })
  export type LineItemsTaxAmount = z.infer<typeof LineItemsTaxAmountSchema>

  export const PaymentMethodOptionsCustomerBalanceSchema = z.object({
    bank_transfer:
      PaymentMethodOptionsCustomerBalanceBankTransferSchema.optional(),
    /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
    funding_type: z
      .literal('bank_transfer')
      .nullable()
      .describe(
        'The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type PaymentMethodOptionsCustomerBalance = z.infer<
    typeof PaymentMethodOptionsCustomerBalanceSchema
  >

  export const PaymentIntentProcessingSchema = z.object({
    card: PaymentIntentCardProcessingSchema.optional(),
    /** Type of the payment method for which payment is in `processing` state, one of `card`. */
    type: z
      .literal('card')
      .describe(
        'Type of the payment method for which payment is in `processing` state, one of `card`.'
      )
  })
  export type PaymentIntentProcessing = z.infer<
    typeof PaymentIntentProcessingSchema
  >

  export const AccountFutureRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning. */
    current_deadline: z
      .number()
      .int()
      .nullable()
      .describe(
        'Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.'
      )
      .optional(),
    /** Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
    currently_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.'
      )
      .optional(),
    /** This is typed as an enum for consistency with `requirements.disabled_reason`. */
    disabled_reason: z
      .enum([
        'action_required.requested_capabilities',
        'listed',
        'other',
        'platform_paused',
        'rejected.fraud',
        'rejected.incomplete_verification',
        'rejected.listed',
        'rejected.other',
        'rejected.platform_fraud',
        'rejected.platform_other',
        'rejected.platform_terms_of_service',
        'rejected.terms_of_service',
        'requirements.past_due',
        'requirements.pending_verification',
        'under_review'
      ])
      .nullable()
      .describe(
        'This is typed as an enum for consistency with `requirements.disabled_reason`.'
      )
      .optional(),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .nullable()
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      )
      .optional(),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well. */
    eventually_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.'
      )
      .optional(),
    /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
    past_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`."
      )
      .optional(),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
      .optional()
  })
  export type AccountFutureRequirements = z.infer<
    typeof AccountFutureRequirementsSchema
  >

  export const PersonFutureRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
    currently_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition."
      ),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      ),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
    eventually_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set."
      ),
    /** Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
    past_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`."
      ),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
  })
  export type PersonFutureRequirements = z.infer<
    typeof PersonFutureRequirementsSchema
  >

  export const PersonRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
    currently_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."
      ),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      ),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
    eventually_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set."
      ),
    /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
    past_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account."
      ),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
  })
  export type PersonRequirements = z.infer<typeof PersonRequirementsSchema>

  export const LegalEntityPersonVerificationDocumentSchema = z.object({
    /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    back: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.'
      )
      .optional(),
    /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
    details: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".'
      )
      .optional(),
    /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
    details_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.'
      )
      .optional(),
    /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    front: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        'The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.'
      )
      .optional()
  })
  export type LegalEntityPersonVerificationDocument = z.infer<
    typeof LegalEntityPersonVerificationDocumentSchema
  >

  export const AccountRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected. */
    current_deadline: z
      .number()
      .int()
      .nullable()
      .describe(
        'Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.'
      )
      .optional(),
    /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
    currently_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.'
      )
      .optional(),
    /** If the account is disabled, this enum describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification). */
    disabled_reason: z
      .enum([
        'action_required.requested_capabilities',
        'listed',
        'other',
        'platform_paused',
        'rejected.fraud',
        'rejected.incomplete_verification',
        'rejected.listed',
        'rejected.other',
        'rejected.platform_fraud',
        'rejected.platform_other',
        'rejected.platform_terms_of_service',
        'rejected.terms_of_service',
        'requirements.past_due',
        'requirements.pending_verification',
        'under_review'
      ])
      .nullable()
      .describe(
        'If the account is disabled, this enum describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).'
      )
      .optional(),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .nullable()
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      )
      .optional(),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
    eventually_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.'
      )
      .optional(),
    /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
    past_due: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account."
      )
      .optional(),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
      .optional()
  })
  export type AccountRequirements = z.infer<typeof AccountRequirementsSchema>

  export const AccountBrandingSettingsSchema = z.object({
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
    icon: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
    logo: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px."
      )
      .optional(),
    /** A CSS hex color value representing the primary branding color for this account */
    primary_color: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A CSS hex color value representing the primary branding color for this account'
      )
      .optional(),
    /** A CSS hex color value representing the secondary branding color for this account */
    secondary_color: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A CSS hex color value representing the secondary branding color for this account'
      )
      .optional()
  })
  export type AccountBrandingSettings = z.infer<
    typeof AccountBrandingSettingsSchema
  >

  export const DeletedExternalAccountSchema = z.union([
    DeletedBankAccountSchema,
    DeletedCardSchema
  ])
  export type DeletedExternalAccount = z.infer<
    typeof DeletedExternalAccountSchema
  >

  export const AccountCapabilityFutureRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning. */
    current_deadline: z
      .number()
      .int()
      .nullable()
      .describe(
        "Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning."
      )
      .optional(),
    /** Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
    currently_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.'
      ),
    /** This is typed as an enum for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is null because fields in `future_requirements` will never disable the account. */
    disabled_reason: z
      .enum([
        'other',
        'paused.inactivity',
        'pending.onboarding',
        'pending.review',
        'platform_disabled',
        'platform_paused',
        'rejected.inactivity',
        'rejected.other',
        'rejected.unsupported_business',
        'requirements.fields_needed'
      ])
      .nullable()
      .describe(
        'This is typed as an enum for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is null because fields in `future_requirements` will never disable the account.'
      )
      .optional(),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      ),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well. */
    eventually_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.'
      ),
    /** Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
    past_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`."
      ),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
  })
  export type AccountCapabilityFutureRequirements = z.infer<
    typeof AccountCapabilityFutureRequirementsSchema
  >

  export const AccountCapabilityRequirementsSchema = z.object({
    /** Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
    alternatives: z
      .array(AccountRequirementsAlternativeSchema)
      .nullable()
      .describe(
        'Fields that are due and can be satisfied by providing the corresponding alternative fields instead.'
      )
      .optional(),
    /** Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected. */
    current_deadline: z
      .number()
      .int()
      .nullable()
      .describe(
        'Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.'
      )
      .optional(),
    /** Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
    currently_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.'
      ),
    /** Description of why the capability is disabled. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification). */
    disabled_reason: z
      .enum([
        'other',
        'paused.inactivity',
        'pending.onboarding',
        'pending.review',
        'platform_disabled',
        'platform_paused',
        'rejected.inactivity',
        'rejected.other',
        'rejected.unsupported_business',
        'requirements.fields_needed'
      ])
      .nullable()
      .describe(
        'Description of why the capability is disabled. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).'
      )
      .optional(),
    /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
    errors: z
      .array(AccountRequirementsErrorSchema)
      .describe(
        'Fields that are `currently_due` and need to be collected again because validation or verification failed.'
      ),
    /** Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
    eventually_due: z
      .array(z.string().max(5000))
      .describe(
        'Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.'
      ),
    /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account. */
    past_due: z
      .array(z.string().max(5000))
      .describe(
        "Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account."
      ),
    /** Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending. */
    pending_verification: z
      .array(z.string().max(5000))
      .describe(
        "Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending."
      )
  })
  export type AccountCapabilityRequirements = z.infer<
    typeof AccountCapabilityRequirementsSchema
  >

  export const BalanceAmountNetSchema = z.object({
    /** Balance amount. */
    amount: z.number().int().describe('Balance amount.'),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** Breakdown of balance by destination. */
    net_available: z
      .array(BalanceNetAvailableSchema)
      .describe('Breakdown of balance by destination.')
      .optional(),
    source_types: BalanceAmountBySourceTypeSchema.optional()
  })
  export type BalanceAmountNet = z.infer<typeof BalanceAmountNetSchema>

  export const BalanceDetailSchema = z.object({
    /** Funds that are available for use. */
    available: z
      .array(BalanceAmountSchema)
      .describe('Funds that are available for use.')
  })
  export type BalanceDetail = z.infer<typeof BalanceDetailSchema>

  export const CreditBalanceSchema = z.object({
    available_balance: BillingCreditGrantsResourceAmountSchema,
    ledger_balance: BillingCreditGrantsResourceAmountSchema
  })
  export type CreditBalance = z.infer<typeof CreditBalanceSchema>

  export const PortalFlowsFlowAfterCompletionSchema = z.object({
    /** Configuration when `after_completion.type=hosted_confirmation`. */
    hosted_confirmation:
      PortalFlowsAfterCompletionHostedConfirmationSchema.nullable()
        .describe(
          'Configuration when `after_completion.type=hosted_confirmation`.'
        )
        .optional(),
    /** Configuration when `after_completion.type=redirect`. */
    redirect: PortalFlowsAfterCompletionRedirectSchema.nullable()
      .describe('Configuration when `after_completion.type=redirect`.')
      .optional(),
    /** The specified type of behavior after the flow is completed. */
    type: z
      .enum(['hosted_confirmation', 'portal_homepage', 'redirect'])
      .describe('The specified type of behavior after the flow is completed.')
  })
  export type PortalFlowsFlowAfterCompletion = z.infer<
    typeof PortalFlowsFlowAfterCompletionSchema
  >

  export const PortalFlowsFlowSubscriptionCancelSchema = z.object({
    /** Specify a retention strategy to be used in the cancellation flow. */
    retention: PortalFlowsRetentionSchema.nullable()
      .describe(
        'Specify a retention strategy to be used in the cancellation flow.'
      )
      .optional(),
    /** The ID of the subscription to be canceled. */
    subscription: z
      .string()
      .max(5000)
      .describe('The ID of the subscription to be canceled.')
  })
  export type PortalFlowsFlowSubscriptionCancel = z.infer<
    typeof PortalFlowsFlowSubscriptionCancelSchema
  >

  export const PortalFlowsFlowSubscriptionUpdateConfirmSchema = z.object({
    /** The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified. */
    discounts: z
      .array(PortalFlowsSubscriptionUpdateConfirmDiscountSchema)
      .nullable()
      .describe(
        'The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified.'
      )
      .optional(),
    /** The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable. */
    items: z
      .array(PortalFlowsSubscriptionUpdateConfirmItemSchema)
      .describe(
        'The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable.'
      ),
    /** The ID of the subscription to be updated. */
    subscription: z
      .string()
      .max(5000)
      .describe('The ID of the subscription to be updated.')
  })
  export type PortalFlowsFlowSubscriptionUpdateConfirm = z.infer<
    typeof PortalFlowsFlowSubscriptionUpdateConfirmSchema
  >

  export const PaymentPagesCheckoutSessionCollectedInformationSchema = z.object(
    {
      /** Shipping information for this Checkout Session. */
      shipping_details: ShippingSchema.nullable()
        .describe('Shipping information for this Checkout Session.')
        .optional()
    }
  )
  export type PaymentPagesCheckoutSessionCollectedInformation = z.infer<
    typeof PaymentPagesCheckoutSessionCollectedInformationSchema
  >

  export const PaymentPagesCheckoutSessionCustomerDetailsSchema = z.object({
    /** The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022. */
    address: AddressSchema.nullable()
      .describe(
        "The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022."
      )
      .optional(),
    /**
     * The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
     * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
     */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.\nOtherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.'
      )
      .optional(),
    /** The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022."
      )
      .optional(),
    /** The customer's phone number after a completed Checkout Session. */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The customer's phone number after a completed Checkout Session."
      )
      .optional(),
    /** The customer’s tax exempt status after a completed Checkout Session. */
    tax_exempt: z
      .enum(['exempt', 'none', 'reverse'])
      .nullable()
      .describe(
        'The customer’s tax exempt status after a completed Checkout Session.'
      )
      .optional(),
    /** The customer’s tax IDs after a completed Checkout Session. */
    tax_ids: z
      .array(PaymentPagesCheckoutSessionTaxIdSchema)
      .nullable()
      .describe('The customer’s tax IDs after a completed Checkout Session.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionCustomerDetails = z.infer<
    typeof PaymentPagesCheckoutSessionCustomerDetailsSchema
  >

  export const PaymentLinksResourceAfterCompletionSchema = z.object({
    hosted_confirmation:
      PaymentLinksResourceCompletionBehaviorConfirmationPageSchema.optional(),
    redirect: PaymentLinksResourceCompletionBehaviorRedirectSchema.optional(),
    /** The specified behavior after the purchase is complete. */
    type: z
      .enum(['hosted_confirmation', 'redirect'])
      .describe('The specified behavior after the purchase is complete.')
  })
  export type PaymentLinksResourceAfterCompletion = z.infer<
    typeof PaymentLinksResourceAfterCompletionSchema
  >

  export const CheckoutCardPaymentMethodOptionsSchema = z.object({
    installments: CheckoutCardInstallmentsOptionsSchema.optional(),
    /** Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession. */
    request_extended_authorization: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession.'
      )
      .optional(),
    /** Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession. */
    request_incremental_authorization: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession.'
      )
      .optional(),
    /** Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession. */
    request_multicapture: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession.'
      )
      .optional(),
    /** Request ability to [overcapture](/payments/overcapture) for this CheckoutSession. */
    request_overcapture: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [overcapture](/payments/overcapture) for this CheckoutSession.'
      )
      .optional(),
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure: z
      .enum(['any', 'automatic', 'challenge'])
      .describe(
        'We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.'
      ),
    restrictions:
      PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictionsSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
    statement_descriptor_suffix_kana: z
      .string()
      .max(5000)
      .describe(
        'Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.'
      )
      .optional(),
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
    statement_descriptor_suffix_kanji: z
      .string()
      .max(5000)
      .describe(
        'Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.'
      )
      .optional()
  })
  export type CheckoutCardPaymentMethodOptions = z.infer<
    typeof CheckoutCardPaymentMethodOptionsSchema
  >

  export const CheckoutCustomerBalancePaymentMethodOptionsSchema = z.object({
    bank_transfer:
      CheckoutCustomerBalanceBankTransferPaymentMethodOptionsSchema.optional(),
    /** The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`. */
    funding_type: z
      .literal('bank_transfer')
      .nullable()
      .describe(
        'The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .literal('none')
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional()
  })
  export type CheckoutCustomerBalancePaymentMethodOptions = z.infer<
    typeof CheckoutCustomerBalancePaymentMethodOptionsSchema
  >

  export const CheckoutUsBankAccountPaymentMethodOptionsSchema = z.object({
    financial_connections: LinkedAccountOptionsUsBankAccountSchema.optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type CheckoutUsBankAccountPaymentMethodOptions = z.infer<
    typeof CheckoutUsBankAccountPaymentMethodOptionsSchema
  >

  /** The delivery of a specified quantity of carbon for an order. */
  export const ClimateRemovalsOrderDeliveriesSchema = z
    .object({
      /** Time at which the delivery occurred. Measured in seconds since the Unix epoch. */
      delivered_at: z
        .number()
        .int()
        .describe(
          'Time at which the delivery occurred. Measured in seconds since the Unix epoch.'
        ),
      /** Specific location of this delivery. */
      location: ClimateRemovalsLocationSchema.nullable()
        .describe('Specific location of this delivery.')
        .optional(),
      /** Quantity of carbon removal supplied by this delivery. */
      metric_tons: z
        .string()
        .max(5000)
        .describe('Quantity of carbon removal supplied by this delivery.'),
      /** Once retired, a URL to the registry entry for the tons from this delivery. */
      registry_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Once retired, a URL to the registry entry for the tons from this delivery.'
        )
        .optional(),
      supplier: ClimateSupplierSchema
    })
    .describe('The delivery of a specified quantity of carbon for an order.')
  export type ClimateRemovalsOrderDeliveries = z.infer<
    typeof ClimateRemovalsOrderDeliveriesSchema
  >

  /** Data used for generating a Mandate. */
  export const ConfirmationTokensResourceMandateDataSchema = z
    .object({
      customer_acceptance:
        ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceSchema
    })
    .describe('Data used for generating a Mandate.')
  export type ConfirmationTokensResourceMandateData = z.infer<
    typeof ConfirmationTokensResourceMandateDataSchema
  >

  /**
   * Stripe needs to collect certain pieces of information about each account
   * created. These requirements can differ depending on the account's country. The
   * Country Specs API makes these rules available to your integration.
   *
   * You can also view the information from this API call as [an online
   * guide](/docs/connect/required-verification-information).
   */
  export const CountrySpecSchema = z
    .object({
      /** The default currency for this country. This applies to both payment methods and bank accounts. */
      default_currency: z
        .string()
        .max(5000)
        .describe(
          'The default currency for this country. This applies to both payment methods and bank accounts.'
        ),
      /** Unique identifier for the object. Represented as the ISO country code for this country. */
      id: z
        .string()
        .max(5000)
        .describe(
          'Unique identifier for the object. Represented as the ISO country code for this country.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('country_spec')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Currencies that can be accepted in the specific country (for transfers). */
      supported_bank_account_currencies: z
        .record(z.array(z.string().max(5000)))
        .describe(
          'Currencies that can be accepted in the specific country (for transfers).'
        ),
      /** Currencies that can be accepted in the specified country (for payments). */
      supported_payment_currencies: z
        .array(z.string().max(5000))
        .describe(
          'Currencies that can be accepted in the specified country (for payments).'
        ),
      /** Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
      supported_payment_methods: z
        .array(z.string().max(5000))
        .describe(
          'Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).'
        ),
      /** Countries that can accept transfers from the specified country. */
      supported_transfer_countries: z
        .array(z.string().max(5000))
        .describe(
          'Countries that can accept transfers from the specified country.'
        ),
      verification_fields: CountrySpecVerificationFieldsSchema
    })
    .describe(
      "Stripe needs to collect certain pieces of information about each account\ncreated. These requirements can differ depending on the account's country. The\nCountry Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online\nguide](/docs/connect/required-verification-information)."
    )
  export type CountrySpec = z.infer<typeof CountrySpecSchema>

  export const CreditNoteTaxAmountSchema = z.object({
    /** The amount, in cents (or local equivalent), of the tax. */
    amount: z
      .number()
      .int()
      .describe('The amount, in cents (or local equivalent), of the tax.'),
    /** Whether this tax amount is inclusive or exclusive. */
    inclusive: z
      .boolean()
      .describe('Whether this tax amount is inclusive or exclusive.'),
    /** The tax rate that was applied to get this tax amount. */
    tax_rate: z
      .union([z.string().max(5000), TaxRateSchema])
      .describe('The tax rate that was applied to get this tax amount.'),
    /** The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
    taxability_reason: z
      .enum([
        'customer_exempt',
        'not_collecting',
        'not_subject_to_tax',
        'not_supported',
        'portion_product_exempt',
        'portion_reduced_rated',
        'portion_standard_rated',
        'product_exempt',
        'product_exempt_holiday',
        'proportionally_rated',
        'reduced_rated',
        'reverse_charge',
        'standard_rated',
        'taxable_basis_reduced',
        'zero_rated'
      ])
      .nullable()
      .describe(
        'The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.'
      )
      .optional(),
    /** The amount on which tax is calculated, in cents (or local equivalent). */
    taxable_amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount on which tax is calculated, in cents (or local equivalent).'
      )
      .optional()
  })
  export type CreditNoteTaxAmount = z.infer<typeof CreditNoteTaxAmountSchema>

  export const DeletedPaymentSourceSchema = z.union([
    DeletedBankAccountSchema,
    DeletedCardSchema
  ])
  export type DeletedPaymentSource = z.infer<typeof DeletedPaymentSourceSchema>

  /**
   * Events are our way of letting you know when something interesting happens in
   * your account. When an interesting event occurs, we create a new `Event`
   * object. For example, when a charge succeeds, we create a `charge.succeeded`
   * event, and when an invoice payment attempt fails, we create an
   * `invoice.payment_failed` event. Certain API requests might create multiple
   * events. For example, if you create a new subscription for a
   * customer, you receive both a `customer.subscription.created` event and a
   * `charge.succeeded` event.
   *
   * Events occur when the state of another API resource changes. The event's data
   * field embeds the resource's state at the time of the change. For
   * example, a `charge.succeeded` event contains a charge, and an
   * `invoice.payment_failed` event contains an invoice.
   *
   * As with other API resources, you can use endpoints to retrieve an
   * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
   * from the API. We also have a separate
   * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
   * `Event` objects directly to an endpoint on your server. You can manage
   * webhooks in your
   * [account settings](https://dashboard.stripe.com/account/webhooks). Learn how
   * to [listen for events](https://docs.stripe.com/webhooks)
   * so that your integration can automatically trigger reactions.
   *
   * When using [Connect](https://docs.stripe.com/connect), you can also receive event notifications
   * that occur in connected accounts. For these events, there's an
   * additional `account` attribute in the received `Event` object.
   *
   * We only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
   * for 30 days.
   */
  export const EventSchema = z
    .object({
      /** The connected account that originates the event. */
      account: z
        .string()
        .max(5000)
        .describe('The connected account that originates the event.')
        .optional(),
      /** The Stripe API version used to render `data`. This property is populated only for events on or after October 31, 2014. */
      api_version: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The Stripe API version used to render `data`. This property is populated only for events on or after October 31, 2014.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      data: NotificationEventDataSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('event')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify. */
      pending_webhooks: z
        .number()
        .int()
        .describe(
          "Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify."
        ),
      /** Information on the API request that triggers the event. */
      request: NotificationEventRequestSchema.nullable()
        .describe('Information on the API request that triggers the event.')
        .optional(),
      /** Description of the event (for example, `invoice.created` or `charge.refunded`). */
      type: z
        .string()
        .max(5000)
        .describe(
          'Description of the event (for example, `invoice.created` or `charge.refunded`).'
        )
    })
    .describe(
      "Events are our way of letting you know when something interesting happens in\nyour account. When an interesting event occurs, we create a new `Event`\nobject. For example, when a charge succeeds, we create a `charge.succeeded`\nevent, and when an invoice payment attempt fails, we create an\n`invoice.payment_failed` event. Certain API requests might create multiple\nevents. For example, if you create a new subscription for a\ncustomer, you receive both a `customer.subscription.created` event and a\n`charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event's data\nfield embeds the resource's state at the time of the change. For\nexample, a `charge.succeeded` event contains a charge, and an\n`invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an\n[individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)\nfrom the API. We also have a separate\n[webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the\n`Event` objects directly to an endpoint on your server. You can manage\nwebhooks in your\n[account settings](https://dashboard.stripe.com/account/webhooks). Learn how\nto [listen for events](https://docs.stripe.com/webhooks)\nso that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications\nthat occur in connected accounts. For these events, there's an\nadditional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)\nfor 30 days."
    )
  export type Event = z.infer<typeof EventSchema>

  export const BankConnectionsResourceBalanceSchema = z.object({
    /** The time that the external institution calculated this balance. Measured in seconds since the Unix epoch. */
    as_of: z
      .number()
      .int()
      .describe(
        'The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.'
      ),
    cash: BankConnectionsResourceBalanceApiResourceCashBalanceSchema.optional(),
    credit:
      BankConnectionsResourceBalanceApiResourceCreditBalanceSchema.optional(),
    /**
     * The balances owed to (or by) the account holder, before subtracting any outbound pending transactions or adding any inbound pending transactions.
     *
     * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
     *
     * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
     */
    current: z
      .record(z.number().int())
      .describe(
        'The balances owed to (or by) the account holder, before subtracting any outbound pending transactions or adding any inbound pending transactions.\n\nEach key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n\nEach value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.'
      ),
    /** The `type` of the balance. An additional hash is included on the balance with a name matching this value. */
    type: z
      .enum(['cash', 'credit'])
      .describe(
        'The `type` of the balance. An additional hash is included on the balance with a name matching this value.'
      )
  })
  export type BankConnectionsResourceBalance = z.infer<
    typeof BankConnectionsResourceBalanceSchema
  >

  /** Result from an id_number check */
  export const GelatoIdNumberReportSchema = z
    .object({
      /** Date of birth. */
      dob: GelatoDataIdNumberReportDateSchema.nullable()
        .describe('Date of birth.')
        .optional(),
      /** Details on the verification error. Present when status is `unverified`. */
      error: GelatoIdNumberReportErrorSchema.nullable()
        .describe(
          'Details on the verification error. Present when status is `unverified`.'
        )
        .optional(),
      /** First name. */
      first_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('First name.')
        .optional(),
      /** ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present. */
      id_number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present.'
        )
        .optional(),
      /** Type of ID number. */
      id_number_type: z
        .enum(['br_cpf', 'sg_nric', 'us_ssn'])
        .nullable()
        .describe('Type of ID number.')
        .optional(),
      /** Last name. */
      last_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Last name.')
        .optional(),
      /** Status of this `id_number` check. */
      status: z
        .enum(['unverified', 'verified'])
        .describe('Status of this `id_number` check.')
    })
    .describe('Result from an id_number check')
  export type GelatoIdNumberReport = z.infer<typeof GelatoIdNumberReportSchema>

  export const GelatoVerificationReportOptionsSchema = z.object({
    document: GelatoReportDocumentOptionsSchema.optional(),
    id_number: GelatoReportIdNumberOptionsSchema.optional()
  })
  export type GelatoVerificationReportOptions = z.infer<
    typeof GelatoVerificationReportOptionsSchema
  >

  export const GelatoVerifiedOutputsSchema = z.object({
    /** The user's verified address. */
    address: AddressSchema.nullable()
      .describe("The user's verified address.")
      .optional(),
    /** The user’s verified date of birth. */
    dob: GelatoDataVerifiedOutputsDateSchema.nullable()
      .describe('The user’s verified date of birth.')
      .optional(),
    /** The user's verified email address */
    email: z
      .string()
      .max(5000)
      .nullable()
      .describe("The user's verified email address")
      .optional(),
    /** The user's verified first name. */
    first_name: z
      .string()
      .max(5000)
      .nullable()
      .describe("The user's verified first name.")
      .optional(),
    /** The user's verified id number. */
    id_number: z
      .string()
      .max(5000)
      .nullable()
      .describe("The user's verified id number.")
      .optional(),
    /** The user's verified id number type. */
    id_number_type: z
      .enum(['br_cpf', 'sg_nric', 'us_ssn'])
      .nullable()
      .describe("The user's verified id number type.")
      .optional(),
    /** The user's verified last name. */
    last_name: z
      .string()
      .max(5000)
      .nullable()
      .describe("The user's verified last name.")
      .optional(),
    /** The user's verified phone number */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe("The user's verified phone number")
      .optional()
  })
  export type GelatoVerifiedOutputs = z.infer<
    typeof GelatoVerifiedOutputsSchema
  >

  /**
   * PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
   *
   * There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
   *
   * **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
   *
   * **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
   *
   * Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
   *
   * Related guides:
   * - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
   * - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
   * - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
   */
  export const PaymentMethodConfigurationSchema = z
    .object({
      acss_debit:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** Whether the configuration can be used for new payments. */
      active: z
        .boolean()
        .describe('Whether the configuration can be used for new payments.'),
      affirm:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      afterpay_clearpay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      alipay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      alma: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      amazon_pay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      apple_pay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** For child configs, the Connect application associated with the configuration. */
      application: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'For child configs, the Connect application associated with the configuration.'
        )
        .optional(),
      au_becs_debit:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      bacs_debit:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      bancontact:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      blik: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      boleto:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      card: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      cartes_bancaires:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      cashapp:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      customer_balance:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      eps: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      fpx: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      giropay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      google_pay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      grabpay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      ideal:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** The default configuration is used whenever a payment method configuration is not specified. */
      is_default: z
        .boolean()
        .describe(
          'The default configuration is used whenever a payment method configuration is not specified.'
        ),
      jcb: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      klarna:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      konbini:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      link: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      mobilepay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      multibanco:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** The configuration's name. */
      name: z.string().max(5000).describe("The configuration's name."),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payment_method_configuration')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      oxxo: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      p24: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      /** For child configs, the configuration's parent configuration. */
      parent: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "For child configs, the configuration's parent configuration."
        )
        .optional(),
      pay_by_bank:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      paynow:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      paypal:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      promptpay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      revolut_pay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      sepa_debit:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      sofort:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      swish:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      twint:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      us_bank_account:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      wechat_pay:
        PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional(),
      zip: PaymentMethodConfigResourcePaymentMethodPropertiesSchema.optional()
    })
    .describe(
      "PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.\n\nThere are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):\n\n**Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.\n\n**Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.\n\nChild configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.\n\nRelated guides:\n- [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)\n- [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)\n- [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)"
    )
  export type PaymentMethodConfiguration = z.infer<
    typeof PaymentMethodConfigurationSchema
  >

  /**
   * A payment method domain represents a web domain that you have registered with Stripe.
   * Stripe Elements use registered payment method domains to control where certain payment methods are shown.
   *
   * Related guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
   */
  export const PaymentMethodDomainSchema = z
    .object({
      amazon_pay: PaymentMethodDomainResourcePaymentMethodStatusSchema,
      apple_pay: PaymentMethodDomainResourcePaymentMethodStatusSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The domain name that this payment method domain object represents. */
      domain_name: z
        .string()
        .max(5000)
        .describe(
          'The domain name that this payment method domain object represents.'
        ),
      /** Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements. */
      enabled: z
        .boolean()
        .describe(
          'Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.'
        ),
      google_pay: PaymentMethodDomainResourcePaymentMethodStatusSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      link: PaymentMethodDomainResourcePaymentMethodStatusSchema,
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payment_method_domain')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      paypal: PaymentMethodDomainResourcePaymentMethodStatusSchema
    })
    .describe(
      'A payment method domain represents a web domain that you have registered with Stripe.\nStripe Elements use registered payment method domains to control where certain payment methods are shown.\n\nRelated guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).'
    )
  export type PaymentMethodDomain = z.infer<typeof PaymentMethodDomainSchema>

  export const TaxProductResourceCustomerDetailsSchema = z.object({
    /** The customer's postal address (for example, home or business location). */
    address: TaxProductResourcePostalAddressSchema.nullable()
      .describe(
        "The customer's postal address (for example, home or business location)."
      )
      .optional(),
    /** The type of customer address provided. */
    address_source: z
      .enum(['billing', 'shipping'])
      .nullable()
      .describe('The type of customer address provided.')
      .optional(),
    /** The customer's IP address (IPv4 or IPv6). */
    ip_address: z
      .string()
      .max(5000)
      .nullable()
      .describe("The customer's IP address (IPv4 or IPv6).")
      .optional(),
    /** The customer's tax IDs (for example, EU VAT numbers). */
    tax_ids: z
      .array(TaxProductResourceCustomerDetailsResourceTaxIdSchema)
      .describe("The customer's tax IDs (for example, EU VAT numbers)."),
    /** The taxability override used for taxation. */
    taxability_override: z
      .enum(['customer_exempt', 'none', 'reverse_charge'])
      .describe('The taxability override used for taxation.')
  })
  export type TaxProductResourceCustomerDetails = z.infer<
    typeof TaxProductResourceCustomerDetailsSchema
  >

  export const TaxProductResourceLineItemTaxBreakdownSchema = z.object({
    /** The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        'The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    jurisdiction: TaxProductResourceJurisdictionSchema,
    /** Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address). */
    sourcing: z
      .enum(['destination', 'origin'])
      .describe(
        "Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address)."
      ),
    /** Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax. */
    tax_rate_details: TaxProductResourceLineItemTaxRateDetailsSchema.nullable()
      .describe(
        'Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax.'
      )
      .optional(),
    /** The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported. */
    taxability_reason: z
      .enum([
        'customer_exempt',
        'not_collecting',
        'not_subject_to_tax',
        'not_supported',
        'portion_product_exempt',
        'portion_reduced_rated',
        'portion_standard_rated',
        'product_exempt',
        'product_exempt_holiday',
        'proportionally_rated',
        'reduced_rated',
        'reverse_charge',
        'standard_rated',
        'taxable_basis_reduced',
        'zero_rated'
      ])
      .describe(
        'The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.'
      ),
    /** The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    taxable_amount: z
      .number()
      .int()
      .describe(
        'The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      )
  })
  export type TaxProductResourceLineItemTaxBreakdown = z.infer<
    typeof TaxProductResourceLineItemTaxBreakdownSchema
  >

  export const TaxProductResourceTaxBreakdownSchema = z.object({
    /** The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount: z
      .number()
      .int()
      .describe(
        'The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** Specifies whether the tax amount is included in the line item amount. */
    inclusive: z
      .boolean()
      .describe(
        'Specifies whether the tax amount is included in the line item amount.'
      ),
    tax_rate_details: TaxProductResourceTaxRateDetailsSchema,
    /** The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules. */
    taxability_reason: z
      .enum([
        'customer_exempt',
        'not_collecting',
        'not_subject_to_tax',
        'not_supported',
        'portion_product_exempt',
        'portion_reduced_rated',
        'portion_standard_rated',
        'product_exempt',
        'product_exempt_holiday',
        'proportionally_rated',
        'reduced_rated',
        'reverse_charge',
        'standard_rated',
        'taxable_basis_reduced',
        'zero_rated'
      ])
      .describe(
        'The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.'
      ),
    /** The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    taxable_amount: z
      .number()
      .int()
      .describe(
        'The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      )
  })
  export type TaxProductResourceTaxBreakdown = z.infer<
    typeof TaxProductResourceTaxBreakdownSchema
  >

  export const TaxProductResourceTaxSettingsStatusDetailsSchema = z.object({
    active:
      TaxProductResourceTaxSettingsStatusDetailsResourceActiveSchema.optional(),
    pending:
      TaxProductResourceTaxSettingsStatusDetailsResourcePendingSchema.optional()
  })
  export type TaxProductResourceTaxSettingsStatusDetails = z.infer<
    typeof TaxProductResourceTaxSettingsStatusDetailsSchema
  >

  export const TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema =
    z.object({
      /** A File ID representing an image you would like displayed on the reader. */
      splashscreen: z
        .union([z.string().max(5000), FileSchema])
        .describe(
          'A File ID representing an image you would like displayed on the reader.'
        )
        .optional()
    })
  export type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig =
    z.infer<
      typeof TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema
    >

  /** Represents a reader action to set the reader display */
  export const TerminalReaderReaderResourceSetReaderDisplayActionSchema = z
    .object({
      /** Cart object to be displayed by the reader. */
      cart: TerminalReaderReaderResourceCartSchema.nullable()
        .describe('Cart object to be displayed by the reader.')
        .optional(),
      /** Type of information to be displayed by the reader. */
      type: z
        .literal('cart')
        .describe('Type of information to be displayed by the reader.')
    })
    .describe('Represents a reader action to set the reader display')
  export type TerminalReaderReaderResourceSetReaderDisplayAction = z.infer<
    typeof TerminalReaderReaderResourceSetReaderDisplayActionSchema
  >

  export const TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetailsSchema =
    z.object({
      ach: TreasuryOutboundPaymentsResourceAchTrackingDetailsSchema.optional(),
      /** The US bank account network used to send funds. */
      type: z
        .enum(['ach', 'us_domestic_wire'])
        .describe('The US bank account network used to send funds.'),
      us_domestic_wire:
        TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetailsSchema.optional()
    })
  export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails =
    z.infer<
      typeof TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetailsSchema
    >

  export const TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetailsSchema =
    z.object({
      ach: TreasuryOutboundTransfersResourceAchTrackingDetailsSchema.optional(),
      /** The US bank account network used to send funds. */
      type: z
        .enum(['ach', 'us_domestic_wire'])
        .describe('The US bank account network used to send funds.'),
      us_domestic_wire:
        TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetailsSchema.optional()
    })
  export type TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails =
    z.infer<
      typeof TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetailsSchema
    >

  /** Settings related to Financial Addresses features on a Financial Account */
  export const TreasuryFinancialAccountsResourceFinancialAddressesFeaturesSchema =
    z
      .object({
        aba: TreasuryFinancialAccountsResourceAbaToggleSettingsSchema.optional()
      })
      .describe(
        'Settings related to Financial Addresses features on a Financial Account'
      )
  export type TreasuryFinancialAccountsResourceFinancialAddressesFeatures =
    z.infer<
      typeof TreasuryFinancialAccountsResourceFinancialAddressesFeaturesSchema
    >

  /** InboundTransfers contains inbound transfers features for a FinancialAccount. */
  export const TreasuryFinancialAccountsResourceInboundTransfersSchema = z
    .object({
      ach: TreasuryFinancialAccountsResourceInboundAchToggleSettingsSchema.optional()
    })
    .describe(
      'InboundTransfers contains inbound transfers features for a FinancialAccount.'
    )
  export type TreasuryFinancialAccountsResourceInboundTransfers = z.infer<
    typeof TreasuryFinancialAccountsResourceInboundTransfersSchema
  >

  export const AccountBusinessProfileSchema = z.object({
    /** The applicant's gross annual revenue for its preceding fiscal year. */
    annual_revenue: AccountAnnualRevenueSchema.nullable()
      .describe(
        "The applicant's gross annual revenue for its preceding fiscal year."
      )
      .optional(),
    /** An estimated upper bound of employees, contractors, vendors, etc. currently working for the business. */
    estimated_worker_count: z
      .number()
      .int()
      .nullable()
      .describe(
        'An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.'
      )
      .optional(),
    /** [The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
    mcc: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '[The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.'
      )
      .optional(),
    monthly_estimated_revenue: AccountMonthlyEstimatedRevenueSchema.optional(),
    /** The customer-facing business name. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The customer-facing business name.')
      .optional(),
    /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
    product_description: z
      .string()
      .max(40_000)
      .nullable()
      .describe(
        "Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes."
      )
      .optional(),
    /** A publicly available mailing address for sending support issues to. */
    support_address: AddressSchema.nullable()
      .describe(
        'A publicly available mailing address for sending support issues to.'
      )
      .optional(),
    /** A publicly available email address for sending support issues to. */
    support_email: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A publicly available email address for sending support issues to.'
      )
      .optional(),
    /** A publicly available phone number to call with support issues. */
    support_phone: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A publicly available phone number to call with support issues.'
      )
      .optional(),
    /** A publicly available website for handling support issues. */
    support_url: z
      .string()
      .max(5000)
      .nullable()
      .describe('A publicly available website for handling support issues.')
      .optional(),
    /** The business's publicly available website. */
    url: z
      .string()
      .max(5000)
      .nullable()
      .describe("The business's publicly available website.")
      .optional()
  })
  export type AccountBusinessProfile = z.infer<
    typeof AccountBusinessProfileSchema
  >

  export const LegalEntityCompanyVerificationSchema = z.object({
    document: LegalEntityCompanyVerificationDocumentSchema
  })
  export type LegalEntityCompanyVerification = z.infer<
    typeof LegalEntityCompanyVerificationSchema
  >

  export const AccountUnificationAccountControllerSchema = z.object({
    fees: AccountUnificationAccountControllerFeesSchema.optional(),
    /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
    is_controller: z
      .boolean()
      .describe(
        '`true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.'
      )
      .optional(),
    losses: AccountUnificationAccountControllerLossesSchema.optional(),
    /** A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account. */
    requirement_collection: z
      .enum(['application', 'stripe'])
      .describe(
        'A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account.'
      )
      .optional(),
    stripe_dashboard:
      AccountUnificationAccountControllerStripeDashboardSchema.optional(),
    /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
    type: z
      .enum(['account', 'application'])
      .describe(
        'The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.'
      )
  })
  export type AccountUnificationAccountController = z.infer<
    typeof AccountUnificationAccountControllerSchema
  >

  export const SourceOrderSchema = z.object({
    /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
    amount: z
      .number()
      .int()
      .describe(
        'A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.'
      ),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** The email address of the customer placing the order. */
    email: z
      .string()
      .max(5000)
      .describe('The email address of the customer placing the order.')
      .optional(),
    /** List of items constituting the order. */
    items: z
      .array(SourceOrderItemSchema)
      .nullable()
      .describe('List of items constituting the order.')
      .optional(),
    shipping: ShippingSchema.optional()
  })
  export type SourceOrder = z.infer<typeof SourceOrderSchema>

  export const PaymentMethodDetailsCardPresentSchema = z.object({
    /** The authorized amount */
    amount_authorized: z
      .number()
      .int()
      .nullable()
      .describe('The authorized amount')
      .optional(),
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
    brand_product: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.'
      )
      .optional(),
    /** When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured. */
    capture_before: z
      .number()
      .int()
      .describe(
        'When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.'
      )
      .optional(),
    /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
    cardholder_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** A high-level description of the type of cards issued in this range. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A high-level description of the type of cards issued in this range.'
      )
      .optional(),
    /** Authorization response cryptogram. */
    emv_auth_data: z
      .string()
      .max(5000)
      .nullable()
      .describe('Authorization response cryptogram.')
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
    generated_card: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.'
      )
      .optional(),
    /** Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support). */
    incremental_authorization_supported: z
      .boolean()
      .describe(
        'Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).'
      ),
    /** The name of the card's issuing bank. */
    issuer: z
      .string()
      .max(5000)
      .nullable()
      .describe("The name of the card's issuing bank.")
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    network: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise. */
    network_transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.'
      )
      .optional(),
    /** Details about payments collected offline. */
    offline: PaymentMethodDetailsCardPresentOfflineSchema.nullable()
      .describe('Details about payments collected offline.')
      .optional(),
    /** Defines whether the authorized amount can be over-captured or not */
    overcapture_supported: z
      .boolean()
      .describe(
        'Defines whether the authorized amount can be over-captured or not'
      ),
    /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
    preferred_locales: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.'
      )
      .optional(),
    /** How card details were read in this transaction. */
    read_method: z
      .enum([
        'contact_emv',
        'contactless_emv',
        'contactless_magstripe_mode',
        'magnetic_stripe_fallback',
        'magnetic_stripe_track2'
      ])
      .nullable()
      .describe('How card details were read in this transaction.')
      .optional(),
    /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
    receipt: PaymentMethodDetailsCardPresentReceiptSchema.nullable()
      .describe(
        'A collection of fields required to be displayed on receipts. Only required for EMV transactions.'
      )
      .optional(),
    wallet:
      PaymentFlowsPrivatePaymentMethodsCardPresentCommonWalletSchema.optional()
  })
  export type PaymentMethodDetailsCardPresent = z.infer<
    typeof PaymentMethodDetailsCardPresentSchema
  >

  export const DisputeEnhancedEvidenceVisaCompellingEvidence3Schema = z.object({
    /** Disputed transaction details for Visa Compelling Evidence 3.0 evidence submission. */
    disputed_transaction:
      DisputeVisaCompellingEvidence3DisputedTransactionSchema.nullable()
        .describe(
          'Disputed transaction details for Visa Compelling Evidence 3.0 evidence submission.'
        )
        .optional(),
    /** List of exactly two prior undisputed transaction objects for Visa Compelling Evidence 3.0 evidence submission. */
    prior_undisputed_transactions: z
      .array(DisputeVisaCompellingEvidence3PriorUndisputedTransactionSchema)
      .describe(
        'List of exactly two prior undisputed transaction objects for Visa Compelling Evidence 3.0 evidence submission.'
      )
  })
  export type DisputeEnhancedEvidenceVisaCompellingEvidence3 = z.infer<
    typeof DisputeEnhancedEvidenceVisaCompellingEvidence3Schema
  >

  export const DisputeEvidenceDetailsSchema = z.object({
    /** Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
    due_by: z
      .number()
      .int()
      .nullable()
      .describe(
        "Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute."
      )
      .optional(),
    enhanced_eligibility: DisputeEnhancedEligibilitySchema,
    /** Whether evidence has been staged for this dispute. */
    has_evidence: z
      .boolean()
      .describe('Whether evidence has been staged for this dispute.'),
    /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
    past_due: z
      .boolean()
      .describe(
        'Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.'
      ),
    /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
    submission_count: z
      .number()
      .int()
      .describe(
        'The number of times evidence has been submitted. Typically, you may only submit evidence once.'
      )
  })
  export type DisputeEvidenceDetails = z.infer<
    typeof DisputeEvidenceDetailsSchema
  >

  export const IssuingCardholderVerificationSchema = z.object({
    /** An identifying document, either a passport or local ID card. */
    document: IssuingCardholderIdDocumentSchema.nullable()
      .describe('An identifying document, either a passport or local ID card.')
      .optional()
  })
  export type IssuingCardholderVerification = z.infer<
    typeof IssuingCardholderVerificationSchema
  >

  export const IssuingCardShippingSchema = z.object({
    address: AddressSchema,
    /** Address validation details for the shipment. */
    address_validation: IssuingCardShippingAddressValidationSchema.nullable()
      .describe('Address validation details for the shipment.')
      .optional(),
    /** The delivery company that shipped a card. */
    carrier: z
      .enum(['dhl', 'fedex', 'royal_mail', 'usps'])
      .nullable()
      .describe('The delivery company that shipped a card.')
      .optional(),
    /** Additional information that may be required for clearing customs. */
    customs: IssuingCardShippingCustomsSchema.nullable()
      .describe(
        'Additional information that may be required for clearing customs.'
      )
      .optional(),
    /** A unix timestamp representing a best estimate of when the card will be delivered. */
    eta: z
      .number()
      .int()
      .nullable()
      .describe(
        'A unix timestamp representing a best estimate of when the card will be delivered.'
      )
      .optional(),
    /** Recipient name. */
    name: z.string().max(5000).describe('Recipient name.'),
    /** The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created. */
    phone_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created.'
      )
      .optional(),
    /** Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true. */
    require_signature: z
      .boolean()
      .nullable()
      .describe(
        'Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true.'
      )
      .optional(),
    /** Shipment service, such as `standard` or `express`. */
    service: z
      .enum(['express', 'priority', 'standard'])
      .describe('Shipment service, such as `standard` or `express`.'),
    /** The delivery status of the card. */
    status: z
      .enum([
        'canceled',
        'delivered',
        'failure',
        'pending',
        'returned',
        'shipped',
        'submitted'
      ])
      .nullable()
      .describe('The delivery status of the card.')
      .optional(),
    /** A tracking number for a card shipment. */
    tracking_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('A tracking number for a card shipment.')
      .optional(),
    /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
    tracking_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "A link to the shipping carrier's site where you can view detailed information about a card shipment."
      )
      .optional(),
    /** Packaging options. */
    type: z.enum(['bulk', 'individual']).describe('Packaging options.')
  })
  export type IssuingCardShipping = z.infer<typeof IssuingCardShippingSchema>

  export const IssuingAuthorizationFleetReportedBreakdownSchema = z.object({
    /** Breakdown of fuel portion of the purchase. */
    fuel: IssuingAuthorizationFleetFuelPriceDataSchema.nullable()
      .describe('Breakdown of fuel portion of the purchase.')
      .optional(),
    /** Breakdown of non-fuel portion of the purchase. */
    non_fuel: IssuingAuthorizationFleetNonFuelPriceDataSchema.nullable()
      .describe('Breakdown of non-fuel portion of the purchase.')
      .optional(),
    /** Information about tax included in this transaction. */
    tax: IssuingAuthorizationFleetTaxDataSchema.nullable()
      .describe('Information about tax included in this transaction.')
      .optional()
  })
  export type IssuingAuthorizationFleetReportedBreakdown = z.infer<
    typeof IssuingAuthorizationFleetReportedBreakdownSchema
  >

  export const IssuingTransactionFleetReportedBreakdownSchema = z.object({
    /** Breakdown of fuel portion of the purchase. */
    fuel: IssuingTransactionFleetFuelPriceDataSchema.nullable()
      .describe('Breakdown of fuel portion of the purchase.')
      .optional(),
    /** Breakdown of non-fuel portion of the purchase. */
    non_fuel: IssuingTransactionFleetNonFuelPriceDataSchema.nullable()
      .describe('Breakdown of non-fuel portion of the purchase.')
      .optional(),
    /** Information about tax included in this transaction. */
    tax: IssuingTransactionFleetTaxDataSchema.nullable()
      .describe('Information about tax included in this transaction.')
      .optional()
  })
  export type IssuingTransactionFleetReportedBreakdown = z.infer<
    typeof IssuingTransactionFleetReportedBreakdownSchema
  >

  export const SetupIntentPaymentMethodOptionsUsBankAccountSchema = z.object({
    financial_connections: LinkedAccountOptionsUsBankAccountSchema.optional(),
    mandate_options:
      PaymentMethodOptionsUsBankAccountMandateOptionsSchema.optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type SetupIntentPaymentMethodOptionsUsBankAccount = z.infer<
    typeof SetupIntentPaymentMethodOptionsUsBankAccountSchema
  >

  export const PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema =
    z.object({
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .enum(['manual', 'manual_preferred'])
        .describe(
          "Controls when the funds will be captured from the customer's account."
        )
        .optional(),
      installments: PaymentFlowsInstallmentOptionsSchema.optional(),
      /** Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
      request_incremental_authorization_support: z
        .boolean()
        .describe(
          'Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.'
        )
        .optional(),
      /** When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
      require_cvc_recollection: z
        .boolean()
        .describe(
          'When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).'
        )
        .optional(),
      routing: PaymentMethodOptionsCardPresentRoutingSchema.optional(),
      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
       */
      setup_future_usage: z
        .enum(['none', 'off_session', 'on_session'])
        .describe(
          "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
        )
        .optional(),
      /** Bank account verification method. */
      verification_method: z
        .enum(['automatic', 'instant', 'microdeposits'])
        .describe('Bank account verification method.')
        .optional()
    })
  export type PaymentIntentTypeSpecificPaymentMethodOptionsClient = z.infer<
    typeof PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
  >

  export const PaymentIntentPaymentMethodOptionsCardSchema = z.object({
    /** Controls when the funds will be captured from the customer's account. */
    capture_method: z
      .literal('manual')
      .describe(
        "Controls when the funds will be captured from the customer's account."
      )
      .optional(),
    /**
     * Installment details for this payment (Mexico only).
     *
     * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
     */
    installments: PaymentMethodOptionsCardInstallmentsSchema.nullable()
      .describe(
        'Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).'
      )
      .optional(),
    /** Configuration options for setting up an eMandate for cards issued in India. */
    mandate_options: PaymentMethodOptionsCardMandateOptionsSchema.nullable()
      .describe(
        'Configuration options for setting up an eMandate for cards issued in India.'
      )
      .optional(),
    /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
    network: z
      .enum([
        'amex',
        'cartes_bancaires',
        'diners',
        'discover',
        'eftpos_au',
        'girocard',
        'interac',
        'jcb',
        'link',
        'mastercard',
        'unionpay',
        'unknown',
        'visa'
      ])
      .nullable()
      .describe(
        'Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.'
      )
      .optional(),
    /** Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent. */
    request_extended_authorization: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.'
      )
      .optional(),
    /** Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent. */
    request_incremental_authorization: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.'
      )
      .optional(),
    /** Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent. */
    request_multicapture: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.'
      )
      .optional(),
    /** Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent. */
    request_overcapture: z
      .enum(['if_available', 'never'])
      .describe(
        'Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.'
      )
      .optional(),
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure: z
      .enum(['any', 'automatic', 'challenge'])
      .nullable()
      .describe(
        'We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.'
      )
      .optional(),
    /** When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
    require_cvc_recollection: z
      .boolean()
      .describe(
        'When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).'
      )
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
    statement_descriptor_suffix_kana: z
      .string()
      .max(5000)
      .describe(
        'Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.'
      )
      .optional(),
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
    statement_descriptor_suffix_kanji: z
      .string()
      .max(5000)
      .describe(
        'Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.'
      )
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsCard = z.infer<
    typeof PaymentIntentPaymentMethodOptionsCardSchema
  >

  export const PaymentIntentPaymentMethodOptionsUsBankAccountSchema = z.object({
    financial_connections: LinkedAccountOptionsUsBankAccountSchema.optional(),
    mandate_options:
      PaymentMethodOptionsUsBankAccountMandateOptionsSchema.optional(),
    /** Preferred transaction settlement speed */
    preferred_settlement_speed: z
      .enum(['fastest', 'standard'])
      .describe('Preferred transaction settlement speed')
      .optional(),
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage: z
      .enum(['none', 'off_session', 'on_session'])
      .describe(
        "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
      )
      .optional(),
    /** Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now. */
    target_date: z
      .string()
      .max(5000)
      .describe(
        "Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now."
      )
      .optional(),
    /** Bank account verification method. */
    verification_method: z
      .enum(['automatic', 'instant', 'microdeposits'])
      .describe('Bank account verification method.')
      .optional()
  })
  export type PaymentIntentPaymentMethodOptionsUsBankAccount = z.infer<
    typeof PaymentIntentPaymentMethodOptionsUsBankAccountSchema
  >

  export const PaymentMethodCardPresentSchema = z.object({
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card. */
    brand_product: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.'
      )
      .optional(),
    /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
    cardholder_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** A high-level description of the type of cards issued in this range. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A high-level description of the type of cards issued in this range.'
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** The name of the card's issuing bank. */
    issuer: z
      .string()
      .max(5000)
      .nullable()
      .describe("The name of the card's issuing bank.")
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** Contains information about card networks that can be used to process the payment. */
    networks: PaymentMethodCardPresentNetworksSchema.nullable()
      .describe(
        'Contains information about card networks that can be used to process the payment.'
      )
      .optional(),
    /** Details about payment methods collected offline. */
    offline: PaymentMethodDetailsCardPresentOfflineSchema.nullable()
      .describe('Details about payment methods collected offline.')
      .optional(),
    /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
    preferred_locales: z
      .array(z.string().max(5000))
      .nullable()
      .describe(
        'EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.'
      )
      .optional(),
    /** How card details were read in this transaction. */
    read_method: z
      .enum([
        'contact_emv',
        'contactless_emv',
        'contactless_magstripe_mode',
        'magnetic_stripe_fallback',
        'magnetic_stripe_track2'
      ])
      .nullable()
      .describe('How card details were read in this transaction.')
      .optional(),
    wallet:
      PaymentFlowsPrivatePaymentMethodsCardPresentCommonWalletSchema.optional()
  })
  export type PaymentMethodCardPresent = z.infer<
    typeof PaymentMethodCardPresentSchema
  >

  export const PaymentMethodUsBankAccountSchema = z.object({
    /** Account holder type: individual or company. */
    account_holder_type: z
      .enum(['company', 'individual'])
      .nullable()
      .describe('Account holder type: individual or company.')
      .optional(),
    /** Account type: checkings or savings. Defaults to checking if omitted. */
    account_type: z
      .enum(['checking', 'savings'])
      .nullable()
      .describe(
        'Account type: checkings or savings. Defaults to checking if omitted.'
      )
      .optional(),
    /** The name of the bank. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The name of the bank.')
      .optional(),
    /** The ID of the Financial Connections Account used to create the payment method. */
    financial_connections_account: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of the Financial Connections Account used to create the payment method.'
      )
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** Contains information about US bank account networks that can be used. */
    networks: UsBankAccountNetworksSchema.nullable()
      .describe(
        'Contains information about US bank account networks that can be used.'
      )
      .optional(),
    /** Routing number of the bank account. */
    routing_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Routing number of the bank account.')
      .optional(),
    /** Contains information about the future reusability of this PaymentMethod. */
    status_details: PaymentMethodUsBankAccountStatusDetailsSchema.nullable()
      .describe(
        'Contains information about the future reusability of this PaymentMethod.'
      )
      .optional()
  })
  export type PaymentMethodUsBankAccount = z.infer<
    typeof PaymentMethodUsBankAccountSchema
  >

  export const LegalEntityPersonVerificationSchema = z.object({
    /** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
    additional_document: LegalEntityPersonVerificationDocumentSchema.nullable()
      .describe(
        'A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.'
      )
      .optional(),
    /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
    details: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".'
      )
      .optional(),
    /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
    details_code: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.'
      )
      .optional(),
    document: LegalEntityPersonVerificationDocumentSchema.optional(),
    /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
    status: z
      .string()
      .max(5000)
      .describe(
        'The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.'
      )
  })
  export type LegalEntityPersonVerification = z.infer<
    typeof LegalEntityPersonVerificationSchema
  >

  export const PortalSubscriptionUpdateSchema = z.object({
    /** The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable. */
    default_allowed_updates: z
      .array(z.enum(['price', 'promotion_code', 'quantity']))
      .describe(
        'The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.'
      ),
    /** Whether the feature is enabled. */
    enabled: z.boolean().describe('Whether the feature is enabled.'),
    /** The list of up to 10 products that support subscription updates. */
    products: z
      .array(PortalSubscriptionUpdateProductSchema)
      .nullable()
      .describe(
        'The list of up to 10 products that support subscription updates.'
      )
      .optional(),
    /** Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation. */
    proration_behavior: z
      .enum(['always_invoice', 'create_prorations', 'none'])
      .describe(
        "Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation."
      ),
    schedule_at_period_end: PortalResourceScheduleUpdateAtPeriodEndSchema
  })
  export type PortalSubscriptionUpdate = z.infer<
    typeof PortalSubscriptionUpdateSchema
  >

  /**
   * A Climate product represents a type of carbon removal unit available for reservation.
   * You can retrieve it to see the current price and availability.
   */
  export const ClimateProductSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Current prices for a metric ton of carbon removal in a currency's smallest unit. */
      current_prices_per_metric_ton: z
        .record(ClimateRemovalsProductsPriceSchema)
        .describe(
          "Current prices for a metric ton of carbon removal in a currency's smallest unit."
        ),
      /** The year in which the carbon removal is expected to be delivered. */
      delivery_year: z
        .number()
        .int()
        .nullable()
        .describe(
          'The year in which the carbon removal is expected to be delivered.'
        )
        .optional(),
      /**
       * Unique identifier for the object. For convenience, Climate product IDs are human-readable strings
       * that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)
       * for a list of available carbon removal products.
       */
      id: z
        .string()
        .max(5000)
        .describe(
          'Unique identifier for the object. For convenience, Climate product IDs are human-readable strings\nthat start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)\nfor a list of available carbon removal products.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The quantity of metric tons available for reservation. */
      metric_tons_available: z
        .string()
        .describe('The quantity of metric tons available for reservation.'),
      /** The Climate product's name. */
      name: z.string().max(5000).describe("The Climate product's name."),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('climate.product')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The carbon removal suppliers that fulfill orders for this Climate product. */
      suppliers: z
        .array(ClimateSupplierSchema)
        .describe(
          'The carbon removal suppliers that fulfill orders for this Climate product.'
        )
    })
    .describe(
      'A Climate product represents a type of carbon removal unit available for reservation.\nYou can retrieve it to see the current price and availability.'
    )
  export type ClimateProduct = z.infer<typeof ClimateProductSchema>

  /**
   * The Report Run object represents an instance of a report type generated with
   * specific run parameters. Once the object is created, Stripe begins processing the report.
   * When the report has finished running, it will give you a reference to a file
   * where you can retrieve your results. For an overview, see
   * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
   *
   * Note that certain report types can only be run based on your live-mode data (not test-mode
   * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
   */
  export const ReportingReportRunSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /**
       * If something should go wrong during the run, a message about the failure (populated when
       *  `status=failed`).
       */
      error: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If something should go wrong during the run, a message about the failure (populated when\n `status=failed`).'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** `true` if the report is run on live mode data and `false` if it is run on test mode data. */
      livemode: z
        .boolean()
        .describe(
          '`true` if the report is run on live mode data and `false` if it is run on test mode data.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('reporting.report_run')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      parameters: FinancialReportingFinanceReportRunRunParametersSchema,
      /** The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`. */
      report_type: z
        .string()
        .max(5000)
        .describe(
          'The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.'
        ),
      /**
       * The file object representing the result of the report run (populated when
       *  `status=succeeded`).
       */
      result: FileSchema.nullable()
        .describe(
          'The file object representing the result of the report run (populated when\n `status=succeeded`).'
        )
        .optional(),
      /**
       * Status of this report run. This will be `pending` when the run is initially created.
       *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
       *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
       */
      status: z
        .string()
        .max(5000)
        .describe(
          'Status of this report run. This will be `pending` when the run is initially created.\n When the run finishes, this will be set to `succeeded` and the `result` field will be populated.\n Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.'
        ),
      /**
       * Timestamp at which this run successfully finished (populated when
       *  `status=succeeded`). Measured in seconds since the Unix epoch.
       */
      succeeded_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Timestamp at which this run successfully finished (populated when\n `status=succeeded`). Measured in seconds since the Unix epoch.'
        )
        .optional()
    })
    .describe(
      'The Report Run object represents an instance of a report type generated with\nspecific run parameters. Once the object is created, Stripe begins processing the report.\nWhen the report has finished running, it will give you a reference to a file\nwhere you can retrieve your results. For an overview, see\n[API Access to Reports](https://stripe.com/docs/reporting/statements/api).\n\nNote that certain report types can only be run based on your live-mode data (not test-mode\ndata), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).'
    )
  export type ReportingReportRun = z.infer<typeof ReportingReportRunSchema>

  /**
   * If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
   * receive a `sigma.scheduled_query_run.created` webhook each time the query
   * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
   * retrieve the query results.
   */
  export const ScheduledQueryRunSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** When the query was run, Sigma contained a snapshot of your Stripe data at this time. */
      data_load_time: z
        .number()
        .int()
        .describe(
          'When the query was run, Sigma contained a snapshot of your Stripe data at this time.'
        ),
      error: SigmaScheduledQueryRunErrorSchema.optional(),
      /** The file object representing the results of the query. */
      file: FileSchema.nullable()
        .describe('The file object representing the results of the query.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('scheduled_query_run')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Time at which the result expires and is no longer available for download. */
      result_available_until: z
        .number()
        .int()
        .describe(
          'Time at which the result expires and is no longer available for download.'
        ),
      /** SQL for the query. */
      sql: z.string().max(100_000).describe('SQL for the query.'),
      /** The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
      status: z
        .string()
        .max(5000)
        .describe(
          "The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise."
        ),
      /** Title of the query. */
      title: z.string().max(5000).describe('Title of the query.')
    })
    .describe(
      "If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll\nreceive a `sigma.scheduled_query_run.created` webhook each time the query\nruns. The webhook contains a `ScheduledQueryRun` object, which you can use to\nretrieve the query results."
    )
  export type ScheduledQueryRun = z.infer<typeof ScheduledQueryRunSchema>

  export const TaxCalculationLineItemSchema = z.object({
    /** The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.'
      ),
    /** The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_tax: z
      .number()
      .int()
      .describe(
        'The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('tax.calculation_line_item')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The ID of an existing [Product](https://stripe.com/docs/api/products/object). */
    product: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The ID of an existing [Product](https://stripe.com/docs/api/products/object).'
      )
      .optional(),
    /** The number of units of the item being purchased. For reversals, this is the quantity reversed. */
    quantity: z
      .number()
      .int()
      .describe(
        'The number of units of the item being purchased. For reversals, this is the quantity reversed.'
      ),
    /** A custom identifier for this line item. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('A custom identifier for this line item.')
      .optional(),
    /** Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive'])
      .describe(
        'Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.'
      ),
    /** Detailed account of taxes relevant to this line item. */
    tax_breakdown: z
      .array(TaxProductResourceLineItemTaxBreakdownSchema)
      .nullable()
      .describe('Detailed account of taxes relevant to this line item.')
      .optional(),
    /** The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource. */
    tax_code: z
      .string()
      .max(5000)
      .describe(
        'The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.'
      )
  })
  export type TaxCalculationLineItem = z.infer<
    typeof TaxCalculationLineItemSchema
  >

  export const TaxProductResourceTaxCalculationShippingCostSchema = z.object({
    /** The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.'
      ),
    /** The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_tax: z
      .number()
      .int()
      .describe(
        'The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
      ),
    /** The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object). */
    shipping_rate: z
      .string()
      .max(5000)
      .describe(
        'The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).'
      )
      .optional(),
    /** Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes. */
    tax_behavior: z
      .enum(['exclusive', 'inclusive'])
      .describe(
        'Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.'
      ),
    /** Detailed account of taxes relevant to shipping cost. */
    tax_breakdown: z
      .array(TaxProductResourceLineItemTaxBreakdownSchema)
      .describe('Detailed account of taxes relevant to shipping cost.')
      .optional(),
    /** The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping. */
    tax_code: z
      .string()
      .max(5000)
      .describe(
        'The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.'
      )
  })
  export type TaxProductResourceTaxCalculationShippingCost = z.infer<
    typeof TaxProductResourceTaxCalculationShippingCostSchema
  >

  /** Settings related to Outbound Payments features on a Financial Account */
  export const TreasuryFinancialAccountsResourceOutboundPaymentsSchema = z
    .object({
      ach: TreasuryFinancialAccountsResourceOutboundAchToggleSettingsSchema.optional(),
      us_domestic_wire:
        TreasuryFinancialAccountsResourceToggleSettingsSchema.optional()
    })
    .describe(
      'Settings related to Outbound Payments features on a Financial Account'
    )
  export type TreasuryFinancialAccountsResourceOutboundPayments = z.infer<
    typeof TreasuryFinancialAccountsResourceOutboundPaymentsSchema
  >

  /** OutboundTransfers contains outbound transfers features for a FinancialAccount. */
  export const TreasuryFinancialAccountsResourceOutboundTransfersSchema = z
    .object({
      ach: TreasuryFinancialAccountsResourceOutboundAchToggleSettingsSchema.optional(),
      us_domestic_wire:
        TreasuryFinancialAccountsResourceToggleSettingsSchema.optional()
    })
    .describe(
      'OutboundTransfers contains outbound transfers features for a FinancialAccount.'
    )
  export type TreasuryFinancialAccountsResourceOutboundTransfers = z.infer<
    typeof TreasuryFinancialAccountsResourceOutboundTransfersSchema
  >

  export const CardGeneratedFromPaymentMethodDetailsSchema = z.object({
    card_present: PaymentMethodDetailsCardPresentSchema.optional(),
    /** The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.'
      )
  })
  export type CardGeneratedFromPaymentMethodDetails = z.infer<
    typeof CardGeneratedFromPaymentMethodDetailsSchema
  >

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferSchema =
    z.object({
      eu_bank_transfer:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransferSchema.optional(),
      gb_bank_transfer:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransferSchema.optional(),
      jp_bank_transfer:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransferSchema.optional(),
      /** The user-supplied reference field on the bank transfer. */
      reference: z
        .string()
        .max(5000)
        .nullable()
        .describe('The user-supplied reference field on the bank transfer.')
        .optional(),
      /** The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`. */
      type: z
        .enum([
          'eu_bank_transfer',
          'gb_bank_transfer',
          'jp_bank_transfer',
          'mx_bank_transfer',
          'us_bank_transfer'
        ])
        .describe(
          'The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.'
        ),
      us_bank_transfer:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransferSchema.optional()
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferSchema
    >

  export const DisputePaymentMethodDetailsSchema = z.object({
    amazon_pay: DisputePaymentMethodDetailsAmazonPaySchema.optional(),
    card: DisputePaymentMethodDetailsCardSchema.optional(),
    klarna: DisputePaymentMethodDetailsKlarnaSchema.optional(),
    paypal: DisputePaymentMethodDetailsPaypalSchema.optional(),
    /** Payment method type. */
    type: z
      .enum(['amazon_pay', 'card', 'klarna', 'paypal'])
      .describe('Payment method type.')
  })
  export type DisputePaymentMethodDetails = z.infer<
    typeof DisputePaymentMethodDetailsSchema
  >

  export const SetupIntentNextActionSchema = z.object({
    cashapp_handle_redirect_or_display_qr_code:
      PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema.optional(),
    redirect_to_url: SetupIntentNextActionRedirectToUrlSchema.optional(),
    /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.'
      ),
    /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
    use_stripe_sdk: z
      .record(z.any())
      .describe(
        'When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.'
      )
      .optional(),
    verify_with_microdeposits:
      SetupIntentNextActionVerifyWithMicrodepositsSchema.optional()
  })
  export type SetupIntentNextAction = z.infer<
    typeof SetupIntentNextActionSchema
  >

  export const PaymentIntentNextActionKonbiniStoresSchema = z.object({
    /** FamilyMart instruction details. */
    familymart: PaymentIntentNextActionKonbiniFamilymartSchema.nullable()
      .describe('FamilyMart instruction details.')
      .optional(),
    /** Lawson instruction details. */
    lawson: PaymentIntentNextActionKonbiniLawsonSchema.nullable()
      .describe('Lawson instruction details.')
      .optional(),
    /** Ministop instruction details. */
    ministop: PaymentIntentNextActionKonbiniMinistopSchema.nullable()
      .describe('Ministop instruction details.')
      .optional(),
    /** Seicomart instruction details. */
    seicomart: PaymentIntentNextActionKonbiniSeicomartSchema.nullable()
      .describe('Seicomart instruction details.')
      .optional()
  })
  export type PaymentIntentNextActionKonbiniStores = z.infer<
    typeof PaymentIntentNextActionKonbiniStoresSchema
  >

  /**
   * Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.
   *
   * Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
   */
  export const BillingMeterSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      customer_mapping: BillingMeterResourceCustomerMappingSettingsSchema,
      default_aggregation: BillingMeterResourceAggregationSettingsSchema,
      /** The meter's name. */
      display_name: z.string().max(5000).describe("The meter's name."),
      /** The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events. */
      event_name: z
        .string()
        .max(5000)
        .describe(
          'The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.'
        ),
      /** The time window to pre-aggregate meter events for, if any. */
      event_time_window: z
        .enum(['day', 'hour'])
        .nullable()
        .describe('The time window to pre-aggregate meter events for, if any.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.meter')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The meter's status. */
      status: z.enum(['active', 'inactive']).describe("The meter's status."),
      status_transitions:
        BillingMeterResourceBillingMeterStatusTransitionsSchema,
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'Time at which the object was last updated. Measured in seconds since the Unix epoch.'
        ),
      value_settings: BillingMeterResourceBillingMeterValueSchema
    })
    .describe(
      'Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.\n\nRelated guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)'
    )
  export type BillingMeter = z.infer<typeof BillingMeterSchema>

  /** Configuration for the components supported by this Customer Session. */
  export const CustomerSessionResourceComponentsSchema = z
    .object({
      buy_button: CustomerSessionResourceComponentsResourceBuyButtonSchema,
      payment_element:
        CustomerSessionResourceComponentsResourcePaymentElementSchema,
      pricing_table: CustomerSessionResourceComponentsResourcePricingTableSchema
    })
    .describe(
      'Configuration for the components supported by this Customer Session.'
    )
  export type CustomerSessionResourceComponents = z.infer<
    typeof CustomerSessionResourceComponentsSchema
  >

  /**
   * Instructs Stripe to make a request on your behalf using the destination URL. The destination URL
   * is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials
   * provided during onboarding, and injects card details from the payment_method into the request.
   *
   * Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
   * before storing the request and response data in the forwarding Request object, which are subject to a
   * 30-day retention period.
   *
   * You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
   * outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
   * keys provided on the underlying third-party request.
   *
   * Forwarding Requests are synchronous requests that return a response or time out according to
   * Stripe’s limits.
   *
   * Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
   */
  export const ForwardingRequestSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('forwarding.request')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed. */
      payment_method: z
        .string()
        .max(5000)
        .describe(
          'The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.'
        ),
      /** The field kinds to be replaced in the forwarded request. */
      replacements: z
        .array(
          z.enum([
            'card_cvc',
            'card_expiry',
            'card_number',
            'cardholder_name',
            'request_signature'
          ])
        )
        .describe('The field kinds to be replaced in the forwarded request.'),
      /** Context about the request from Stripe's servers to the destination endpoint. */
      request_context: ForwardedRequestContextSchema.nullable()
        .describe(
          "Context about the request from Stripe's servers to the destination endpoint."
        )
        .optional(),
      /** The request that was sent to the destination endpoint. We redact any sensitive fields. */
      request_details: ForwardedRequestDetailsSchema.nullable()
        .describe(
          'The request that was sent to the destination endpoint. We redact any sensitive fields.'
        )
        .optional(),
      /** The response that the destination endpoint returned to us. We redact any sensitive fields. */
      response_details: ForwardedResponseDetailsSchema.nullable()
        .describe(
          'The response that the destination endpoint returned to us. We redact any sensitive fields.'
        )
        .optional(),
      /** The destination URL for the forwarded request. Must be supported by the config. */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The destination URL for the forwarded request. Must be supported by the config.'
        )
        .optional()
    })
    .describe(
      'Instructs Stripe to make a request on your behalf using the destination URL. The destination URL\nis activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials\nprovided during onboarding, and injects card details from the payment_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers,\nbefore storing the request and response data in the forwarding Request object, which are subject to a\n30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one\noutbound request. The Stripe idempotency key provided should be unique and different from any idempotency\nkeys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to\nStripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).'
    )
  export type ForwardingRequest = z.infer<typeof ForwardingRequestSchema>

  export const GelatoVerificationSessionOptionsSchema = z.object({
    document: GelatoSessionDocumentOptionsSchema.optional(),
    email: GelatoSessionEmailOptionsSchema.optional(),
    id_number: GelatoSessionIdNumberOptionsSchema.optional(),
    phone: GelatoSessionPhoneOptionsSchema.optional()
  })
  export type GelatoVerificationSessionOptions = z.infer<
    typeof GelatoVerificationSessionOptionsSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsUnitedStatesSchema =
    z.object({
      local_amusement_tax:
        TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTaxSchema.optional(),
      local_lease_tax:
        TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTaxSchema.optional(),
      /** Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
      state: z
        .string()
        .max(5000)
        .describe(
          'Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).'
        ),
      state_sales_tax:
        TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxSchema.optional(),
      /** Type of registration in the US. */
      type: z
        .enum([
          'local_amusement_tax',
          'local_lease_tax',
          'state_communications_tax',
          'state_retail_delivery_fee',
          'state_sales_tax'
        ])
        .describe('Type of registration in the US.')
    })
  export type TaxProductRegistrationsResourceCountryOptionsUnitedStates =
    z.infer<
      typeof TaxProductRegistrationsResourceCountryOptionsUnitedStatesSchema
    >

  export const TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema =
    z.object({
      /** Set when `type` is `balance`. */
      balance: z
        .literal('payments')
        .describe('Set when `type` is `balance`.')
        .optional(),
      billing_details: TreasurySharedResourceBillingDetailsSchema,
      financial_account:
        ReceivedPaymentMethodDetailsFinancialAccountSchema.optional(),
      /** Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID. */
      issuing_card: z
        .string()
        .max(5000)
        .describe(
          'Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.'
        )
        .optional(),
      /** Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount. */
      type: z
        .enum([
          'balance',
          'financial_account',
          'issuing_card',
          'stripe',
          'us_bank_account'
        ])
        .describe(
          "Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount."
        ),
      us_bank_account:
        TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccountSchema.optional()
    })
  export type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails =
    z.infer<
      typeof TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema
    >

  export const SetupAttemptPaymentMethodDetailsCardSchema = z.object({
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** Check results by Card networks on Card address and CVC at the time of authorization */
    checks: SetupAttemptPaymentMethodDetailsCardChecksSchema.nullable()
      .describe(
        'Check results by Card networks on Card address and CVC at the time of authorization'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .nullable()
      .describe("Two-digit number representing the card's expiration month.")
      .optional(),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .nullable()
      .describe("Four-digit number representing the card's expiration year.")
      .optional(),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    network: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** Populated if this authorization used 3D Secure authentication. */
    three_d_secure: ThreeDSecureDetailsSchema.nullable()
      .describe(
        'Populated if this authorization used 3D Secure authentication.'
      )
      .optional(),
    /** If this Card is part of a card wallet, this contains the details of the card wallet. */
    wallet: SetupAttemptPaymentMethodDetailsCardWalletSchema.nullable()
      .describe(
        'If this Card is part of a card wallet, this contains the details of the card wallet.'
      )
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsCard = z.infer<
    typeof SetupAttemptPaymentMethodDetailsCardSchema
  >

  export const CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionSchema =
    z.object({
      bank_transfer:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferSchema
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionSchema
    >

  export const DisputeEnhancedEvidenceSchema = z.object({
    visa_compelling_evidence_3:
      DisputeEnhancedEvidenceVisaCompellingEvidence3Schema.optional(),
    visa_compliance: DisputeEnhancedEvidenceVisaComplianceSchema.optional()
  })
  export type DisputeEnhancedEvidence = z.infer<
    typeof DisputeEnhancedEvidenceSchema
  >

  export const IssuingAuthorizationFleetDataSchema = z.object({
    /** Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry. */
    cardholder_prompt_data:
      IssuingAuthorizationFleetCardholderPromptDataSchema.nullable()
        .describe(
          'Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.'
        )
        .optional(),
    /** The type of purchase. */
    purchase_type: z
      .enum([
        'fuel_and_non_fuel_purchase',
        'fuel_purchase',
        'non_fuel_purchase'
      ])
      .nullable()
      .describe('The type of purchase.')
      .optional(),
    /** More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
    reported_breakdown:
      IssuingAuthorizationFleetReportedBreakdownSchema.nullable()
        .describe(
          'More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data.'
        )
        .optional(),
    /** The type of fuel service. */
    service_type: z
      .enum(['full_service', 'non_fuel_transaction', 'self_service'])
      .nullable()
      .describe('The type of fuel service.')
      .optional()
  })
  export type IssuingAuthorizationFleetData = z.infer<
    typeof IssuingAuthorizationFleetDataSchema
  >

  export const IssuingNetworkTokenNetworkDataSchema = z.object({
    device: IssuingNetworkTokenDeviceSchema.optional(),
    mastercard: IssuingNetworkTokenMastercardSchema.optional(),
    /** The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network. */
    type: z
      .enum(['mastercard', 'visa'])
      .describe(
        'The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.'
      ),
    visa: IssuingNetworkTokenVisaSchema.optional(),
    wallet_provider: IssuingNetworkTokenWalletProviderSchema.optional()
  })
  export type IssuingNetworkTokenNetworkData = z.infer<
    typeof IssuingNetworkTokenNetworkDataSchema
  >

  export const IssuingTransactionFleetDataSchema = z.object({
    /** Answers to prompts presented to cardholder at point of sale. */
    cardholder_prompt_data:
      IssuingTransactionFleetCardholderPromptDataSchema.nullable()
        .describe(
          'Answers to prompts presented to cardholder at point of sale.'
        )
        .optional(),
    /** The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`. */
    purchase_type: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.'
      )
      .optional(),
    /** More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
    reported_breakdown:
      IssuingTransactionFleetReportedBreakdownSchema.nullable()
        .describe(
          'More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data.'
        )
        .optional(),
    /** The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`. */
    service_type: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.'
      )
      .optional()
  })
  export type IssuingTransactionFleetData = z.infer<
    typeof IssuingTransactionFleetDataSchema
  >

  /**
   * Shipping rates describe the price of shipping presented to your customers and
   * applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
   */
  export const ShippingRateSchema = z
    .object({
      /** Whether the shipping rate can be used for new purchases. Defaults to `true`. */
      active: z
        .boolean()
        .describe(
          'Whether the shipping rate can be used for new purchases. Defaults to `true`.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      delivery_estimate: ShippingRateDeliveryEstimateSchema.nullable()
        .describe(
          'The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.'
        )
        .optional(),
      /** The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      display_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.'
        )
        .optional(),
      fixed_amount: ShippingRateFixedAmountSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('shipping_rate')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. */
      tax_behavior: z
        .enum(['exclusive', 'inclusive', 'unspecified'])
        .nullable()
        .describe(
          'Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.'
        )
        .optional(),
      /** A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`. */
      tax_code: z
        .union([z.string().max(5000), TaxCodeSchema])
        .nullable()
        .describe(
          'A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.'
        )
        .optional(),
      /** The type of calculation to use on the shipping rate. */
      type: z
        .literal('fixed_amount')
        .describe('The type of calculation to use on the shipping rate.')
    })
    .describe(
      'Shipping rates describe the price of shipping presented to your customers and\napplied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).'
    )
  export type ShippingRate = z.infer<typeof ShippingRateSchema>

  export const PaymentIntentNextActionKonbiniSchema = z.object({
    /** The timestamp at which the pending Konbini payment expires. */
    expires_at: z
      .number()
      .int()
      .describe('The timestamp at which the pending Konbini payment expires.'),
    /** The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher. */
    hosted_voucher_url: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.'
      )
      .optional(),
    stores: PaymentIntentNextActionKonbiniStoresSchema
  })
  export type PaymentIntentNextActionKonbini = z.infer<
    typeof PaymentIntentNextActionKonbiniSchema
  >

  /**
   * This is an object representing your Stripe balance. You can retrieve it to see
   * the balance currently on your Stripe account.
   *
   * You can also retrieve the balance history, which contains a list of
   * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
   * (charges, payouts, and so forth).
   *
   * The available and pending amounts for each currency are broken down further by
   * payment source types.
   *
   * Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
   */
  export const BalanceSchema = z
    .object({
      /** Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property. */
      available: z
        .array(BalanceAmountSchema)
        .describe(
          'Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.'
        ),
      /** Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property. */
      connect_reserved: z
        .array(BalanceAmountSchema)
        .describe(
          'Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.'
        )
        .optional(),
      /** Funds that you can pay out using Instant Payouts. */
      instant_available: z
        .array(BalanceAmountNetSchema)
        .describe('Funds that you can pay out using Instant Payouts.')
        .optional(),
      issuing: BalanceDetailSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('balance')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property. */
      pending: z
        .array(BalanceAmountSchema)
        .describe(
          "Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property."
        )
    })
    .describe(
      'This is an object representing your Stripe balance. You can retrieve it to see\nthe balance currently on your Stripe account.\n\nYou can also retrieve the balance history, which contains a list of\n[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance\n(charges, payouts, and so forth).\n\nThe available and pending amounts for each currency are broken down further by\npayment source types.\n\nRelated guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)'
    )
  export type Balance = z.infer<typeof BalanceSchema>

  export const PaymentPagesCheckoutSessionCustomFieldsSchema = z.object({
    dropdown: PaymentPagesCheckoutSessionCustomFieldsDropdownSchema.optional(),
    /** String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters. */
    key: z
      .string()
      .max(5000)
      .describe(
        'String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.'
      ),
    label: PaymentPagesCheckoutSessionCustomFieldsLabelSchema,
    numeric: PaymentPagesCheckoutSessionCustomFieldsNumericSchema.optional(),
    /** Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`. */
    optional: z
      .boolean()
      .describe(
        'Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.'
      ),
    text: PaymentPagesCheckoutSessionCustomFieldsTextSchema.optional(),
    /** The type of the field. */
    type: z
      .enum(['dropdown', 'numeric', 'text'])
      .describe('The type of the field.')
  })
  export type PaymentPagesCheckoutSessionCustomFields = z.infer<
    typeof PaymentPagesCheckoutSessionCustomFieldsSchema
  >

  export const PaymentLinksResourceCustomFieldsSchema = z.object({
    dropdown: PaymentLinksResourceCustomFieldsDropdownSchema.optional(),
    /** String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters. */
    key: z
      .string()
      .max(5000)
      .describe(
        'String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.'
      ),
    label: PaymentLinksResourceCustomFieldsLabelSchema,
    numeric: PaymentLinksResourceCustomFieldsNumericSchema.optional(),
    /** Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`. */
    optional: z
      .boolean()
      .describe(
        'Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.'
      ),
    text: PaymentLinksResourceCustomFieldsTextSchema.optional(),
    /** The type of the field. */
    type: z
      .enum(['dropdown', 'numeric', 'text'])
      .describe('The type of the field.')
  })
  export type PaymentLinksResourceCustomFields = z.infer<
    typeof PaymentLinksResourceCustomFieldsSchema
  >

  /** Result from a document check */
  export const GelatoDocumentReportSchema = z
    .object({
      /** Address as it appears in the document. */
      address: AddressSchema.nullable()
        .describe('Address as it appears in the document.')
        .optional(),
      /** Date of birth as it appears in the document. */
      dob: GelatoDataDocumentReportDateOfBirthSchema.nullable()
        .describe('Date of birth as it appears in the document.')
        .optional(),
      /** Details on the verification error. Present when status is `unverified`. */
      error: GelatoDocumentReportErrorSchema.nullable()
        .describe(
          'Details on the verification error. Present when status is `unverified`.'
        )
        .optional(),
      /** Expiration date of the document. */
      expiration_date: GelatoDataDocumentReportExpirationDateSchema.nullable()
        .describe('Expiration date of the document.')
        .optional(),
      /** Array of [File](https://stripe.com/docs/api/files) ids containing images for this document. */
      files: z
        .array(z.string().max(5000))
        .nullable()
        .describe(
          'Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.'
        )
        .optional(),
      /** First name as it appears in the document. */
      first_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('First name as it appears in the document.')
        .optional(),
      /** Issued date of the document. */
      issued_date: GelatoDataDocumentReportIssuedDateSchema.nullable()
        .describe('Issued date of the document.')
        .optional(),
      /** Issuing country of the document. */
      issuing_country: z
        .string()
        .max(5000)
        .nullable()
        .describe('Issuing country of the document.')
        .optional(),
      /** Last name as it appears in the document. */
      last_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Last name as it appears in the document.')
        .optional(),
      /** Document ID number. */
      number: z
        .string()
        .max(5000)
        .nullable()
        .describe('Document ID number.')
        .optional(),
      /** Status of this `document` check. */
      status: z
        .enum(['unverified', 'verified'])
        .describe('Status of this `document` check.'),
      /** Type of the document. */
      type: z
        .enum(['driving_license', 'id_card', 'passport'])
        .nullable()
        .describe('Type of the document.')
        .optional()
    })
    .describe('Result from a document check')
  export type GelatoDocumentReport = z.infer<typeof GelatoDocumentReportSchema>

  /**
   * Some payment methods have no required amount that a customer must send.
   * Customers can be instructed to send any amount, and it can be made up of
   * multiple transactions. As such, sources can have multiple associated
   * transactions.
   */
  export const SourceTransactionSchema = z
    .object({
      ach_credit_transfer:
        SourceTransactionAchCreditTransferDataSchema.optional(),
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
      amount: z
        .number()
        .int()
        .describe(
          'A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.'
        ),
      chf_credit_transfer:
        SourceTransactionChfCreditTransferDataSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      gbp_credit_transfer:
        SourceTransactionGbpCreditTransferDataSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('source_transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      paper_check: SourceTransactionPaperCheckDataSchema.optional(),
      sepa_credit_transfer:
        SourceTransactionSepaCreditTransferDataSchema.optional(),
      /** The ID of the source this transaction is attached to. */
      source: z
        .string()
        .max(5000)
        .describe('The ID of the source this transaction is attached to.'),
      /** The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
      status: z
        .string()
        .max(5000)
        .describe(
          'The status of the transaction, one of `succeeded`, `pending`, or `failed`.'
        ),
      /** The type of source this transaction is attached to. */
      type: z
        .enum([
          'ach_credit_transfer',
          'ach_debit',
          'alipay',
          'bancontact',
          'card',
          'card_present',
          'eps',
          'giropay',
          'ideal',
          'klarna',
          'multibanco',
          'p24',
          'sepa_debit',
          'sofort',
          'three_d_secure',
          'wechat'
        ])
        .describe('The type of source this transaction is attached to.')
    })
    .describe(
      'Some payment methods have no required amount that a customer must send.\nCustomers can be instructed to send any amount, and it can be made up of\nmultiple transactions. As such, sources can have multiple associated\ntransactions.'
    )
  export type SourceTransaction = z.infer<typeof SourceTransactionSchema>

  export const PaymentLinksResourceShippingOptionSchema = z.object({
    /** A non-negative integer in cents representing how much to charge. */
    shipping_amount: z
      .number()
      .int()
      .describe(
        'A non-negative integer in cents representing how much to charge.'
      ),
    /** The ID of the Shipping Rate to use for this shipping option. */
    shipping_rate: z
      .union([z.string().max(5000), ShippingRateSchema])
      .describe('The ID of the Shipping Rate to use for this shipping option.')
  })
  export type PaymentLinksResourceShippingOption = z.infer<
    typeof PaymentLinksResourceShippingOptionSchema
  >

  export const PaymentPagesCheckoutSessionShippingOptionSchema = z.object({
    /** A non-negative integer in cents representing how much to charge. */
    shipping_amount: z
      .number()
      .int()
      .describe(
        'A non-negative integer in cents representing how much to charge.'
      ),
    /** The shipping rate. */
    shipping_rate: z
      .union([z.string().max(5000), ShippingRateSchema])
      .describe('The shipping rate.')
  })
  export type PaymentPagesCheckoutSessionShippingOption = z.infer<
    typeof PaymentPagesCheckoutSessionShippingOptionSchema
  >

  /**
   * Orders represent your intent to purchase a particular Climate product. When you create an order, the
   * payment is deducted from your merchant balance.
   */
  export const ClimateOrderSchema = z
    .object({
      /** Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit. */
      amount_fees: z
        .number()
        .int()
        .describe(
          "Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit."
        ),
      /** Total amount of the carbon removal in the currency's smallest unit. */
      amount_subtotal: z
        .number()
        .int()
        .describe(
          "Total amount of the carbon removal in the currency's smallest unit."
        ),
      /** Total amount of the order including fees in the currency's smallest unit. */
      amount_total: z
        .number()
        .int()
        .describe(
          "Total amount of the order including fees in the currency's smallest unit."
        ),
      beneficiary: ClimateRemovalsBeneficiarySchema.optional(),
      /** Time at which the order was canceled. Measured in seconds since the Unix epoch. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the order was canceled. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Reason for the cancellation of this order. */
      cancellation_reason: z
        .enum(['expired', 'product_unavailable', 'requested'])
        .nullable()
        .describe('Reason for the cancellation of this order.')
        .optional(),
      /** For delivered orders, a URL to a delivery certificate for the order. */
      certificate: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'For delivered orders, a URL to a delivery certificate for the order.'
        )
        .optional(),
      /** Time at which the order was confirmed. Measured in seconds since the Unix epoch. */
      confirmed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the order was confirmed. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order. */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.'
        ),
      /** Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch. */
      delayed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch."
        )
        .optional(),
      /** Time at which the order was delivered. Measured in seconds since the Unix epoch. */
      delivered_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the order was delivered. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Details about the delivery of carbon removal for this order. */
      delivery_details: z
        .array(ClimateRemovalsOrderDeliveriesSchema)
        .describe(
          'Details about the delivery of carbon removal for this order.'
        ),
      /** The year this order is expected to be delivered. */
      expected_delivery_year: z
        .number()
        .int()
        .describe('The year this order is expected to be delivered.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** Quantity of carbon removal that is included in this order. */
      metric_tons: z
        .string()
        .describe('Quantity of carbon removal that is included in this order.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('climate.order')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Unique ID for the Climate `Product` this order is purchasing. */
      product: z
        .union([z.string().max(5000), ClimateProductSchema])
        .describe(
          'Unique ID for the Climate `Product` this order is purchasing.'
        ),
      /** Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch. */
      product_substituted_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch."
        )
        .optional(),
      /** The current status of this order. */
      status: z
        .enum(['awaiting_funds', 'canceled', 'confirmed', 'delivered', 'open'])
        .describe('The current status of this order.')
    })
    .describe(
      'Orders represent your intent to purchase a particular Climate product. When you create an order, the\npayment is deducted from your merchant balance.'
    )
  export type ClimateOrder = z.infer<typeof ClimateOrderSchema>

  /**
   * You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
   *
   * Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
   */
  export const TaxSettingsSchema = z
    .object({
      defaults: TaxProductResourceTaxSettingsDefaultsSchema,
      /** The place where your business is located. */
      head_office: TaxProductResourceTaxSettingsHeadOfficeSchema.nullable()
        .describe('The place where your business is located.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax.settings')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The status of the Tax `Settings`. */
      status: z
        .enum(['active', 'pending'])
        .describe('The status of the Tax `Settings`.'),
      status_details: TaxProductResourceTaxSettingsStatusDetailsSchema
    })
    .describe(
      'You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.\n\nRelated guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)'
    )
  export type TaxSettings = z.infer<typeof TaxSettingsSchema>

  export const IssuingCardholderIndividualSchema = z.object({
    /** Information related to the card_issuing program for this cardholder. */
    card_issuing: IssuingCardholderCardIssuingSchema.nullable()
      .describe(
        'Information related to the card_issuing program for this cardholder.'
      )
      .optional(),
    /** The date of birth of this cardholder. */
    dob: IssuingCardholderIndividualDobSchema.nullable()
      .describe('The date of birth of this cardholder.')
      .optional(),
    /** The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
    first_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.'
      )
      .optional(),
    /** The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters. */
    last_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.'
      )
      .optional(),
    /** Government-issued ID document for this cardholder. */
    verification: IssuingCardholderVerificationSchema.nullable()
      .describe('Government-issued ID document for this cardholder.')
      .optional()
  })
  export type IssuingCardholderIndividual = z.infer<
    typeof IssuingCardholderIndividualSchema
  >

  /** A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line. */
  export const IssuingPersonalizationDesignSchema = z
    .object({
      /** The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`. */
      card_logo: z
        .union([z.string().max(5000), FileSchema])
        .nullable()
        .describe(
          'The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.'
        )
        .optional(),
      /** Hash containing carrier text, for use with physical bundles that support carrier text. */
      carrier_text: IssuingPersonalizationDesignCarrierTextSchema.nullable()
        .describe(
          'Hash containing carrier text, for use with physical bundles that support carrier text.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters. */
      lookup_key: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** Friendly display name. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Friendly display name.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.personalization_design')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The physical bundle object belonging to this personalization design. */
      physical_bundle: z
        .union([z.string().max(5000), IssuingPhysicalBundleSchema])
        .describe(
          'The physical bundle object belonging to this personalization design.'
        ),
      preferences: IssuingPersonalizationDesignPreferencesSchema,
      rejection_reasons: IssuingPersonalizationDesignRejectionReasonsSchema,
      /** Whether this personalization design can be used to create cards. */
      status: z
        .enum(['active', 'inactive', 'rejected', 'review'])
        .describe(
          'Whether this personalization design can be used to create cards.'
        )
    })
    .describe(
      'A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.'
    )
  export type IssuingPersonalizationDesign = z.infer<
    typeof IssuingPersonalizationDesignSchema
  >

  /** FinancialAddresses contain identifying information that resolves to a FinancialAccount. */
  export const FundingInstructionsBankTransferFinancialAddressSchema = z
    .object({
      aba: FundingInstructionsBankTransferAbaRecordSchema.optional(),
      iban: FundingInstructionsBankTransferIbanRecordSchema.optional(),
      sort_code: FundingInstructionsBankTransferSortCodeRecordSchema.optional(),
      spei: FundingInstructionsBankTransferSpeiRecordSchema.optional(),
      /** The payment networks supported by this FinancialAddress */
      supported_networks: z
        .array(
          z.enum([
            'ach',
            'bacs',
            'domestic_wire_us',
            'fps',
            'sepa',
            'spei',
            'swift',
            'zengin'
          ])
        )
        .describe('The payment networks supported by this FinancialAddress')
        .optional(),
      swift: FundingInstructionsBankTransferSwiftRecordSchema.optional(),
      /** The type of financial address */
      type: z
        .enum(['aba', 'iban', 'sort_code', 'spei', 'swift', 'zengin'])
        .describe('The type of financial address'),
      zengin: FundingInstructionsBankTransferZenginRecordSchema.optional()
    })
    .describe(
      'FinancialAddresses contain identifying information that resolves to a FinancialAccount.'
    )
  export type FundingInstructionsBankTransferFinancialAddress = z.infer<
    typeof FundingInstructionsBankTransferFinancialAddressSchema
  >

  /** A Configurations object represents how features should be configured for terminal readers. */
  export const TerminalConfigurationSchema = z
    .object({
      bbpos_wisepos_e:
        TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Whether this Configuration is the default for your account */
      is_account_default: z
        .boolean()
        .nullable()
        .describe('Whether this Configuration is the default for your account')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String indicating the name of the Configuration object, set by the user */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'String indicating the name of the Configuration object, set by the user'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('terminal.configuration')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      offline:
        TerminalConfigurationConfigurationResourceOfflineConfigSchema.optional(),
      reboot_window:
        TerminalConfigurationConfigurationResourceRebootWindowSchema.optional(),
      stripe_s700:
        TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema.optional(),
      tipping:
        TerminalConfigurationConfigurationResourceTippingSchema.optional(),
      verifone_p400:
        TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfigSchema.optional()
    })
    .describe(
      'A Configurations object represents how features should be configured for terminal readers.'
    )
  export type TerminalConfiguration = z.infer<
    typeof TerminalConfigurationSchema
  >

  export const LegalEntityCompanySchema = z.object({
    address: AddressSchema.optional(),
    /** The Kana variation of the company's primary address (Japan only). */
    address_kana: LegalEntityJapanAddressSchema.nullable()
      .describe(
        "The Kana variation of the company's primary address (Japan only)."
      )
      .optional(),
    /** The Kanji variation of the company's primary address (Japan only). */
    address_kanji: LegalEntityJapanAddressSchema.nullable()
      .describe(
        "The Kanji variation of the company's primary address (Japan only)."
      )
      .optional(),
    /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
    directors_provided: z
      .boolean()
      .describe(
        "Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided)."
      )
      .optional(),
    /** This hash is used to attest that the director information provided to Stripe is both current and correct. */
    directorship_declaration:
      LegalEntityDirectorshipDeclarationSchema.nullable()
        .describe(
          'This hash is used to attest that the director information provided to Stripe is both current and correct.'
        )
        .optional(),
    /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
    executives_provided: z
      .boolean()
      .describe(
        "Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided."
      )
      .optional(),
    /** The export license ID number of the company, also referred as Import Export Code (India only). */
    export_license_id: z
      .string()
      .max(5000)
      .describe(
        'The export license ID number of the company, also referred as Import Export Code (India only).'
      )
      .optional(),
    /** The purpose code to use for export transactions (India only). */
    export_purpose_code: z
      .string()
      .max(5000)
      .describe('The purpose code to use for export transactions (India only).')
      .optional(),
    /** The company's legal name. */
    name: z
      .string()
      .max(5000)
      .nullable()
      .describe("The company's legal name.")
      .optional(),
    /** The Kana variation of the company's legal name (Japan only). */
    name_kana: z
      .string()
      .max(5000)
      .nullable()
      .describe("The Kana variation of the company's legal name (Japan only).")
      .optional(),
    /** The Kanji variation of the company's legal name (Japan only). */
    name_kanji: z
      .string()
      .max(5000)
      .nullable()
      .describe("The Kanji variation of the company's legal name (Japan only).")
      .optional(),
    /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
    owners_provided: z
      .boolean()
      .describe(
        "Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together)."
      )
      .optional(),
    /** This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
    ownership_declaration: LegalEntityUboDeclarationSchema.nullable()
      .describe(
        'This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.'
      )
      .optional(),
    ownership_exemption_reason: z
      .enum([
        'qualified_entity_exceeds_ownership_threshold',
        'qualifies_as_financial_institution'
      ])
      .optional(),
    /** The company's phone number (used for verification). */
    phone: z
      .string()
      .max(5000)
      .nullable()
      .describe("The company's phone number (used for verification).")
      .optional(),
    /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
    structure: z
      .enum([
        'free_zone_establishment',
        'free_zone_llc',
        'government_instrumentality',
        'governmental_unit',
        'incorporated_non_profit',
        'incorporated_partnership',
        'limited_liability_partnership',
        'llc',
        'multi_member_llc',
        'private_company',
        'private_corporation',
        'private_partnership',
        'public_company',
        'public_corporation',
        'public_partnership',
        'registered_charity',
        'single_member_llc',
        'sole_establishment',
        'sole_proprietorship',
        'tax_exempt_government_instrumentality',
        'unincorporated_association',
        'unincorporated_non_profit',
        'unincorporated_partnership'
      ])
      .describe(
        'The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.'
      )
      .optional(),
    /** Whether the company's business ID number was provided. */
    tax_id_provided: z
      .boolean()
      .describe("Whether the company's business ID number was provided.")
      .optional(),
    /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
    tax_id_registrar: z
      .string()
      .max(5000)
      .describe(
        'The jurisdiction in which the `tax_id` is registered (Germany-based companies only).'
      )
      .optional(),
    /** Whether the company's business VAT number was provided. */
    vat_id_provided: z
      .boolean()
      .describe("Whether the company's business VAT number was provided.")
      .optional(),
    /** Information on the verification state of the company. */
    verification: LegalEntityCompanyVerificationSchema.nullable()
      .describe('Information on the verification state of the company.')
      .optional()
  })
  export type LegalEntityCompany = z.infer<typeof LegalEntityCompanySchema>

  export const DisputeEvidenceSchema = z.object({
    /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
    access_activity_log: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        'Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.'
      )
      .optional(),
    /** The billing address provided by the customer. */
    billing_address: z
      .string()
      .max(5000)
      .nullable()
      .describe('The billing address provided by the customer.')
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
    cancellation_policy: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.'
      )
      .optional(),
    /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
    cancellation_policy_disclosure: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        'An explanation of how and when the customer was shown your refund policy prior to purchase.'
      )
      .optional(),
    /** A justification for why the customer's subscription was not canceled. */
    cancellation_rebuttal: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        "A justification for why the customer's subscription was not canceled."
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
    customer_communication: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.'
      )
      .optional(),
    /** The email address of the customer. */
    customer_email_address: z
      .string()
      .max(5000)
      .nullable()
      .describe('The email address of the customer.')
      .optional(),
    /** The name of the customer. */
    customer_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('The name of the customer.')
      .optional(),
    /** The IP address that the customer used when making the purchase. */
    customer_purchase_ip: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The IP address that the customer used when making the purchase.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
    customer_signature: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature."
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
    duplicate_charge_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.'
      )
      .optional(),
    /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
    duplicate_charge_explanation: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        'An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.'
      )
      .optional(),
    /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
    duplicate_charge_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.'
      )
      .optional(),
    enhanced_evidence: DisputeEnhancedEvidenceSchema,
    /** A description of the product or service that was sold. */
    product_description: z
      .string()
      .max(150_000)
      .nullable()
      .describe('A description of the product or service that was sold.')
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
    receipt: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
    refund_policy: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.'
      )
      .optional(),
    /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
    refund_policy_disclosure: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        'Documentation demonstrating that the customer was shown your refund policy prior to purchase.'
      )
      .optional(),
    /** A justification for why the customer is not entitled to a refund. */
    refund_refusal_explanation: z
      .string()
      .max(150_000)
      .nullable()
      .describe(
        'A justification for why the customer is not entitled to a refund.'
      )
      .optional(),
    /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
    service_date: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The date on which the customer received or began receiving the purchased service, in a clear human-readable format.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
    service_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.'
      )
      .optional(),
    /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
    shipping_address: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The address to which a physical product was shipped. You should try to include as complete address information as possible.'
      )
      .optional(),
    /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
    shipping_carrier: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.'
      )
      .optional(),
    /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
    shipping_date: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The date on which a physical product began its route to the shipping address, in a clear human-readable format.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
    shipping_documentation: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible."
      )
      .optional(),
    /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
    shipping_tracking_number: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.'
      )
      .optional(),
    /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
    uncategorized_file: z
      .union([z.string().max(5000), FileSchema])
      .nullable()
      .describe(
        '(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.'
      )
      .optional(),
    /** Any additional evidence or statements. */
    uncategorized_text: z
      .string()
      .max(150_000)
      .nullable()
      .describe('Any additional evidence or statements.')
      .optional()
  })
  export type DisputeEvidence = z.infer<typeof DisputeEvidenceSchema>

  export const PaymentMethodDetailsCardWalletSchema = z.object({
    amex_express_checkout:
      PaymentMethodDetailsCardWalletAmexExpressCheckoutSchema.optional(),
    apple_pay: PaymentMethodDetailsCardWalletApplePaySchema.optional(),
    /** (For tokenized numbers only.) The last four digits of the device account number. */
    dynamic_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '(For tokenized numbers only.) The last four digits of the device account number.'
      )
      .optional(),
    google_pay: PaymentMethodDetailsCardWalletGooglePaySchema.optional(),
    link: PaymentMethodDetailsCardWalletLinkSchema.optional(),
    masterpass: PaymentMethodDetailsCardWalletMasterpassSchema.optional(),
    samsung_pay: PaymentMethodDetailsCardWalletSamsungPaySchema.optional(),
    /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
    type: z
      .enum([
        'amex_express_checkout',
        'apple_pay',
        'google_pay',
        'link',
        'masterpass',
        'samsung_pay',
        'visa_checkout'
      ])
      .describe(
        'The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.'
      ),
    visa_checkout: PaymentMethodDetailsCardWalletVisaCheckoutSchema.optional()
  })
  export type PaymentMethodDetailsCardWallet = z.infer<
    typeof PaymentMethodDetailsCardWalletSchema
  >

  export const PaymentIntentNextActionDisplayBankTransferInstructionsSchema =
    z.object({
      /** The remaining amount that needs to be transferred to complete the payment. */
      amount_remaining: z
        .number()
        .int()
        .nullable()
        .describe(
          'The remaining amount that needs to be transferred to complete the payment.'
        )
        .optional(),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .nullable()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        )
        .optional(),
      /** A list of financial addresses that can be used to fund the customer balance */
      financial_addresses: z
        .array(FundingInstructionsBankTransferFinancialAddressSchema)
        .describe(
          'A list of financial addresses that can be used to fund the customer balance'
        )
        .optional(),
      /** A link to a hosted page that guides your customer through completing the transfer. */
      hosted_instructions_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A link to a hosted page that guides your customer through completing the transfer.'
        )
        .optional(),
      /** A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer. */
      reference: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.'
        )
        .optional(),
      /** Type of bank transfer */
      type: z
        .enum([
          'eu_bank_transfer',
          'gb_bank_transfer',
          'jp_bank_transfer',
          'mx_bank_transfer',
          'us_bank_transfer'
        ])
        .describe('Type of bank transfer')
    })
  export type PaymentIntentNextActionDisplayBankTransferInstructions = z.infer<
    typeof PaymentIntentNextActionDisplayBankTransferInstructionsSchema
  >

  export const PaymentMethodCardWalletSchema = z.object({
    amex_express_checkout:
      PaymentMethodCardWalletAmexExpressCheckoutSchema.optional(),
    apple_pay: PaymentMethodCardWalletApplePaySchema.optional(),
    /** (For tokenized numbers only.) The last four digits of the device account number. */
    dynamic_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        '(For tokenized numbers only.) The last four digits of the device account number.'
      )
      .optional(),
    google_pay: PaymentMethodCardWalletGooglePaySchema.optional(),
    link: PaymentMethodCardWalletLinkSchema.optional(),
    masterpass: PaymentMethodCardWalletMasterpassSchema.optional(),
    samsung_pay: PaymentMethodCardWalletSamsungPaySchema.optional(),
    /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
    type: z
      .enum([
        'amex_express_checkout',
        'apple_pay',
        'google_pay',
        'link',
        'masterpass',
        'samsung_pay',
        'visa_checkout'
      ])
      .describe(
        'The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.'
      ),
    visa_checkout: PaymentMethodCardWalletVisaCheckoutSchema.optional()
  })
  export type PaymentMethodCardWallet = z.infer<
    typeof PaymentMethodCardWalletSchema
  >

  export const FundingInstructionsBankTransferSchema = z.object({
    /** The country of the bank account to fund */
    country: z
      .string()
      .max(5000)
      .describe('The country of the bank account to fund'),
    /** A list of financial addresses that can be used to fund a particular balance */
    financial_addresses: z
      .array(FundingInstructionsBankTransferFinancialAddressSchema)
      .describe(
        'A list of financial addresses that can be used to fund a particular balance'
      ),
    /** The bank_transfer type */
    type: z
      .enum(['eu_bank_transfer', 'jp_bank_transfer'])
      .describe('The bank_transfer type')
  })
  export type FundingInstructionsBankTransfer = z.infer<
    typeof FundingInstructionsBankTransferSchema
  >

  /**
   * A Tax Transaction records the tax collected from or refunded to your customer.
   *
   * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
   */
  export const TaxTransactionSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource. */
      customer: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.'
        )
        .optional(),
      customer_details: TaxProductResourceCustomerDetailsSchema,
      /** Unique identifier for the transaction. */
      id: z
        .string()
        .max(5000)
        .describe('Unique identifier for the transaction.'),
      /** The tax collected or refunded, by line item. */
      line_items: z
        .object({
          /** Details about each object. */
          data: z
            .array(TaxTransactionLineItemSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .regex(new RegExp('^/v1/tax/transactions/[^/]+/line_items'))
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .nullable()
        .describe('The tax collected or refunded, by line item.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax.transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The Unix timestamp representing when the tax liability is assumed or reduced. */
      posted_at: z
        .number()
        .int()
        .describe(
          'The Unix timestamp representing when the tax liability is assumed or reduced.'
        ),
      /** A custom unique identifier, such as 'myOrder_123'. */
      reference: z
        .string()
        .max(5000)
        .describe("A custom unique identifier, such as 'myOrder_123'."),
      /** If `type=reversal`, contains information about what was reversed. */
      reversal:
        TaxProductResourceTaxTransactionResourceReversalSchema.nullable()
          .describe(
            'If `type=reversal`, contains information about what was reversed.'
          )
          .optional(),
      /** The details of the ship from location, such as the address. */
      ship_from_details: TaxProductResourceShipFromDetailsSchema.nullable()
        .describe('The details of the ship from location, such as the address.')
        .optional(),
      /** The shipping cost details for the transaction. */
      shipping_cost:
        TaxProductResourceTaxTransactionShippingCostSchema.nullable()
          .describe('The shipping cost details for the transaction.')
          .optional(),
      /** Timestamp of date at which the tax rules and rates in effect applies for the calculation. */
      tax_date: z
        .number()
        .int()
        .describe(
          'Timestamp of date at which the tax rules and rates in effect applies for the calculation.'
        ),
      /** If `reversal`, this transaction reverses an earlier transaction. */
      type: z
        .enum(['reversal', 'transaction'])
        .describe(
          'If `reversal`, this transaction reverses an earlier transaction.'
        )
    })
    .describe(
      'A Tax Transaction records the tax collected from or refunded to your customer.\n\nRelated guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)'
    )
  export type TaxTransaction = z.infer<typeof TaxTransactionSchema>

  export const InvoicesResourceShippingCostSchema = z.object({
    /** Total shipping cost before any taxes are applied. */
    amount_subtotal: z
      .number()
      .int()
      .describe('Total shipping cost before any taxes are applied.'),
    /** Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0. */
    amount_tax: z
      .number()
      .int()
      .describe(
        'Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.'
      ),
    /** Total shipping cost after taxes are applied. */
    amount_total: z
      .number()
      .int()
      .describe('Total shipping cost after taxes are applied.'),
    /** The ID of the ShippingRate for this invoice. */
    shipping_rate: z
      .union([z.string().max(5000), ShippingRateSchema])
      .nullable()
      .describe('The ID of the ShippingRate for this invoice.')
      .optional(),
    /** The taxes applied to the shipping rate. */
    taxes: z
      .array(LineItemsTaxAmountSchema)
      .describe('The taxes applied to the shipping rate.')
      .optional()
  })
  export type InvoicesResourceShippingCost = z.infer<
    typeof InvoicesResourceShippingCostSchema
  >

  export const PortalFeaturesSchema = z.object({
    customer_update: PortalCustomerUpdateSchema,
    invoice_history: PortalInvoiceListSchema,
    payment_method_update: PortalPaymentMethodUpdateSchema,
    subscription_cancel: PortalSubscriptionCancelSchema,
    subscription_update: PortalSubscriptionUpdateSchema
  })
  export type PortalFeatures = z.infer<typeof PortalFeaturesSchema>

  export const PaymentPagesCheckoutSessionShippingCostSchema = z.object({
    /** Total shipping cost before any discounts or taxes are applied. */
    amount_subtotal: z
      .number()
      .int()
      .describe(
        'Total shipping cost before any discounts or taxes are applied.'
      ),
    /** Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0. */
    amount_tax: z
      .number()
      .int()
      .describe(
        'Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.'
      ),
    /** Total shipping cost after discounts and taxes are applied. */
    amount_total: z
      .number()
      .int()
      .describe('Total shipping cost after discounts and taxes are applied.'),
    /** The ID of the ShippingRate for this order. */
    shipping_rate: z
      .union([z.string().max(5000), ShippingRateSchema])
      .nullable()
      .describe('The ID of the ShippingRate for this order.')
      .optional(),
    /** The taxes applied to the shipping rate. */
    taxes: z
      .array(LineItemsTaxAmountSchema)
      .describe('The taxes applied to the shipping rate.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionShippingCost = z.infer<
    typeof PaymentPagesCheckoutSessionShippingCostSchema
  >

  /**
   * Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
   * automatically applied to future invoices and payments using the `customer_balance` payment method.
   * Customers can fund this balance by initiating a bank transfer to any account in the
   * `financial_addresses` field.
   * Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
   */
  export const FundingInstructionsSchema = z
    .object({
      bank_transfer: FundingInstructionsBankTransferSchema,
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The `funding_type` of the returned instructions */
      funding_type: z
        .literal('bank_transfer')
        .describe('The `funding_type` of the returned instructions'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('funding_instructions')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is\nautomatically applied to future invoices and payments using the `customer_balance` payment method.\nCustomers can fund this balance by initiating a bank transfer to any account in the\n`financial_addresses` field.\nRelated guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)'
    )
  export type FundingInstructions = z.infer<typeof FundingInstructionsSchema>

  /**
   * Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
   * Stripe or the platform can control Features via the requested field.
   */
  export const TreasuryFinancialAccountFeaturesSchema = z
    .object({
      card_issuing:
        TreasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
      deposit_insurance:
        TreasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
      financial_addresses:
        TreasuryFinancialAccountsResourceFinancialAddressesFeaturesSchema.optional(),
      inbound_transfers:
        TreasuryFinancialAccountsResourceInboundTransfersSchema.optional(),
      intra_stripe_flows:
        TreasuryFinancialAccountsResourceToggleSettingsSchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.financial_account_features')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      outbound_payments:
        TreasuryFinancialAccountsResourceOutboundPaymentsSchema.optional(),
      outbound_transfers:
        TreasuryFinancialAccountsResourceOutboundTransfersSchema.optional()
    })
    .describe(
      'Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.\nStripe or the platform can control Features via the requested field.'
    )
  export type TreasuryFinancialAccountFeatures = z.infer<
    typeof TreasuryFinancialAccountFeaturesSchema
  >

  export const IssuingDisputeEvidenceSchema = z.object({
    canceled: IssuingDisputeCanceledEvidenceSchema.optional(),
    duplicate: IssuingDisputeDuplicateEvidenceSchema.optional(),
    fraudulent: IssuingDisputeFraudulentEvidenceSchema.optional(),
    merchandise_not_as_described:
      IssuingDisputeMerchandiseNotAsDescribedEvidenceSchema.optional(),
    no_valid_authorization:
      IssuingDisputeNoValidAuthorizationEvidenceSchema.optional(),
    not_received: IssuingDisputeNotReceivedEvidenceSchema.optional(),
    other: IssuingDisputeOtherEvidenceSchema.optional(),
    /** The reason for filing the dispute. Its value will match the field containing the evidence. */
    reason: z
      .enum([
        'canceled',
        'duplicate',
        'fraudulent',
        'merchandise_not_as_described',
        'no_valid_authorization',
        'not_received',
        'other',
        'service_not_as_described'
      ])
      .describe(
        'The reason for filing the dispute. Its value will match the field containing the evidence.'
      ),
    service_not_as_described:
      IssuingDisputeServiceNotAsDescribedEvidenceSchema.optional()
  })
  export type IssuingDisputeEvidence = z.infer<
    typeof IssuingDisputeEvidenceSchema
  >

  /**
   * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
   * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
   *
   * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
   */
  export const PriceSchema = z
    .object({
      /** Whether the price can be used for new purchases. */
      active: z
        .boolean()
        .describe('Whether the price can be used for new purchases.'),
      /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
      billing_scheme: z
        .enum(['per_unit', 'tiered'])
        .describe(
          'Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
      currency_options: z
        .record(CurrencyOptionSchema)
        .describe(
          'Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).'
        )
        .optional(),
      /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
      custom_unit_amount: CustomUnitAmountSchema.nullable()
        .describe(
          'When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
      lookup_key: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** A brief description of the price, hidden from customers. */
      nickname: z
        .string()
        .max(5000)
        .nullable()
        .describe('A brief description of the price, hidden from customers.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('price')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The ID of the product this price is associated with. */
      product: z
        .union([z.string().max(5000), ProductSchema, DeletedProductSchema])
        .describe('The ID of the product this price is associated with.'),
      /** The recurring components of a price such as `interval` and `usage_type`. */
      recurring: RecurringSchema.nullable()
        .describe(
          'The recurring components of a price such as `interval` and `usage_type`.'
        )
        .optional(),
      /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
      tax_behavior: z
        .enum(['exclusive', 'inclusive', 'unspecified'])
        .nullable()
        .describe(
          'Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.'
        )
        .optional(),
      /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers: z
        .array(PriceTierSchema)
        .describe(
          'Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.'
        )
        .optional(),
      /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
      tiers_mode: z
        .enum(['graduated', 'volume'])
        .nullable()
        .describe(
          'Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.'
        )
        .optional(),
      /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      transform_quantity: TransformQuantitySchema.nullable()
        .describe(
          'Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.'
        )
        .optional(),
      /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
      type: z
        .enum(['one_time', 'recurring'])
        .describe(
          'One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.'
        ),
      /** The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
      unit_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.'
        )
        .optional(),
      /** The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
      unit_amount_decimal: z
        .string()
        .nullable()
        .describe(
          'The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.'
        )
        .optional()
    })
    .describe(
      'Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).'
    )
  export type Price = z.infer<typeof PriceSchema>

  /**
   * Products describe the specific goods or services you offer to your customers.
   * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
   * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
   * [share a Payment Link](https://stripe.com/docs/payment-links),
   * [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
   * and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
   */
  export const ProductSchema = z
    .object({
      /** Whether the product is currently available for purchase. */
      active: z
        .boolean()
        .describe('Whether the product is currently available for purchase.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product. */
      default_price: z
        .union([z.string().max(5000), PriceSchema])
        .nullable()
        .describe(
          'The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.'
        )
        .optional(),
      /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
      images: z
        .array(z.string().max(5000))
        .describe(
          'A list of up to 8 URLs of images for this product, meant to be displayable to the customer.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
      marketing_features: z
        .array(ProductMarketingFeatureSchema)
        .describe(
          'A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The product's name, meant to be displayable to the customer. */
      name: z
        .string()
        .max(5000)
        .describe(
          "The product's name, meant to be displayable to the customer."
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('product')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The dimensions of this product for shipping purposes. */
      package_dimensions: PackageDimensionsSchema.nullable()
        .describe('The dimensions of this product for shipping purposes.')
        .optional(),
      /** Whether this product is shipped (i.e., physical goods). */
      shippable: z
        .boolean()
        .nullable()
        .describe('Whether this product is shipped (i.e., physical goods).')
        .optional(),
      /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments. */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments."
        )
        .optional(),
      /** A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
      tax_code: z
        .union([z.string().max(5000), TaxCodeSchema])
        .nullable()
        .describe(
          'A [tax code](https://stripe.com/docs/tax/tax-categories) ID.'
        )
        .optional(),
      /** A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
      unit_label: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal."
        )
        .optional(),
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'Time at which the object was last updated. Measured in seconds since the Unix epoch.'
        ),
      /** A URL of a publicly-accessible webpage for this product. */
      url: z
        .string()
        .max(2048)
        .nullable()
        .describe('A URL of a publicly-accessible webpage for this product.')
        .optional()
    })
    .describe(
      'Products describe the specific goods or services you offer to your customers.\nFor example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.\nThey can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),\n[share a Payment Link](https://stripe.com/docs/payment-links),\n[accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),\nand more about [Products and Prices](https://stripe.com/docs/products-prices/overview)'
    )
  export type Product = z.infer<typeof ProductSchema>

  export const PortalFlowsFlowSchema = z.object({
    after_completion: PortalFlowsFlowAfterCompletionSchema,
    /** Configuration when `flow.type=subscription_cancel`. */
    subscription_cancel: PortalFlowsFlowSubscriptionCancelSchema.nullable()
      .describe('Configuration when `flow.type=subscription_cancel`.')
      .optional(),
    /** Configuration when `flow.type=subscription_update`. */
    subscription_update: PortalFlowsFlowSubscriptionUpdateSchema.nullable()
      .describe('Configuration when `flow.type=subscription_update`.')
      .optional(),
    /** Configuration when `flow.type=subscription_update_confirm`. */
    subscription_update_confirm:
      PortalFlowsFlowSubscriptionUpdateConfirmSchema.nullable()
        .describe('Configuration when `flow.type=subscription_update_confirm`.')
        .optional(),
    /** Type of flow that the customer will go through. */
    type: z
      .enum([
        'payment_method_update',
        'subscription_cancel',
        'subscription_update',
        'subscription_update_confirm'
      ])
      .describe('Type of flow that the customer will go through.')
  })
  export type PortalFlowsFlow = z.infer<typeof PortalFlowsFlowSchema>

  export const IssuingTransactionPurchaseDetailsSchema = z.object({
    /** Fleet-specific information for transactions using Fleet cards. */
    fleet: IssuingTransactionFleetDataSchema.nullable()
      .describe(
        'Fleet-specific information for transactions using Fleet cards.'
      )
      .optional(),
    /** Information about the flight that was purchased with this transaction. */
    flight: IssuingTransactionFlightDataSchema.nullable()
      .describe(
        'Information about the flight that was purchased with this transaction.'
      )
      .optional(),
    /** Information about fuel that was purchased with this transaction. */
    fuel: IssuingTransactionFuelDataSchema.nullable()
      .describe(
        'Information about fuel that was purchased with this transaction.'
      )
      .optional(),
    /** Information about lodging that was purchased with this transaction. */
    lodging: IssuingTransactionLodgingDataSchema.nullable()
      .describe(
        'Information about lodging that was purchased with this transaction.'
      )
      .optional(),
    /** The line items in the purchase. */
    receipt: z
      .array(IssuingTransactionReceiptDataSchema)
      .nullable()
      .describe('The line items in the purchase.')
      .optional(),
    /** A merchant-specific order number. */
    reference: z
      .string()
      .max(5000)
      .nullable()
      .describe('A merchant-specific order number.')
      .optional()
  })
  export type IssuingTransactionPurchaseDetails = z.infer<
    typeof IssuingTransactionPurchaseDetailsSchema
  >

  export const TaxProductRegistrationsResourceCountryOptionsSchema = z.object({
    ae: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    al: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    am: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ao: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    at: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    au: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    ba: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    bb: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    be: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    bg: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    bh: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    bs: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    by: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ca: TaxProductRegistrationsResourceCountryOptionsCanadaSchema.optional(),
    cd: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    ch: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    cl: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    co: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    cr: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    cy: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    cz: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    de: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    dk: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    ec: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ee: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    eg: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    es: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    fi: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    fr: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    gb: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    ge: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    gn: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    gr: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    hr: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    hu: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    id: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ie: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    is: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    it: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    jp: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    ke: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    kh: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    kr: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    kz: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    lt: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    lu: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    lv: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    ma: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    md: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    me: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    mk: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    mr: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    mt: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    mx: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    my: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ng: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    nl: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    no: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    np: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    nz: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    om: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    pe: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    pl: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    pt: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    ro: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    rs: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    ru: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    sa: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    se: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    sg: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    si: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    sk: TaxProductRegistrationsResourceCountryOptionsEuropeSchema.optional(),
    sn: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    sr: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    th: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    tj: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    tr: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    tz: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    ug: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    us: TaxProductRegistrationsResourceCountryOptionsUnitedStatesSchema.optional(),
    uy: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    uz: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    vn: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    za: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional(),
    zm: TaxProductRegistrationsResourceCountryOptionsSimplifiedSchema.optional(),
    zw: TaxProductRegistrationsResourceCountryOptionsDefaultSchema.optional()
  })
  export type TaxProductRegistrationsResourceCountryOptions = z.infer<
    typeof TaxProductRegistrationsResourceCountryOptionsSchema
  >

  /**
   * A Tax Calculation allows you to calculate the tax to collect from your customer.
   *
   * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
   */
  export const TaxCalculationSchema = z
    .object({
      /** Total amount after taxes in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_total: z
        .number()
        .int()
        .describe(
          'Total amount after taxes in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource. */
      customer: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.'
        )
        .optional(),
      customer_details: TaxProductResourceCustomerDetailsSchema,
      /** Timestamp of date at which the tax calculation will expire. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe('Timestamp of date at which the tax calculation will expire.')
        .optional(),
      /** Unique identifier for the calculation. */
      id: z
        .string()
        .max(5000)
        .nullable()
        .describe('Unique identifier for the calculation.')
        .optional(),
      /** The list of items the customer is purchasing. */
      line_items: z
        .object({
          /** Details about each object. */
          data: z
            .array(TaxCalculationLineItemSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .regex(new RegExp('^/v1/tax/calculations/[^/]+/line_items'))
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .nullable()
        .describe('The list of items the customer is purchasing.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax.calculation')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The details of the ship from location, such as the address. */
      ship_from_details: TaxProductResourceShipFromDetailsSchema.nullable()
        .describe('The details of the ship from location, such as the address.')
        .optional(),
      /** The shipping cost details for the calculation. */
      shipping_cost:
        TaxProductResourceTaxCalculationShippingCostSchema.nullable()
          .describe('The shipping cost details for the calculation.')
          .optional(),
      /** The amount of tax to be collected on top of the line item prices. */
      tax_amount_exclusive: z
        .number()
        .int()
        .describe(
          'The amount of tax to be collected on top of the line item prices.'
        ),
      /** The amount of tax already included in the line item prices. */
      tax_amount_inclusive: z
        .number()
        .int()
        .describe(
          'The amount of tax already included in the line item prices.'
        ),
      /** Breakdown of individual tax amounts that add up to the total. */
      tax_breakdown: z
        .array(TaxProductResourceTaxBreakdownSchema)
        .describe(
          'Breakdown of individual tax amounts that add up to the total.'
        ),
      /** Timestamp of date at which the tax rules and rates in effect applies for the calculation. */
      tax_date: z
        .number()
        .int()
        .describe(
          'Timestamp of date at which the tax rules and rates in effect applies for the calculation.'
        )
    })
    .describe(
      'A Tax Calculation allows you to calculate the tax to collect from your customer.\n\nRelated guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)'
    )
  export type TaxCalculation = z.infer<typeof TaxCalculationSchema>

  /**
   * A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).
   *
   * Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).
   *
   * Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
   */
  export const TaxRegistrationSchema = z
    .object({
      /** Time at which the registration becomes active. Measured in seconds since the Unix epoch. */
      active_from: z
        .number()
        .int()
        .describe(
          'Time at which the registration becomes active. Measured in seconds since the Unix epoch.'
        ),
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: z
        .string()
        .max(5000)
        .describe(
          'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
        ),
      country_options: TaxProductRegistrationsResourceCountryOptionsSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax.registration')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`. */
      status: z
        .enum(['active', 'expired', 'scheduled'])
        .describe(
          'The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.'
        )
    })
    .describe(
      "A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).\n\nStripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).\n\nRelated guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)"
    )
  export type TaxRegistration = z.infer<typeof TaxRegistrationSchema>

  export const MandatePaymentMethodDetailsSchema = z.object({
    acss_debit: MandateAcssDebitSchema.optional(),
    amazon_pay: MandateAmazonPaySchema.optional(),
    au_becs_debit: MandateAuBecsDebitSchema.optional(),
    bacs_debit: MandateBacsDebitSchema.optional(),
    card: CardMandatePaymentMethodDetailsSchema.optional(),
    cashapp: MandateCashappSchema.optional(),
    kakao_pay: MandateKakaoPaySchema.optional(),
    kr_card: MandateKrCardSchema.optional(),
    link: MandateLinkSchema.optional(),
    paypal: MandatePaypalSchema.optional(),
    revolut_pay: MandateRevolutPaySchema.optional(),
    sepa_debit: MandateSepaDebitSchema.optional(),
    /** This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method. */
    type: z
      .string()
      .max(5000)
      .describe(
        "This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method."
      ),
    us_bank_account: MandateUsBankAccountSchema.optional()
  })
  export type MandatePaymentMethodDetails = z.infer<
    typeof MandatePaymentMethodDetailsSchema
  >

  export const RefundDestinationDetailsSchema = z.object({
    affirm: DestinationDetailsUnimplementedSchema.optional(),
    afterpay_clearpay: DestinationDetailsUnimplementedSchema.optional(),
    alipay: DestinationDetailsUnimplementedSchema.optional(),
    alma: DestinationDetailsUnimplementedSchema.optional(),
    amazon_pay: DestinationDetailsUnimplementedSchema.optional(),
    au_bank_transfer: DestinationDetailsUnimplementedSchema.optional(),
    blik: RefundDestinationDetailsBlikSchema.optional(),
    br_bank_transfer: RefundDestinationDetailsBrBankTransferSchema.optional(),
    card: RefundDestinationDetailsCardSchema.optional(),
    cashapp: DestinationDetailsUnimplementedSchema.optional(),
    customer_cash_balance: DestinationDetailsUnimplementedSchema.optional(),
    eps: DestinationDetailsUnimplementedSchema.optional(),
    eu_bank_transfer: RefundDestinationDetailsEuBankTransferSchema.optional(),
    gb_bank_transfer: RefundDestinationDetailsGbBankTransferSchema.optional(),
    giropay: DestinationDetailsUnimplementedSchema.optional(),
    grabpay: DestinationDetailsUnimplementedSchema.optional(),
    jp_bank_transfer: RefundDestinationDetailsJpBankTransferSchema.optional(),
    klarna: DestinationDetailsUnimplementedSchema.optional(),
    multibanco: RefundDestinationDetailsMultibancoSchema.optional(),
    mx_bank_transfer: RefundDestinationDetailsMxBankTransferSchema.optional(),
    p24: RefundDestinationDetailsP24Schema.optional(),
    paynow: DestinationDetailsUnimplementedSchema.optional(),
    paypal: DestinationDetailsUnimplementedSchema.optional(),
    pix: DestinationDetailsUnimplementedSchema.optional(),
    revolut: DestinationDetailsUnimplementedSchema.optional(),
    sofort: DestinationDetailsUnimplementedSchema.optional(),
    swish: RefundDestinationDetailsSwishSchema.optional(),
    th_bank_transfer: RefundDestinationDetailsThBankTransferSchema.optional(),
    /** The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction. */
    type: z
      .string()
      .max(5000)
      .describe(
        'The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction.'
      ),
    us_bank_transfer: RefundDestinationDetailsUsBankTransferSchema.optional(),
    wechat_pay: DestinationDetailsUnimplementedSchema.optional(),
    zip: DestinationDetailsUnimplementedSchema.optional()
  })
  export type RefundDestinationDetails = z.infer<
    typeof RefundDestinationDetailsSchema
  >

  export const SubscriptionsResourcePaymentMethodOptionsSchema = z.object({
    /** This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription. */
    acss_debit: InvoicePaymentMethodOptionsAcssDebitSchema.nullable()
      .describe(
        'This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.'
      )
      .optional(),
    /** This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
    bancontact: InvoicePaymentMethodOptionsBancontactSchema.nullable()
      .describe(
        'This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.'
      )
      .optional(),
    /** This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
    card: SubscriptionPaymentMethodOptionsCardSchema.nullable()
      .describe(
        'This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.'
      )
      .optional(),
    /** This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription. */
    customer_balance:
      InvoicePaymentMethodOptionsCustomerBalanceSchema.nullable()
        .describe(
          'This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.'
        )
        .optional(),
    /** This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription. */
    konbini: InvoicePaymentMethodOptionsKonbiniSchema.nullable()
      .describe(
        'This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.'
      )
      .optional(),
    /** This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription. */
    sepa_debit: InvoicePaymentMethodOptionsSepaDebitSchema.nullable()
      .describe(
        'This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription.'
      )
      .optional(),
    /** This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription. */
    us_bank_account: InvoicePaymentMethodOptionsUsBankAccountSchema.nullable()
      .describe(
        'This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.'
      )
      .optional()
  })
  export type SubscriptionsResourcePaymentMethodOptions = z.infer<
    typeof SubscriptionsResourcePaymentMethodOptionsSchema
  >

  export const InvoicesPaymentMethodOptionsSchema = z.object({
    /** If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent. */
    acss_debit: InvoicePaymentMethodOptionsAcssDebitSchema.nullable()
      .describe(
        'If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
    bancontact: InvoicePaymentMethodOptionsBancontactSchema.nullable()
      .describe(
        'If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
    card: InvoicePaymentMethodOptionsCardSchema.nullable()
      .describe(
        'If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent. */
    customer_balance:
      InvoicePaymentMethodOptionsCustomerBalanceSchema.nullable()
        .describe(
          'If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.'
        )
        .optional(),
    /** If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent. */
    konbini: InvoicePaymentMethodOptionsKonbiniSchema.nullable()
      .describe(
        'If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent. */
    sepa_debit: InvoicePaymentMethodOptionsSepaDebitSchema.nullable()
      .describe(
        'If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent. */
    us_bank_account: InvoicePaymentMethodOptionsUsBankAccountSchema.nullable()
      .describe(
        'If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.'
      )
      .optional()
  })
  export type InvoicesPaymentMethodOptions = z.infer<
    typeof InvoicesPaymentMethodOptionsSchema
  >

  /**
   * You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
   *
   * Plans define the base price, currency, and billing cycle for recurring purchases of products.
   * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
   *
   * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
   */
  export const PlanSchema = z
    .object({
      /** Whether the plan can be used for new purchases. */
      active: z
        .boolean()
        .describe('Whether the plan can be used for new purchases.'),
      /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
      aggregate_usage: z
        .enum(['last_during_period', 'last_ever', 'max', 'sum'])
        .nullable()
        .describe(
          'Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.'
        )
        .optional(),
      /** The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
      amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.'
        )
        .optional(),
      /** The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
      amount_decimal: z
        .string()
        .nullable()
        .describe(
          'The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.'
        )
        .optional(),
      /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
      billing_scheme: z
        .enum(['per_unit', 'tiered'])
        .describe(
          'Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
      interval: z
        .enum(['day', 'month', 'week', 'year'])
        .describe(
          'The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.'
        ),
      /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
      interval_count: z
        .number()
        .int()
        .describe(
          'The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The meter tracking the usage of a metered price */
      meter: z
        .string()
        .max(5000)
        .nullable()
        .describe('The meter tracking the usage of a metered price')
        .optional(),
      /** A brief description of the plan, hidden from customers. */
      nickname: z
        .string()
        .max(5000)
        .nullable()
        .describe('A brief description of the plan, hidden from customers.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('plan')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The product whose pricing this plan determines. */
      product: z
        .union([z.string().max(5000), ProductSchema, DeletedProductSchema])
        .nullable()
        .describe('The product whose pricing this plan determines.')
        .optional(),
      /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers: z
        .array(PlanTierSchema)
        .describe(
          'Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.'
        )
        .optional(),
      /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
      tiers_mode: z
        .enum(['graduated', 'volume'])
        .nullable()
        .describe(
          'Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.'
        )
        .optional(),
      /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      transform_usage: TransformUsageSchema.nullable()
        .describe(
          'Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.'
        )
        .optional(),
      /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
      trial_period_days: z
        .number()
        .int()
        .nullable()
        .describe(
          'Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).'
        )
        .optional(),
      /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
      usage_type: z
        .enum(['licensed', 'metered'])
        .describe(
          'Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.'
        )
    })
    .describe(
      'You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products.\n[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).'
    )
  export type Plan = z.infer<typeof PlanSchema>

  /**
   * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
   *
   * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
   */
  export const IssuingCardholderSchema = z
    .object({
      billing: IssuingCardholderAddressSchema,
      /** Additional information about a `company` cardholder. */
      company: IssuingCardholderCompanySchema.nullable()
        .describe('Additional information about a `company` cardholder.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The cardholder's email address. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe("The cardholder's email address.")
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Additional information about an `individual` cardholder. */
      individual: IssuingCardholderIndividualSchema.nullable()
        .describe('Additional information about an `individual` cardholder.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The cardholder's name. This will be printed on cards issued to them. */
      name: z
        .string()
        .max(5000)
        .describe(
          "The cardholder's name. This will be printed on cards issued to them."
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.cardholder')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
      phone_number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details."
        )
        .optional(),
      /**
       * The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
       *  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
       */
      preferred_locales: z
        .array(z.enum(['de', 'en', 'es', 'fr', 'it']))
        .nullable()
        .describe(
          'The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.\n This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.'
        )
        .optional(),
      requirements: IssuingCardholderRequirementsSchema,
      /** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
      spending_controls: IssuingCardholderAuthorizationControlsSchema.nullable()
        .describe(
          "Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."
        )
        .optional(),
      /** Specifies whether to permit authorizations on this cardholder's cards. */
      status: z
        .enum(['active', 'blocked', 'inactive'])
        .describe(
          "Specifies whether to permit authorizations on this cardholder's cards."
        ),
      /** One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details. */
      type: z
        .enum(['company', 'individual'])
        .describe(
          'One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.'
        )
    })
    .describe(
      'An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.\n\nRelated guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)'
    )
  export type IssuingCardholder = z.infer<typeof IssuingCardholderSchema>

  export const SubscriptionsResourcePaymentSettingsSchema = z.object({
    /** Payment-method-specific configuration to provide to invoices created by the subscription. */
    payment_method_options:
      SubscriptionsResourcePaymentMethodOptionsSchema.nullable()
        .describe(
          'Payment-method-specific configuration to provide to invoices created by the subscription.'
        )
        .optional(),
    /** The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
    payment_method_types: z
      .array(
        z.enum([
          'ach_credit_transfer',
          'ach_debit',
          'acss_debit',
          'amazon_pay',
          'au_becs_debit',
          'bacs_debit',
          'bancontact',
          'boleto',
          'card',
          'cashapp',
          'customer_balance',
          'eps',
          'fpx',
          'giropay',
          'grabpay',
          'ideal',
          'jp_credit_transfer',
          'kakao_pay',
          'konbini',
          'kr_card',
          'link',
          'multibanco',
          'naver_pay',
          'p24',
          'payco',
          'paynow',
          'paypal',
          'promptpay',
          'revolut_pay',
          'sepa_credit_transfer',
          'sepa_debit',
          'sofort',
          'swish',
          'us_bank_account',
          'wechat_pay'
        ])
      )
      .nullable()
      .describe(
        'The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).'
      )
      .optional(),
    /** Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`. */
    save_default_payment_method: z
      .enum(['off', 'on_subscription'])
      .nullable()
      .describe(
        'Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`.'
      )
      .optional()
  })
  export type SubscriptionsResourcePaymentSettings = z.infer<
    typeof SubscriptionsResourcePaymentSettingsSchema
  >

  export const InvoicesPaymentSettingsSchema = z.object({
    /** ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set. */
    default_mandate: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set."
      )
      .optional(),
    /** Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
    payment_method_options: InvoicesPaymentMethodOptionsSchema.nullable()
      .describe(
        'Payment-method-specific configuration to provide to the invoice’s PaymentIntent.'
      )
      .optional(),
    /** The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
    payment_method_types: z
      .array(
        z.enum([
          'ach_credit_transfer',
          'ach_debit',
          'acss_debit',
          'amazon_pay',
          'au_becs_debit',
          'bacs_debit',
          'bancontact',
          'boleto',
          'card',
          'cashapp',
          'customer_balance',
          'eps',
          'fpx',
          'giropay',
          'grabpay',
          'ideal',
          'jp_credit_transfer',
          'kakao_pay',
          'konbini',
          'kr_card',
          'link',
          'multibanco',
          'naver_pay',
          'p24',
          'payco',
          'paynow',
          'paypal',
          'promptpay',
          'revolut_pay',
          'sepa_credit_transfer',
          'sepa_debit',
          'sofort',
          'swish',
          'us_bank_account',
          'wechat_pay'
        ])
      )
      .nullable()
      .describe(
        'The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).'
      )
      .optional()
  })
  export type InvoicesPaymentSettings = z.infer<
    typeof InvoicesPaymentSettingsSchema
  >

  /**
   * This is an object representing a person associated with a Stripe account.
   *
   * A platform cannot access a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
   *
   * See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).
   */
  export const PersonSchema = z
    .object({
      /** The account the person is associated with. */
      account: z
        .string()
        .max(5000)
        .describe('The account the person is associated with.'),
      additional_tos_acceptances:
        PersonAdditionalTosAcceptancesSchema.optional(),
      address: AddressSchema.optional(),
      address_kana: LegalEntityJapanAddressSchema.nullable().optional(),
      address_kanji: LegalEntityJapanAddressSchema.nullable().optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      dob: LegalEntityDobSchema.optional(),
      /** The person's email address. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe("The person's email address.")
        .optional(),
      /** The person's first name. */
      first_name: z
        .string()
        .max(5000)
        .nullable()
        .describe("The person's first name.")
        .optional(),
      /** The Kana variation of the person's first name (Japan only). */
      first_name_kana: z
        .string()
        .max(5000)
        .nullable()
        .describe("The Kana variation of the person's first name (Japan only).")
        .optional(),
      /** The Kanji variation of the person's first name (Japan only). */
      first_name_kanji: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The Kanji variation of the person's first name (Japan only)."
        )
        .optional(),
      /** A list of alternate names or aliases that the person is known by. */
      full_name_aliases: z
        .array(z.string().max(5000))
        .describe(
          'A list of alternate names or aliases that the person is known by.'
        )
        .optional(),
      future_requirements: PersonFutureRequirementsSchema.nullable().optional(),
      /** The person's gender. */
      gender: z.string().nullable().describe("The person's gender.").optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`). */
      id_number_provided: z
        .boolean()
        .describe(
          "Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`)."
        )
        .optional(),
      /** Whether the person's `id_number_secondary` was provided. */
      id_number_secondary_provided: z
        .boolean()
        .describe("Whether the person's `id_number_secondary` was provided.")
        .optional(),
      /** The person's last name. */
      last_name: z
        .string()
        .max(5000)
        .nullable()
        .describe("The person's last name.")
        .optional(),
      /** The Kana variation of the person's last name (Japan only). */
      last_name_kana: z
        .string()
        .max(5000)
        .nullable()
        .describe("The Kana variation of the person's last name (Japan only).")
        .optional(),
      /** The Kanji variation of the person's last name (Japan only). */
      last_name_kanji: z
        .string()
        .max(5000)
        .nullable()
        .describe("The Kanji variation of the person's last name (Japan only).")
        .optional(),
      /** The person's maiden name. */
      maiden_name: z
        .string()
        .max(5000)
        .nullable()
        .describe("The person's maiden name.")
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The country where the person is a national. */
      nationality: z
        .string()
        .max(5000)
        .nullable()
        .describe('The country where the person is a national.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('person')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The person's phone number. */
      phone: z
        .string()
        .max(5000)
        .nullable()
        .describe("The person's phone number.")
        .optional(),
      /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
      political_exposure: z
        .enum(['existing', 'none'])
        .describe(
          'Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.'
        )
        .optional(),
      registered_address: AddressSchema.optional(),
      relationship: PersonRelationshipSchema.optional(),
      requirements: PersonRequirementsSchema.nullable().optional(),
      /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
      ssn_last_4_provided: z
        .boolean()
        .describe(
          "Whether the last four digits of the person's Social Security number have been provided (U.S. only)."
        )
        .optional(),
      verification: LegalEntityPersonVerificationSchema.optional()
    })
    .describe(
      'This is an object representing a person associated with a Stripe account.\n\nA platform cannot access a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.\n\nSee the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).'
    )
  export type Person = z.infer<typeof PersonSchema>

  /** A portal configuration describes the functionality and behavior of a portal session. */
  export const BillingPortalConfigurationSchema = z
    .object({
      /** Whether the configuration is active and can be used to create portal sessions. */
      active: z
        .boolean()
        .describe(
          'Whether the configuration is active and can be used to create portal sessions.'
        ),
      /** ID of the Connect Application that created the configuration. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe(
          'ID of the Connect Application that created the configuration.'
        )
        .optional(),
      business_profile: PortalBusinessProfileSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
      default_return_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session."
        )
        .optional(),
      features: PortalFeaturesSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session. */
      is_default: z
        .boolean()
        .describe(
          'Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      login_page: PortalLoginPageSchema,
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing_portal.configuration')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'Time at which the object was last updated. Measured in seconds since the Unix epoch.'
        )
    })
    .describe(
      'A portal configuration describes the functionality and behavior of a portal session.'
    )
  export type BillingPortalConfiguration = z.infer<
    typeof BillingPortalConfigurationSchema
  >

  export const ConnectEmbeddedAccountSessionCreateComponentsSchema = z.object({
    account_management: ConnectEmbeddedAccountConfigClaimSchema,
    account_onboarding: ConnectEmbeddedAccountConfigClaimSchema,
    balances: ConnectEmbeddedPayoutsConfigSchema,
    documents: ConnectEmbeddedBaseConfigClaimSchema,
    financial_account: ConnectEmbeddedFinancialAccountConfigClaimSchema,
    financial_account_transactions:
      ConnectEmbeddedFinancialAccountTransactionsConfigClaimSchema,
    issuing_card: ConnectEmbeddedIssuingCardConfigClaimSchema,
    issuing_cards_list: ConnectEmbeddedIssuingCardsListConfigClaimSchema,
    notification_banner: ConnectEmbeddedAccountConfigClaimSchema,
    payment_details: ConnectEmbeddedPaymentsConfigClaimSchema,
    payments: ConnectEmbeddedPaymentsConfigClaimSchema,
    payouts: ConnectEmbeddedPayoutsConfigSchema,
    payouts_list: ConnectEmbeddedBaseConfigClaimSchema,
    tax_registrations: ConnectEmbeddedBaseConfigClaimSchema,
    tax_settings: ConnectEmbeddedBaseConfigClaimSchema
  })
  export type ConnectEmbeddedAccountSessionCreateComponents = z.infer<
    typeof ConnectEmbeddedAccountSessionCreateComponentsSchema
  >

  /**
   * Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
   * FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
   */
  export const TreasuryFinancialAccountSchema = z
    .object({
      /** The array of paths to active Features in the Features hash. */
      active_features: z
        .array(
          z.enum([
            'card_issuing',
            'deposit_insurance',
            'financial_addresses.aba',
            'financial_addresses.aba.forwarding',
            'inbound_transfers.ach',
            'intra_stripe_flows',
            'outbound_payments.ach',
            'outbound_payments.us_domestic_wire',
            'outbound_transfers.ach',
            'outbound_transfers.us_domestic_wire',
            'remote_deposit_capture'
          ])
        )
        .describe('The array of paths to active Features in the Features hash.')
        .optional(),
      balance: TreasuryFinancialAccountsResourceBalanceSchema,
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country: z
        .string()
        .max(5000)
        .describe(
          'Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      features: TreasuryFinancialAccountFeaturesSchema.optional(),
      /** The set of credentials that resolve to a FinancialAccount. */
      financial_addresses: z
        .array(TreasuryFinancialAccountsResourceFinancialAddressSchema)
        .describe('The set of credentials that resolve to a FinancialAccount.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      is_default: z.boolean().optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The nickname for the FinancialAccount. */
      nickname: z
        .string()
        .max(5000)
        .nullable()
        .describe('The nickname for the FinancialAccount.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.financial_account')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The array of paths to pending Features in the Features hash. */
      pending_features: z
        .array(
          z.enum([
            'card_issuing',
            'deposit_insurance',
            'financial_addresses.aba',
            'financial_addresses.aba.forwarding',
            'inbound_transfers.ach',
            'intra_stripe_flows',
            'outbound_payments.ach',
            'outbound_payments.us_domestic_wire',
            'outbound_transfers.ach',
            'outbound_transfers.us_domestic_wire',
            'remote_deposit_capture'
          ])
        )
        .describe(
          'The array of paths to pending Features in the Features hash.'
        )
        .optional(),
      /** The set of functionalities that the platform can restrict on the FinancialAccount. */
      platform_restrictions:
        TreasuryFinancialAccountsResourcePlatformRestrictionsSchema.nullable()
          .describe(
            'The set of functionalities that the platform can restrict on the FinancialAccount.'
          )
          .optional(),
      /** The array of paths to restricted Features in the Features hash. */
      restricted_features: z
        .array(
          z.enum([
            'card_issuing',
            'deposit_insurance',
            'financial_addresses.aba',
            'financial_addresses.aba.forwarding',
            'inbound_transfers.ach',
            'intra_stripe_flows',
            'outbound_payments.ach',
            'outbound_payments.us_domestic_wire',
            'outbound_transfers.ach',
            'outbound_transfers.us_domestic_wire',
            'remote_deposit_capture'
          ])
        )
        .describe(
          'The array of paths to restricted Features in the Features hash.'
        )
        .optional(),
      /** Status of this FinancialAccount. */
      status: z
        .enum(['closed', 'open'])
        .describe('Status of this FinancialAccount.'),
      status_details: TreasuryFinancialAccountsResourceStatusDetailsSchema,
      /** The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. */
      supported_currencies: z
        .array(z.string())
        .describe(
          'The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.'
        )
    })
    .describe(
      'Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.\nFinancialAccounts serve as the source and destination of Treasury’s money movement APIs.'
    )
  export type TreasuryFinancialAccount = z.infer<
    typeof TreasuryFinancialAccountSchema
  >

  export const SetupIntentPaymentMethodOptionsSchema = z.object({
    acss_debit: z
      .union([
        SetupIntentPaymentMethodOptionsAcssDebitSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    amazon_pay: z
      .union([
        SetupIntentPaymentMethodOptionsAmazonPaySchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    bacs_debit: z
      .union([
        SetupIntentPaymentMethodOptionsBacsDebitSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    card: z
      .union([
        SetupIntentPaymentMethodOptionsCardSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    card_present: z
      .union([
        SetupIntentPaymentMethodOptionsCardPresentSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    link: z
      .union([
        SetupIntentPaymentMethodOptionsLinkSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    paypal: z
      .union([
        SetupIntentPaymentMethodOptionsPaypalSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    sepa_debit: z
      .union([
        SetupIntentPaymentMethodOptionsSepaDebitSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    us_bank_account: z
      .union([
        SetupIntentPaymentMethodOptionsUsBankAccountSchema,
        SetupIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional()
  })
  export type SetupIntentPaymentMethodOptions = z.infer<
    typeof SetupIntentPaymentMethodOptionsSchema
  >

  /**
   * An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
   *
   * We recommend that you create an AccountSession each time you need to display an embedded component
   * to your user. Do not save AccountSessions to your database as they expire relatively
   * quickly, and cannot be used more than once.
   *
   * Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
   */
  export const AccountSessionSchema = z
    .object({
      /** The ID of the account the AccountSession was created for */
      account: z
        .string()
        .max(5000)
        .describe('The ID of the account the AccountSession was created for'),
      /**
       * The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.
       *
       * The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.
       *
       * Refer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.
       */
      client_secret: z
        .string()
        .max(5000)
        .describe(
          'The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.\n\nThe client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.\n\nRefer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.'
        ),
      components: ConnectEmbeddedAccountSessionCreateComponentsSchema,
      /** The timestamp at which this AccountSession will expire. */
      expires_at: z
        .number()
        .int()
        .describe('The timestamp at which this AccountSession will expire.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('account_session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component\nto your user. Do not save AccountSessions to your database as they expire relatively\nquickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)'
    )
  export type AccountSession = z.infer<typeof AccountSessionSchema>

  export const PaymentMethodDetailsCardSchema = z.object({
    /** The authorized amount. */
    amount_authorized: z
      .number()
      .int()
      .nullable()
      .describe('The authorized amount.')
      .optional(),
    /** Authorization code on the charge. */
    authorization_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Authorization code on the charge.')
      .optional(),
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured. */
    capture_before: z
      .number()
      .int()
      .describe(
        'When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.'
      )
      .optional(),
    /** Check results by Card networks on Card address and CVC at time of payment. */
    checks: PaymentMethodDetailsCardChecksSchema.nullable()
      .describe(
        'Check results by Card networks on Card address and CVC at time of payment.'
      )
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    extended_authorization:
      PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorizationSchema.optional(),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      )
      .optional(),
    incremental_authorization:
      PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorizationSchema.optional(),
    /**
     * Installment details for this payment (Mexico only).
     *
     * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
     */
    installments: PaymentMethodDetailsCardInstallmentsSchema.nullable()
      .describe(
        'Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).'
      )
      .optional(),
    /** The last four digits of the card. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('The last four digits of the card.')
      .optional(),
    /** ID of the mandate used to make this payment or created by it. */
    mandate: z
      .string()
      .max(5000)
      .nullable()
      .describe('ID of the mandate used to make this payment or created by it.')
      .optional(),
    multicapture:
      PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticaptureSchema.optional(),
    /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    network: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      )
      .optional(),
    /** If this card has network token credentials, this contains the details of the network token credentials. */
    network_token: PaymentMethodDetailsCardNetworkTokenSchema.nullable()
      .describe(
        'If this card has network token credentials, this contains the details of the network token credentials.'
      )
      .optional(),
    /** This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise. */
    network_transaction_id: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.'
      )
      .optional(),
    overcapture:
      PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercaptureSchema.optional(),
    /** Status of a card based on the card issuer. */
    regulated_status: z
      .enum(['regulated', 'unregulated'])
      .nullable()
      .describe('Status of a card based on the card issuer.')
      .optional(),
    /** Populated if this transaction used 3D Secure authentication. */
    three_d_secure: ThreeDSecureDetailsChargeSchema.nullable()
      .describe('Populated if this transaction used 3D Secure authentication.')
      .optional(),
    /** If this Card is part of a card wallet, this contains the details of the card wallet. */
    wallet: PaymentMethodDetailsCardWalletSchema.nullable()
      .describe(
        'If this Card is part of a card wallet, this contains the details of the card wallet.'
      )
      .optional()
  })
  export type PaymentMethodDetailsCard = z.infer<
    typeof PaymentMethodDetailsCardSchema
  >

  /**
   * A VerificationReport is the result of an attempt to collect and verify data from a user.
   * The collection of verification checks performed is determined from the `type` and `options`
   * parameters used. You can find the result of each verification check performed in the
   * appropriate sub-resource: `document`, `id_number`, `selfie`.
   *
   * Each VerificationReport contains a copy of any data collected by the user as well as
   * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
   * API. To configure and create VerificationReports, use the
   * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
   *
   * Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
   */
  export const IdentityVerificationReportSchema = z
    .object({
      /** A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
      client_reference_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      document: GelatoDocumentReportSchema.optional(),
      email: GelatoEmailReportSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      id_number: GelatoIdNumberReportSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('identity.verification_report')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      options: GelatoVerificationReportOptionsSchema.optional(),
      phone: GelatoPhoneReportSchema.optional(),
      selfie: GelatoSelfieReportSchema.optional(),
      /** Type of report. */
      type: z
        .enum(['document', 'id_number', 'verification_flow'])
        .describe('Type of report.'),
      /** The configuration token of a verification flow from the dashboard. */
      verification_flow: z
        .string()
        .max(5000)
        .describe(
          'The configuration token of a verification flow from the dashboard.'
        )
        .optional(),
      /** ID of the VerificationSession that created this report. */
      verification_session: z
        .string()
        .max(5000)
        .nullable()
        .describe('ID of the VerificationSession that created this report.')
        .optional()
    })
    .describe(
      'A VerificationReport is the result of an attempt to collect and verify data from a user.\nThe collection of verification checks performed is determined from the `type` and `options`\nparameters used. You can find the result of each verification check performed in the\nappropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as\nreference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)\nAPI. To configure and create VerificationReports, use the\n[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).'
    )
  export type IdentityVerificationReport = z.infer<
    typeof IdentityVerificationReportSchema
  >

  /**
   * `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
   * We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
   * This newer API provides access to our latest features and payment method types.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  export const SourceSchema = z
    .object({
      ach_credit_transfer: SourceTypeAchCreditTransferSchema.optional(),
      ach_debit: SourceTypeAchDebitSchema.optional(),
      acss_debit: SourceTypeAcssDebitSchema.optional(),
      alipay: SourceTypeAlipaySchema.optional(),
      /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”. */
      allow_redisplay: z
        .enum(['always', 'limited', 'unspecified'])
        .nullable()
        .describe(
          'This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.'
        )
        .optional(),
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
      amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.'
        )
        .optional(),
      au_becs_debit: SourceTypeAuBecsDebitSchema.optional(),
      bancontact: SourceTypeBancontactSchema.optional(),
      card: SourceTypeCardSchema.optional(),
      card_present: SourceTypeCardPresentSchema.optional(),
      /** The client secret of the source. Used for client-side retrieval using a publishable key. */
      client_secret: z
        .string()
        .max(5000)
        .describe(
          'The client secret of the source. Used for client-side retrieval using a publishable key.'
        ),
      code_verification: SourceCodeVerificationFlowSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
      currency: z
        .string()
        .nullable()
        .describe(
          'Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.'
        )
        .optional(),
      /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
      customer: z
        .string()
        .max(5000)
        .describe(
          'The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.'
        )
        .optional(),
      eps: SourceTypeEpsSchema.optional(),
      /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
      flow: z
        .string()
        .max(5000)
        .describe(
          'The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.'
        ),
      giropay: SourceTypeGiropaySchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      ideal: SourceTypeIdealSchema.optional(),
      klarna: SourceTypeKlarnaSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      multibanco: SourceTypeMultibancoSchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('source')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Information about the owner of the payment instrument that may be used or required by particular source types. */
      owner: SourceOwnerSchema.nullable()
        .describe(
          'Information about the owner of the payment instrument that may be used or required by particular source types.'
        )
        .optional(),
      p24: SourceTypeP24Schema.optional(),
      receiver: SourceReceiverFlowSchema.optional(),
      redirect: SourceRedirectFlowSchema.optional(),
      sepa_debit: SourceTypeSepaDebitSchema.optional(),
      sofort: SourceTypeSofortSchema.optional(),
      source_order: SourceOrderSchema.optional(),
      /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Extra information about a source. This will appear on your customer's statement every time you charge the source."
        )
        .optional(),
      /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
      status: z
        .string()
        .max(5000)
        .describe(
          'The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.'
        ),
      three_d_secure: SourceTypeThreeDSecureSchema.optional(),
      /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
      type: z
        .enum([
          'ach_credit_transfer',
          'ach_debit',
          'acss_debit',
          'alipay',
          'au_becs_debit',
          'bancontact',
          'card',
          'card_present',
          'eps',
          'giropay',
          'ideal',
          'klarna',
          'multibanco',
          'p24',
          'sepa_debit',
          'sofort',
          'three_d_secure',
          'wechat'
        ])
        .describe(
          'The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.'
        ),
      /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
      usage: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.'
        )
        .optional(),
      wechat: SourceTypeWechatSchema.optional()
    })
    .describe(
      "`Source` objects allow you to accept a variety of payment methods. They\nrepresent a customer's payment instrument, and can be used with the Stripe API\njust like a `Card` object: once chargeable, they can be charged, or can be\nattached to customers.\n\nStripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).\nWe recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).\nThis newer API provides access to our latest features and payment method types.\n\nRelated guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers)."
    )
  export type Source = z.infer<typeof SourceSchema>

  /**
   * The Billing customer portal is a Stripe-hosted UI for subscription and
   * billing management.
   *
   * A portal configuration describes the functionality and features that you
   * want to provide to your customers through the portal.
   *
   * A portal session describes the instantiation of the customer portal for
   * a particular customer. By visiting the session's URL, the customer
   * can manage their subscriptions and billing details. For security reasons,
   * sessions are short-lived and will expire if the customer does not visit the URL.
   * Create sessions on-demand when customers intend to manage their subscriptions
   * and billing details.
   *
   * Related guide: [Customer management](/customer-management)
   */
  export const BillingPortalSessionSchema = z
    .object({
      /** The configuration used by this session, describing the features available. */
      configuration: z
        .union([z.string().max(5000), BillingPortalConfigurationSchema])
        .describe(
          'The configuration used by this session, describing the features available.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The ID of the customer for this session. */
      customer: z
        .string()
        .max(5000)
        .describe('The ID of the customer for this session.'),
      /** Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows. */
      flow: PortalFlowsFlowSchema.nullable()
        .describe(
          'Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used. */
      locale: z
        .enum([
          'auto',
          'bg',
          'cs',
          'da',
          'de',
          'el',
          'en',
          'en-AU',
          'en-CA',
          'en-GB',
          'en-IE',
          'en-IN',
          'en-NZ',
          'en-SG',
          'es',
          'es-419',
          'et',
          'fi',
          'fil',
          'fr',
          'fr-CA',
          'hr',
          'hu',
          'id',
          'it',
          'ja',
          'ko',
          'lt',
          'lv',
          'ms',
          'mt',
          'nb',
          'nl',
          'pl',
          'pt',
          'pt-BR',
          'ro',
          'ru',
          'sk',
          'sl',
          'sv',
          'th',
          'tr',
          'vi',
          'zh',
          'zh-HK',
          'zh-TW'
        ])
        .nullable()
        .describe(
          'The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing_portal.session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
      on_behalf_of: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays."
        )
        .optional(),
      /** The URL to redirect customers to when they click on the portal's link to return to your website. */
      return_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The URL to redirect customers to when they click on the portal's link to return to your website."
        )
        .optional(),
      /** The short-lived URL of the session that gives customers access to the customer portal. */
      url: z
        .string()
        .max(5000)
        .describe(
          'The short-lived URL of the session that gives customers access to the customer portal.'
        )
    })
    .describe(
      "The Billing customer portal is a Stripe-hosted UI for subscription and\nbilling management.\n\nA portal configuration describes the functionality and features that you\nwant to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for\na particular customer. By visiting the session's URL, the customer\ncan manage their subscriptions and billing details. For security reasons,\nsessions are short-lived and will expire if the customer does not visit the URL.\nCreate sessions on-demand when customers intend to manage their subscriptions\nand billing details.\n\nRelated guide: [Customer management](/customer-management)"
    )
  export type BillingPortalSession = z.infer<typeof BillingPortalSessionSchema>

  /** You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders. */
  export const IssuingCardSchema = z
    .object({
      /** The brand of the card. */
      brand: z.string().max(5000).describe('The brand of the card.'),
      /** The reason why the card was canceled. */
      cancellation_reason: z
        .enum(['design_rejected', 'lost', 'stolen'])
        .nullable()
        .describe('The reason why the card was canceled.')
        .optional(),
      cardholder: IssuingCardholderSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK. */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.'
        ),
      /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      cvc: z
        .string()
        .max(5000)
        .describe(
          'The card\'s CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it\'s only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.'
        )
        .optional(),
      /** The expiration month of the card. */
      exp_month: z.number().int().describe('The expiration month of the card.'),
      /** The expiration year of the card. */
      exp_year: z.number().int().describe('The expiration year of the card.'),
      /** The financial account this card is attached to. */
      financial_account: z
        .string()
        .max(5000)
        .nullable()
        .describe('The financial account this card is attached to.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The last 4 digits of the card number. */
      last4: z
        .string()
        .max(5000)
        .describe('The last 4 digits of the card number.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      number: z
        .string()
        .max(5000)
        .describe(
          'The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it\'s only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.card')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The personalization design object belonging to this card. */
      personalization_design: z
        .union([z.string().max(5000), IssuingPersonalizationDesignSchema])
        .nullable()
        .describe('The personalization design object belonging to this card.')
        .optional(),
      /** The latest card that replaces this card, if any. */
      replaced_by: z
        .union([
          z.string().max(5000),
          // TODO: Support recursive types for `IssuingCardSchema`.
          z.any()
        ])
        .nullable()
        .describe('The latest card that replaces this card, if any.')
        .optional(),
      /** The card this card replaces, if any. */
      replacement_for: z
        .union([
          z.string().max(5000),
          // TODO: Support recursive types for `IssuingCardSchema`.
          z.any()
        ])
        .nullable()
        .describe('The card this card replaces, if any.')
        .optional(),
      /** The reason why the previous card needed to be replaced. */
      replacement_reason: z
        .enum(['damaged', 'expired', 'lost', 'stolen'])
        .nullable()
        .describe('The reason why the previous card needed to be replaced.')
        .optional(),
      /** Where and how the card will be shipped. */
      shipping: IssuingCardShippingSchema.nullable()
        .describe('Where and how the card will be shipped.')
        .optional(),
      spending_controls: IssuingCardAuthorizationControlsSchema,
      /** Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. */
      status: z
        .enum(['active', 'canceled', 'inactive'])
        .describe(
          'Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.'
        ),
      /** The type of the card. */
      type: z.enum(['physical', 'virtual']).describe('The type of the card.'),
      /** Information relating to digital wallets (like Apple Pay and Google Pay). */
      wallets: IssuingCardWalletsSchema.nullable()
        .describe(
          'Information relating to digital wallets (like Apple Pay and Google Pay).'
        )
        .optional()
    })
    .describe(
      'You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.'
    )
  export type IssuingCard = z.infer<typeof IssuingCardSchema>

  /**
   * A VerificationSession guides you through the process of collecting and verifying the identities
   * of your users. It contains details about the type of verification, such as what [verification
   * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
   * each verification in your system.
   *
   * A VerificationSession transitions through [multiple
   * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
   * the verification flow. The VerificationSession contains the user's verified data after
   * verification checks are complete.
   *
   * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
   */
  export const IdentityVerificationSessionSchema = z
    .object({
      /** A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
      client_reference_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.'
        )
        .optional(),
      /** The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more. */
      client_secret: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** If present, this property tells you the last error encountered when processing the verification. */
      last_error: GelatoSessionLastErrorSchema.nullable()
        .describe(
          'If present, this property tells you the last error encountered when processing the verification.'
        )
        .optional(),
      /** ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results) */
      last_verification_report: z
        .union([z.string().max(5000), IdentityVerificationReportSchema])
        .nullable()
        .describe(
          'ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('identity.verification_session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** A set of options for the session’s verification checks. */
      options: GelatoVerificationSessionOptionsSchema.nullable()
        .describe('A set of options for the session’s verification checks.')
        .optional(),
      /** Details provided about the user being verified. These details may be shown to the user. */
      provided_details: GelatoProvidedDetailsSchema.nullable()
        .describe(
          'Details provided about the user being verified. These details may be shown to the user.'
        )
        .optional(),
      /** Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
      redaction: VerificationSessionRedactionSchema.nullable()
        .describe(
          'Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.'
        )
        .optional(),
      /** Token referencing a Customer resource. */
      related_customer: z
        .string()
        .max(5000)
        .nullable()
        .describe('Token referencing a Customer resource.')
        .optional(),
      /** Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
      status: z
        .enum(['canceled', 'processing', 'requires_input', 'verified'])
        .describe(
          'Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).'
        ),
      /** The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. */
      type: z
        .enum(['document', 'id_number', 'verification_flow'])
        .describe(
          'The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.'
        ),
      /** The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe. */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.'
        )
        .optional(),
      /** The configuration token of a verification flow from the dashboard. */
      verification_flow: z
        .string()
        .max(5000)
        .describe(
          'The configuration token of a verification flow from the dashboard.'
        )
        .optional(),
      /** The user’s verified data. */
      verified_outputs: GelatoVerifiedOutputsSchema.nullable()
        .describe('The user’s verified data.')
        .optional()
    })
    .describe(
      "A VerificationSession guides you through the process of collecting and verifying the identities\nof your users. It contains details about the type of verification, such as what [verification\ncheck](/docs/identity/verification-checks) to perform. Only create one VerificationSession for\neach verification in your system.\n\nA VerificationSession transitions through [multiple\nstatuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through\nthe verification flow. The VerificationSession contains the user's verified data after\nverification checks are complete.\n\nRelated guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)"
    )
  export type IdentityVerificationSession = z.infer<
    typeof IdentityVerificationSessionSchema
  >

  /**
   * Source mandate notifications should be created when a notification related to
   * a source mandate must be sent to the payer. They will trigger a webhook or
   * deliver an email to the customer.
   */
  export const SourceMandateNotificationSchema = z
    .object({
      acss_debit: SourceMandateNotificationAcssDebitDataSchema.optional(),
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
      amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.'
        )
        .optional(),
      bacs_debit: SourceMandateNotificationBacsDebitDataSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('source_mandate_notification')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
      reason: z
        .string()
        .max(5000)
        .describe(
          'The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.'
        ),
      sepa_debit: SourceMandateNotificationSepaDebitDataSchema.optional(),
      source: SourceSchema,
      /** The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
      status: z
        .string()
        .max(5000)
        .describe(
          'The status of the mandate notification. Valid statuses are `pending` or `submitted`.'
        ),
      /** The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
      type: z
        .string()
        .max(5000)
        .describe(
          'The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.'
        )
    })
    .describe(
      'Source mandate notifications should be created when a notification related to\na source mandate must be sent to the payer. They will trigger a webhook or\ndeliver an email to the customer.'
    )
  export type SourceMandateNotification = z.infer<
    typeof SourceMandateNotificationSchema
  >

  export const PaymentIntentNextActionSchema = z.object({
    alipay_handle_redirect:
      PaymentIntentNextActionAlipayHandleRedirectSchema.optional(),
    boleto_display_details: PaymentIntentNextActionBoletoSchema.optional(),
    card_await_notification:
      PaymentIntentNextActionCardAwaitNotificationSchema.optional(),
    cashapp_handle_redirect_or_display_qr_code:
      PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeSchema.optional(),
    display_bank_transfer_instructions:
      PaymentIntentNextActionDisplayBankTransferInstructionsSchema.optional(),
    konbini_display_details: PaymentIntentNextActionKonbiniSchema.optional(),
    multibanco_display_details:
      PaymentIntentNextActionDisplayMultibancoDetailsSchema.optional(),
    oxxo_display_details:
      PaymentIntentNextActionDisplayOxxoDetailsSchema.optional(),
    paynow_display_qr_code:
      PaymentIntentNextActionPaynowDisplayQrCodeSchema.optional(),
    pix_display_qr_code:
      PaymentIntentNextActionPixDisplayQrCodeSchema.optional(),
    promptpay_display_qr_code:
      PaymentIntentNextActionPromptpayDisplayQrCodeSchema.optional(),
    redirect_to_url: PaymentIntentNextActionRedirectToUrlSchema.optional(),
    swish_handle_redirect_or_display_qr_code:
      PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCodeSchema.optional(),
    /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.'
      ),
    /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
    use_stripe_sdk: z
      .record(z.any())
      .describe(
        'When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.'
      )
      .optional(),
    verify_with_microdeposits:
      PaymentIntentNextActionVerifyWithMicrodepositsSchema.optional(),
    wechat_pay_display_qr_code:
      PaymentIntentNextActionWechatPayDisplayQrCodeSchema.optional(),
    wechat_pay_redirect_to_android_app:
      PaymentIntentNextActionWechatPayRedirectToAndroidAppSchema.optional(),
    wechat_pay_redirect_to_ios_app:
      PaymentIntentNextActionWechatPayRedirectToIosAppSchema.optional()
  })
  export type PaymentIntentNextAction = z.infer<
    typeof PaymentIntentNextActionSchema
  >

  /** An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe. */
  export const IssuingTokenSchema = z
    .object({
      /** Card associated with this token. */
      card: z
        .union([z.string().max(5000), IssuingCardSchema])
        .describe('Card associated with this token.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The hashed ID derived from the device ID from the card network associated with the token. */
      device_fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The hashed ID derived from the device ID from the card network associated with the token.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The last four digits of the token. */
      last4: z
        .string()
        .max(5000)
        .describe('The last four digits of the token.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The token service provider / card network associated with the token. */
      network: z
        .enum(['mastercard', 'visa'])
        .describe(
          'The token service provider / card network associated with the token.'
        ),
      network_data: IssuingNetworkTokenNetworkDataSchema.optional(),
      /** Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch. */
      network_updated_at: z
        .number()
        .int()
        .describe(
          'Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.token')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The usage state of the token. */
      status: z
        .enum(['active', 'deleted', 'requested', 'suspended'])
        .describe('The usage state of the token.'),
      /** The digital wallet for this token, if one was used. */
      wallet_provider: z
        .enum(['apple_pay', 'google_pay', 'samsung_pay'])
        .describe('The digital wallet for this token, if one was used.')
        .optional()
    })
    .describe(
      'An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.'
    )
  export type IssuingToken = z.infer<typeof IssuingTokenSchema>

  export const CheckoutSessionPaymentMethodOptionsSchema = z.object({
    acss_debit: CheckoutAcssDebitPaymentMethodOptionsSchema.optional(),
    affirm: CheckoutAffirmPaymentMethodOptionsSchema.optional(),
    afterpay_clearpay:
      CheckoutAfterpayClearpayPaymentMethodOptionsSchema.optional(),
    alipay: CheckoutAlipayPaymentMethodOptionsSchema.optional(),
    amazon_pay: CheckoutAmazonPayPaymentMethodOptionsSchema.optional(),
    au_becs_debit: CheckoutAuBecsDebitPaymentMethodOptionsSchema.optional(),
    bacs_debit: CheckoutBacsDebitPaymentMethodOptionsSchema.optional(),
    bancontact: CheckoutBancontactPaymentMethodOptionsSchema.optional(),
    boleto: CheckoutBoletoPaymentMethodOptionsSchema.optional(),
    card: CheckoutCardPaymentMethodOptionsSchema.optional(),
    cashapp: CheckoutCashappPaymentMethodOptionsSchema.optional(),
    customer_balance:
      CheckoutCustomerBalancePaymentMethodOptionsSchema.optional(),
    eps: CheckoutEpsPaymentMethodOptionsSchema.optional(),
    fpx: CheckoutFpxPaymentMethodOptionsSchema.optional(),
    giropay: CheckoutGiropayPaymentMethodOptionsSchema.optional(),
    grabpay: CheckoutGrabPayPaymentMethodOptionsSchema.optional(),
    ideal: CheckoutIdealPaymentMethodOptionsSchema.optional(),
    kakao_pay: CheckoutKakaoPayPaymentMethodOptionsSchema.optional(),
    klarna: CheckoutKlarnaPaymentMethodOptionsSchema.optional(),
    konbini: CheckoutKonbiniPaymentMethodOptionsSchema.optional(),
    kr_card: CheckoutKrCardPaymentMethodOptionsSchema.optional(),
    link: CheckoutLinkPaymentMethodOptionsSchema.optional(),
    mobilepay: CheckoutMobilepayPaymentMethodOptionsSchema.optional(),
    multibanco: CheckoutMultibancoPaymentMethodOptionsSchema.optional(),
    naver_pay: CheckoutNaverPayPaymentMethodOptionsSchema.optional(),
    oxxo: CheckoutOxxoPaymentMethodOptionsSchema.optional(),
    p24: CheckoutP24PaymentMethodOptionsSchema.optional(),
    payco: CheckoutPaycoPaymentMethodOptionsSchema.optional(),
    paynow: CheckoutPaynowPaymentMethodOptionsSchema.optional(),
    paypal: CheckoutPaypalPaymentMethodOptionsSchema.optional(),
    pix: CheckoutPixPaymentMethodOptionsSchema.optional(),
    revolut_pay: CheckoutRevolutPayPaymentMethodOptionsSchema.optional(),
    samsung_pay: CheckoutSamsungPayPaymentMethodOptionsSchema.optional(),
    sepa_debit: CheckoutSepaDebitPaymentMethodOptionsSchema.optional(),
    sofort: CheckoutSofortPaymentMethodOptionsSchema.optional(),
    swish: CheckoutSwishPaymentMethodOptionsSchema.optional(),
    us_bank_account: CheckoutUsBankAccountPaymentMethodOptionsSchema.optional()
  })
  export type CheckoutSessionPaymentMethodOptions = z.infer<
    typeof CheckoutSessionPaymentMethodOptionsSchema
  >

  export const PaymentIntentPaymentMethodOptionsSchema = z.object({
    acss_debit: z
      .union([
        PaymentIntentPaymentMethodOptionsAcssDebitSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    affirm: z
      .union([
        PaymentMethodOptionsAffirmSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    afterpay_clearpay: z
      .union([
        PaymentMethodOptionsAfterpayClearpaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    alipay: z
      .union([
        PaymentMethodOptionsAlipaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    alma: z
      .union([
        PaymentMethodOptionsAlmaSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    amazon_pay: z
      .union([
        PaymentMethodOptionsAmazonPaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    au_becs_debit: z
      .union([
        PaymentIntentPaymentMethodOptionsAuBecsDebitSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    bacs_debit: z
      .union([
        PaymentIntentPaymentMethodOptionsBacsDebitSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    bancontact: z
      .union([
        PaymentMethodOptionsBancontactSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    blik: z
      .union([
        PaymentIntentPaymentMethodOptionsBlikSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    boleto: z
      .union([
        PaymentMethodOptionsBoletoSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    card: z
      .union([
        PaymentIntentPaymentMethodOptionsCardSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    card_present: z
      .union([
        PaymentMethodOptionsCardPresentSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    cashapp: z
      .union([
        PaymentMethodOptionsCashappSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    customer_balance: z
      .union([
        PaymentMethodOptionsCustomerBalanceSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    eps: z
      .union([
        PaymentIntentPaymentMethodOptionsEpsSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    fpx: z
      .union([
        PaymentMethodOptionsFpxSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    giropay: z
      .union([
        PaymentMethodOptionsGiropaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    grabpay: z
      .union([
        PaymentMethodOptionsGrabpaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    ideal: z
      .union([
        PaymentMethodOptionsIdealSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    interac_present: z
      .union([
        PaymentMethodOptionsInteracPresentSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    kakao_pay: z
      .union([
        PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptionsSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    klarna: z
      .union([
        PaymentMethodOptionsKlarnaSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    konbini: z
      .union([
        PaymentMethodOptionsKonbiniSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    kr_card: z
      .union([
        PaymentMethodOptionsKrCardSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    link: z
      .union([
        PaymentIntentPaymentMethodOptionsLinkSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    mobilepay: z
      .union([
        PaymentIntentPaymentMethodOptionsMobilepaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    multibanco: z
      .union([
        PaymentMethodOptionsMultibancoSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    naver_pay: z
      .union([
        PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptionsSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    oxxo: z
      .union([
        PaymentMethodOptionsOxxoSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    p24: z
      .union([
        PaymentMethodOptionsP24Schema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    pay_by_bank: z
      .union([
        PaymentMethodOptionsPayByBankSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    payco: z
      .union([
        PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptionsSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    paynow: z
      .union([
        PaymentMethodOptionsPaynowSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    paypal: z
      .union([
        PaymentMethodOptionsPaypalSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    pix: z
      .union([
        PaymentMethodOptionsPixSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    promptpay: z
      .union([
        PaymentMethodOptionsPromptpaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    revolut_pay: z
      .union([
        PaymentMethodOptionsRevolutPaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    samsung_pay: z
      .union([
        PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptionsSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    sepa_debit: z
      .union([
        PaymentIntentPaymentMethodOptionsSepaDebitSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    sofort: z
      .union([
        PaymentMethodOptionsSofortSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    swish: z
      .union([
        PaymentIntentPaymentMethodOptionsSwishSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    twint: z
      .union([
        PaymentMethodOptionsTwintSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    us_bank_account: z
      .union([
        PaymentIntentPaymentMethodOptionsUsBankAccountSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    wechat_pay: z
      .union([
        PaymentMethodOptionsWechatPaySchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional(),
    zip: z
      .union([
        PaymentMethodOptionsZipSchema,
        PaymentIntentTypeSpecificPaymentMethodOptionsClientSchema
      ])
      .optional()
  })
  export type PaymentIntentPaymentMethodOptions = z.infer<
    typeof PaymentIntentPaymentMethodOptionsSchema
  >

  /**
   * This is an object representing a Stripe account. You can retrieve it to see
   * properties on the account like its current requirements or if the account is
   * enabled to make live charges or receive payouts.
   *
   * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
   * is `application`, which includes Custom accounts, the properties below are always
   * returned.
   *
   * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
   * is `stripe`, which includes Standard and Express accounts, some properties are only returned
   * until you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)
   * to start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).
   */
  export const AccountSchema = z
    .object({
      /** Business information about the account. */
      business_profile: AccountBusinessProfileSchema.nullable()
        .describe('Business information about the account.')
        .optional(),
      /** The business type. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      business_type: z
        .enum(['company', 'government_entity', 'individual', 'non_profit'])
        .nullable()
        .describe(
          'The business type. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property is only returned for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.'
        )
        .optional(),
      capabilities: AccountCapabilitiesSchema.optional(),
      /** Whether the account can process charges. */
      charges_enabled: z
        .boolean()
        .describe('Whether the account can process charges.')
        .optional(),
      company: LegalEntityCompanySchema.optional(),
      controller: AccountUnificationAccountControllerSchema.optional(),
      /** The account's country. */
      country: z
        .string()
        .max(5000)
        .describe("The account's country.")
        .optional(),
      /** Time at which the account was connected. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the account was connected. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
      default_currency: z
        .string()
        .max(5000)
        .describe(
          "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."
        )
        .optional(),
      /** Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details. */
      details_submitted: z
        .boolean()
        .describe(
          'Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.'
        )
        .optional(),
      /** An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform."
        )
        .optional(),
      /** External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true. */
      external_accounts: z
        .object({
          /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
          data: z
            .array(z.union([BankAccountSchema, CardSchema]))
            .describe(
              'The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.'
            ),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe(
          'External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.'
        )
        .optional(),
      future_requirements: AccountFutureRequirementsSchema.optional(),
      /** The groups associated with the account. */
      groups: AccountGroupMembershipSchema.nullable()
        .describe('The groups associated with the account.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      individual: PersonSchema.optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('account')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Whether the funds in this account can be paid out. */
      payouts_enabled: z
        .boolean()
        .describe('Whether the funds in this account can be paid out.')
        .optional(),
      requirements: AccountRequirementsSchema.optional(),
      /** Options for customizing how the account functions within Stripe. */
      settings: AccountSettingsSchema.nullable()
        .describe(
          'Options for customizing how the account functions within Stripe.'
        )
        .optional(),
      tos_acceptance: AccountTosAcceptanceSchema.optional(),
      /** The Stripe account type. Can be `standard`, `express`, `custom`, or `none`. */
      type: z
        .enum(['custom', 'express', 'none', 'standard'])
        .describe(
          'The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.'
        )
        .optional()
    })
    .describe(
      'This is an object representing a Stripe account. You can retrieve it to see\nproperties on the account like its current requirements or if the account is\nenabled to make live charges or receive payouts.\n\nFor accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)\nis `application`, which includes Custom accounts, the properties below are always\nreturned.\n\nFor accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)\nis `stripe`, which includes Standard and Express accounts, some properties are only returned\nuntil you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)\nto start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).'
    )
  export type Account = z.infer<typeof AccountSchema>

  /**
   * These bank accounts are payment methods on `Customer` objects.
   *
   * On the other hand [External Accounts](/api#external_accounts) are transfer
   * destinations on `Account` objects for connected accounts.
   * They can be bank accounts or debit cards as well, and are documented in the links above.
   *
   * Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)
   */
  export const BankAccountSchema = z
    .object({
      /** The ID of the account that the bank account is associated with. */
      account: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The ID of the account that the bank account is associated with.'
        )
        .optional(),
      /** The name of the person or business that owns the bank account. */
      account_holder_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The name of the person or business that owns the bank account.'
        )
        .optional(),
      /** The type of entity that holds the account. This can be either `individual` or `company`. */
      account_holder_type: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The type of entity that holds the account. This can be either `individual` or `company`.'
        )
        .optional(),
      /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
      account_type: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.'
        )
        .optional(),
      /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
      available_payout_methods: z
        .array(z.enum(['instant', 'standard']))
        .nullable()
        .describe(
          'A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.'
        )
        .optional(),
      /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Name of the bank associated with the routing number (e.g., `WELLS FARGO`).'
        )
        .optional(),
      /** Two-letter ISO code representing the country the bank account is located in. */
      country: z
        .string()
        .max(5000)
        .describe(
          'Two-letter ISO code representing the country the bank account is located in.'
        ),
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.'
        ),
      /** The ID of the customer that the bank account is associated with. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          'The ID of the customer that the bank account is associated with.'
        )
        .optional(),
      /** Whether this bank account is the default external account for its currency. */
      default_for_currency: z
        .boolean()
        .nullable()
        .describe(
          'Whether this bank account is the default external account for its currency.'
        )
        .optional(),
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
        )
        .optional(),
      /** Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when. */
      future_requirements: ExternalAccountRequirementsSchema.nullable()
        .describe(
          'Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The last four digits of the bank account number. */
      last4: z
        .string()
        .max(5000)
        .describe('The last four digits of the bank account number.'),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('bank_account')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Information about the requirements for the bank account, including what information needs to be collected. */
      requirements: ExternalAccountRequirementsSchema.nullable()
        .describe(
          'Information about the requirements for the bank account, including what information needs to be collected.'
        )
        .optional(),
      /** The routing transit number for the bank account. */
      routing_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('The routing transit number for the bank account.')
        .optional(),
      /**
       * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.
       *
       * For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
       */
      status: z
        .string()
        .max(5000)
        .describe(
          "For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.\n\nFor external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply."
        )
    })
    .describe(
      'These bank accounts are payment methods on `Customer` objects.\n\nOn the other hand [External Accounts](/api#external_accounts) are transfer\ndestinations on `Account` objects for connected accounts.\nThey can be bank accounts or debit cards as well, and are documented in the links above.\n\nRelated guide: [Bank debits and transfers](/payments/bank-debits-transfers)'
    )
  export type BankAccount = z.infer<typeof BankAccountSchema>

  /**
   * This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
   * and track payments that belong to the same customer.
   */
  export const CustomerSchema = z
    .object({
      /** The customer's address. */
      address: AddressSchema.nullable()
        .describe("The customer's address.")
        .optional(),
      /** The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize. */
      balance: z
        .number()
        .int()
        .describe(
          "The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize."
        )
        .optional(),
      /** The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically. */
      cash_balance: CashBalanceSchema.nullable()
        .describe(
          'The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
      currency: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.'
        )
        .optional(),
      /**
       * ID of the default payment source for the customer.
       *
       * If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
       */
      default_source: z
        .union([
          z.string().max(5000),
          BankAccountSchema,
          CardSchema,
          SourceSchema
        ])
        .nullable()
        .describe(
          'ID of the default payment source for the customer.\n\nIf you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.'
        )
        .optional(),
      /**
       * Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
       *
       * If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
       *
       * If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
       */
      delinquent: z
        .boolean()
        .nullable()
        .describe(
          "Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.\n\nIf an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.\n\nIf you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`."
        )
        .optional(),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** Describes the current discount active on the customer, if there is one. */
      discount: DiscountSchema.nullable()
        .describe(
          'Describes the current discount active on the customer, if there is one.'
        )
        .optional(),
      /** The customer's email address. */
      email: z
        .string()
        .max(5000)
        .nullable()
        .describe("The customer's email address.")
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes. */
      invoice_credit_balance: z
        .record(z.number().int())
        .describe(
          "The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes."
        )
        .optional(),
      /** The prefix for the customer used to generate unique invoice numbers. */
      invoice_prefix: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The prefix for the customer used to generate unique invoice numbers.'
        )
        .optional(),
      invoice_settings: InvoiceSettingCustomerSettingSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The customer's full name or business name. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe("The customer's full name or business name.")
        .optional(),
      /** The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses. */
      next_invoice_sequence: z
        .number()
        .int()
        .describe(
          "The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses."
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('customer')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The customer's phone number. */
      phone: z
        .string()
        .max(5000)
        .nullable()
        .describe("The customer's phone number.")
        .optional(),
      /** The customer's preferred locales (languages), ordered by preference. */
      preferred_locales: z
        .array(z.string().max(5000))
        .nullable()
        .describe(
          "The customer's preferred locales (languages), ordered by preference."
        )
        .optional(),
      /** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
      shipping: ShippingSchema.nullable()
        .describe(
          'Mailing and shipping address for the customer. Appears on invoices emailed to this customer.'
        )
        .optional(),
      /** The customer's payment sources, if any. */
      sources: z
        .object({
          /** Details about each object. */
          data: z
            .array(z.union([BankAccountSchema, CardSchema, SourceSchema]))
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe("The customer's payment sources, if any.")
        .optional(),
      /** The customer's current subscriptions, if any. */
      subscriptions: z
        .object({
          /** Details about each object. */
          data: z
            .array(SubscriptionSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe("The customer's current subscriptions, if any.")
        .optional(),
      tax: CustomerTaxSchema.optional(),
      /** Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**. */
      tax_exempt: z
        .enum(['exempt', 'none', 'reverse'])
        .nullable()
        .describe(
          'Describes the customer\'s tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.'
        )
        .optional(),
      /** The customer's tax IDs. */
      tax_ids: z
        .object({
          /** Details about each object. */
          data: z.array(TaxIdSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe("The customer's tax IDs.")
        .optional(),
      /** ID of the test clock that this customer belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock that this customer belongs to.')
        .optional()
    })
    .describe(
      'This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,\nand track payments that belong to the same customer.'
    )
  export type Customer = z.infer<typeof CustomerSchema>

  /**
   * You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
   */
  export const CardSchema = z
    .object({
      /** The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      account: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.'
        )
        .optional(),
      /** City/District/Suburb/Town/Village. */
      address_city: z
        .string()
        .max(5000)
        .nullable()
        .describe('City/District/Suburb/Town/Village.')
        .optional(),
      /** Billing address country, if provided when creating card. */
      address_country: z
        .string()
        .max(5000)
        .nullable()
        .describe('Billing address country, if provided when creating card.')
        .optional(),
      /** Address line 1 (Street address/PO Box/Company name). */
      address_line1: z
        .string()
        .max(5000)
        .nullable()
        .describe('Address line 1 (Street address/PO Box/Company name).')
        .optional(),
      /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.'
        )
        .optional(),
      /** Address line 2 (Apartment/Suite/Unit/Building). */
      address_line2: z
        .string()
        .max(5000)
        .nullable()
        .describe('Address line 2 (Apartment/Suite/Unit/Building).')
        .optional(),
      /** State/County/Province/Region. */
      address_state: z
        .string()
        .max(5000)
        .nullable()
        .describe('State/County/Province/Region.')
        .optional(),
      /** ZIP or postal code. */
      address_zip: z
        .string()
        .max(5000)
        .nullable()
        .describe('ZIP or postal code.')
        .optional(),
      /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_zip_check: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.'
        )
        .optional(),
      /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”. */
      allow_redisplay: z
        .enum(['always', 'limited', 'unspecified'])
        .nullable()
        .describe(
          'This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.'
        )
        .optional(),
      /** A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
      available_payout_methods: z
        .array(z.enum(['instant', 'standard']))
        .nullable()
        .describe(
          'A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.'
        )
        .optional(),
      /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
      brand: z
        .string()
        .max(5000)
        .describe(
          'Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.'
        ),
      /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
        )
        .optional(),
      /** Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      currency: z
        .string()
        .nullable()
        .describe(
          'Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.'
        )
        .optional(),
      /** The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          'The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.'
        )
        .optional(),
      /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
      cvc_check: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."
        )
        .optional(),
      /** Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
      default_for_currency: z
        .boolean()
        .nullable()
        .describe(
          'Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.'
        )
        .optional(),
      /** (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          '(For tokenized numbers only.) The last four digits of the device account number.'
        )
        .optional(),
      /** Two-digit number representing the card's expiration month. */
      exp_month: z
        .number()
        .int()
        .describe("Two-digit number representing the card's expiration month."),
      /** Four-digit number representing the card's expiration year. */
      exp_year: z
        .number()
        .int()
        .describe("Four-digit number representing the card's expiration year."),
      /**
       * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
       */
      fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
        )
        .optional(),
      /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: z
        .string()
        .max(5000)
        .describe(
          'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Issuer identification number of the card. */
      iin: z
        .string()
        .max(5000)
        .describe('Issuer identification number of the card.')
        .optional(),
      /** The last four digits of the card. */
      last4: z.string().max(5000).describe('The last four digits of the card.'),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** Cardholder name. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Cardholder name.')
        .optional(),
      networks: TokenCardNetworksSchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('card')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Status of a card based on the card issuer. */
      regulated_status: z
        .enum(['regulated', 'unregulated'])
        .nullable()
        .describe('Status of a card based on the card issuer.')
        .optional(),
      /** For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated. */
      status: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.'
        )
        .optional(),
      /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
      tokenization_method: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.'
        )
        .optional()
    })
    .describe(
      'You can store multiple cards on a customer in order to charge the customer\nlater. You can also store multiple debit cards on a recipient in order to\ntransfer to those cards later.\n\nRelated guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)'
    )
  export type Card = z.infer<typeof CardSchema>

  /**
   * A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
   * It contains information about when the discount began, when it will end, and what it is applied to.
   *
   * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
   */
  export const DiscountSchema = z
    .object({
      /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
      checkout_session: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.'
        )
        .optional(),
      coupon: CouponSchema,
      /** The ID of the customer associated with this discount. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe('The ID of the customer associated with this discount.')
        .optional(),
      /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
      end: z
        .number()
        .int()
        .nullable()
        .describe(
          'If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.'
        )
        .optional(),
      /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
      id: z
        .string()
        .max(5000)
        .describe(
          'The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.'
        ),
      /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
      invoice: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."
        )
        .optional(),
      /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
      invoice_item: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('discount')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The promotion code applied to create this discount. */
      promotion_code: z
        .union([z.string().max(5000), PromotionCodeSchema])
        .nullable()
        .describe('The promotion code applied to create this discount.')
        .optional(),
      /** Date that the coupon was applied. */
      start: z.number().int().describe('Date that the coupon was applied.'),
      /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      subscription: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The subscription that this coupon is applied to, if it is applied to a particular subscription.'
        )
        .optional(),
      /** The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
      subscription_item: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The subscription item that this coupon is applied to, if it is applied to a particular subscription item.'
        )
        .optional()
    })
    .describe(
      'A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).\nIt contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)'
    )
  export type Discount = z.infer<typeof DiscountSchema>

  /**
   * A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
   * create multiple codes for a single coupon.
   */
  export const PromotionCodeSchema = z
    .object({
      /** Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
      active: z
        .boolean()
        .describe(
          'Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.'
        ),
      /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9). */
      code: z
        .string()
        .max(5000)
        .describe(
          'The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9).'
        ),
      coupon: CouponSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The customer that this promotion code can be used by. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe('The customer that this promotion code can be used by.')
        .optional(),
      /** Date at which the promotion code can no longer be redeemed. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe('Date at which the promotion code can no longer be redeemed.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Maximum number of times this promotion code can be redeemed. */
      max_redemptions: z
        .number()
        .int()
        .nullable()
        .describe(
          'Maximum number of times this promotion code can be redeemed.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('promotion_code')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      restrictions: PromotionCodesResourceRestrictionsSchema,
      /** Number of times this promotion code has been used. */
      times_redeemed: z
        .number()
        .int()
        .describe('Number of times this promotion code has been used.')
    })
    .describe(
      'A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to\ncreate multiple codes for a single coupon.'
    )
  export type PromotionCode = z.infer<typeof PromotionCodeSchema>

  export const InvoiceSettingCustomerSettingSchema = z.object({
    /** Default custom fields to be displayed on invoices for this customer. */
    custom_fields: z
      .array(InvoiceSettingCustomFieldSchema)
      .nullable()
      .describe(
        'Default custom fields to be displayed on invoices for this customer.'
      )
      .optional(),
    /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
    default_payment_method: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        "ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices."
      )
      .optional(),
    /** Default footer to be displayed on invoices for this customer. */
    footer: z
      .string()
      .max(5000)
      .nullable()
      .describe('Default footer to be displayed on invoices for this customer.')
      .optional(),
    /** Default options for invoice PDF rendering for this customer. */
    rendering_options: InvoiceSettingCustomerRenderingOptionsSchema.nullable()
      .describe('Default options for invoice PDF rendering for this customer.')
      .optional()
  })
  export type InvoiceSettingCustomerSetting = z.infer<
    typeof InvoiceSettingCustomerSettingSchema
  >

  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  export const PaymentMethodSchema = z
    .object({
      acss_debit: PaymentMethodAcssDebitSchema.optional(),
      affirm: PaymentMethodAffirmSchema.optional(),
      afterpay_clearpay: PaymentMethodAfterpayClearpaySchema.optional(),
      alipay: PaymentFlowsPrivatePaymentMethodsAlipaySchema.optional(),
      /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”. */
      allow_redisplay: z
        .enum(['always', 'limited', 'unspecified'])
        .describe(
          'This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.'
        )
        .optional(),
      alma: PaymentMethodAlmaSchema.optional(),
      amazon_pay: PaymentMethodAmazonPaySchema.optional(),
      au_becs_debit: PaymentMethodAuBecsDebitSchema.optional(),
      bacs_debit: PaymentMethodBacsDebitSchema.optional(),
      bancontact: PaymentMethodBancontactSchema.optional(),
      billing_details: BillingDetailsSchema,
      blik: PaymentMethodBlikSchema.optional(),
      boleto: PaymentMethodBoletoSchema.optional(),
      card: PaymentMethodCardSchema.optional(),
      card_present: PaymentMethodCardPresentSchema.optional(),
      cashapp: PaymentMethodCashappSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .nullable()
        .describe(
          'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'
        )
        .optional(),
      customer_balance: PaymentMethodCustomerBalanceSchema.optional(),
      eps: PaymentMethodEpsSchema.optional(),
      fpx: PaymentMethodFpxSchema.optional(),
      giropay: PaymentMethodGiropaySchema.optional(),
      grabpay: PaymentMethodGrabpaySchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      ideal: PaymentMethodIdealSchema.optional(),
      interac_present: PaymentMethodInteracPresentSchema.optional(),
      kakao_pay: PaymentMethodKakaoPaySchema.optional(),
      klarna: PaymentMethodKlarnaSchema.optional(),
      konbini: PaymentMethodKonbiniSchema.optional(),
      kr_card: PaymentMethodKrCardSchema.optional(),
      link: PaymentMethodLinkSchema.optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      mobilepay: PaymentMethodMobilepaySchema.optional(),
      multibanco: PaymentMethodMultibancoSchema.optional(),
      naver_pay: PaymentMethodNaverPaySchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payment_method')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      oxxo: PaymentMethodOxxoSchema.optional(),
      p24: PaymentMethodP24Schema.optional(),
      pay_by_bank: PaymentMethodPayByBankSchema.optional(),
      payco: PaymentMethodPaycoSchema.optional(),
      paynow: PaymentMethodPaynowSchema.optional(),
      paypal: PaymentMethodPaypalSchema.optional(),
      pix: PaymentMethodPixSchema.optional(),
      promptpay: PaymentMethodPromptpaySchema.optional(),
      radar_options: RadarRadarOptionsSchema.optional(),
      revolut_pay: PaymentMethodRevolutPaySchema.optional(),
      samsung_pay: PaymentMethodSamsungPaySchema.optional(),
      sepa_debit: PaymentMethodSepaDebitSchema.optional(),
      sofort: PaymentMethodSofortSchema.optional(),
      swish: PaymentMethodSwishSchema.optional(),
      twint: PaymentMethodTwintSchema.optional(),
      /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
      type: z
        .enum([
          'acss_debit',
          'affirm',
          'afterpay_clearpay',
          'alipay',
          'alma',
          'amazon_pay',
          'au_becs_debit',
          'bacs_debit',
          'bancontact',
          'blik',
          'boleto',
          'card',
          'card_present',
          'cashapp',
          'customer_balance',
          'eps',
          'fpx',
          'giropay',
          'grabpay',
          'ideal',
          'interac_present',
          'kakao_pay',
          'klarna',
          'konbini',
          'kr_card',
          'link',
          'mobilepay',
          'multibanco',
          'naver_pay',
          'oxxo',
          'p24',
          'pay_by_bank',
          'payco',
          'paynow',
          'paypal',
          'pix',
          'promptpay',
          'revolut_pay',
          'samsung_pay',
          'sepa_debit',
          'sofort',
          'swish',
          'twint',
          'us_bank_account',
          'wechat_pay',
          'zip'
        ])
        .describe(
          'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'
        ),
      us_bank_account: PaymentMethodUsBankAccountSchema.optional(),
      wechat_pay: PaymentMethodWechatPaySchema.optional(),
      zip: PaymentMethodZipSchema.optional()
    })
    .describe(
      "PaymentMethod objects represent your customer's payment instruments.\nYou can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to\nCustomer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios)."
    )
  export type PaymentMethod = z.infer<typeof PaymentMethodSchema>

  export const PaymentMethodCardSchema = z.object({
    /** Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    brand: z
      .string()
      .max(5000)
      .describe(
        'Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.'
      ),
    /** Checks on Card address and CVC if provided. */
    checks: PaymentMethodCardChecksSchema.nullable()
      .describe('Checks on Card address and CVC if provided.')
      .optional(),
    /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
      )
      .optional(),
    /** The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future. */
    display_brand: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future."
      )
      .optional(),
    /** Two-digit number representing the card's expiration month. */
    exp_month: z
      .number()
      .int()
      .describe("Two-digit number representing the card's expiration month."),
    /** Four-digit number representing the card's expiration year. */
    exp_year: z
      .number()
      .int()
      .describe("Four-digit number representing the card's expiration year."),
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
     *
     * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
     */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*'
      )
      .optional(),
    /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    funding: z
      .string()
      .max(5000)
      .describe(
        'Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.'
      ),
    /** Details of the original PaymentMethod that created this object. */
    generated_from: PaymentMethodCardGeneratedCardSchema.nullable()
      .describe(
        'Details of the original PaymentMethod that created this object.'
      )
      .optional(),
    /** The last four digits of the card. */
    last4: z.string().max(5000).describe('The last four digits of the card.'),
    /** Contains information about card networks that can be used to process the payment. */
    networks: NetworksSchema.nullable()
      .describe(
        'Contains information about card networks that can be used to process the payment.'
      )
      .optional(),
    /** Status of a card based on the card issuer. */
    regulated_status: z
      .enum(['regulated', 'unregulated'])
      .nullable()
      .describe('Status of a card based on the card issuer.')
      .optional(),
    /** Contains details on how this Card may be used for 3D Secure authentication. */
    three_d_secure_usage: ThreeDSecureUsageSchema.nullable()
      .describe(
        'Contains details on how this Card may be used for 3D Secure authentication.'
      )
      .optional(),
    /** If this Card is part of a card wallet, this contains the details of the card wallet. */
    wallet: PaymentMethodCardWalletSchema.nullable()
      .describe(
        'If this Card is part of a card wallet, this contains the details of the card wallet.'
      )
      .optional()
  })
  export type PaymentMethodCard = z.infer<typeof PaymentMethodCardSchema>

  export const PaymentMethodCardGeneratedCardSchema = z.object({
    /** The charge that created this object. */
    charge: z
      .string()
      .max(5000)
      .nullable()
      .describe('The charge that created this object.')
      .optional(),
    /** Transaction-specific details of the payment method used in the payment. */
    payment_method_details:
      CardGeneratedFromPaymentMethodDetailsSchema.nullable()
        .describe(
          'Transaction-specific details of the payment method used in the payment.'
        )
        .optional(),
    /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
    setup_attempt: z
      .union([z.string().max(5000), SetupAttemptSchema])
      .nullable()
      .describe(
        'The ID of the SetupAttempt that generated this PaymentMethod, if any.'
      )
      .optional()
  })
  export type PaymentMethodCardGeneratedCard = z.infer<
    typeof PaymentMethodCardGeneratedCardSchema
  >

  /**
   * A SetupAttempt describes one attempted confirmation of a SetupIntent,
   * whether that confirmation is successful or unsuccessful. You can use
   * SetupAttempts to inspect details of a specific attempt at setting up a
   * payment method using a SetupIntent.
   */
  export const SetupAttemptSchema = z
    .object({
      /** The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
      application: z
        .union([z.string().max(5000), ApplicationSchema])
        .nullable()
        .describe(
          'The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.'
        )
        .optional(),
      /**
       * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
       *
       * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
       */
      attach_to_self: z
        .boolean()
        .describe(
          "If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer."
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          'The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.'
        )
        .optional(),
      /**
       * Indicates the directions of money movement for which this payment method is intended to be used.
       *
       * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
       */
      flow_directions: z
        .array(z.enum(['inbound', 'outbound']))
        .nullable()
        .describe(
          'Indicates the directions of money movement for which this payment method is intended to be used.\n\nInclude `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('setup_attempt')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.'
        )
        .optional(),
      /** ID of the payment method used with this SetupAttempt. */
      payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .describe('ID of the payment method used with this SetupAttempt.'),
      payment_method_details: SetupAttemptPaymentMethodDetailsSchema,
      /** The error encountered during this attempt to confirm the SetupIntent, if any. */
      setup_error: ApiErrorsSchema.nullable()
        .describe(
          'The error encountered during this attempt to confirm the SetupIntent, if any.'
        )
        .optional(),
      /** ID of the SetupIntent that this attempt belongs to. */
      setup_intent: z
        .union([z.string().max(5000), SetupIntentSchema])
        .describe('ID of the SetupIntent that this attempt belongs to.'),
      /** Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
      status: z
        .string()
        .max(5000)
        .describe(
          'Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.'
        ),
      /** The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
      usage: z
        .string()
        .max(5000)
        .describe(
          'The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.'
        )
    })
    .describe(
      'A SetupAttempt describes one attempted confirmation of a SetupIntent,\nwhether that confirmation is successful or unsuccessful. You can use\nSetupAttempts to inspect details of a specific attempt at setting up a\npayment method using a SetupIntent.'
    )
  export type SetupAttempt = z.infer<typeof SetupAttemptSchema>

  export const SetupAttemptPaymentMethodDetailsSchema = z.object({
    acss_debit: SetupAttemptPaymentMethodDetailsAcssDebitSchema.optional(),
    amazon_pay: SetupAttemptPaymentMethodDetailsAmazonPaySchema.optional(),
    au_becs_debit: SetupAttemptPaymentMethodDetailsAuBecsDebitSchema.optional(),
    bacs_debit: SetupAttemptPaymentMethodDetailsBacsDebitSchema.optional(),
    bancontact: SetupAttemptPaymentMethodDetailsBancontactSchema.optional(),
    boleto: SetupAttemptPaymentMethodDetailsBoletoSchema.optional(),
    card: SetupAttemptPaymentMethodDetailsCardSchema.optional(),
    card_present: SetupAttemptPaymentMethodDetailsCardPresentSchema.optional(),
    cashapp: SetupAttemptPaymentMethodDetailsCashappSchema.optional(),
    ideal: SetupAttemptPaymentMethodDetailsIdealSchema.optional(),
    kakao_pay: SetupAttemptPaymentMethodDetailsKakaoPaySchema.optional(),
    klarna: SetupAttemptPaymentMethodDetailsKlarnaSchema.optional(),
    kr_card: SetupAttemptPaymentMethodDetailsKrCardSchema.optional(),
    link: SetupAttemptPaymentMethodDetailsLinkSchema.optional(),
    paypal: SetupAttemptPaymentMethodDetailsPaypalSchema.optional(),
    revolut_pay: SetupAttemptPaymentMethodDetailsRevolutPaySchema.optional(),
    sepa_debit: SetupAttemptPaymentMethodDetailsSepaDebitSchema.optional(),
    sofort: SetupAttemptPaymentMethodDetailsSofortSchema.optional(),
    /** The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
    type: z
      .string()
      .max(5000)
      .describe(
        'The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.'
      ),
    us_bank_account:
      SetupAttemptPaymentMethodDetailsUsBankAccountSchema.optional()
  })
  export type SetupAttemptPaymentMethodDetails = z.infer<
    typeof SetupAttemptPaymentMethodDetailsSchema
  >

  export const SetupAttemptPaymentMethodDetailsBancontactSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Bank Identifier Code of the bank associated with the bank account. */
    bic: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Bank Identifier Code of the bank associated with the bank account.'
      )
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Preferred language of the Bancontact authorization page that the customer is redirected to.
     * Can be one of `en`, `de`, `fr`, or `nl`
     */
    preferred_language: z
      .enum(['de', 'en', 'fr', 'nl'])
      .nullable()
      .describe(
        'Preferred language of the Bancontact authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`'
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by Bancontact directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by Bancontact directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsBancontact = z.infer<
    typeof SetupAttemptPaymentMethodDetailsBancontactSchema
  >

  /** A Mandate is a record of the permission that your customer gives you to debit their payment method. */
  export const MandateSchema = z
    .object({
      customer_acceptance: CustomerAcceptanceSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      multi_use: MandateMultiUseSchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('mandate')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) that the mandate is intended for. */
      on_behalf_of: z
        .string()
        .max(5000)
        .describe('The account (if any) that the mandate is intended for.')
        .optional(),
      /** ID of the payment method associated with this mandate. */
      payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .describe('ID of the payment method associated with this mandate.'),
      payment_method_details: MandatePaymentMethodDetailsSchema,
      single_use: MandateSingleUseSchema.optional(),
      /** The mandate status indicates whether or not you can use it to initiate a payment. */
      status: z
        .enum(['active', 'inactive', 'pending'])
        .describe(
          'The mandate status indicates whether or not you can use it to initiate a payment.'
        ),
      /** The type of the mandate. */
      type: z
        .enum(['multi_use', 'single_use'])
        .describe('The type of the mandate.')
    })
    .describe(
      'A Mandate is a record of the permission that your customer gives you to debit their payment method.'
    )
  export type Mandate = z.infer<typeof MandateSchema>

  export const SetupAttemptPaymentMethodDetailsCardPresentSchema = z.object({
    /** The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
    generated_card: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the Card PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** Details about payments collected offline. */
    offline: PaymentMethodDetailsCardPresentOfflineSchema.nullable()
      .describe('Details about payments collected offline.')
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsCardPresent = z.infer<
    typeof SetupAttemptPaymentMethodDetailsCardPresentSchema
  >

  export const SetupAttemptPaymentMethodDetailsIdealSchema = z.object({
    /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
    bank: z
      .enum([
        'abn_amro',
        'asn_bank',
        'bunq',
        'handelsbanken',
        'ing',
        'knab',
        'moneyou',
        'n26',
        'nn',
        'rabobank',
        'regiobank',
        'revolut',
        'sns_bank',
        'triodos_bank',
        'van_lanschot',
        'yoursafe'
      ])
      .nullable()
      .describe(
        "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
      )
      .optional(),
    /** The Bank Identifier Code of the customer's bank. */
    bic: z
      .enum([
        'ABNANL2A',
        'ASNBNL21',
        'BITSNL2A',
        'BUNQNL2A',
        'FVLBNL22',
        'HANDNL2A',
        'INGBNL2A',
        'KNABNL2H',
        'MOYONL21',
        'NNBANL2G',
        'NTSBDEB1',
        'RABONL2U',
        'RBRBNL21',
        'REVOIE23',
        'REVOLT21',
        'SNSBNL2A',
        'TRIONL2U'
      ])
      .nullable()
      .describe("The Bank Identifier Code of the customer's bank.")
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by iDEAL directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by iDEAL directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsIdeal = z.infer<
    typeof SetupAttemptPaymentMethodDetailsIdealSchema
  >

  export const SetupAttemptPaymentMethodDetailsSofortSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Bank Identifier Code of the bank associated with the bank account. */
    bic: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Bank Identifier Code of the bank associated with the bank account.'
      )
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Preferred language of the Sofort authorization page that the customer is redirected to.
     * Can be one of `en`, `de`, `fr`, or `nl`
     */
    preferred_language: z
      .enum(['de', 'en', 'fr', 'nl'])
      .nullable()
      .describe(
        'Preferred language of the Sofort authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`'
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by Sofort directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by Sofort directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type SetupAttemptPaymentMethodDetailsSofort = z.infer<
    typeof SetupAttemptPaymentMethodDetailsSofortSchema
  >

  export const ApiErrorsSchema = z.object({
    /** For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one. */
    advice_code: z
      .string()
      .max(5000)
      .describe(
        'For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one.'
      )
      .optional(),
    /** For card errors, the ID of the failed charge. */
    charge: z
      .string()
      .max(5000)
      .describe('For card errors, the ID of the failed charge.')
      .optional(),
    /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
    code: z
      .string()
      .max(5000)
      .describe(
        'For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.'
      )
      .optional(),
    /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
    decline_code: z
      .string()
      .max(5000)
      .describe(
        "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."
      )
      .optional(),
    /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
    doc_url: z
      .string()
      .max(5000)
      .describe(
        'A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.'
      )
      .optional(),
    /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
    message: z
      .string()
      .max(40_000)
      .describe(
        'A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.'
      )
      .optional(),
    /** For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error. */
    network_advice_code: z
      .string()
      .max(5000)
      .describe(
        'For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.'
      )
      .optional(),
    /** For card errors resulting from a card issuer decline, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed. */
    network_decline_code: z
      .string()
      .max(5000)
      .describe(
        'For card errors resulting from a card issuer decline, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.'
      )
      .optional(),
    /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
    param: z
      .string()
      .max(5000)
      .describe(
        'If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.'
      )
      .optional(),
    payment_intent: PaymentIntentSchema.optional(),
    payment_method: PaymentMethodSchema.optional(),
    /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
    payment_method_type: z
      .string()
      .max(5000)
      .describe(
        'If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.'
      )
      .optional(),
    /** A URL to the request log entry in your dashboard. */
    request_log_url: z
      .string()
      .max(5000)
      .describe('A URL to the request log entry in your dashboard.')
      .optional(),
    setup_intent: SetupIntentSchema.optional(),
    /** The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source. */
    source: z
      .union([BankAccountSchema, CardSchema, SourceSchema])
      .describe(
        'The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source.'
      )
      .optional(),
    /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
    type: z
      .enum([
        'api_error',
        'card_error',
        'idempotency_error',
        'invalid_request_error'
      ])
      .describe(
        'The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`'
      )
  })
  export type ApiErrors = z.infer<typeof ApiErrorsSchema>

  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
   */
  export const PaymentIntentSchema = z
    .object({
      /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: z
        .number()
        .int()
        .describe(
          'Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).'
        ),
      /** Amount that can be captured from this PaymentIntent. */
      amount_capturable: z
        .number()
        .int()
        .describe('Amount that can be captured from this PaymentIntent.')
        .optional(),
      amount_details: z
        .union([
          PaymentFlowsAmountDetailsSchema,
          PaymentFlowsAmountDetailsClientSchema
        ])
        .optional(),
      /** Amount that this PaymentIntent collects. */
      amount_received: z
        .number()
        .int()
        .describe('Amount that this PaymentIntent collects.')
        .optional(),
      /** ID of the Connect application that created the PaymentIntent. */
      application: z
        .union([z.string().max(5000), ApplicationSchema])
        .nullable()
        .describe(
          'ID of the Connect application that created the PaymentIntent.'
        )
        .optional(),
      /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."
        )
        .optional(),
      /** Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) */
      automatic_payment_methods:
        PaymentFlowsAutomaticPaymentMethodsPaymentIntentSchema.nullable()
          .describe(
            'Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)'
          )
          .optional(),
      /** Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
      cancellation_reason: z
        .enum([
          'abandoned',
          'automatic',
          'duplicate',
          'failed_invoice',
          'fraudulent',
          'requested_by_customer',
          'void_invoice'
        ])
        .nullable()
        .describe(
          'Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).'
        )
        .optional(),
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: z
        .enum(['automatic', 'automatic_async', 'manual'])
        .describe(
          "Controls when the funds will be captured from the customer's account."
        ),
      /**
       * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       *
       * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
       */
      client_secret: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. \n\nThe client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n\nRefer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.'
        )
        .optional(),
      /** Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment. */
      confirmation_method: z
        .enum(['automatic', 'manual'])
        .describe(
          'Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /**
       * ID of the Customer this PaymentIntent belongs to, if one exists.
       *
       * Payment methods attached to other Customers cannot be used with this PaymentIntent.
       *
       * If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
       */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          "ID of the Customer this PaymentIntent belongs to, if one exists.\n\nPayment methods attached to other Customers cannot be used with this PaymentIntent.\n\nIf [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead."
        )
        .optional(),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** ID of the invoice that created this PaymentIntent, if it exists. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe(
          'ID of the invoice that created this PaymentIntent, if it exists.'
        )
        .optional(),
      /** The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
      last_payment_error: ApiErrorsSchema.nullable()
        .describe(
          'The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.'
        )
        .optional(),
      /** ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted. */
      latest_charge: z
        .union([z.string().max(5000), ChargeSchema])
        .nullable()
        .describe(
          'ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted.'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).'
        )
        .optional(),
      /** If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
      next_action: PaymentIntentNextActionSchema.nullable()
        .describe(
          'If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payment_intent')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.'
        )
        .optional(),
      /** ID of the payment method used in this PaymentIntent. */
      payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .nullable()
        .describe('ID of the payment method used in this PaymentIntent.')
        .optional(),
      /** Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this PaymentIntent. */
      payment_method_configuration_details:
        PaymentMethodConfigBizPaymentMethodConfigurationDetailsSchema.nullable()
          .describe(
            'Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this PaymentIntent.'
          )
          .optional(),
      /** Payment-method-specific configuration for this PaymentIntent. */
      payment_method_options: PaymentIntentPaymentMethodOptionsSchema.nullable()
        .describe(
          'Payment-method-specific configuration for this PaymentIntent.'
        )
        .optional(),
      /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
      payment_method_types: z
        .array(z.string().max(5000))
        .describe(
          'The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.'
        ),
      /** If present, this property tells you about the processing state of the payment. */
      processing: PaymentIntentProcessingSchema.nullable()
        .describe(
          'If present, this property tells you about the processing state of the payment.'
        )
        .optional(),
      /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
      receipt_email: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).'
        )
        .optional(),
      /** ID of the review associated with this PaymentIntent, if any. */
      review: z
        .union([z.string().max(5000), ReviewSchema])
        .nullable()
        .describe(
          'ID of the review associated with this PaymentIntent, if any.'
        )
        .optional(),
      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
       *
       * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
       *
       * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
       */
      setup_future_usage: z
        .enum(['off_session', 'on_session'])
        .nullable()
        .describe(
          "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.\n\nIf the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.\n\nWhen processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication)."
        )
        .optional(),
      /** Shipping information for this PaymentIntent. */
      shipping: ShippingSchema.nullable()
        .describe('Shipping information for this PaymentIntent.')
        .optional(),
      /**
       * Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
       *
       * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
       */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).\n\nSetting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead."
        )
        .optional(),
      /** Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
      statement_descriptor_suffix: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement."
        )
        .optional(),
      /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
      status: z
        .enum([
          'canceled',
          'processing',
          'requires_action',
          'requires_capture',
          'requires_confirmation',
          'requires_payment_method',
          'succeeded'
        ])
        .describe(
          'Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).'
        ),
      /** The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
      transfer_data: TransferDataSchema.nullable()
        .describe(
          'The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).'
        )
        .optional(),
      /** A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers). */
      transfer_group: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).'
        )
        .optional()
    })
    .describe(
      'A PaymentIntent guides you through the process of collecting a payment from your customer.\nWe recommend that you create exactly one PaymentIntent for each order or\ncustomer session in your system. You can reference the PaymentIntent later to\nsee the history of payment attempts for a particular session.\n\nA PaymentIntent transitions through\n[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)\nthroughout its lifetime as it interfaces with Stripe.js to perform\nauthentication flows and ultimately creates at most one successful charge.\n\nRelated guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)'
    )
  export type PaymentIntent = z.infer<typeof PaymentIntentSchema>

  /**
   * Invoices are statements of amounts owed by a customer, and are either
   * generated one-off, or generated periodically from a subscription.
   *
   * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
   * that may be caused by subscription upgrades/downgrades (if necessary).
   *
   * If your invoice is configured to be billed through automatic charges,
   * Stripe automatically finalizes your invoice and attempts payment. Note
   * that finalizing the invoice,
   * [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
   * not happen immediately as the invoice is created. Stripe waits
   * until one hour after the last webhook was successfully sent (or the last
   * webhook timed out after failing). If you (and the platforms you may have
   * connected to) have no webhooks configured, Stripe waits one hour after
   * creation to finalize the invoice.
   *
   * If your invoice is configured to be billed by sending an email, then based on your
   * [email settings](https://dashboard.stripe.com/account/billing/automatic),
   * Stripe will email the invoice to your customer and await payment. These
   * emails can contain a link to a hosted page to pay the invoice.
   *
   * Stripe applies any customer credit on the account before determining the
   * amount due for the invoice (i.e., the amount that will be actually
   * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
   * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
   * invoice is automatically marked paid, and we add the amount due to the
   * customer's credit balance which is applied to the next invoice.
   *
   * More details on the customer's credit balance are
   * [here](https://stripe.com/docs/billing/customer/balance).
   *
   * Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
   */
  export const InvoiceSchema = z
    .object({
      /** The country of the business associated with this invoice, most often the business creating the invoice. */
      account_country: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The country of the business associated with this invoice, most often the business creating the invoice.'
        )
        .optional(),
      /** The public name of the business associated with this invoice, most often the business creating the invoice. */
      account_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The public name of the business associated with this invoice, most often the business creating the invoice.'
        )
        .optional(),
      /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
      account_tax_ids: z
        .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
        .nullable()
        .describe(
          'The account tax IDs associated with the invoice. Only editable when the invoice is a draft.'
        )
        .optional(),
      /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
      amount_due: z
        .number()
        .int()
        .describe(
          "Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`."
        ),
      /** The amount, in cents (or local equivalent), that was paid. */
      amount_paid: z
        .number()
        .int()
        .describe('The amount, in cents (or local equivalent), that was paid.'),
      /** The difference between amount_due and amount_paid, in cents (or local equivalent). */
      amount_remaining: z
        .number()
        .int()
        .describe(
          'The difference between amount_due and amount_paid, in cents (or local equivalent).'
        ),
      /** This is the sum of all the shipping amounts. */
      amount_shipping: z
        .number()
        .int()
        .describe('This is the sum of all the shipping amounts.'),
      /** ID of the Connect Application that created the invoice. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe('ID of the Connect Application that created the invoice.')
        .optional(),
      /** The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          "The fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid."
        )
        .optional(),
      /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained. */
      attempt_count: z
        .number()
        .int()
        .describe(
          'Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.'
        ),
      /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
      attempted: z
        .boolean()
        .describe(
          'Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.'
        ),
      /** Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. */
      auto_advance: z
        .boolean()
        .describe(
          "Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action."
        )
        .optional(),
      automatic_tax: AutomaticTaxSchema,
      /** The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized. */
      automatically_finalizes_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.'
        )
        .optional(),
      /**
       * Indicates the reason why the invoice was created.
       *
       * * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
       * * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
       * * `subscription_create`: A new subscription was created.
       * * `subscription_cycle`: A subscription advanced into a new period.
       * * `subscription_threshold`: A subscription reached a billing threshold.
       * * `subscription_update`: A subscription was updated.
       * * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
       */
      billing_reason: z
        .enum([
          'automatic_pending_invoice_item_invoice',
          'manual',
          'quote_accept',
          'subscription',
          'subscription_create',
          'subscription_cycle',
          'subscription_threshold',
          'subscription_update',
          'upcoming'
        ])
        .nullable()
        .describe(
          'Indicates the reason why the invoice was created.\n\n* `manual`: Unrelated to a subscription, for example, created via the invoice editor.\n* `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.\n* `subscription_create`: A new subscription was created.\n* `subscription_cycle`: A subscription advanced into a new period.\n* `subscription_threshold`: A subscription reached a billing threshold.\n* `subscription_update`: A subscription was updated.\n* `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.'
        )
        .optional(),
      /** ID of the latest charge generated for this invoice, if any. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .nullable()
        .describe('ID of the latest charge generated for this invoice, if any.')
        .optional(),
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
      collection_method: z
        .enum(['charge_automatically', 'send_invoice'])
        .describe(
          'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Custom fields displayed on the invoice. */
      custom_fields: z
        .array(InvoiceSettingCustomFieldSchema)
        .nullable()
        .describe('Custom fields displayed on the invoice.')
        .optional(),
      /** The ID of the customer who will be billed. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe('The ID of the customer who will be billed.')
        .optional(),
      /** The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
      customer_address: AddressSchema.nullable()
        .describe(
          "The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
      customer_email: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
      customer_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
      customer_phone: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
      customer_shipping: ShippingSchema.nullable()
        .describe(
          "The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_exempt: z
        .enum(['exempt', 'none', 'reverse'])
        .nullable()
        .describe(
          "The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_ids: z
        .array(InvoicesResourceInvoiceTaxIdSchema)
        .nullable()
        .describe(
          "The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated."
        )
        .optional(),
      /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
      default_payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .nullable()
        .describe(
          "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."
        )
        .optional(),
      /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
      default_source: z
        .union([
          z.string().max(5000),
          BankAccountSchema,
          CardSchema,
          SourceSchema
        ])
        .nullable()
        .describe(
          "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."
        )
        .optional(),
      /** The tax rates applied to this invoice, if any. */
      default_tax_rates: z
        .array(TaxRateSchema)
        .describe('The tax rates applied to this invoice, if any.'),
      /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."
        )
        .optional(),
      /** Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
      discount: DiscountSchema.nullable()
        .describe(
          'Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.'
        )
        .optional(),
      /** The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(
          z.union([z.string().max(5000), DiscountSchema, DeletedDiscountSchema])
        )
        .describe(
          'The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.'
        ),
      /** The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
      due_date: z
        .number()
        .int()
        .nullable()
        .describe(
          'The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.'
        )
        .optional(),
      /** The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt. */
      effective_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt."
        )
        .optional(),
      /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
      ending_balance: z
        .number()
        .int()
        .nullable()
        .describe(
          'Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.'
        )
        .optional(),
      /** Footer displayed on the invoice. */
      footer: z
        .string()
        .max(5000)
        .nullable()
        .describe('Footer displayed on the invoice.')
        .optional(),
      /** Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details. */
      from_invoice: InvoicesResourceFromInvoiceSchema.nullable()
        .describe(
          'Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.'
        )
        .optional(),
      /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
      hosted_invoice_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.'
        )
        .optional(),
      /** Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details. */
      id: z
        .string()
        .max(5000)
        .describe(
          'Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.'
        )
        .optional(),
      /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
      invoice_pdf: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.'
        )
        .optional(),
      issuer: ConnectAccountReferenceSchema,
      /** The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
      last_finalization_error: ApiErrorsSchema.nullable()
        .describe(
          'The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.'
        )
        .optional(),
      /** The ID of the most recent non-draft revision of this invoice */
      latest_revision: z
        .union([
          z.string().max(5000),
          // TODO: Support recursive types for `InvoiceSchema`.
          z.any()
        ])
        .nullable()
        .describe(
          'The ID of the most recent non-draft revision of this invoice'
        )
        .optional(),
      /** The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order. */
      lines: z
        .object({
          /** Details about each object. */
          data: z.array(LineItemSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe(
          'The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
      next_payment_attempt: z
        .number()
        .int()
        .nullable()
        .describe(
          'The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.'
        )
        .optional(),
      /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
      number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified."
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('invoice')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.'
        )
        .optional(),
      /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
      paid: z
        .boolean()
        .describe(
          "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."
        ),
      /** Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
      paid_out_of_band: z
        .boolean()
        .describe(
          "Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe."
        ),
      /** The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .nullable()
        .describe(
          'The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.'
        )
        .optional(),
      payment_settings: InvoicesPaymentSettingsSchema,
      /** End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price. */
      period_end: z
        .number()
        .int()
        .describe(
          'End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.'
        ),
      /** Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price. */
      period_start: z
        .number()
        .int()
        .describe(
          'Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.'
        ),
      /** Total amount of all post-payment credit notes issued for this invoice. */
      post_payment_credit_notes_amount: z
        .number()
        .int()
        .describe(
          'Total amount of all post-payment credit notes issued for this invoice.'
        ),
      /** Total amount of all pre-payment credit notes issued for this invoice. */
      pre_payment_credit_notes_amount: z
        .number()
        .int()
        .describe(
          'Total amount of all pre-payment credit notes issued for this invoice.'
        ),
      /** The quote this invoice was generated from. */
      quote: z
        .union([z.string().max(5000), QuoteSchema])
        .nullable()
        .describe('The quote this invoice was generated from.')
        .optional(),
      /** This is the transaction number that appears on email receipts sent for this invoice. */
      receipt_number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'This is the transaction number that appears on email receipts sent for this invoice.'
        )
        .optional(),
      /** The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page. */
      rendering: InvoicesResourceInvoiceRenderingSchema.nullable()
        .describe(
          'The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.'
        )
        .optional(),
      /** The details of the cost of shipping, including the ShippingRate applied on the invoice. */
      shipping_cost: InvoicesResourceShippingCostSchema.nullable()
        .describe(
          'The details of the cost of shipping, including the ShippingRate applied on the invoice.'
        )
        .optional(),
      /** Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
      shipping_details: ShippingSchema.nullable()
        .describe(
          'Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.'
        )
        .optional(),
      /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice. */
      starting_balance: z
        .number()
        .int()
        .describe(
          'Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.'
        ),
      /** Extra information about an invoice for the customer's credit card statement. */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Extra information about an invoice for the customer's credit card statement."
        )
        .optional(),
      /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
      status: z
        .enum(['draft', 'open', 'paid', 'uncollectible', 'void'])
        .nullable()
        .describe(
          'The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)'
        )
        .optional(),
      status_transitions: InvoicesResourceStatusTransitionsSchema,
      /** The subscription that this invoice was prepared for, if any. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe(
          'The subscription that this invoice was prepared for, if any.'
        )
        .optional(),
      /** Details about the subscription that created this invoice. */
      subscription_details: SubscriptionDetailsDataSchema.nullable()
        .describe('Details about the subscription that created this invoice.')
        .optional(),
      /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
      subscription_proration_date: z
        .number()
        .int()
        .describe(
          'Only set for upcoming invoices that preview prorations. The time used to calculate prorations.'
        )
        .optional(),
      /** Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated */
      subtotal: z
        .number()
        .int()
        .describe(
          'Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated'
        ),
      /** The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
      subtotal_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated'
        )
        .optional(),
      /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
      tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.'
        )
        .optional(),
      /** ID of the test clock this invoice belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this invoice belongs to.')
        .optional(),
      threshold_reason: InvoiceThresholdReasonSchema.optional(),
      /** Total after discounts and taxes. */
      total: z.number().int().describe('Total after discounts and taxes.'),
      /** The aggregate amounts calculated per discount across all line items. */
      total_discount_amounts: z
        .array(DiscountsResourceDiscountAmountSchema)
        .nullable()
        .describe(
          'The aggregate amounts calculated per discount across all line items.'
        )
        .optional(),
      /** The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax. */
      total_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.'
        )
        .optional(),
      /** Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this invoice. This is a combined list of total_pretax_credit_amounts across all invoice line items. */
      total_pretax_credit_amounts: z
        .array(InvoicesResourcePretaxCreditAmountSchema)
        .nullable()
        .describe(
          'Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this invoice. This is a combined list of total_pretax_credit_amounts across all invoice line items.'
        )
        .optional(),
      /** The aggregate amounts calculated per tax rate for all line items. */
      total_tax_amounts: z
        .array(InvoiceTaxAmountSchema)
        .describe(
          'The aggregate amounts calculated per tax rate for all line items.'
        ),
      /** The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
      transfer_data: InvoiceTransferDataSchema.nullable()
        .describe(
          'The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.'
        )
        .optional(),
      /** Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
      webhooks_delivered_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.'
        )
        .optional()
    })
    .describe(
      "Invoices are statements of amounts owed by a customer, and are either\ngenerated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments\nthat may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges,\nStripe automatically finalizes your invoice and attempts payment. Note\nthat finalizing the invoice,\n[when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does\nnot happen immediately as the invoice is created. Stripe waits\nuntil one hour after the last webhook was successfully sent (or the last\nwebhook timed out after failing). If you (and the platforms you may have\nconnected to) have no webhooks configured, Stripe waits one hour after\ncreation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your\n[email settings](https://dashboard.stripe.com/account/billing/automatic),\nStripe will email the invoice to your customer and await payment. These\nemails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the\namount due for the invoice (i.e., the amount that will be actually\ncharged). If the amount due for the invoice is less than Stripe's [minimum allowed charge\nper currency](/docs/currencies#minimum-and-maximum-charge-amounts), the\ninvoice is automatically marked paid, and we add the amount due to the\ncustomer's credit balance which is applied to the next invoice.\n\nMore details on the customer's credit balance are\n[here](https://stripe.com/docs/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)"
    )
  export type Invoice = z.infer<typeof InvoiceSchema>

  /**
   * You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
   * Customer and account tax IDs get displayed on related invoices and credit notes.
   *
   * Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
   */
  export const TaxIdSchema = z
    .object({
      /** Two-letter ISO code representing the country of the tax ID. */
      country: z
        .string()
        .max(5000)
        .nullable()
        .describe('Two-letter ISO code representing the country of the tax ID.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** ID of the customer. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .nullable()
        .describe('ID of the customer.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('tax_id')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account or customer the tax ID belongs to. */
      owner: TaxIDsOwnerSchema.nullable()
        .describe('The account or customer the tax ID belongs to.')
        .optional(),
      /** Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `ba_tin`, `bb_tin`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kh_tin`, `kr_brn`, `kz_bin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`. Note that some legacy tax IDs have type `unknown` */
      type: z
        .enum([
          'ad_nrt',
          'ae_trn',
          'al_tin',
          'am_tin',
          'ao_tin',
          'ar_cuit',
          'au_abn',
          'au_arn',
          'ba_tin',
          'bb_tin',
          'bg_uic',
          'bh_vat',
          'bo_tin',
          'br_cnpj',
          'br_cpf',
          'bs_tin',
          'by_tin',
          'ca_bn',
          'ca_gst_hst',
          'ca_pst_bc',
          'ca_pst_mb',
          'ca_pst_sk',
          'ca_qst',
          'cd_nif',
          'ch_uid',
          'ch_vat',
          'cl_tin',
          'cn_tin',
          'co_nit',
          'cr_tin',
          'de_stn',
          'do_rcn',
          'ec_ruc',
          'eg_tin',
          'es_cif',
          'eu_oss_vat',
          'eu_vat',
          'gb_vat',
          'ge_vat',
          'gn_nif',
          'hk_br',
          'hr_oib',
          'hu_tin',
          'id_npwp',
          'il_vat',
          'in_gst',
          'is_vat',
          'jp_cn',
          'jp_rn',
          'jp_trn',
          'ke_pin',
          'kh_tin',
          'kr_brn',
          'kz_bin',
          'li_uid',
          'li_vat',
          'ma_vat',
          'md_vat',
          'me_pib',
          'mk_vat',
          'mr_nif',
          'mx_rfc',
          'my_frp',
          'my_itn',
          'my_sst',
          'ng_tin',
          'no_vat',
          'no_voec',
          'np_pan',
          'nz_gst',
          'om_vat',
          'pe_ruc',
          'ph_tin',
          'ro_tin',
          'rs_pib',
          'ru_inn',
          'ru_kpp',
          'sa_vat',
          'sg_gst',
          'sg_uen',
          'si_tin',
          'sn_ninea',
          'sr_fin',
          'sv_nit',
          'th_vat',
          'tj_tin',
          'tr_tin',
          'tw_vat',
          'tz_vat',
          'ua_vat',
          'ug_tin',
          'unknown',
          'us_ein',
          'uy_ruc',
          'uz_tin',
          'uz_vat',
          've_rif',
          'vn_tin',
          'za_vat',
          'zm_tin',
          'zw_tin'
        ])
        .describe(
          'Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `ba_tin`, `bb_tin`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kh_tin`, `kr_brn`, `kz_bin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`. Note that some legacy tax IDs have type `unknown`'
        ),
      /** Value of the tax ID. */
      value: z.string().max(5000).describe('Value of the tax ID.'),
      /** Tax ID verification information. */
      verification: TaxIdVerificationSchema.nullable()
        .describe('Tax ID verification information.')
        .optional()
    })
    .describe(
      'You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.\nCustomer and account tax IDs get displayed on related invoices and credit notes.\n\nRelated guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)'
    )
  export type TaxId = z.infer<typeof TaxIdSchema>

  export const TaxIDsOwnerSchema = z.object({
    /** The account being referenced when `type` is `account`. */
    account: z
      .union([z.string().max(5000), AccountSchema])
      .describe('The account being referenced when `type` is `account`.')
      .optional(),
    /** The Connect Application being referenced when `type` is `application`. */
    application: z
      .union([z.string().max(5000), ApplicationSchema])
      .describe(
        'The Connect Application being referenced when `type` is `application`.'
      )
      .optional(),
    /** The customer being referenced when `type` is `customer`. */
    customer: z
      .union([z.string().max(5000), CustomerSchema])
      .describe('The customer being referenced when `type` is `customer`.')
      .optional(),
    /** Type of owner referenced. */
    type: z
      .enum(['account', 'application', 'customer', 'self'])
      .describe('Type of owner referenced.')
  })
  export type TaxIDsOwner = z.infer<typeof TaxIDsOwnerSchema>

  export const AutomaticTaxSchema = z.object({
    /** If Stripe disabled automatic tax, this enum describes why. */
    disabled_reason: z
      .enum([
        'finalization_requires_location_inputs',
        'finalization_system_error'
      ])
      .nullable()
      .describe('If Stripe disabled automatic tax, this enum describes why.')
      .optional(),
    /** Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices. */
    enabled: z
      .boolean()
      .describe(
        'Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.'
      ),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional(),
    /** The status of the most recent automated tax calculation for this invoice. */
    status: z
      .enum(['complete', 'failed', 'requires_location_inputs'])
      .nullable()
      .describe(
        'The status of the most recent automated tax calculation for this invoice.'
      )
      .optional()
  })
  export type AutomaticTax = z.infer<typeof AutomaticTaxSchema>

  export const ConnectAccountReferenceSchema = z.object({
    /** The connected account being referenced when `type` is `account`. */
    account: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The connected account being referenced when `type` is `account`.'
      )
      .optional(),
    /** Type of the account referenced. */
    type: z
      .enum(['account', 'self'])
      .describe('Type of the account referenced.')
  })
  export type ConnectAccountReference = z.infer<
    typeof ConnectAccountReferenceSchema
  >

  /**
   * The `Charge` object represents a single attempt to move money into your Stripe account.
   * PaymentIntent confirmation is the most common way to create Charges, but transferring
   * money to a different Stripe account through Connect also creates Charges.
   * Some legacy payment flows create Charges directly, which is not recommended for new integrations.
   */
  export const ChargeSchema = z
    .object({
      /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: z
        .number()
        .int()
        .describe(
          'Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).'
        ),
      /** Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made). */
      amount_captured: z
        .number()
        .int()
        .describe(
          'Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).'
        ),
      /** Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
      amount_refunded: z
        .number()
        .int()
        .describe(
          'Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).'
        ),
      /** ID of the Connect application that created the charge. */
      application: z
        .union([z.string().max(5000), ApplicationSchema])
        .nullable()
        .describe('ID of the Connect application that created the charge.')
        .optional(),
      /** The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details. */
      application_fee: z
        .union([z.string().max(5000), ApplicationFeeSchema])
        .nullable()
        .describe(
          'The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.'
        )
        .optional(),
      /** The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details. */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.'
        )
        .optional(),
      /** ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).'
        )
        .optional(),
      billing_details: BillingDetailsSchema,
      /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments. */
      calculated_statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments."
        )
        .optional(),
      /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
      captured: z
        .boolean()
        .describe(
          'If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** ID of the customer this charge is for if one exists. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe('ID of the customer this charge is for if one exists.')
        .optional(),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(40_000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** Whether the charge has been disputed. */
      disputed: z.boolean().describe('Whether the charge has been disputed.'),
      /** ID of the balance transaction that describes the reversal of the balance on your account due to payment failure. */
      failure_balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.'
        )
        .optional(),
      /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes). */
      failure_code: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).'
        )
        .optional(),
      /** Message to user further explaining reason for charge failure if available. */
      failure_message: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Message to user further explaining reason for charge failure if available.'
        )
        .optional(),
      /** Information on fraud assessments for the charge. */
      fraud_details: ChargeFraudDetailsSchema.nullable()
        .describe('Information on fraud assessments for the charge.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** ID of the invoice this charge is for if one exists. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe('ID of the invoice this charge is for if one exists.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('charge')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.'
        )
        .optional(),
      /** Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
      outcome: ChargeOutcomeSchema.nullable()
        .describe(
          'Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.'
        )
        .optional(),
      /** `true` if the charge succeeded, or was successfully authorized for later capture. */
      paid: z
        .boolean()
        .describe(
          '`true` if the charge succeeded, or was successfully authorized for later capture.'
        ),
      /** ID of the PaymentIntent associated with this charge, if one exists. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .nullable()
        .describe(
          'ID of the PaymentIntent associated with this charge, if one exists.'
        )
        .optional(),
      /** ID of the payment method used in this charge. */
      payment_method: z
        .string()
        .max(5000)
        .nullable()
        .describe('ID of the payment method used in this charge.')
        .optional(),
      /** Details about the payment method at the time of the transaction. */
      payment_method_details: PaymentMethodDetailsSchema.nullable()
        .describe(
          'Details about the payment method at the time of the transaction.'
        )
        .optional(),
      radar_options: RadarRadarOptionsSchema.optional(),
      /** This is the email address that the receipt for this charge was sent to. */
      receipt_email: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'This is the email address that the receipt for this charge was sent to.'
        )
        .optional(),
      /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
      receipt_number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.'
        )
        .optional(),
      /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
      receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.'
        )
        .optional(),
      /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
      refunded: z
        .boolean()
        .describe(
          'Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.'
        ),
      /** A list of refunds that have been applied to the charge. */
      refunds: z
        .object({
          /** Details about each object. */
          data: z.array(RefundSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .nullable()
        .describe('A list of refunds that have been applied to the charge.')
        .optional(),
      /** ID of the review associated with this charge if one exists. */
      review: z
        .union([z.string().max(5000), ReviewSchema])
        .nullable()
        .describe('ID of the review associated with this charge if one exists.')
        .optional(),
      /** Shipping information for the charge. */
      shipping: ShippingSchema.nullable()
        .describe('Shipping information for the charge.')
        .optional(),
      /** The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details. */
      source_transfer: z
        .union([z.string().max(5000), TransferSchema])
        .nullable()
        .describe(
          'The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details.'
        )
        .optional(),
      /**
       * For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
       *
       * For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
       */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).\n\nFor a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix."
        )
        .optional(),
      /** Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor. */
      statement_descriptor_suffix: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor."
        )
        .optional(),
      /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
      status: z
        .enum(['failed', 'pending', 'succeeded'])
        .describe(
          'The status of the payment is either `succeeded`, `pending`, or `failed`.'
        ),
      /** ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
      transfer: z
        .union([z.string().max(5000), TransferSchema])
        .describe(
          'ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).'
        )
        .optional(),
      /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      transfer_data: ChargeTransferDataSchema.nullable()
        .describe(
          'An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.'
        )
        .optional(),
      /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
      transfer_group: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.'
        )
        .optional()
    })
    .describe(
      'The `Charge` object represents a single attempt to move money into your Stripe account.\nPaymentIntent confirmation is the most common way to create Charges, but transferring\nmoney to a different Stripe account through Connect also creates Charges.\nSome legacy payment flows create Charges directly, which is not recommended for new integrations.'
    )
  export type Charge = z.infer<typeof ChargeSchema>

  export const ApplicationFeeSchema = z.object({
    /** ID of the Stripe account this fee was taken from. */
    account: z
      .union([z.string().max(5000), AccountSchema])
      .describe('ID of the Stripe account this fee was taken from.'),
    /** Amount earned, in cents (or local equivalent). */
    amount: z
      .number()
      .int()
      .describe('Amount earned, in cents (or local equivalent).'),
    /** Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
    amount_refunded: z
      .number()
      .int()
      .describe(
        'Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)'
      ),
    /** ID of the Connect application that earned the fee. */
    application: z
      .union([z.string().max(5000), ApplicationSchema])
      .describe('ID of the Connect application that earned the fee.'),
    /** Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
    balance_transaction: z
      .union([z.string().max(5000), BalanceTransactionSchema])
      .nullable()
      .describe(
        'Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).'
      )
      .optional(),
    /** ID of the charge that the application fee was taken from. */
    charge: z
      .union([z.string().max(5000), ChargeSchema])
      .describe('ID of the charge that the application fee was taken from.'),
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: z
      .number()
      .int()
      .describe(
        'Time at which the object was created. Measured in seconds since the Unix epoch.'
      ),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** Polymorphic source of the application fee. Includes the ID of the object the application fee was created from. */
    fee_source: PlatformEarningFeeSourceSchema.nullable()
      .describe(
        'Polymorphic source of the application fee. Includes the ID of the object the application fee was created from.'
      )
      .optional(),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('application_fee')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
    originating_transaction: z
      .union([z.string().max(5000), ChargeSchema])
      .nullable()
      .describe(
        'ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.'
      )
      .optional(),
    /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
    refunded: z
      .boolean()
      .describe(
        'Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.'
      ),
    /** A list of refunds that have been applied to the fee. */
    refunds: z
      .object({
        /** Details about each object. */
        data: z.array(FeeRefundSchema).describe('Details about each object.'),
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: z
          .boolean()
          .describe(
            'True if this list has another page of items after this one that can be fetched.'
          ),
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: z
          .literal('list')
          .describe(
            "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
          ),
        /** The URL where this list can be accessed. */
        url: z
          .string()
          .max(5000)
          .describe('The URL where this list can be accessed.')
      })
      .describe('A list of refunds that have been applied to the fee.')
  })
  export type ApplicationFee = z.infer<typeof ApplicationFeeSchema>

  /**
   * Balance transactions represent funds moving through your Stripe account.
   * Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
   *
   * Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
   */
  export const BalanceTransactionSchema = z
    .object({
      /** Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party. */
      amount: z
        .number()
        .int()
        .describe(
          'Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.'
        ),
      /** The date that the transaction's net funds become available in the Stripe balance. */
      available_on: z
        .number()
        .int()
        .describe(
          "The date that the transaction's net funds become available in the Stripe balance."
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`. */
      exchange_rate: z
        .number()
        .nullable()
        .describe(
          "If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`."
        )
        .optional(),
      /** Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed. */
      fee: z
        .number()
        .int()
        .describe(
          'Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.'
        ),
      /** Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction. */
      fee_details: z
        .array(FeeSchema)
        .describe(
          'Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee` */
      net: z
        .number()
        .int()
        .describe(
          'Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('balance_transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective. */
      reporting_category: z
        .string()
        .max(5000)
        .describe(
          'Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective.'
        ),
      /** This transaction relates to the Stripe object. */
      source: z
        .union([
          z.string().max(5000),
          ApplicationFeeSchema,
          ChargeSchema,
          ConnectCollectionTransferSchema,
          CustomerCashBalanceTransactionSchema,
          DisputeSchema,
          FeeRefundSchema,
          IssuingAuthorizationSchema,
          IssuingDisputeSchema,
          IssuingTransactionSchema,
          PayoutSchema,
          RefundSchema,
          ReserveTransactionSchema,
          TaxDeductedAtSourceSchema,
          TopupSchema,
          TransferSchema,
          TransferReversalSchema
        ])
        .nullable()
        .describe('This transaction relates to the Stripe object.')
        .optional(),
      /** The transaction's net funds status in the Stripe balance, which are either `available` or `pending`. */
      status: z
        .string()
        .max(5000)
        .describe(
          "The transaction's net funds status in the Stripe balance, which are either `available` or `pending`."
        ),
      /** Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead. */
      type: z
        .enum([
          'adjustment',
          'advance',
          'advance_funding',
          'anticipation_repayment',
          'application_fee',
          'application_fee_refund',
          'charge',
          'climate_order_purchase',
          'climate_order_refund',
          'connect_collection_transfer',
          'contribution',
          'issuing_authorization_hold',
          'issuing_authorization_release',
          'issuing_dispute',
          'issuing_transaction',
          'obligation_outbound',
          'obligation_reversal_inbound',
          'payment',
          'payment_failure_refund',
          'payment_network_reserve_hold',
          'payment_network_reserve_release',
          'payment_refund',
          'payment_reversal',
          'payment_unreconciled',
          'payout',
          'payout_cancel',
          'payout_failure',
          'payout_minimum_balance_hold',
          'payout_minimum_balance_release',
          'refund',
          'refund_failure',
          'reserve_transaction',
          'reserved_funds',
          'stripe_fee',
          'stripe_fx_fee',
          'tax_fee',
          'topup',
          'topup_reversal',
          'transfer',
          'transfer_cancel',
          'transfer_failure',
          'transfer_refund'
        ])
        .describe(
          'Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.'
        )
    })
    .describe(
      'Balance transactions represent funds moving through your Stripe account.\nStripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)'
    )
  export type BalanceTransaction = z.infer<typeof BalanceTransactionSchema>

  export const ConnectCollectionTransferSchema = z.object({
    /** Amount transferred, in cents (or local equivalent). */
    amount: z
      .number()
      .int()
      .describe('Amount transferred, in cents (or local equivalent).'),
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      ),
    /** ID of the account that funds are being collected for. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe('ID of the account that funds are being collected for.'),
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: z
      .boolean()
      .describe(
        'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('connect_collection_transfer')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      )
  })
  export type ConnectCollectionTransfer = z.infer<
    typeof ConnectCollectionTransferSchema
  >

  /**
   * Customers with certain payments enabled have a cash balance, representing funds that were paid
   * by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
   * represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
   * to payments, and refunds to the customer.
   */
  export const CustomerCashBalanceTransactionSchema = z
    .object({
      adjusted_for_overdraft:
        CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftSchema.optional(),
      applied_to_payment:
        CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The customer whose available cash balance changed as a result of this transaction. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .describe(
          'The customer whose available cash balance changed as a result of this transaction.'
        ),
      /** The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      ending_balance: z
        .number()
        .int()
        .describe(
          'The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        ),
      funded:
        CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance. */
      net_amount: z
        .number()
        .int()
        .describe(
          'The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('customer_cash_balance_transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      refunded_from_payment:
        CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionSchema.optional(),
      transferred_to_balance:
        CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalanceSchema.optional(),
      /** The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types. */
      type: z
        .enum([
          'adjusted_for_overdraft',
          'applied_to_payment',
          'funded',
          'funding_reversed',
          'refunded_from_payment',
          'return_canceled',
          'return_initiated',
          'transferred_to_balance',
          'unapplied_from_payment'
        ])
        .describe(
          'The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.'
        ),
      unapplied_from_payment:
        CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionSchema.optional()
    })
    .describe(
      'Customers with certain payments enabled have a cash balance, representing funds that were paid\nby the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions\nrepresent when funds are moved into or out of this balance. This includes funding by the customer, allocation\nto payments, and refunds to the customer.'
    )
  export type CustomerCashBalanceTransaction = z.infer<
    typeof CustomerCashBalanceTransactionSchema
  >

  export const CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftSchema =
    z.object({
      /** The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .describe(
          'The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance.'
        ),
      /** The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds. */
      linked_transaction: z
        .union([z.string().max(5000), CustomerCashBalanceTransactionSchema])
        .describe(
          'The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.'
        )
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraftSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionSchema =
    z.object({
      /** The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe(
          'The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to.'
        )
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransactionSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionSchema =
    z.object({
      /** The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance. */
      refund: z
        .union([z.string().max(5000), RefundSchema])
        .describe(
          "The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance."
        )
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionSchema
    >

  /**
   * Refund objects allow you to refund a previously created charge that isn't
   * refunded yet. Funds are refunded to the credit or debit card that's
   * initially charged.
   *
   * Related guide: [Refunds](https://stripe.com/docs/refunds)
   */
  export const RefundSchema = z
    .object({
      /** Amount, in cents (or local equivalent). */
      amount: z
        .number()
        .int()
        .describe('Amount, in cents (or local equivalent).'),
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'Balance transaction that describes the impact on your account balance.'
        )
        .optional(),
      /** ID of the charge that's refunded. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .nullable()
        .describe("ID of the charge that's refunded.")
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only). */
      description: z
        .string()
        .max(5000)
        .describe(
          'An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).'
        )
        .optional(),
      destination_details: RefundDestinationDetailsSchema.optional(),
      /** After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
      failure_balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .describe(
          'After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.'
        )
        .optional(),
      /** Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`. */
      failure_reason: z
        .string()
        .max(5000)
        .describe(
          'Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions. */
      instructions_email: z
        .string()
        .max(5000)
        .describe(
          'For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      next_action: RefundNextActionSchema.optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('refund')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the PaymentIntent that's refunded. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .nullable()
        .describe("ID of the PaymentIntent that's refunded.")
        .optional(),
      /** Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
      reason: z
        .enum([
          'duplicate',
          'expired_uncaptured_charge',
          'fraudulent',
          'requested_by_customer'
        ])
        .nullable()
        .describe(
          'Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).'
        )
        .optional(),
      /** This is the transaction number that appears on email receipts sent for this refund. */
      receipt_number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'This is the transaction number that appears on email receipts sent for this refund.'
        )
        .optional(),
      /** The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account. */
      source_transfer_reversal: z
        .union([z.string().max(5000), TransferReversalSchema])
        .nullable()
        .describe(
          "The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account."
        )
        .optional(),
      /** Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds). */
      status: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).'
        )
        .optional(),
      /** This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter. */
      transfer_reversal: z
        .union([z.string().max(5000), TransferReversalSchema])
        .nullable()
        .describe(
          'This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.'
        )
        .optional()
    })
    .describe(
      "Refund objects allow you to refund a previously created charge that isn't\nrefunded yet. Funds are refunded to the credit or debit card that's\ninitially charged.\n\nRelated guide: [Refunds](https://stripe.com/docs/refunds)"
    )
  export type Refund = z.infer<typeof RefundSchema>

  /**
   * [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
   * connected account, either entirely or partially, and can also specify whether
   * to refund any related application fees. Transfer reversals add to the
   * platform's balance and subtract from the destination account's balance.
   *
   * Reversing a transfer that was made for a [destination
   * charge](/docs/connect/destination-charges) is allowed only up to the amount of
   * the charge. It is possible to reverse a
   * [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
   * transfer only if the destination account has enough balance to cover the
   * reversal.
   *
   * Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
   */
  export const TransferReversalSchema = z
    .object({
      /** Amount, in cents (or local equivalent). */
      amount: z
        .number()
        .int()
        .describe('Amount, in cents (or local equivalent).'),
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'Balance transaction that describes the impact on your account balance.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Linked payment refund for the transfer reversal. */
      destination_payment_refund: z
        .union([z.string().max(5000), RefundSchema])
        .nullable()
        .describe('Linked payment refund for the transfer reversal.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('transfer_reversal')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the refund responsible for the transfer reversal. */
      source_refund: z
        .union([z.string().max(5000), RefundSchema])
        .nullable()
        .describe('ID of the refund responsible for the transfer reversal.')
        .optional(),
      /** ID of the transfer that was reversed. */
      transfer: z
        .union([z.string().max(5000), TransferSchema])
        .describe('ID of the transfer that was reversed.')
    })
    .describe(
      "[Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a\nconnected account, either entirely or partially, and can also specify whether\nto refund any related application fees. Transfer reversals add to the\nplatform's balance and subtract from the destination account's balance.\n\nReversing a transfer that was made for a [destination\ncharge](/docs/connect/destination-charges) is allowed only up to the amount of\nthe charge. It is possible to reverse a\n[transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)\ntransfer only if the destination account has enough balance to cover the\nreversal.\n\nRelated guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)"
    )
  export type TransferReversal = z.infer<typeof TransferReversalSchema>

  /**
   * A `Transfer` object is created when you move funds between Stripe accounts as
   * part of Connect.
   *
   * Before April 6, 2017, transfers also represented movement of funds from a
   * Stripe account to a card or bank account. This behavior has since been split
   * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
   * information, read about the
   * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
   *
   * Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
   */
  export const TransferSchema = z
    .object({
      /** Amount in cents (or local equivalent) to be transferred. */
      amount: z
        .number()
        .int()
        .describe('Amount in cents (or local equivalent) to be transferred.'),
      /** Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
      amount_reversed: z
        .number()
        .int()
        .describe(
          'Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).'
        ),
      /** Balance transaction that describes the impact of this transfer on your account balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'Balance transaction that describes the impact of this transfer on your account balance.'
        )
        .optional(),
      /** Time that this record of the transfer was first created. */
      created: z
        .number()
        .int()
        .describe('Time that this record of the transfer was first created.'),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** ID of the Stripe account the transfer was sent to. */
      destination: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe('ID of the Stripe account the transfer was sent to.')
        .optional(),
      /** If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
      destination_payment: z
        .union([z.string().max(5000), ChargeSchema])
        .describe(
          'If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('transfer')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** A list of reversals that have been applied to the transfer. */
      reversals: z
        .object({
          /** Details about each object. */
          data: z
            .array(TransferReversalSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe(
          'A list of reversals that have been applied to the transfer.'
        ),
      /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
      reversed: z
        .boolean()
        .describe(
          'Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.'
        ),
      /** ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance. */
      source_transaction: z
        .union([z.string().max(5000), ChargeSchema])
        .nullable()
        .describe(
          'ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance.'
        )
        .optional(),
      /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
      source_type: z
        .string()
        .max(5000)
        .describe(
          'The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.'
        )
        .optional(),
      /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details. */
      transfer_group: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.'
        )
        .optional()
    })
    .describe(
      'A `Transfer` object is created when you move funds between Stripe accounts as\npart of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a\nStripe account to a card or bank account. This behavior has since been split\nout into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more\ninformation, read about the\n[transfer/payout split](https://stripe.com/docs/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)'
    )
  export type Transfer = z.infer<typeof TransferSchema>

  export const CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalanceSchema =
    z.object({
      /** The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .describe(
          'The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance.'
        )
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalanceSchema
    >

  export const CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionSchema =
    z.object({
      /** The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe(
          'The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from.'
        )
    })
  export type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction =
    z.infer<
      typeof CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionSchema
    >

  /**
   * A dispute occurs when a customer questions your charge with their card issuer.
   * When this happens, you have the opportunity to respond to the dispute with
   * evidence that shows that the charge is legitimate.
   *
   * Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
   */
  export const DisputeSchema = z
    .object({
      /** Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed). */
      amount: z
        .number()
        .int()
        .describe(
          'Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).'
        ),
      /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
      balance_transactions: z
        .array(BalanceTransactionSchema)
        .describe(
          'List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.'
        ),
      /** ID of the charge that's disputed. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .describe("ID of the charge that's disputed."),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** List of eligibility types that are included in `enhanced_evidence`. */
      enhanced_eligibility_types: z
        .array(z.literal('visa_compelling_evidence_3'))
        .describe(
          'List of eligibility types that are included in `enhanced_evidence`.'
        ),
      evidence: DisputeEvidenceSchema,
      evidence_details: DisputeEvidenceDetailsSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute. */
      is_charge_refundable: z
        .boolean()
        .describe(
          "If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute."
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('dispute')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the PaymentIntent that's disputed. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .nullable()
        .describe("ID of the PaymentIntent that's disputed.")
        .optional(),
      payment_method_details: DisputePaymentMethodDetailsSchema.optional(),
      /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
      reason: z
        .string()
        .max(5000)
        .describe(
          'Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).'
        ),
      /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`. */
      status: z
        .enum([
          'lost',
          'needs_response',
          'under_review',
          'warning_closed',
          'warning_needs_response',
          'warning_under_review',
          'won'
        ])
        .describe(
          'Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.'
        )
    })
    .describe(
      'A dispute occurs when a customer questions your charge with their card issuer.\nWhen this happens, you have the opportunity to respond to the dispute with\nevidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://stripe.com/docs/disputes)'
    )
  export type Dispute = z.infer<typeof DisputeSchema>

  /**
   * `Application Fee Refund` objects allow you to refund an application fee that
   * has previously been created but not yet refunded. Funds will be refunded to
   * the Stripe account from which the fee was originally collected.
   *
   * Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
   */
  export const FeeRefundSchema = z
    .object({
      /** Amount, in cents (or local equivalent). */
      amount: z
        .number()
        .int()
        .describe('Amount, in cents (or local equivalent).'),
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'Balance transaction that describes the impact on your account balance.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** ID of the application fee that was refunded. */
      fee: z
        .union([z.string().max(5000), ApplicationFeeSchema])
        .describe('ID of the application fee that was refunded.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('fee_refund')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      '`Application Fee Refund` objects allow you to refund an application fee that\nhas previously been created but not yet refunded. Funds will be refunded to\nthe Stripe account from which the fee was originally collected.\n\nRelated guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)'
    )
  export type FeeRefund = z.infer<typeof FeeRefundSchema>

  /**
   * When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
   * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
   * purchase to be completed successfully.
   *
   * Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
   */
  export const IssuingAuthorizationSchema = z
    .object({
      /** The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different. */
      amount: z
        .number()
        .int()
        .describe(
          'The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.'
        ),
      /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: IssuingAuthorizationAmountDetailsSchema.nullable()
        .describe(
          'Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        )
        .optional(),
      /** Whether the authorization has been approved. */
      approved: z
        .boolean()
        .describe('Whether the authorization has been approved.'),
      /** How the card details were provided. */
      authorization_method: z
        .enum(['chip', 'contactless', 'keyed_in', 'online', 'swipe'])
        .describe('How the card details were provided.'),
      /** List of balance transactions associated with this authorization. */
      balance_transactions: z
        .array(BalanceTransactionSchema)
        .describe(
          'List of balance transactions associated with this authorization.'
        ),
      card: IssuingCardSchema,
      /** The cardholder to whom this authorization belongs. */
      cardholder: z
        .union([z.string().max(5000), IssuingCardholderSchema])
        .nullable()
        .describe('The cardholder to whom this authorization belongs.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Fleet-specific information for authorizations using Fleet cards. */
      fleet: IssuingAuthorizationFleetDataSchema.nullable()
        .describe(
          'Fleet-specific information for authorizations using Fleet cards.'
        )
        .optional(),
      /** Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons. */
      fraud_challenges: z
        .array(IssuingAuthorizationFraudChallengeSchema)
        .nullable()
        .describe(
          'Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons.'
        )
        .optional(),
      /** Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. */
      fuel: IssuingAuthorizationFuelDataSchema.nullable()
        .describe(
          'Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different. */
      merchant_amount: z
        .number()
        .int()
        .describe(
          'The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.'
        ),
      /** The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      merchant_currency: z
        .string()
        .describe(
          'The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      merchant_data: IssuingAuthorizationMerchantDataSchema,
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** Details about the authorization, such as identifiers, set by the card network. */
      network_data: IssuingAuthorizationNetworkDataSchema.nullable()
        .describe(
          'Details about the authorization, such as identifiers, set by the card network.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.authorization')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
      pending_request: IssuingAuthorizationPendingRequestSchema.nullable()
        .describe(
          'The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.'
        )
        .optional(),
      /** History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined. */
      request_history: z
        .array(IssuingAuthorizationRequestSchema)
        .describe(
          'History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.'
        ),
      /** The current status of the authorization in its lifecycle. */
      status: z
        .enum(['closed', 'pending', 'reversed'])
        .describe('The current status of the authorization in its lifecycle.'),
      /** [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null. */
      token: z
        .union([z.string().max(5000), IssuingTokenSchema])
        .nullable()
        .describe(
          '[Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null.'
        )
        .optional(),
      /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
      transactions: z
        .array(IssuingTransactionSchema)
        .describe(
          'List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.'
        ),
      /** [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts). */
      treasury: IssuingAuthorizationTreasurySchema.nullable()
        .describe(
          '[Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).'
        )
        .optional(),
      verification_data: IssuingAuthorizationVerificationDataSchema,
      /** Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant. */
      verified_by_fraud_challenge: z
        .boolean()
        .nullable()
        .describe(
          'Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant.'
        )
        .optional(),
      /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized. */
      wallet: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.'
        )
        .optional()
    })
    .describe(
      'When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`\nobject is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the\npurchase to be completed successfully.\n\nRelated guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)'
    )
  export type IssuingAuthorization = z.infer<typeof IssuingAuthorizationSchema>

  /**
   * Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
   * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
   * `Transaction` object.
   *
   * Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
   */
  export const IssuingTransactionSchema = z
    .object({
      /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount: z
        .number()
        .int()
        .describe(
          'The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        ),
      /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount_details: IssuingTransactionAmountDetailsSchema.nullable()
        .describe(
          'Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).'
        )
        .optional(),
      /** The `Authorization` object that led to this transaction. */
      authorization: z
        .union([z.string().max(5000), IssuingAuthorizationSchema])
        .nullable()
        .describe('The `Authorization` object that led to this transaction.')
        .optional(),
      /** ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.'
        )
        .optional(),
      /** The card used to make this transaction. */
      card: z
        .union([z.string().max(5000), IssuingCardSchema])
        .describe('The card used to make this transaction.'),
      /** The cardholder to whom this transaction belongs. */
      cardholder: z
        .union([z.string().max(5000), IssuingCardholderSchema])
        .nullable()
        .describe('The cardholder to whom this transaction belongs.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** If you've disputed the transaction, the ID of the dispute. */
      dispute: z
        .union([z.string().max(5000), IssuingDisputeSchema])
        .nullable()
        .describe("If you've disputed the transaction, the ID of the dispute.")
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
      merchant_amount: z
        .number()
        .int()
        .describe(
          'The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.'
        ),
      /** The currency with which the merchant is taking payment. */
      merchant_currency: z
        .string()
        .describe('The currency with which the merchant is taking payment.'),
      merchant_data: IssuingAuthorizationMerchantDataSchema,
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** Details about the transaction, such as processing dates, set by the card network. */
      network_data: IssuingTransactionNetworkDataSchema.nullable()
        .describe(
          'Details about the transaction, such as processing dates, set by the card network.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Additional purchase information that is optionally provided by the merchant. */
      purchase_details: IssuingTransactionPurchaseDetailsSchema.nullable()
        .describe(
          'Additional purchase information that is optionally provided by the merchant.'
        )
        .optional(),
      /** [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null. */
      token: z
        .union([z.string().max(5000), IssuingTokenSchema])
        .nullable()
        .describe(
          '[Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null.'
        )
        .optional(),
      /** [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
      treasury: IssuingTransactionTreasurySchema.nullable()
        .describe(
          '[Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts'
        )
        .optional(),
      /** The nature of the transaction. */
      type: z
        .enum(['capture', 'refund'])
        .describe('The nature of the transaction.'),
      /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
      wallet: z
        .enum(['apple_pay', 'google_pay', 'samsung_pay'])
        .nullable()
        .describe(
          'The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.'
        )
        .optional()
    })
    .describe(
      'Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving\nyour Stripe account, such as a completed purchase or refund, is represented by an Issuing\n`Transaction` object.\n\nRelated guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)'
    )
  export type IssuingTransaction = z.infer<typeof IssuingTransactionSchema>

  /**
   * As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
   *
   * Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
   */
  export const IssuingDisputeSchema = z
    .object({
      /** Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
      amount: z
        .number()
        .int()
        .describe(
          "Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation)."
        ),
      /** List of balance transactions associated with the dispute. */
      balance_transactions: z
        .array(BalanceTransactionSchema)
        .nullable()
        .describe('List of balance transactions associated with the dispute.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The currency the `transaction` was made in. */
      currency: z
        .string()
        .describe('The currency the `transaction` was made in.'),
      evidence: IssuingDisputeEvidenceSchema,
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values. */
      loss_reason: z
        .enum([
          'cardholder_authentication_issuer_liability',
          'eci5_token_transaction_with_tavv',
          'excess_disputes_in_timeframe',
          'has_not_met_the_minimum_dispute_amount_requirements',
          'invalid_duplicate_dispute',
          'invalid_incorrect_amount_dispute',
          'invalid_no_authorization',
          'invalid_use_of_disputes',
          'merchandise_delivered_or_shipped',
          'merchandise_or_service_as_described',
          'not_cancelled',
          'other',
          'refund_issued',
          'submitted_beyond_allowable_time_limit',
          'transaction_3ds_required',
          'transaction_approved_after_prior_fraud_dispute',
          'transaction_authorized',
          'transaction_electronically_read',
          'transaction_qualifies_for_visa_easy_payment_service',
          'transaction_unattended'
        ])
        .describe(
          'The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values.'
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('issuing.dispute')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Current status of the dispute. */
      status: z
        .enum(['expired', 'lost', 'submitted', 'unsubmitted', 'won'])
        .describe('Current status of the dispute.'),
      /** The transaction being disputed. */
      transaction: z
        .union([z.string().max(5000), IssuingTransactionSchema])
        .describe('The transaction being disputed.'),
      /** [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts */
      treasury: IssuingDisputeTreasurySchema.nullable()
        .describe(
          '[Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts'
        )
        .optional()
    })
    .describe(
      'As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.\n\nRelated guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)'
    )
  export type IssuingDispute = z.infer<typeof IssuingDisputeSchema>

  /**
   * A `Payout` object is created when you receive funds from Stripe, or when you
   * initiate a payout to either a bank account or debit card of a [connected
   * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
   * and list all payouts. Payouts are made on [varying
   * schedules](/docs/connect/manage-payout-schedule), depending on your country and
   * industry.
   *
   * Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
   */
  export const PayoutSchema = z
    .object({
      /** The amount (in cents (or local equivalent)) that transfers to your bank account or debit card. */
      amount: z
        .number()
        .int()
        .describe(
          'The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.'
        ),
      /** The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details. */
      application_fee: z
        .union([z.string().max(5000), ApplicationFeeSchema])
        .nullable()
        .describe(
          'The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.'
        )
        .optional(),
      /** The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details. */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.'
        )
        .optional(),
      /** Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays. */
      arrival_date: z
        .number()
        .int()
        .describe(
          'Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.'
        ),
      /** Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
      automatic: z
        .boolean()
        .describe(
          "Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts)."
        ),
      /** ID of the balance transaction that describes the impact of this payout on your account balance. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'ID of the balance transaction that describes the impact of this payout on your account balance.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** ID of the bank account or card the payout is sent to. */
      destination: z
        .union([
          z.string().max(5000),
          BankAccountSchema,
          CardSchema,
          DeletedBankAccountSchema,
          DeletedCardSchema
        ])
        .nullable()
        .describe('ID of the bank account or card the payout is sent to.')
        .optional(),
      /** If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance. */
      failure_balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.'
        )
        .optional(),
      /** Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures). */
      failure_code: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures).'
        )
        .optional(),
      /** Message that provides the reason for a payout failure, if available. */
      failure_message: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Message that provides the reason for a payout failure, if available.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks). */
      method: z
        .string()
        .max(5000)
        .describe(
          'The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payout')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** If the payout reverses another, this is the ID of the original payout. */
      original_payout: z
        .union([
          z.string().max(5000),
          // TODO: Support recursive types for `PayoutSchema`.
          z.any()
        ])
        .nullable()
        .describe(
          'If the payout reverses another, this is the ID of the original payout.'
        )
        .optional(),
      /** If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout. */
      reconciliation_status: z
        .enum(['completed', 'in_progress', 'not_applicable'])
        .describe(
          'If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.'
        ),
      /** If the payout reverses, this is the ID of the payout that reverses this payout. */
      reversed_by: z
        .union([
          z.string().max(5000),
          // TODO: Support recursive types for `PayoutSchema`.
          z.any()
        ])
        .nullable()
        .describe(
          'If the payout reverses, this is the ID of the payout that reverses this payout.'
        )
        .optional(),
      /** The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`. */
      source_type: z
        .string()
        .max(5000)
        .describe(
          'The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`.'
        ),
      /** Extra information about a payout that displays on the user's bank statement. */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Extra information about a payout that displays on the user's bank statement."
        )
        .optional(),
      /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`. */
      status: z
        .string()
        .max(5000)
        .describe(
          "Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`."
        ),
      /** A value that generates from the beneficiary's bank that allows users to track payouts with their bank. Banks might call this a "reference number" or something similar. */
      trace_id: PayoutsTraceIdSchema.nullable()
        .describe(
          'A value that generates from the beneficiary\'s bank that allows users to track payouts with their bank. Banks might call this a "reference number" or something similar.'
        )
        .optional(),
      /** Can be `bank_account` or `card`. */
      type: z
        .enum(['bank_account', 'card'])
        .describe('Can be `bank_account` or `card`.')
    })
    .describe(
      'A `Payout` object is created when you receive funds from Stripe, or when you\ninitiate a payout to either a bank account or debit card of a [connected\nStripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,\nand list all payouts. Payouts are made on [varying\nschedules](/docs/connect/manage-payout-schedule), depending on your country and\nindustry.\n\nRelated guide: [Receiving payouts](https://stripe.com/docs/payouts)'
    )
  export type Payout = z.infer<typeof PayoutSchema>

  /**
   * To top up your Stripe balance, you create a top-up object. You can retrieve
   * individual top-ups, as well as list all top-ups. Top-ups are identified by a
   * unique, random ID.
   *
   * Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
   */
  export const TopupSchema = z
    .object({
      /** Amount transferred. */
      amount: z.number().int().describe('Amount transferred.'),
      /** ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
      balance_transaction: z
        .union([z.string().max(5000), BalanceTransactionSchema])
        .nullable()
        .describe(
          'ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
      expected_availability_date: z
        .number()
        .int()
        .nullable()
        .describe(
          'Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.'
        )
        .optional(),
      /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      failure_code: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).'
        )
        .optional(),
      /** Message to user further explaining reason for top-up failure if available. */
      failure_message: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Message to user further explaining reason for top-up failure if available.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('topup')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The source field is deprecated. It might not always be present in the API response. */
      source: SourceSchema.nullable()
        .describe(
          'The source field is deprecated. It might not always be present in the API response.'
        )
        .optional(),
      /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
      statement_descriptor: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter."
        )
        .optional(),
      /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
      status: z
        .enum(['canceled', 'failed', 'pending', 'reversed', 'succeeded'])
        .describe(
          'The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.'
        ),
      /** A string that identifies this top-up as part of a group. */
      transfer_group: z
        .string()
        .max(5000)
        .nullable()
        .describe('A string that identifies this top-up as part of a group.')
        .optional()
    })
    .describe(
      'To top up your Stripe balance, you create a top-up object. You can retrieve\nindividual top-ups, as well as list all top-ups. Top-ups are identified by a\nunique, random ID.\n\nRelated guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)'
    )
  export type Topup = z.infer<typeof TopupSchema>

  export const PaymentMethodDetailsSchema = z.object({
    ach_credit_transfer: PaymentMethodDetailsAchCreditTransferSchema.optional(),
    ach_debit: PaymentMethodDetailsAchDebitSchema.optional(),
    acss_debit: PaymentMethodDetailsAcssDebitSchema.optional(),
    affirm: PaymentMethodDetailsAffirmSchema.optional(),
    afterpay_clearpay: PaymentMethodDetailsAfterpayClearpaySchema.optional(),
    alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetailsSchema.optional(),
    alma: PaymentMethodDetailsAlmaSchema.optional(),
    amazon_pay: PaymentMethodDetailsAmazonPaySchema.optional(),
    au_becs_debit: PaymentMethodDetailsAuBecsDebitSchema.optional(),
    bacs_debit: PaymentMethodDetailsBacsDebitSchema.optional(),
    bancontact: PaymentMethodDetailsBancontactSchema.optional(),
    blik: PaymentMethodDetailsBlikSchema.optional(),
    boleto: PaymentMethodDetailsBoletoSchema.optional(),
    card: PaymentMethodDetailsCardSchema.optional(),
    card_present: PaymentMethodDetailsCardPresentSchema.optional(),
    cashapp: PaymentMethodDetailsCashappSchema.optional(),
    customer_balance: PaymentMethodDetailsCustomerBalanceSchema.optional(),
    eps: PaymentMethodDetailsEpsSchema.optional(),
    fpx: PaymentMethodDetailsFpxSchema.optional(),
    giropay: PaymentMethodDetailsGiropaySchema.optional(),
    grabpay: PaymentMethodDetailsGrabpaySchema.optional(),
    ideal: PaymentMethodDetailsIdealSchema.optional(),
    interac_present: PaymentMethodDetailsInteracPresentSchema.optional(),
    kakao_pay: PaymentMethodDetailsKakaoPaySchema.optional(),
    klarna: PaymentMethodDetailsKlarnaSchema.optional(),
    konbini: PaymentMethodDetailsKonbiniSchema.optional(),
    kr_card: PaymentMethodDetailsKrCardSchema.optional(),
    link: PaymentMethodDetailsLinkSchema.optional(),
    mobilepay: PaymentMethodDetailsMobilepaySchema.optional(),
    multibanco: PaymentMethodDetailsMultibancoSchema.optional(),
    naver_pay: PaymentMethodDetailsNaverPaySchema.optional(),
    oxxo: PaymentMethodDetailsOxxoSchema.optional(),
    p24: PaymentMethodDetailsP24Schema.optional(),
    pay_by_bank: PaymentMethodDetailsPayByBankSchema.optional(),
    payco: PaymentMethodDetailsPaycoSchema.optional(),
    paynow: PaymentMethodDetailsPaynowSchema.optional(),
    paypal: PaymentMethodDetailsPaypalSchema.optional(),
    pix: PaymentMethodDetailsPixSchema.optional(),
    promptpay: PaymentMethodDetailsPromptpaySchema.optional(),
    revolut_pay: PaymentMethodDetailsRevolutPaySchema.optional(),
    samsung_pay: PaymentMethodDetailsSamsungPaySchema.optional(),
    sepa_debit: PaymentMethodDetailsSepaDebitSchema.optional(),
    sofort: PaymentMethodDetailsSofortSchema.optional(),
    stripe_account: PaymentMethodDetailsStripeAccountSchema.optional(),
    swish: PaymentMethodDetailsSwishSchema.optional(),
    twint: PaymentMethodDetailsTwintSchema.optional(),
    /**
     * The type of transaction-specific details of the payment method used in the payment. See [PaymentMethod.type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type) for the full list of possible types.
     * An additional hash is included on `payment_method_details` with a name matching this value.
     * It contains information specific to the payment method.
     */
    type: z
      .string()
      .max(5000)
      .describe(
        'The type of transaction-specific details of the payment method used in the payment. See [PaymentMethod.type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type) for the full list of possible types.\nAn additional hash is included on `payment_method_details` with a name matching this value.\nIt contains information specific to the payment method.'
      ),
    us_bank_account: PaymentMethodDetailsUsBankAccountSchema.optional(),
    wechat: PaymentMethodDetailsWechatSchema.optional(),
    wechat_pay: PaymentMethodDetailsWechatPaySchema.optional(),
    zip: PaymentMethodDetailsZipSchema.optional()
  })
  export type PaymentMethodDetails = z.infer<typeof PaymentMethodDetailsSchema>

  export const PaymentMethodDetailsBancontactSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Bank Identifier Code of the bank associated with the bank account. */
    bic: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Bank Identifier Code of the bank associated with the bank account.'
      )
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Preferred language of the Bancontact authorization page that the customer is redirected to.
     * Can be one of `en`, `de`, `fr`, or `nl`
     */
    preferred_language: z
      .enum(['de', 'en', 'fr', 'nl'])
      .nullable()
      .describe(
        'Preferred language of the Bancontact authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`'
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by Bancontact directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by Bancontact directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodDetailsBancontact = z.infer<
    typeof PaymentMethodDetailsBancontactSchema
  >

  export const PaymentMethodDetailsIdealSchema = z.object({
    /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`. */
    bank: z
      .enum([
        'abn_amro',
        'asn_bank',
        'bunq',
        'handelsbanken',
        'ing',
        'knab',
        'moneyou',
        'n26',
        'nn',
        'rabobank',
        'regiobank',
        'revolut',
        'sns_bank',
        'triodos_bank',
        'van_lanschot',
        'yoursafe'
      ])
      .nullable()
      .describe(
        "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`."
      )
      .optional(),
    /** The Bank Identifier Code of the customer's bank. */
    bic: z
      .enum([
        'ABNANL2A',
        'ASNBNL21',
        'BITSNL2A',
        'BUNQNL2A',
        'FVLBNL22',
        'HANDNL2A',
        'INGBNL2A',
        'KNABNL2H',
        'MOYONL21',
        'NNBANL2G',
        'NTSBDEB1',
        'RABONL2U',
        'RBRBNL21',
        'REVOIE23',
        'REVOLT21',
        'SNSBNL2A',
        'TRIONL2U'
      ])
      .nullable()
      .describe("The Bank Identifier Code of the customer's bank.")
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by iDEAL directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by iDEAL directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodDetailsIdeal = z.infer<
    typeof PaymentMethodDetailsIdealSchema
  >

  export const PaymentMethodDetailsSofortSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Bank Identifier Code of the bank associated with the bank account. */
    bic: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Bank Identifier Code of the bank associated with the bank account.'
      )
      .optional(),
    /** Two-letter ISO code representing the country the bank account is located in. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country the bank account is located in.'
      )
      .optional(),
    /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        'The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
    generated_sepa_debit_mandate: z
      .union([z.string().max(5000), MandateSchema])
      .nullable()
      .describe(
        'The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    iban_last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional(),
    /**
     * Preferred language of the SOFORT authorization page that the customer is redirected to.
     * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
     */
    preferred_language: z
      .enum(['de', 'en', 'es', 'fr', 'it', 'nl', 'pl'])
      .nullable()
      .describe(
        'Preferred language of the SOFORT authorization page that the customer is redirected to.\nCan be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`'
      )
      .optional(),
    /**
     * Owner's verified full name. Values are verified or provided by SOFORT directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    verified_name: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "Owner's verified full name. Values are verified or provided by SOFORT directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated."
      )
      .optional()
  })
  export type PaymentMethodDetailsSofort = z.infer<
    typeof PaymentMethodDetailsSofortSchema
  >

  export const PaymentMethodDetailsUsBankAccountSchema = z.object({
    /** Account holder type: individual or company. */
    account_holder_type: z
      .enum(['company', 'individual'])
      .nullable()
      .describe('Account holder type: individual or company.')
      .optional(),
    /** Account type: checkings or savings. Defaults to checking if omitted. */
    account_type: z
      .enum(['checking', 'savings'])
      .nullable()
      .describe(
        'Account type: checkings or savings. Defaults to checking if omitted.'
      )
      .optional(),
    /** Name of the bank associated with the bank account. */
    bank_name: z
      .string()
      .max(5000)
      .nullable()
      .describe('Name of the bank associated with the bank account.')
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Last four digits of the bank account number. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four digits of the bank account number.')
      .optional(),
    /** ID of the mandate used to make this payment. */
    mandate: z
      .union([z.string().max(5000), MandateSchema])
      .describe('ID of the mandate used to make this payment.')
      .optional(),
    /** Reference number to locate ACH payments with customer's bank. */
    payment_reference: z
      .string()
      .max(5000)
      .nullable()
      .describe("Reference number to locate ACH payments with customer's bank.")
      .optional(),
    /** Routing number of the bank account. */
    routing_number: z
      .string()
      .max(5000)
      .nullable()
      .describe('Routing number of the bank account.')
      .optional()
  })
  export type PaymentMethodDetailsUsBankAccount = z.infer<
    typeof PaymentMethodDetailsUsBankAccountSchema
  >

  /**
   * Reviews can be used to supplement automated fraud detection with human expertise.
   *
   * Learn more about [Radar](/radar) and reviewing payments
   * [here](https://stripe.com/docs/radar/reviews).
   */
  export const ReviewSchema = z
    .object({
      /** The ZIP or postal code of the card used, if applicable. */
      billing_zip: z
        .string()
        .max(5000)
        .nullable()
        .describe('The ZIP or postal code of the card used, if applicable.')
        .optional(),
      /** The charge associated with this review. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .nullable()
        .describe('The charge associated with this review.')
        .optional(),
      /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
      closed_reason: z
        .enum([
          'approved',
          'disputed',
          'redacted',
          'refunded',
          'refunded_as_fraud'
        ])
        .nullable()
        .describe(
          'The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The IP address where the payment originated. */
      ip_address: z
        .string()
        .max(5000)
        .nullable()
        .describe('The IP address where the payment originated.')
        .optional(),
      /** Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
      ip_address_location: RadarReviewResourceLocationSchema.nullable()
        .describe(
          'Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('review')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** If `true`, the review needs action. */
      open: z.boolean().describe('If `true`, the review needs action.'),
      /** The reason the review was opened. One of `rule` or `manual`. */
      opened_reason: z
        .enum(['manual', 'rule'])
        .describe(
          'The reason the review was opened. One of `rule` or `manual`.'
        ),
      /** The PaymentIntent ID associated with this review, if one exists. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe(
          'The PaymentIntent ID associated with this review, if one exists.'
        )
        .optional(),
      /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
      reason: z
        .string()
        .max(5000)
        .describe(
          'The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.'
        ),
      /** Information related to the browsing session of the user who initiated the payment. */
      session: RadarReviewResourceSessionSchema.nullable()
        .describe(
          'Information related to the browsing session of the user who initiated the payment.'
        )
        .optional()
    })
    .describe(
      'Reviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](/radar) and reviewing payments\n[here](https://stripe.com/docs/radar/reviews).'
    )
  export type Review = z.infer<typeof ReviewSchema>

  export const ChargeTransferDataSchema = z.object({
    /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.'
      )
      .optional(),
    /** ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.'
      )
  })
  export type ChargeTransferData = z.infer<typeof ChargeTransferDataSchema>

  export const DeletedDiscountSchema = z.object({
    /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
    checkout_session: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.'
      )
      .optional(),
    coupon: CouponSchema,
    /** The ID of the customer associated with this discount. */
    customer: z
      .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
      .nullable()
      .describe('The ID of the customer associated with this discount.')
      .optional(),
    /** Always true for a deleted object */
    deleted: z.literal(true).describe('Always true for a deleted object'),
    /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
    id: z
      .string()
      .max(5000)
      .describe(
        'The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.'
      ),
    /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
    invoice: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."
      )
      .optional(),
    /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
    invoice_item: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."
      )
      .optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('discount')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The promotion code applied to create this discount. */
    promotion_code: z
      .union([z.string().max(5000), PromotionCodeSchema])
      .nullable()
      .describe('The promotion code applied to create this discount.')
      .optional(),
    /** Date that the coupon was applied. */
    start: z.number().int().describe('Date that the coupon was applied.'),
    /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
    subscription: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The subscription that this coupon is applied to, if it is applied to a particular subscription.'
      )
      .optional(),
    /** The subscription item that this coupon is applied to, if it is applied to a particular subscription item. */
    subscription_item: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The subscription item that this coupon is applied to, if it is applied to a particular subscription item.'
      )
      .optional()
  })
  export type DeletedDiscount = z.infer<typeof DeletedDiscountSchema>

  export const InvoicesResourceFromInvoiceSchema = z.object({
    /** The relation between this invoice and the cloned invoice */
    action: z
      .string()
      .max(5000)
      .describe('The relation between this invoice and the cloned invoice'),
    /** The invoice that was cloned. */
    invoice: z
      .union([z.string().max(5000), InvoiceSchema])
      .describe('The invoice that was cloned.')
  })
  export type InvoicesResourceFromInvoice = z.infer<
    typeof InvoicesResourceFromInvoiceSchema
  >

  /**
   * Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
   *
   * Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
   */
  export const LineItemSchema = z
    .object({
      /** The amount, in cents (or local equivalent). */
      amount: z
        .number()
        .int()
        .describe('The amount, in cents (or local equivalent).'),
      /** The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts. */
      amount_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the amount for this line item, excluding all tax and discounts.'
        )
        .optional(),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** The amount of discount calculated per discount for this line item. */
      discount_amounts: z
        .array(DiscountsResourceDiscountAmountSchema)
        .nullable()
        .describe(
          'The amount of discount calculated per discount for this line item.'
        )
        .optional(),
      /** If true, discounts will apply to this line item. Always false for prorations. */
      discountable: z
        .boolean()
        .describe(
          'If true, discounts will apply to this line item. Always false for prorations.'
        ),
      /** The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(z.union([z.string().max(5000), DiscountSchema]))
        .describe(
          'The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The ID of the invoice that contains this line item. */
      invoice: z
        .string()
        .max(5000)
        .nullable()
        .describe('The ID of the invoice that contains this line item.')
        .optional(),
      /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
      invoice_item: z
        .union([z.string().max(5000), InvoiceitemSchema])
        .describe(
          'The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('line_item')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      period: InvoiceLineItemPeriodSchema,
      /** Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this line item. */
      pretax_credit_amounts: z
        .array(InvoicesResourcePretaxCreditAmountSchema)
        .nullable()
        .describe(
          'Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this line item.'
        )
        .optional(),
      /** The price of the line item. */
      price: PriceSchema.nullable()
        .describe('The price of the line item.')
        .optional(),
      /** Whether this is a proration. */
      proration: z.boolean().describe('Whether this is a proration.'),
      /** Additional details for proration line items */
      proration_details:
        InvoicesResourceLineItemsProrationDetailsSchema.nullable()
          .describe('Additional details for proration line items')
          .optional(),
      /** The quantity of the subscription, if the line item is a subscription or a proration. */
      quantity: z
        .number()
        .int()
        .nullable()
        .describe(
          'The quantity of the subscription, if the line item is a subscription or a proration.'
        )
        .optional(),
      /** The subscription that the invoice item pertains to, if any. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe('The subscription that the invoice item pertains to, if any.')
        .optional(),
      /** The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription. */
      subscription_item: z
        .union([z.string().max(5000), SubscriptionItemSchema])
        .describe(
          'The subscription item that generated this line item. Left empty if the line item is not an explicit result of a subscription.'
        )
        .optional(),
      /** The amount of tax calculated per tax rate for this line item */
      tax_amounts: z
        .array(InvoiceTaxAmountSchema)
        .describe(
          'The amount of tax calculated per tax rate for this line item'
        ),
      /** The tax rates which apply to the line item. */
      tax_rates: z
        .array(TaxRateSchema)
        .describe('The tax rates which apply to the line item.'),
      /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
      type: z
        .enum(['invoiceitem', 'subscription'])
        .describe(
          'A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.'
        ),
      /** The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts. */
      unit_amount_excluding_tax: z
        .string()
        .nullable()
        .describe(
          'The amount in cents (or local equivalent) representing the unit amount for this line item, excluding all tax and discounts.'
        )
        .optional()
    })
    .describe(
      'Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.\n\nEach line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).'
    )
  export type LineItem = z.infer<typeof LineItemSchema>

  export const DiscountsResourceDiscountAmountSchema = z.object({
    /** The amount, in cents (or local equivalent), of the discount. */
    amount: z
      .number()
      .int()
      .describe('The amount, in cents (or local equivalent), of the discount.'),
    /** The discount that was applied to get this discount amount. */
    discount: z
      .union([z.string().max(5000), DiscountSchema, DeletedDiscountSchema])
      .describe('The discount that was applied to get this discount amount.')
  })
  export type DiscountsResourceDiscountAmount = z.infer<
    typeof DiscountsResourceDiscountAmountSchema
  >

  /**
   * Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
   * invoice by creating or updating it with an `invoice` field, at which point it will be included as
   * [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
   * [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
   *
   * Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
   * with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
   * or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges
   * (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
   *
   * Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
   */
  export const InvoiceitemSchema = z
    .object({
      /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
      amount: z
        .number()
        .int()
        .describe(
          'Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The ID of the customer who will be billed when this invoice item is billed. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe(
          'The ID of the customer who will be billed when this invoice item is billed.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      date: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** If true, discounts will apply to this invoice item. Always false for prorations. */
      discountable: z
        .boolean()
        .describe(
          'If true, discounts will apply to this invoice item. Always false for prorations.'
        ),
      /** The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(z.union([z.string().max(5000), DiscountSchema]))
        .nullable()
        .describe(
          'The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The ID of the invoice this invoice item belongs to. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe('The ID of the invoice this invoice item belongs to.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('invoiceitem')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      period: InvoiceLineItemPeriodSchema,
      /** The price of the invoice item. */
      price: PriceSchema.nullable()
        .describe('The price of the invoice item.')
        .optional(),
      /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
      proration: z
        .boolean()
        .describe(
          'Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.'
        ),
      /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
      quantity: z
        .number()
        .int()
        .describe(
          'Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.'
        ),
      /** The subscription that this invoice item has been created for, if any. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe(
          'The subscription that this invoice item has been created for, if any.'
        )
        .optional(),
      /** The subscription item that this invoice item has been created for, if any. */
      subscription_item: z
        .string()
        .max(5000)
        .describe(
          'The subscription item that this invoice item has been created for, if any.'
        )
        .optional(),
      /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
      tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.'
        )
        .optional(),
      /** ID of the test clock this invoice item belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this invoice item belongs to.')
        .optional(),
      /** Unit amount (in the `currency` specified) of the invoice item. */
      unit_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          'Unit amount (in the `currency` specified) of the invoice item.'
        )
        .optional(),
      /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: z
        .string()
        .nullable()
        .describe(
          'Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.'
        )
        .optional()
    })
    .describe(
      'Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an\ninvoice by creating or updating it with an `invoice` field, at which point it will be included as\n[an invoice line item](https://stripe.com/docs/api/invoices/line_item) within\n[invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).\n\nInvoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined\nwith a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge\nor credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges\n(to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.\n\nRelated guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).'
    )
  export type Invoiceitem = z.infer<typeof InvoiceitemSchema>

  /**
   * Subscriptions allow you to charge a customer on a recurring basis.
   *
   * Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
   */
  export const SubscriptionSchema = z
    .object({
      /** ID of the Connect Application that created the subscription. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe(
          'ID of the Connect Application that created the subscription.'
        )
        .optional(),
      /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. */
      application_fee_percent: z
        .number()
        .nullable()
        .describe(
          "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account."
        )
        .optional(),
      automatic_tax: SubscriptionAutomaticTaxSchema,
      /** The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format. */
      billing_cycle_anchor: z
        .number()
        .int()
        .describe(
          'The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.'
        ),
      /** The fixed values used to calculate the `billing_cycle_anchor`. */
      billing_cycle_anchor_config:
        SubscriptionsResourceBillingCycleAnchorConfigSchema.nullable()
          .describe(
            'The fixed values used to calculate the `billing_cycle_anchor`.'
          )
          .optional(),
      /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds: SubscriptionBillingThresholdsSchema.nullable()
        .describe(
          'Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period'
        )
        .optional(),
      /** A date in the future at which the subscription will automatically get canceled */
      cancel_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'A date in the future at which the subscription will automatically get canceled'
        )
        .optional(),
      /** Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period. */
      cancel_at_period_end: z
        .boolean()
        .describe(
          'Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period.'
        ),
      /** If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.'
        )
        .optional(),
      /** Details about why this subscription was cancelled */
      cancellation_details: CancellationDetailsSchema.nullable()
        .describe('Details about why this subscription was cancelled')
        .optional(),
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
      collection_method: z
        .enum(['charge_automatically', 'send_invoice'])
        .describe(
          'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
      current_period_end: z
        .number()
        .int()
        .describe(
          'End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.'
        ),
      /** Start of the current period that the subscription has been invoiced for. */
      current_period_start: z
        .number()
        .int()
        .describe(
          'Start of the current period that the subscription has been invoiced for.'
        ),
      /** ID of the customer who owns the subscription. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe('ID of the customer who owns the subscription.'),
      /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
      days_until_due: z
        .number()
        .int()
        .nullable()
        .describe(
          'Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.'
        )
        .optional(),
      /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      default_payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .nullable()
        .describe(
          "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."
        )
        .optional(),
      /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      default_source: z
        .union([
          z.string().max(5000),
          BankAccountSchema,
          CardSchema,
          SourceSchema
        ])
        .nullable()
        .describe(
          "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."
        )
        .optional(),
      /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
      default_tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.'
        )
        .optional(),
      /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: z
        .string()
        .max(500)
        .nullable()
        .describe(
          "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
        )
        .optional(),
      /** Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
      discount: DiscountSchema.nullable()
        .describe(
          'Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.'
        )
        .optional(),
      /** The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(z.union([z.string().max(5000), DiscountSchema]))
        .describe(
          'The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.'
        ),
      /** If the subscription has ended, the date the subscription ended. */
      ended_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'If the subscription has ended, the date the subscription ended.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      invoice_settings: SubscriptionsResourceSubscriptionInvoiceSettingsSchema,
      /** List of subscription items, each with an attached price. */
      items: z
        .object({
          /** Details about each object. */
          data: z
            .array(SubscriptionItemSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('List of subscription items, each with an attached price.'),
      /** The most recent invoice this subscription has generated. */
      latest_invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe('The most recent invoice this subscription has generated.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
      next_pending_invoice_item_invoice: z
        .number()
        .int()
        .nullable()
        .describe(
          'Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('subscription')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details.'
        )
        .optional(),
      /** If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment). */
      pause_collection: SubscriptionsResourcePauseCollectionSchema.nullable()
        .describe(
          'If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).'
        )
        .optional(),
      /** Payment settings passed on to invoices created by the subscription. */
      payment_settings: SubscriptionsResourcePaymentSettingsSchema.nullable()
        .describe(
          'Payment settings passed on to invoices created by the subscription.'
        )
        .optional(),
      /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
      pending_invoice_item_interval:
        SubscriptionPendingInvoiceItemIntervalSchema.nullable()
          .describe(
            'Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.'
          )
          .optional(),
      /** You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
      pending_setup_intent: z
        .union([z.string().max(5000), SetupIntentSchema])
        .nullable()
        .describe(
          "You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2)."
        )
        .optional(),
      /** If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
      pending_update: SubscriptionsResourcePendingUpdateSchema.nullable()
        .describe(
          'If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.'
        )
        .optional(),
      /** The schedule attached to the subscription */
      schedule: z
        .union([z.string().max(5000), SubscriptionScheduleSchema])
        .nullable()
        .describe('The schedule attached to the subscription')
        .optional(),
      /** Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
      start_date: z
        .number()
        .int()
        .describe(
          'Date when the subscription was first created. The date might differ from the `created` date due to backdating.'
        ),
      /**
       * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.
       *
       * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.
       *
       * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
       *
       * A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.
       *
       * If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).
       *
       * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
       */
      status: z
        .enum([
          'active',
          'canceled',
          'incomplete',
          'incomplete_expired',
          'past_due',
          'paused',
          'trialing',
          'unpaid'
        ])
        .describe(
          "Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`. \n\nFor `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated. \n\nA subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. \n\nA subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged. \n\nIf subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings). \n\nIf subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices."
        ),
      /** ID of the test clock this subscription belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this subscription belongs to.')
        .optional(),
      /** The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      transfer_data: SubscriptionTransferDataSchema.nullable()
        .describe(
          "The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
        )
        .optional(),
      /** If the subscription has a trial, the end of that trial. */
      trial_end: z
        .number()
        .int()
        .nullable()
        .describe('If the subscription has a trial, the end of that trial.')
        .optional(),
      /** Settings related to subscription trials. */
      trial_settings: SubscriptionsTrialsResourceTrialSettingsSchema.nullable()
        .describe('Settings related to subscription trials.')
        .optional(),
      /** If the subscription has a trial, the beginning of that trial. */
      trial_start: z
        .number()
        .int()
        .nullable()
        .describe(
          'If the subscription has a trial, the beginning of that trial.'
        )
        .optional()
    })
    .describe(
      'Subscriptions allow you to charge a customer on a recurring basis.\n\nRelated guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)'
    )
  export type Subscription = z.infer<typeof SubscriptionSchema>

  export const SubscriptionAutomaticTaxSchema = z.object({
    /** If Stripe disabled automatic tax, this enum describes why. */
    disabled_reason: z
      .literal('requires_location_inputs')
      .nullable()
      .describe('If Stripe disabled automatic tax, this enum describes why.')
      .optional(),
    /** Whether Stripe automatically computes tax on this subscription. */
    enabled: z
      .boolean()
      .describe(
        'Whether Stripe automatically computes tax on this subscription.'
      ),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional()
  })
  export type SubscriptionAutomaticTax = z.infer<
    typeof SubscriptionAutomaticTaxSchema
  >

  export const SubscriptionsResourceSubscriptionInvoiceSettingsSchema =
    z.object({
      /** The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription. */
      account_tax_ids: z
        .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
        .nullable()
        .describe(
          'The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.'
        )
        .optional(),
      issuer: ConnectAccountReferenceSchema
    })
  export type SubscriptionsResourceSubscriptionInvoiceSettings = z.infer<
    typeof SubscriptionsResourceSubscriptionInvoiceSettingsSchema
  >

  /**
   * Subscription items allow you to create customer subscriptions with more than
   * one plan, making it easy to represent complex billing relationships.
   */
  export const SubscriptionItemSchema = z
    .object({
      /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds: SubscriptionItemBillingThresholdsSchema.nullable()
        .describe(
          'Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(z.union([z.string().max(5000), DiscountSchema]))
        .describe(
          'The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('subscription_item')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      price: PriceSchema,
      /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
      quantity: z
        .number()
        .int()
        .describe(
          'The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.'
        )
        .optional(),
      /** The `subscription` this `subscription_item` belongs to. */
      subscription: z
        .string()
        .max(5000)
        .describe('The `subscription` this `subscription_item` belongs to.'),
      /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
      tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.'
        )
        .optional()
    })
    .describe(
      'Subscription items allow you to create customer subscriptions with more than\none plan, making it easy to represent complex billing relationships.'
    )
  export type SubscriptionItem = z.infer<typeof SubscriptionItemSchema>

  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent when you're ready to collect your customer's payment credentials.
   * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
   * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
   * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
   * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
   * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
   * it automatically attaches the resulting payment method to that Customer after successful setup.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
   */
  export const SetupIntentSchema = z
    .object({
      /** ID of the Connect application that created the SetupIntent. */
      application: z
        .union([z.string().max(5000), ApplicationSchema])
        .nullable()
        .describe('ID of the Connect application that created the SetupIntent.')
        .optional(),
      /**
       * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
       *
       * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
       */
      attach_to_self: z
        .boolean()
        .describe(
          "If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer."
        )
        .optional(),
      /** Settings for dynamic payment methods compatible with this Setup Intent */
      automatic_payment_methods:
        PaymentFlowsAutomaticPaymentMethodsSetupIntentSchema.nullable()
          .describe(
            'Settings for dynamic payment methods compatible with this Setup Intent'
          )
          .optional(),
      /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
      cancellation_reason: z
        .enum(['abandoned', 'duplicate', 'requested_by_customer'])
        .nullable()
        .describe(
          'Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.'
        )
        .optional(),
      /**
       * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       */
      client_secret: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.\n\nThe client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /**
       * ID of the Customer this SetupIntent belongs to, if one exists.
       *
       * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
       */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          "ID of the Customer this SetupIntent belongs to, if one exists.\n\nIf present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent."
        )
        .optional(),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /**
       * Indicates the directions of money movement for which this payment method is intended to be used.
       *
       * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
       */
      flow_directions: z
        .array(z.enum(['inbound', 'outbound']))
        .nullable()
        .describe(
          'Indicates the directions of money movement for which this payment method is intended to be used.\n\nInclude `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The error encountered in the previous SetupIntent confirmation. */
      last_setup_error: ApiErrorsSchema.nullable()
        .describe(
          'The error encountered in the previous SetupIntent confirmation.'
        )
        .optional(),
      /** The most recent SetupAttempt for this SetupIntent. */
      latest_attempt: z
        .union([z.string().max(5000), SetupAttemptSchema])
        .nullable()
        .describe('The most recent SetupAttempt for this SetupIntent.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** ID of the multi use Mandate generated by the SetupIntent. */
      mandate: z
        .union([z.string().max(5000), MandateSchema])
        .nullable()
        .describe('ID of the multi use Mandate generated by the SetupIntent.')
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
      next_action: SetupIntentNextActionSchema.nullable()
        .describe(
          'If present, this property tells you what actions you need to take in order for your customer to continue payment setup.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('setup_intent')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account (if any) for which the setup is intended. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe('The account (if any) for which the setup is intended.')
        .optional(),
      /** ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead. */
      payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .nullable()
        .describe(
          "ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead."
        )
        .optional(),
      /** Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this Setup Intent. */
      payment_method_configuration_details:
        PaymentMethodConfigBizPaymentMethodConfigurationDetailsSchema.nullable()
          .describe(
            'Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this Setup Intent.'
          )
          .optional(),
      /** Payment method-specific configuration for this SetupIntent. */
      payment_method_options: SetupIntentPaymentMethodOptionsSchema.nullable()
        .describe('Payment method-specific configuration for this SetupIntent.')
        .optional(),
      /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
      payment_method_types: z
        .array(z.string().max(5000))
        .describe(
          'The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.'
        ),
      /** ID of the single_use Mandate generated by the SetupIntent. */
      single_use_mandate: z
        .union([z.string().max(5000), MandateSchema])
        .nullable()
        .describe('ID of the single_use Mandate generated by the SetupIntent.')
        .optional(),
      /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
      status: z
        .enum([
          'canceled',
          'processing',
          'requires_action',
          'requires_confirmation',
          'requires_payment_method',
          'succeeded'
        ])
        .describe(
          '[Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.'
        ),
      /**
       * Indicates how the payment method is intended to be used in the future.
       *
       * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
       */
      usage: z
        .string()
        .max(5000)
        .describe(
          'Indicates how the payment method is intended to be used in the future.\n\nUse `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.'
        )
    })
    .describe(
      "A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.\nFor example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.\nLater, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.\n\nCreate a SetupIntent when you're ready to collect your customer's payment credentials.\nDon't maintain long-lived, unconfirmed SetupIntents because they might not be valid.\nThe SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides\nyou through the setup process.\n\nSuccessful SetupIntents result in payment credentials that are optimized for future payments.\nFor example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection\nto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).\nIf you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),\nit automatically attaches the resulting payment method to that Customer after successful setup.\nWe recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on\nPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.\n\nBy using SetupIntents, you can reduce friction for your customers, even as regulations change over time.\n\nRelated guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)"
    )
  export type SetupIntent = z.infer<typeof SetupIntentSchema>

  /**
   * Pending Updates store the changes pending from a previous update that will be applied
   * to the Subscription upon successful payment.
   */
  export const SubscriptionsResourcePendingUpdateSchema = z
    .object({
      /** If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format. */
      billing_cycle_anchor: z
        .number()
        .int()
        .nullable()
        .describe(
          'If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.'
        )
        .optional(),
      /** The point after which the changes reflected by this update will be discarded and no longer applied. */
      expires_at: z
        .number()
        .int()
        .describe(
          'The point after which the changes reflected by this update will be discarded and no longer applied.'
        ),
      /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
      subscription_items: z
        .array(SubscriptionItemSchema)
        .nullable()
        .describe(
          'List of subscription items, each with an attached plan, that will be set if the update is applied.'
        )
        .optional(),
      /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
      trial_end: z
        .number()
        .int()
        .nullable()
        .describe(
          'Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.'
        )
        .optional(),
      /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
      trial_from_plan: z
        .boolean()
        .nullable()
        .describe(
          "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more."
        )
        .optional()
    })
    .describe(
      'Pending Updates store the changes pending from a previous update that will be applied\nto the Subscription upon successful payment.'
    )
  export type SubscriptionsResourcePendingUpdate = z.infer<
    typeof SubscriptionsResourcePendingUpdateSchema
  >

  /**
   * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
   *
   * Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
   */
  export const SubscriptionScheduleSchema = z
    .object({
      /** ID of the Connect Application that created the schedule. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe('ID of the Connect Application that created the schedule.')
        .optional(),
      /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
      canceled_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
      completed_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
      current_phase: SubscriptionScheduleCurrentPhaseSchema.nullable()
        .describe(
          'Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.'
        )
        .optional(),
      /** ID of the customer who owns the subscription schedule. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe('ID of the customer who owns the subscription schedule.'),
      default_settings: SubscriptionSchedulesResourceDefaultSettingsSchema,
      /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription. */
      end_behavior: z
        .enum(['cancel', 'none', 'release', 'renew'])
        .describe(
          'Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('subscription_schedule')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Configuration for the subscription schedule's phases. */
      phases: z
        .array(SubscriptionSchedulePhaseConfigurationSchema)
        .describe("Configuration for the subscription schedule's phases."),
      /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
      released_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      /** ID of the subscription once managed by the subscription schedule (if it is released). */
      released_subscription: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the subscription once managed by the subscription schedule (if it is released).'
        )
        .optional(),
      /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
      status: z
        .enum(['active', 'canceled', 'completed', 'not_started', 'released'])
        .describe(
          'The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).'
        ),
      /** ID of the subscription managed by the subscription schedule. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe(
          'ID of the subscription managed by the subscription schedule.'
        )
        .optional(),
      /** ID of the test clock this subscription schedule belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this subscription schedule belongs to.')
        .optional()
    })
    .describe(
      'A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.\n\nRelated guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)'
    )
  export type SubscriptionSchedule = z.infer<typeof SubscriptionScheduleSchema>

  export const SubscriptionSchedulesResourceDefaultSettingsSchema = z.object({
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule. */
    application_fee_percent: z
      .number()
      .nullable()
      .describe(
        "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule."
      )
      .optional(),
    automatic_tax:
      SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxSchema.optional(),
    /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
    billing_cycle_anchor: z
      .enum(['automatic', 'phase_start'])
      .describe(
        'Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).'
      ),
    /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
    billing_thresholds: SubscriptionBillingThresholdsSchema.nullable()
      .describe(
        'Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period'
      )
      .optional(),
    /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
    collection_method: z
      .enum(['charge_automatically', 'send_invoice'])
      .nullable()
      .describe(
        'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.'
      )
      .optional(),
    /** ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
    default_payment_method: z
      .union([z.string().max(5000), PaymentMethodSchema])
      .nullable()
      .describe(
        "ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."
      )
      .optional(),
    /** Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.'
      )
      .optional(),
    invoice_settings: InvoiceSettingSubscriptionScheduleSettingSchema,
    /** The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
    on_behalf_of: z
      .union([z.string().max(5000), AccountSchema])
      .nullable()
      .describe(
        "The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details."
      )
      .optional(),
    /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
    transfer_data: SubscriptionTransferDataSchema.nullable()
      .describe(
        "The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
      )
      .optional()
  })
  export type SubscriptionSchedulesResourceDefaultSettings = z.infer<
    typeof SubscriptionSchedulesResourceDefaultSettingsSchema
  >

  export const SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxSchema =
    z.object({
      /** If Stripe disabled automatic tax, this enum describes why. */
      disabled_reason: z
        .literal('requires_location_inputs')
        .nullable()
        .describe('If Stripe disabled automatic tax, this enum describes why.')
        .optional(),
      /** Whether Stripe automatically computes tax on invoices created during this phase. */
      enabled: z
        .boolean()
        .describe(
          'Whether Stripe automatically computes tax on invoices created during this phase.'
        ),
      /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
      liability: ConnectAccountReferenceSchema.nullable()
        .describe(
          "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
        )
        .optional()
    })
  export type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax =
    z.infer<
      typeof SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxSchema
    >

  export const InvoiceSettingSubscriptionScheduleSettingSchema = z.object({
    /** The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule. */
    account_tax_ids: z
      .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
      .nullable()
      .describe(
        'The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.'
      )
      .optional(),
    /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
    days_until_due: z
      .number()
      .int()
      .nullable()
      .describe(
        'Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.'
      )
      .optional(),
    issuer: ConnectAccountReferenceSchema
  })
  export type InvoiceSettingSubscriptionScheduleSetting = z.infer<
    typeof InvoiceSettingSubscriptionScheduleSettingSchema
  >

  export const SubscriptionTransferDataSchema = z.object({
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
    amount_percent: z
      .number()
      .nullable()
      .describe(
        'A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.'
      )
      .optional(),
    /** The account where funds from the payment will be transferred to upon payment success. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The account where funds from the payment will be transferred to upon payment success.'
      )
  })
  export type SubscriptionTransferData = z.infer<
    typeof SubscriptionTransferDataSchema
  >

  /** A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period. */
  export const SubscriptionSchedulePhaseConfigurationSchema = z
    .object({
      /** A list of prices and quantities that will generate invoice items appended to the next invoice for this phase. */
      add_invoice_items: z
        .array(SubscriptionScheduleAddInvoiceItemSchema)
        .describe(
          'A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.'
        ),
      /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule. */
      application_fee_percent: z
        .number()
        .nullable()
        .describe(
          "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule."
        )
        .optional(),
      automatic_tax: SchedulesPhaseAutomaticTaxSchema.optional(),
      /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
      billing_cycle_anchor: z
        .enum(['automatic', 'phase_start'])
        .nullable()
        .describe(
          'Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).'
        )
        .optional(),
      /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds: SubscriptionBillingThresholdsSchema.nullable()
        .describe(
          'Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period'
        )
        .optional(),
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. */
      collection_method: z
        .enum(['charge_automatically', 'send_invoice'])
        .nullable()
        .describe(
          'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.'
        )
        .optional(),
      /** ID of the coupon to use during this phase of the subscription schedule. */
      coupon: z
        .union([z.string().max(5000), CouponSchema, DeletedCouponSchema])
        .nullable()
        .describe(
          'ID of the coupon to use during this phase of the subscription schedule.'
        )
        .optional(),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method: z
        .union([z.string().max(5000), PaymentMethodSchema])
        .nullable()
        .describe(
          "ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."
        )
        .optional(),
      /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
      default_tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The default tax rates to apply to the subscription during this phase of the subscription schedule.'
        )
        .optional(),
      /** Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.'
        )
        .optional(),
      /** The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts. */
      discounts: z
        .array(DiscountsResourceStackableDiscountSchema)
        .describe(
          'The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.'
        ),
      /** The end of this phase of the subscription schedule. */
      end_date: z
        .number()
        .int()
        .describe('The end of this phase of the subscription schedule.'),
      /** The invoice settings applicable during this phase. */
      invoice_settings:
        InvoiceSettingSubscriptionSchedulePhaseSettingSchema.nullable()
          .describe('The invoice settings applicable during this phase.')
          .optional(),
      /** Subscription items to configure the subscription to during this phase of the subscription schedule. */
      items: z
        .array(SubscriptionScheduleConfigurationItemSchema)
        .describe(
          'Subscription items to configure the subscription to during this phase of the subscription schedule.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`."
        )
        .optional(),
      /** The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          "The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details."
        )
        .optional(),
      /** If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
      proration_behavior: z
        .enum(['always_invoice', 'create_prorations', 'none'])
        .describe(
          'If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.'
        ),
      /** The start of this phase of the subscription schedule. */
      start_date: z
        .number()
        .int()
        .describe('The start of this phase of the subscription schedule.'),
      /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      transfer_data: SubscriptionTransferDataSchema.nullable()
        .describe(
          "The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."
        )
        .optional(),
      /** When the trial ends within the phase. */
      trial_end: z
        .number()
        .int()
        .nullable()
        .describe('When the trial ends within the phase.')
        .optional()
    })
    .describe(
      'A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.'
    )
  export type SubscriptionSchedulePhaseConfiguration = z.infer<
    typeof SubscriptionSchedulePhaseConfigurationSchema
  >

  /** An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase. */
  export const SubscriptionScheduleAddInvoiceItemSchema = z
    .object({
      /** The stackable discounts that will be applied to the item. */
      discounts: z
        .array(DiscountsResourceStackableDiscountSchema)
        .describe('The stackable discounts that will be applied to the item.'),
      /** ID of the price used to generate the invoice item. */
      price: z
        .union([z.string().max(5000), PriceSchema, DeletedPriceSchema])
        .describe('ID of the price used to generate the invoice item.'),
      /** The quantity of the invoice item. */
      quantity: z
        .number()
        .int()
        .nullable()
        .describe('The quantity of the invoice item.')
        .optional(),
      /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
      tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.'
        )
        .optional()
    })
    .describe(
      'An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.'
    )
  export type SubscriptionScheduleAddInvoiceItem = z.infer<
    typeof SubscriptionScheduleAddInvoiceItemSchema
  >

  export const DiscountsResourceStackableDiscountSchema = z.object({
    /** ID of the coupon to create a new discount for. */
    coupon: z
      .union([z.string().max(5000), CouponSchema])
      .nullable()
      .describe('ID of the coupon to create a new discount for.')
      .optional(),
    /** ID of an existing discount on the object (or one of its ancestors) to reuse. */
    discount: z
      .union([z.string().max(5000), DiscountSchema])
      .nullable()
      .describe(
        'ID of an existing discount on the object (or one of its ancestors) to reuse.'
      )
      .optional(),
    /** ID of the promotion code to create a new discount for. */
    promotion_code: z
      .union([z.string().max(5000), PromotionCodeSchema])
      .nullable()
      .describe('ID of the promotion code to create a new discount for.')
      .optional()
  })
  export type DiscountsResourceStackableDiscount = z.infer<
    typeof DiscountsResourceStackableDiscountSchema
  >

  export const SchedulesPhaseAutomaticTaxSchema = z.object({
    /** If Stripe disabled automatic tax, this enum describes why. */
    disabled_reason: z
      .literal('requires_location_inputs')
      .nullable()
      .describe('If Stripe disabled automatic tax, this enum describes why.')
      .optional(),
    /** Whether Stripe automatically computes tax on invoices created during this phase. */
    enabled: z
      .boolean()
      .describe(
        'Whether Stripe automatically computes tax on invoices created during this phase.'
      ),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional()
  })
  export type SchedulesPhaseAutomaticTax = z.infer<
    typeof SchedulesPhaseAutomaticTaxSchema
  >

  export const InvoiceSettingSubscriptionSchedulePhaseSettingSchema = z.object({
    /** The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule. */
    account_tax_ids: z
      .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
      .nullable()
      .describe(
        'The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.'
      )
      .optional(),
    /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
    days_until_due: z
      .number()
      .int()
      .nullable()
      .describe(
        'Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.'
      )
      .optional(),
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer: ConnectAccountReferenceSchema.nullable()
      .describe(
        'The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.'
      )
      .optional()
  })
  export type InvoiceSettingSubscriptionSchedulePhaseSetting = z.infer<
    typeof InvoiceSettingSubscriptionSchedulePhaseSettingSchema
  >

  /** A phase item describes the price and quantity of a phase. */
  export const SubscriptionScheduleConfigurationItemSchema = z
    .object({
      /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds: SubscriptionItemBillingThresholdsSchema.nullable()
        .describe(
          'Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period'
        )
        .optional(),
      /** The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount. */
      discounts: z
        .array(DiscountsResourceStackableDiscountSchema)
        .describe(
          'The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered."
        )
        .optional(),
      /** ID of the price to which the customer should be subscribed. */
      price: z
        .union([z.string().max(5000), PriceSchema, DeletedPriceSchema])
        .describe(
          'ID of the price to which the customer should be subscribed.'
        ),
      /** Quantity of the plan to which the customer should be subscribed. */
      quantity: z
        .number()
        .int()
        .describe(
          'Quantity of the plan to which the customer should be subscribed.'
        )
        .optional(),
      /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
      tax_rates: z
        .array(TaxRateSchema)
        .nullable()
        .describe(
          'The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.'
        )
        .optional()
    })
    .describe('A phase item describes the price and quantity of a phase.')
  export type SubscriptionScheduleConfigurationItem = z.infer<
    typeof SubscriptionScheduleConfigurationItemSchema
  >

  export const InvoicesResourcePretaxCreditAmountSchema = z.object({
    /** The amount, in cents (or local equivalent), of the pretax credit amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The amount, in cents (or local equivalent), of the pretax credit amount.'
      ),
    /** The credit balance transaction that was applied to get this pretax credit amount. */
    credit_balance_transaction: z
      .union([z.string().max(5000), BillingCreditBalanceTransactionSchema])
      .nullable()
      .describe(
        'The credit balance transaction that was applied to get this pretax credit amount.'
      )
      .optional(),
    /** The discount that was applied to get this pretax credit amount. */
    discount: z
      .union([z.string().max(5000), DiscountSchema, DeletedDiscountSchema])
      .describe(
        'The discount that was applied to get this pretax credit amount.'
      )
      .optional(),
    /** Type of the pretax credit amount referenced. */
    type: z
      .enum(['credit_balance_transaction', 'discount'])
      .describe('Type of the pretax credit amount referenced.')
  })
  export type InvoicesResourcePretaxCreditAmount = z.infer<
    typeof InvoicesResourcePretaxCreditAmountSchema
  >

  /** A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant. */
  export const BillingCreditBalanceTransactionSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Credit details for this credit balance transaction. Only present if type is `credit`. */
      credit: BillingCreditGrantsResourceBalanceCreditSchema.nullable()
        .describe(
          'Credit details for this credit balance transaction. Only present if type is `credit`.'
        )
        .optional(),
      /** The credit grant associated with this credit balance transaction. */
      credit_grant: z
        .union([z.string().max(5000), BillingCreditGrantSchema])
        .describe(
          'The credit grant associated with this credit balance transaction.'
        ),
      /** Debit details for this credit balance transaction. Only present if type is `debit`. */
      debit: BillingCreditGrantsResourceBalanceDebitSchema.nullable()
        .describe(
          'Debit details for this credit balance transaction. Only present if type is `debit`.'
        )
        .optional(),
      /** The effective time of this credit balance transaction. */
      effective_at: z
        .number()
        .int()
        .describe('The effective time of this credit balance transaction.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.credit_balance_transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the test clock this credit balance transaction belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe(
          'ID of the test clock this credit balance transaction belongs to.'
        )
        .optional(),
      /** The type of credit balance transaction (credit or debit). */
      type: z
        .enum(['credit', 'debit'])
        .nullable()
        .describe('The type of credit balance transaction (credit or debit).')
        .optional()
    })
    .describe(
      'A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.'
    )
  export type BillingCreditBalanceTransaction = z.infer<
    typeof BillingCreditBalanceTransactionSchema
  >

  export const BillingCreditGrantsResourceBalanceCreditSchema = z.object({
    amount: BillingCreditGrantsResourceAmountSchema,
    /** Details of the invoice to which the reinstated credits were originally applied. Only present if `type` is `credits_application_invoice_voided`. */
    credits_application_invoice_voided:
      BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoidedSchema.nullable()
        .describe(
          'Details of the invoice to which the reinstated credits were originally applied. Only present if `type` is `credits_application_invoice_voided`.'
        )
        .optional(),
    /** The type of credit transaction. */
    type: z
      .enum(['credits_application_invoice_voided', 'credits_granted'])
      .describe('The type of credit transaction.')
  })
  export type BillingCreditGrantsResourceBalanceCredit = z.infer<
    typeof BillingCreditGrantsResourceBalanceCreditSchema
  >

  export const BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoidedSchema =
    z.object({
      /** The invoice to which the reinstated billing credits were originally applied. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .describe(
          'The invoice to which the reinstated billing credits were originally applied.'
        ),
      /** The invoice line item to which the reinstated billing credits were originally applied. */
      invoice_line_item: z
        .string()
        .max(5000)
        .describe(
          'The invoice line item to which the reinstated billing credits were originally applied.'
        )
    })
  export type BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoided =
    z.infer<
      typeof BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoidedSchema
    >

  /**
   * A credit grant is an API resource that documents the allocation of some billing credits to a customer.
   *
   * Related guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)
   */
  export const BillingCreditGrantSchema = z
    .object({
      amount: BillingCreditGrantsResourceAmountSchema,
      applicability_config:
        BillingCreditGrantsResourceApplicabilityConfigSchema,
      /** The category of this credit grant. This is for tracking purposes and isn't displayed to the customer. */
      category: z
        .enum(['paid', 'promotional'])
        .describe(
          "The category of this credit grant. This is for tracking purposes and isn't displayed to the customer."
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** ID of the customer receiving the billing credits. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe('ID of the customer receiving the billing credits.'),
      /** The time when the billing credits become effective-when they're eligible for use. */
      effective_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The time when the billing credits become effective-when they're eligible for use."
        )
        .optional(),
      /** The time when the billing credits expire. If not present, the billing credits don't expire. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The time when the billing credits expire. If not present, the billing credits don't expire."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** A descriptive name shown in dashboard. */
      name: z
        .string()
        .max(5000)
        .nullable()
        .describe('A descriptive name shown in dashboard.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.credit_grant')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The priority for applying this credit grant. The highest priority is 0 and the lowest is 100. */
      priority: z
        .number()
        .int()
        .nullable()
        .describe(
          'The priority for applying this credit grant. The highest priority is 0 and the lowest is 100.'
        )
        .optional(),
      /** ID of the test clock this credit grant belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this credit grant belongs to.')
        .optional(),
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: z
        .number()
        .int()
        .describe(
          'Time at which the object was last updated. Measured in seconds since the Unix epoch.'
        ),
      /** The time when this credit grant was voided. If not present, the credit grant hasn't been voided. */
      voided_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The time when this credit grant was voided. If not present, the credit grant hasn't been voided."
        )
        .optional()
    })
    .describe(
      'A credit grant is an API resource that documents the allocation of some billing credits to a customer.\n\nRelated guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)'
    )
  export type BillingCreditGrant = z.infer<typeof BillingCreditGrantSchema>

  export const BillingCreditGrantsResourceBalanceDebitSchema = z.object({
    amount: BillingCreditGrantsResourceAmountSchema,
    /** Details of how the billing credits were applied to an invoice. Only present if `type` is `credits_applied`. */
    credits_applied:
      BillingCreditGrantsResourceBalanceCreditsAppliedSchema.nullable()
        .describe(
          'Details of how the billing credits were applied to an invoice. Only present if `type` is `credits_applied`.'
        )
        .optional(),
    /** The type of debit transaction. */
    type: z
      .enum(['credits_applied', 'credits_expired', 'credits_voided'])
      .describe('The type of debit transaction.')
  })
  export type BillingCreditGrantsResourceBalanceDebit = z.infer<
    typeof BillingCreditGrantsResourceBalanceDebitSchema
  >

  export const BillingCreditGrantsResourceBalanceCreditsAppliedSchema =
    z.object({
      /** The invoice to which the billing credits were applied. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .describe('The invoice to which the billing credits were applied.'),
      /** The invoice line item to which the billing credits were applied. */
      invoice_line_item: z
        .string()
        .max(5000)
        .describe(
          'The invoice line item to which the billing credits were applied.'
        )
    })
  export type BillingCreditGrantsResourceBalanceCreditsApplied = z.infer<
    typeof BillingCreditGrantsResourceBalanceCreditsAppliedSchema
  >

  /**
   * A Quote is a way to model prices that you'd like to provide to a customer.
   * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
   */
  export const QuoteSchema = z
    .object({
      /** Total before any discounts or taxes are applied. */
      amount_subtotal: z
        .number()
        .int()
        .describe('Total before any discounts or taxes are applied.'),
      /** Total after discounts and taxes are applied. */
      amount_total: z
        .number()
        .int()
        .describe('Total after discounts and taxes are applied.'),
      /** ID of the Connect Application that created the quote. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe('ID of the Connect Application that created the quote.')
        .optional(),
      /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote."
        )
        .optional(),
      /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
      application_fee_percent: z
        .number()
        .nullable()
        .describe(
          "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote."
        )
        .optional(),
      automatic_tax: QuotesResourceAutomaticTaxSchema,
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`. */
      collection_method: z
        .enum(['charge_automatically', 'send_invoice'])
        .describe(
          'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.'
        ),
      computed: QuotesResourceComputedSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        )
        .optional(),
      /** The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          'The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.'
        )
        .optional(),
      /** The tax rates applied to this quote. */
      default_tax_rates: z
        .array(z.union([z.string().max(5000), TaxRateSchema]))
        .describe('The tax rates applied to this quote.')
        .optional(),
      /** A description that will be displayed on the quote PDF. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe('A description that will be displayed on the quote PDF.')
        .optional(),
      /** The discounts applied to this quote. */
      discounts: z
        .array(z.union([z.string().max(5000), DiscountSchema]))
        .describe('The discounts applied to this quote.'),
      /** The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
      expires_at: z
        .number()
        .int()
        .describe(
          'The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.'
        ),
      /** A footer that will be displayed on the quote PDF. */
      footer: z
        .string()
        .max(5000)
        .nullable()
        .describe('A footer that will be displayed on the quote PDF.')
        .optional(),
      /** Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
      from_quote: QuotesResourceFromQuoteSchema.nullable()
        .describe(
          'Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.'
        )
        .optional(),
      /** A header that will be displayed on the quote PDF. */
      header: z
        .string()
        .max(5000)
        .nullable()
        .describe('A header that will be displayed on the quote PDF.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The invoice that was created from this quote. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema, DeletedInvoiceSchema])
        .nullable()
        .describe('The invoice that was created from this quote.')
        .optional(),
      invoice_settings: InvoiceSettingQuoteSettingSchema,
      /** A list of items the customer is being quoted for. */
      line_items: z
        .object({
          /** Details about each object. */
          data: z.array(ItemSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('A list of items the customer is being quoted for.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
      number: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('quote')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.'
        )
        .optional(),
      /** The status of the quote. */
      status: z
        .enum(['accepted', 'canceled', 'draft', 'open'])
        .describe('The status of the quote.'),
      status_transitions: QuotesResourceStatusTransitionsSchema,
      /** The subscription that was created or updated from this quote. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe(
          'The subscription that was created or updated from this quote.'
        )
        .optional(),
      subscription_data: QuotesResourceSubscriptionDataSubscriptionDataSchema,
      /** The subscription schedule that was created or updated from this quote. */
      subscription_schedule: z
        .union([z.string().max(5000), SubscriptionScheduleSchema])
        .nullable()
        .describe(
          'The subscription schedule that was created or updated from this quote.'
        )
        .optional(),
      /** ID of the test clock this quote belongs to. */
      test_clock: z
        .union([z.string().max(5000), TestHelpersTestClockSchema])
        .nullable()
        .describe('ID of the test clock this quote belongs to.')
        .optional(),
      total_details: QuotesResourceTotalDetailsSchema,
      /** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
      transfer_data: QuotesResourceTransferDataSchema.nullable()
        .describe(
          'The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.'
        )
        .optional()
    })
    .describe(
      "A Quote is a way to model prices that you'd like to provide to a customer.\nOnce accepted, it will automatically create an invoice, subscription or subscription schedule."
    )
  export type Quote = z.infer<typeof QuoteSchema>

  export const QuotesResourceAutomaticTaxSchema = z.object({
    /** Automatically calculate taxes */
    enabled: z.boolean().describe('Automatically calculate taxes'),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional(),
    /** The status of the most recent automated tax calculation for this quote. */
    status: z
      .enum(['complete', 'failed', 'requires_location_inputs'])
      .nullable()
      .describe(
        'The status of the most recent automated tax calculation for this quote.'
      )
      .optional()
  })
  export type QuotesResourceAutomaticTax = z.infer<
    typeof QuotesResourceAutomaticTaxSchema
  >

  export const QuotesResourceComputedSchema = z.object({
    /** The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
    recurring: QuotesResourceRecurringSchema.nullable()
      .describe(
        'The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.'
      )
      .optional(),
    upfront: QuotesResourceUpfrontSchema
  })
  export type QuotesResourceComputed = z.infer<
    typeof QuotesResourceComputedSchema
  >

  export const QuotesResourceRecurringSchema = z.object({
    /** Total before any discounts or taxes are applied. */
    amount_subtotal: z
      .number()
      .int()
      .describe('Total before any discounts or taxes are applied.'),
    /** Total after discounts and taxes are applied. */
    amount_total: z
      .number()
      .int()
      .describe('Total after discounts and taxes are applied.'),
    /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
    interval: z
      .enum(['day', 'month', 'week', 'year'])
      .describe(
        'The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.'
      ),
    /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
    interval_count: z
      .number()
      .int()
      .describe(
        'The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.'
      ),
    total_details: QuotesResourceTotalDetailsSchema
  })
  export type QuotesResourceRecurring = z.infer<
    typeof QuotesResourceRecurringSchema
  >

  export const QuotesResourceTotalDetailsSchema = z.object({
    /** This is the sum of all the discounts. */
    amount_discount: z
      .number()
      .int()
      .describe('This is the sum of all the discounts.'),
    /** This is the sum of all the shipping amounts. */
    amount_shipping: z
      .number()
      .int()
      .nullable()
      .describe('This is the sum of all the shipping amounts.')
      .optional(),
    /** This is the sum of all the tax amounts. */
    amount_tax: z
      .number()
      .int()
      .describe('This is the sum of all the tax amounts.'),
    breakdown: QuotesResourceTotalDetailsResourceBreakdownSchema.optional()
  })
  export type QuotesResourceTotalDetails = z.infer<
    typeof QuotesResourceTotalDetailsSchema
  >

  export const QuotesResourceTotalDetailsResourceBreakdownSchema = z.object({
    /** The aggregated discounts. */
    discounts: z
      .array(LineItemsDiscountAmountSchema)
      .describe('The aggregated discounts.'),
    /** The aggregated tax amounts by rate. */
    taxes: z
      .array(LineItemsTaxAmountSchema)
      .describe('The aggregated tax amounts by rate.')
  })
  export type QuotesResourceTotalDetailsResourceBreakdown = z.infer<
    typeof QuotesResourceTotalDetailsResourceBreakdownSchema
  >

  export const LineItemsDiscountAmountSchema = z.object({
    /** The amount discounted. */
    amount: z.number().int().describe('The amount discounted.'),
    discount: DiscountSchema
  })
  export type LineItemsDiscountAmount = z.infer<
    typeof LineItemsDiscountAmountSchema
  >

  export const QuotesResourceUpfrontSchema = z.object({
    /** Total before any discounts or taxes are applied. */
    amount_subtotal: z
      .number()
      .int()
      .describe('Total before any discounts or taxes are applied.'),
    /** Total after discounts and taxes are applied. */
    amount_total: z
      .number()
      .int()
      .describe('Total after discounts and taxes are applied.'),
    /** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
    line_items: z
      .object({
        /** Details about each object. */
        data: z.array(ItemSchema).describe('Details about each object.'),
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: z
          .boolean()
          .describe(
            'True if this list has another page of items after this one that can be fetched.'
          ),
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: z
          .literal('list')
          .describe(
            "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
          ),
        /** The URL where this list can be accessed. */
        url: z
          .string()
          .max(5000)
          .describe('The URL where this list can be accessed.')
      })
      .describe(
        'The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.'
      )
      .optional(),
    total_details: QuotesResourceTotalDetailsSchema
  })
  export type QuotesResourceUpfront = z.infer<
    typeof QuotesResourceUpfrontSchema
  >

  /** A line item. */
  export const ItemSchema = z
    .object({
      /** Total discount amount applied. If no discounts were applied, defaults to 0. */
      amount_discount: z
        .number()
        .int()
        .describe(
          'Total discount amount applied. If no discounts were applied, defaults to 0.'
        ),
      /** Total before any discounts or taxes are applied. */
      amount_subtotal: z
        .number()
        .int()
        .describe('Total before any discounts or taxes are applied.'),
      /** Total tax amount applied. If no tax was applied, defaults to 0. */
      amount_tax: z
        .number()
        .int()
        .describe(
          'Total tax amount applied. If no tax was applied, defaults to 0.'
        ),
      /** Total after discounts and taxes. */
      amount_total: z
        .number()
        .int()
        .describe('Total after discounts and taxes.'),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.'
        )
        .optional(),
      /** The discounts applied to the line item. */
      discounts: z
        .array(LineItemsDiscountAmountSchema)
        .describe('The discounts applied to the line item.')
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('item')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The price used to generate the line item. */
      price: PriceSchema.nullable()
        .describe('The price used to generate the line item.')
        .optional(),
      /** The quantity of products being purchased. */
      quantity: z
        .number()
        .int()
        .nullable()
        .describe('The quantity of products being purchased.')
        .optional(),
      /** The taxes applied to the line item. */
      taxes: z
        .array(LineItemsTaxAmountSchema)
        .describe('The taxes applied to the line item.')
        .optional()
    })
    .describe('A line item.')
  export type Item = z.infer<typeof ItemSchema>

  export const QuotesResourceFromQuoteSchema = z.object({
    /** Whether this quote is a revision of a different quote. */
    is_revision: z
      .boolean()
      .describe('Whether this quote is a revision of a different quote.'),
    /** The quote that was cloned. */
    quote: z
      .union([z.string().max(5000), QuoteSchema])
      .describe('The quote that was cloned.')
  })
  export type QuotesResourceFromQuote = z.infer<
    typeof QuotesResourceFromQuoteSchema
  >

  export const InvoiceSettingQuoteSettingSchema = z.object({
    /** Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
    days_until_due: z
      .number()
      .int()
      .nullable()
      .describe(
        'Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.'
      )
      .optional(),
    issuer: ConnectAccountReferenceSchema
  })
  export type InvoiceSettingQuoteSetting = z.infer<
    typeof InvoiceSettingQuoteSettingSchema
  >

  export const QuotesResourceTransferDataSchema = z.object({
    /** The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.'
      )
      .optional(),
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
    amount_percent: z
      .number()
      .nullable()
      .describe(
        'A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.'
      )
      .optional(),
    /** The account where funds from the payment will be transferred to upon payment success. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The account where funds from the payment will be transferred to upon payment success.'
      )
  })
  export type QuotesResourceTransferData = z.infer<
    typeof QuotesResourceTransferDataSchema
  >

  export const InvoiceTransferDataSchema = z.object({
    /** The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.'
      )
      .optional(),
    /** The account where funds from the payment will be transferred to upon payment success. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The account where funds from the payment will be transferred to upon payment success.'
      )
  })
  export type InvoiceTransferData = z.infer<typeof InvoiceTransferDataSchema>

  export const TransferDataSchema = z.object({
    /**
     * The amount transferred to the destination account. This transfer will occur automatically after the payment succeeds. If no amount is specified, by default the entire payment amount is transferred to the destination account.
     *  The amount must be less than or equal to the [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount), and must be a positive integer
     *  representing how much to transfer in the smallest currency unit (e.g., 100 cents to charge $1.00).
     */
    amount: z
      .number()
      .int()
      .describe(
        'The amount transferred to the destination account. This transfer will occur automatically after the payment succeeds. If no amount is specified, by default the entire payment amount is transferred to the destination account.\n The amount must be less than or equal to the [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount), and must be a positive integer\n representing how much to transfer in the smallest currency unit (e.g., 100 cents to charge $1.00).'
      )
      .optional(),
    /** The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success.'
      )
  })
  export type TransferData = z.infer<typeof TransferDataSchema>

  export const PaymentMethodSepaDebitSchema = z.object({
    /** Bank code of bank associated with the bank account. */
    bank_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Bank code of bank associated with the bank account.')
      .optional(),
    /** Branch code of bank associated with the bank account. */
    branch_code: z
      .string()
      .max(5000)
      .nullable()
      .describe('Branch code of bank associated with the bank account.')
      .optional(),
    /** Two-letter ISO code representing the country the bank account is located in. */
    country: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Two-letter ISO code representing the country the bank account is located in.'
      )
      .optional(),
    /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    fingerprint: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
      )
      .optional(),
    /** Information about the object that generated this PaymentMethod. */
    generated_from: SepaDebitGeneratedFromSchema.nullable()
      .describe(
        'Information about the object that generated this PaymentMethod.'
      )
      .optional(),
    /** Last four characters of the IBAN. */
    last4: z
      .string()
      .max(5000)
      .nullable()
      .describe('Last four characters of the IBAN.')
      .optional()
  })
  export type PaymentMethodSepaDebit = z.infer<
    typeof PaymentMethodSepaDebitSchema
  >

  export const SepaDebitGeneratedFromSchema = z.object({
    /** The ID of the Charge that generated this PaymentMethod, if any. */
    charge: z
      .union([z.string().max(5000), ChargeSchema])
      .nullable()
      .describe(
        'The ID of the Charge that generated this PaymentMethod, if any.'
      )
      .optional(),
    /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
    setup_attempt: z
      .union([z.string().max(5000), SetupAttemptSchema])
      .nullable()
      .describe(
        'The ID of the SetupAttempt that generated this PaymentMethod, if any.'
      )
      .optional()
  })
  export type SepaDebitGeneratedFrom = z.infer<
    typeof SepaDebitGeneratedFromSchema
  >

  export const AccountSettingsSchema = z.object({
    bacs_debit_payments: AccountBacsDebitPaymentsSettingsSchema.optional(),
    branding: AccountBrandingSettingsSchema,
    card_issuing: AccountCardIssuingSettingsSchema.optional(),
    card_payments: AccountCardPaymentsSettingsSchema,
    dashboard: AccountDashboardSettingsSchema,
    invoices: AccountInvoicesSettingsSchema.optional(),
    payments: AccountPaymentsSettingsSchema,
    payouts: AccountPayoutSettingsSchema.optional(),
    sepa_debit_payments: AccountSepaDebitPaymentsSettingsSchema.optional(),
    treasury: AccountTreasurySettingsSchema.optional()
  })
  export type AccountSettings = z.infer<typeof AccountSettingsSchema>

  export const AccountInvoicesSettingsSchema = z.object({
    /** The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized. */
    default_account_tax_ids: z
      .array(z.union([z.string().max(5000), TaxIdSchema]))
      .nullable()
      .describe(
        'The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized.'
      )
      .optional()
  })
  export type AccountInvoicesSettings = z.infer<
    typeof AccountInvoicesSettingsSchema
  >

  export const ExternalAccountSchema = z.union([BankAccountSchema, CardSchema])
  export type ExternalAccount = z.infer<typeof ExternalAccountSchema>

  export const ThresholdsResourceUsageAlertFilterSchema = z.object({
    /** Limit the scope of the alert to this customer ID */
    customer: z
      .union([z.string().max(5000), CustomerSchema])
      .nullable()
      .describe('Limit the scope of the alert to this customer ID')
      .optional(),
    type: z.literal('customer')
  })
  export type ThresholdsResourceUsageAlertFilter = z.infer<
    typeof ThresholdsResourceUsageAlertFilterSchema
  >

  export const PaymentPagesCheckoutSessionAutomaticTaxSchema = z.object({
    /** Indicates whether automatic tax is enabled for the session */
    enabled: z
      .boolean()
      .describe('Indicates whether automatic tax is enabled for the session'),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional(),
    /** The status of the most recent automated tax calculation for this session. */
    status: z
      .enum(['complete', 'failed', 'requires_location_inputs'])
      .nullable()
      .describe(
        'The status of the most recent automated tax calculation for this session.'
      )
      .optional()
  })
  export type PaymentPagesCheckoutSessionAutomaticTax = z.infer<
    typeof PaymentPagesCheckoutSessionAutomaticTaxSchema
  >

  export const PaymentPagesCheckoutSessionDiscountSchema = z.object({
    /** Coupon attached to the Checkout Session. */
    coupon: z
      .union([z.string().max(5000), CouponSchema])
      .nullable()
      .describe('Coupon attached to the Checkout Session.')
      .optional(),
    /** Promotion code attached to the Checkout Session. */
    promotion_code: z
      .union([z.string().max(5000), PromotionCodeSchema])
      .nullable()
      .describe('Promotion code attached to the Checkout Session.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionDiscount = z.infer<
    typeof PaymentPagesCheckoutSessionDiscountSchema
  >

  export const PaymentLinksResourceAutomaticTaxSchema = z.object({
    /** If `true`, tax will be calculated automatically using the customer's location. */
    enabled: z
      .boolean()
      .describe(
        "If `true`, tax will be calculated automatically using the customer's location."
      ),
    /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
    liability: ConnectAccountReferenceSchema.nullable()
      .describe(
        "The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account."
      )
      .optional()
  })
  export type PaymentLinksResourceAutomaticTax = z.infer<
    typeof PaymentLinksResourceAutomaticTaxSchema
  >

  export const PaymentLinksResourceSubscriptionDataInvoiceSettingsSchema =
    z.object({ issuer: ConnectAccountReferenceSchema })
  export type PaymentLinksResourceSubscriptionDataInvoiceSettings = z.infer<
    typeof PaymentLinksResourceSubscriptionDataInvoiceSettingsSchema
  >

  export const PaymentLinksResourceTransferDataSchema = z.object({
    /** The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
    amount: z
      .number()
      .int()
      .nullable()
      .describe(
        'The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination.'
      )
      .optional(),
    /** The connected account receiving the transfer. */
    destination: z
      .union([z.string().max(5000), AccountSchema])
      .describe('The connected account receiving the transfer.')
  })
  export type PaymentLinksResourceTransferData = z.infer<
    typeof PaymentLinksResourceTransferDataSchema
  >

  export const PaymentPagesCheckoutSessionTotalDetailsResourceBreakdownSchema =
    z.object({
      /** The aggregated discounts. */
      discounts: z
        .array(LineItemsDiscountAmountSchema)
        .describe('The aggregated discounts.'),
      /** The aggregated tax amounts by rate. */
      taxes: z
        .array(LineItemsTaxAmountSchema)
        .describe('The aggregated tax amounts by rate.')
    })
  export type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown =
    z.infer<
      typeof PaymentPagesCheckoutSessionTotalDetailsResourceBreakdownSchema
    >

  /** Details of the PaymentMethod collected by Payment Element */
  export const ConfirmationTokensResourcePaymentMethodPreviewSchema = z
    .object({
      acss_debit: PaymentMethodAcssDebitSchema.optional(),
      affirm: PaymentMethodAffirmSchema.optional(),
      afterpay_clearpay: PaymentMethodAfterpayClearpaySchema.optional(),
      alipay: PaymentFlowsPrivatePaymentMethodsAlipaySchema.optional(),
      /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”. */
      allow_redisplay: z
        .enum(['always', 'limited', 'unspecified'])
        .describe(
          'This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.'
        )
        .optional(),
      alma: PaymentMethodAlmaSchema.optional(),
      amazon_pay: PaymentMethodAmazonPaySchema.optional(),
      au_becs_debit: PaymentMethodAuBecsDebitSchema.optional(),
      bacs_debit: PaymentMethodBacsDebitSchema.optional(),
      bancontact: PaymentMethodBancontactSchema.optional(),
      billing_details: BillingDetailsSchema,
      blik: PaymentMethodBlikSchema.optional(),
      boleto: PaymentMethodBoletoSchema.optional(),
      card: PaymentMethodCardSchema.optional(),
      card_present: PaymentMethodCardPresentSchema.optional(),
      cashapp: PaymentMethodCashappSchema.optional(),
      /** The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .nullable()
        .describe(
          'The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.'
        )
        .optional(),
      customer_balance: PaymentMethodCustomerBalanceSchema.optional(),
      eps: PaymentMethodEpsSchema.optional(),
      fpx: PaymentMethodFpxSchema.optional(),
      giropay: PaymentMethodGiropaySchema.optional(),
      grabpay: PaymentMethodGrabpaySchema.optional(),
      ideal: PaymentMethodIdealSchema.optional(),
      interac_present: PaymentMethodInteracPresentSchema.optional(),
      kakao_pay: PaymentMethodKakaoPaySchema.optional(),
      klarna: PaymentMethodKlarnaSchema.optional(),
      konbini: PaymentMethodKonbiniSchema.optional(),
      kr_card: PaymentMethodKrCardSchema.optional(),
      link: PaymentMethodLinkSchema.optional(),
      mobilepay: PaymentMethodMobilepaySchema.optional(),
      multibanco: PaymentMethodMultibancoSchema.optional(),
      naver_pay: PaymentMethodNaverPaySchema.optional(),
      oxxo: PaymentMethodOxxoSchema.optional(),
      p24: PaymentMethodP24Schema.optional(),
      pay_by_bank: PaymentMethodPayByBankSchema.optional(),
      payco: PaymentMethodPaycoSchema.optional(),
      paynow: PaymentMethodPaynowSchema.optional(),
      paypal: PaymentMethodPaypalSchema.optional(),
      pix: PaymentMethodPixSchema.optional(),
      promptpay: PaymentMethodPromptpaySchema.optional(),
      revolut_pay: PaymentMethodRevolutPaySchema.optional(),
      samsung_pay: PaymentMethodSamsungPaySchema.optional(),
      sepa_debit: PaymentMethodSepaDebitSchema.optional(),
      sofort: PaymentMethodSofortSchema.optional(),
      swish: PaymentMethodSwishSchema.optional(),
      twint: PaymentMethodTwintSchema.optional(),
      /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
      type: z
        .enum([
          'acss_debit',
          'affirm',
          'afterpay_clearpay',
          'alipay',
          'alma',
          'amazon_pay',
          'au_becs_debit',
          'bacs_debit',
          'bancontact',
          'blik',
          'boleto',
          'card',
          'card_present',
          'cashapp',
          'customer_balance',
          'eps',
          'fpx',
          'giropay',
          'grabpay',
          'ideal',
          'interac_present',
          'kakao_pay',
          'klarna',
          'konbini',
          'kr_card',
          'link',
          'mobilepay',
          'multibanco',
          'naver_pay',
          'oxxo',
          'p24',
          'pay_by_bank',
          'payco',
          'paynow',
          'paypal',
          'pix',
          'promptpay',
          'revolut_pay',
          'samsung_pay',
          'sepa_debit',
          'sofort',
          'swish',
          'twint',
          'us_bank_account',
          'wechat_pay',
          'zip'
        ])
        .describe(
          'The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.'
        ),
      us_bank_account: PaymentMethodUsBankAccountSchema.optional(),
      wechat_pay: PaymentMethodWechatPaySchema.optional(),
      zip: PaymentMethodZipSchema.optional()
    })
    .describe('Details of the PaymentMethod collected by Payment Element')
  export type ConfirmationTokensResourcePaymentMethodPreview = z.infer<
    typeof ConfirmationTokensResourcePaymentMethodPreviewSchema
  >

  export const CreditNotesPretaxCreditAmountSchema = z.object({
    /** The amount, in cents (or local equivalent), of the pretax credit amount. */
    amount: z
      .number()
      .int()
      .describe(
        'The amount, in cents (or local equivalent), of the pretax credit amount.'
      ),
    /** The credit balance transaction that was applied to get this pretax credit amount. */
    credit_balance_transaction: z
      .union([z.string().max(5000), BillingCreditBalanceTransactionSchema])
      .describe(
        'The credit balance transaction that was applied to get this pretax credit amount.'
      )
      .optional(),
    /** The discount that was applied to get this pretax credit amount. */
    discount: z
      .union([z.string().max(5000), DiscountSchema, DeletedDiscountSchema])
      .describe(
        'The discount that was applied to get this pretax credit amount.'
      )
      .optional(),
    /** Type of the pretax credit amount referenced. */
    type: z
      .enum(['credit_balance_transaction', 'discount'])
      .describe('Type of the pretax credit amount referenced.')
  })
  export type CreditNotesPretaxCreditAmount = z.infer<
    typeof CreditNotesPretaxCreditAmountSchema
  >

  export const PaymentSourceSchema = z.union([
    AccountSchema,
    BankAccountSchema,
    CardSchema,
    SourceSchema
  ])
  export type PaymentSource = z.infer<typeof PaymentSourceSchema>

  export const BankConnectionsResourceAccountholderSchema = z.object({
    /** The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`. */
    account: z
      .union([z.string().max(5000), AccountSchema])
      .describe(
        'The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`.'
      )
      .optional(),
    /** ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`. */
    customer: z
      .union([z.string().max(5000), CustomerSchema])
      .describe(
        'ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`.'
      )
      .optional(),
    /** Type of account holder that this account belongs to. */
    type: z
      .enum(['account', 'customer'])
      .describe('Type of account holder that this account belongs to.')
  })
  export type BankConnectionsResourceAccountholder = z.infer<
    typeof BankConnectionsResourceAccountholderSchema
  >

  /**
   * An early fraud warning indicates that the card issuer has notified us that a
   * charge may be fraudulent.
   *
   * Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
   */
  export const RadarEarlyFraudWarningSchema = z
    .object({
      /** An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
      actionable: z
        .boolean()
        .describe(
          'An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.'
        ),
      /** ID of the charge this early fraud warning is for, optionally expanded. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .describe(
          'ID of the charge this early fraud warning is for, optionally expanded.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
      fraud_type: z
        .string()
        .max(5000)
        .describe(
          'The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('radar.early_fraud_warning')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the Payment Intent this early fraud warning is for, optionally expanded. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe(
          'ID of the Payment Intent this early fraud warning is for, optionally expanded.'
        )
        .optional()
    })
    .describe(
      'An early fraud warning indicates that the card issuer has notified us that a\ncharge may be fraudulent.\n\nRelated guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)'
    )
  export type RadarEarlyFraudWarning = z.infer<
    typeof RadarEarlyFraudWarningSchema
  >

  export const InboundTransfersPaymentMethodDetailsUsBankAccountSchema =
    z.object({
      /** Account holder type: individual or company. */
      account_holder_type: z
        .enum(['company', 'individual'])
        .nullable()
        .describe('Account holder type: individual or company.')
        .optional(),
      /** Account type: checkings or savings. Defaults to checking if omitted. */
      account_type: z
        .enum(['checking', 'savings'])
        .nullable()
        .describe(
          'Account type: checkings or savings. Defaults to checking if omitted.'
        )
        .optional(),
      /** Name of the bank associated with the bank account. */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Name of the bank associated with the bank account.')
        .optional(),
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
        )
        .optional(),
      /** Last four digits of the bank account number. */
      last4: z
        .string()
        .max(5000)
        .nullable()
        .describe('Last four digits of the bank account number.')
        .optional(),
      /** ID of the mandate used to make this payment. */
      mandate: z
        .union([z.string().max(5000), MandateSchema])
        .describe('ID of the mandate used to make this payment.')
        .optional(),
      /** The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type. */
      network: z
        .literal('ach')
        .describe(
          'The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.'
        ),
      /** Routing number of the bank account. */
      routing_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('Routing number of the bank account.')
        .optional()
    })
  export type InboundTransfersPaymentMethodDetailsUsBankAccount = z.infer<
    typeof InboundTransfersPaymentMethodDetailsUsBankAccountSchema
  >

  export const OutboundPaymentsPaymentMethodDetailsUsBankAccountSchema =
    z.object({
      /** Account holder type: individual or company. */
      account_holder_type: z
        .enum(['company', 'individual'])
        .nullable()
        .describe('Account holder type: individual or company.')
        .optional(),
      /** Account type: checkings or savings. Defaults to checking if omitted. */
      account_type: z
        .enum(['checking', 'savings'])
        .nullable()
        .describe(
          'Account type: checkings or savings. Defaults to checking if omitted.'
        )
        .optional(),
      /** Name of the bank associated with the bank account. */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Name of the bank associated with the bank account.')
        .optional(),
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
        )
        .optional(),
      /** Last four digits of the bank account number. */
      last4: z
        .string()
        .max(5000)
        .nullable()
        .describe('Last four digits of the bank account number.')
        .optional(),
      /** ID of the mandate used to make this payment. */
      mandate: z
        .union([z.string().max(5000), MandateSchema])
        .describe('ID of the mandate used to make this payment.')
        .optional(),
      /** The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type. */
      network: z
        .enum(['ach', 'us_domestic_wire'])
        .describe(
          'The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.'
        ),
      /** Routing number of the bank account. */
      routing_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('Routing number of the bank account.')
        .optional()
    })
  export type OutboundPaymentsPaymentMethodDetailsUsBankAccount = z.infer<
    typeof OutboundPaymentsPaymentMethodDetailsUsBankAccountSchema
  >

  export const OutboundTransfersPaymentMethodDetailsUsBankAccountSchema =
    z.object({
      /** Account holder type: individual or company. */
      account_holder_type: z
        .enum(['company', 'individual'])
        .nullable()
        .describe('Account holder type: individual or company.')
        .optional(),
      /** Account type: checkings or savings. Defaults to checking if omitted. */
      account_type: z
        .enum(['checking', 'savings'])
        .nullable()
        .describe(
          'Account type: checkings or savings. Defaults to checking if omitted.'
        )
        .optional(),
      /** Name of the bank associated with the bank account. */
      bank_name: z
        .string()
        .max(5000)
        .nullable()
        .describe('Name of the bank associated with the bank account.')
        .optional(),
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.'
        )
        .optional(),
      /** Last four digits of the bank account number. */
      last4: z
        .string()
        .max(5000)
        .nullable()
        .describe('Last four digits of the bank account number.')
        .optional(),
      /** ID of the mandate used to make this payment. */
      mandate: z
        .union([z.string().max(5000), MandateSchema])
        .describe('ID of the mandate used to make this payment.')
        .optional(),
      /** The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type. */
      network: z
        .enum(['ach', 'us_domestic_wire'])
        .describe(
          'The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.'
        ),
      /** Routing number of the bank account. */
      routing_number: z
        .string()
        .max(5000)
        .nullable()
        .describe('Routing number of the bank account.')
        .optional()
    })
  export type OutboundTransfersPaymentMethodDetailsUsBankAccount = z.infer<
    typeof OutboundTransfersPaymentMethodDetailsUsBankAccountSchema
  >

  /**
   * Tokenization is the process Stripe uses to collect sensitive card or bank
   * account details, or personally identifiable information (PII), directly from
   * your customers in a secure manner. A token representing this information is
   * returned to your server to use. Use our
   * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
   * on the client-side. This guarantees that no sensitive card data touches your server,
   * and allows your integration to operate in a PCI-compliant way.
   *
   * If you can't use client-side tokenization, you can also create tokens using
   * the API with either your publishable or secret API key. If
   * your integration uses this method, you're responsible for any PCI compliance
   * that it might require, and you must keep your secret API key safe. Unlike with
   * client-side tokenization, your customer's information isn't sent directly to
   * Stripe, so we can't determine how it's handled or stored.
   *
   * You can't store or use tokens more than once. To store card or bank account
   * information for later use, create [Customer](https://stripe.com/docs/api#customers)
   * objects or [External accounts](/api#external_accounts).
   * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
   * performs best with integrations that use client-side tokenization.
   */
  export const TokenSchema = z
    .object({
      bank_account: BankAccountSchema.optional(),
      card: CardSchema.optional(),
      /** IP address of the client that generates the token. */
      client_ip: z
        .string()
        .max(5000)
        .nullable()
        .describe('IP address of the client that generates the token.')
        .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('token')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Type of the token: `account`, `bank_account`, `card`, or `pii`. */
      type: z
        .string()
        .max(5000)
        .describe(
          'Type of the token: `account`, `bank_account`, `card`, or `pii`.'
        ),
      /** Determines if you have already used this token (you can only use tokens once). */
      used: z
        .boolean()
        .describe(
          'Determines if you have already used this token (you can only use tokens once).'
        )
    })
    .describe(
      "Tokenization is the process Stripe uses to collect sensitive card or bank\naccount details, or personally identifiable information (PII), directly from\nyour customers in a secure manner. A token representing this information is\nreturned to your server to use. Use our\n[recommended payments integrations](https://stripe.com/docs/payments) to perform this process\non the client-side. This guarantees that no sensitive card data touches your server,\nand allows your integration to operate in a PCI-compliant way.\n\nIf you can't use client-side tokenization, you can also create tokens using\nthe API with either your publishable or secret API key. If\nyour integration uses this method, you're responsible for any PCI compliance\nthat it might require, and you must keep your secret API key safe. Unlike with\nclient-side tokenization, your customer's information isn't sent directly to\nStripe, so we can't determine how it's handled or stored.\n\nYou can't store or use tokens more than once. To store card or bank account\ninformation for later use, create [Customer](https://stripe.com/docs/api#customers)\nobjects or [External accounts](/api#external_accounts).\n[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,\nperforms best with integrations that use client-side tokenization."
    )
  export type Token = z.infer<typeof TokenSchema>

  /** Indicates the billing credit balance for billing credits granted to a customer. */
  export const BillingCreditBalanceSummarySchema = z
    .object({
      /** The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry. */
      balances: z
        .array(CreditBalanceSchema)
        .describe(
          'The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry.'
        ),
      /** The customer the balance is for. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe('The customer the balance is for.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.credit_balance_summary')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      'Indicates the billing credit balance for billing credits granted to a customer.'
    )
  export type BillingCreditBalanceSummary = z.infer<
    typeof BillingCreditBalanceSummarySchema
  >

  export const PaymentPagesCheckoutSessionInvoiceSettingsSchema = z.object({
    /** The account tax IDs associated with the invoice. */
    account_tax_ids: z
      .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
      .nullable()
      .describe('The account tax IDs associated with the invoice.')
      .optional(),
    /** Custom fields displayed on the invoice. */
    custom_fields: z
      .array(InvoiceSettingCustomFieldSchema)
      .nullable()
      .describe('Custom fields displayed on the invoice.')
      .optional(),
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An arbitrary string attached to the object. Often useful for displaying to users.'
      )
      .optional(),
    /** Footer displayed on the invoice. */
    footer: z
      .string()
      .max(5000)
      .nullable()
      .describe('Footer displayed on the invoice.')
      .optional(),
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer: ConnectAccountReferenceSchema.nullable()
      .describe(
        'The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.'
      )
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata: z
      .record(z.string().max(500))
      .nullable()
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
      )
      .optional(),
    /** Options for invoice PDF rendering. */
    rendering_options: InvoiceSettingCheckoutRenderingOptionsSchema.nullable()
      .describe('Options for invoice PDF rendering.')
      .optional()
  })
  export type PaymentPagesCheckoutSessionInvoiceSettings = z.infer<
    typeof PaymentPagesCheckoutSessionInvoiceSettingsSchema
  >

  export const PaymentLinksResourceInvoiceSettingsSchema = z.object({
    /** The account tax IDs associated with the invoice. */
    account_tax_ids: z
      .array(z.union([z.string().max(5000), TaxIdSchema, DeletedTaxIdSchema]))
      .nullable()
      .describe('The account tax IDs associated with the invoice.')
      .optional(),
    /** A list of up to 4 custom fields to be displayed on the invoice. */
    custom_fields: z
      .array(InvoiceSettingCustomFieldSchema)
      .nullable()
      .describe(
        'A list of up to 4 custom fields to be displayed on the invoice.'
      )
      .optional(),
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'An arbitrary string attached to the object. Often useful for displaying to users.'
      )
      .optional(),
    /** Footer to be displayed on the invoice. */
    footer: z
      .string()
      .max(5000)
      .nullable()
      .describe('Footer to be displayed on the invoice.')
      .optional(),
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer: ConnectAccountReferenceSchema.nullable()
      .describe(
        'The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.'
      )
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata: z
      .record(z.string().max(500))
      .nullable()
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
      )
      .optional(),
    /** Options for invoice PDF rendering. */
    rendering_options: InvoiceSettingCheckoutRenderingOptionsSchema.nullable()
      .describe('Options for invoice PDF rendering.')
      .optional()
  })
  export type PaymentLinksResourceInvoiceSettings = z.infer<
    typeof PaymentLinksResourceInvoiceSettingsSchema
  >

  export const PaymentLinksResourceSubscriptionDataSchema = z.object({
    /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
    description: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs."
      )
      .optional(),
    invoice_settings: PaymentLinksResourceSubscriptionDataInvoiceSettingsSchema,
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link. */
    metadata: z
      .record(z.string().max(500))
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link.'
      ),
    /** Integer representing the number of trial period days before the customer is charged for the first time. */
    trial_period_days: z
      .number()
      .int()
      .nullable()
      .describe(
        'Integer representing the number of trial period days before the customer is charged for the first time.'
      )
      .optional(),
    /** Settings related to subscription trials. */
    trial_settings: SubscriptionsTrialsResourceTrialSettingsSchema.nullable()
      .describe('Settings related to subscription trials.')
      .optional()
  })
  export type PaymentLinksResourceSubscriptionData = z.infer<
    typeof PaymentLinksResourceSubscriptionDataSchema
  >

  export const PaymentPagesCheckoutSessionTotalDetailsSchema = z.object({
    /** This is the sum of all the discounts. */
    amount_discount: z
      .number()
      .int()
      .describe('This is the sum of all the discounts.'),
    /** This is the sum of all the shipping amounts. */
    amount_shipping: z
      .number()
      .int()
      .nullable()
      .describe('This is the sum of all the shipping amounts.')
      .optional(),
    /** This is the sum of all the tax amounts. */
    amount_tax: z
      .number()
      .int()
      .describe('This is the sum of all the tax amounts.'),
    breakdown:
      PaymentPagesCheckoutSessionTotalDetailsResourceBreakdownSchema.optional()
  })
  export type PaymentPagesCheckoutSessionTotalDetails = z.infer<
    typeof PaymentPagesCheckoutSessionTotalDetailsSchema
  >

  /** Represents a reader action to process a setup intent */
  export const TerminalReaderReaderResourceProcessSetupIntentActionSchema = z
    .object({
      /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      generated_card: z
        .string()
        .max(5000)
        .describe(
          'ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.'
        )
        .optional(),
      process_config:
        TerminalReaderReaderResourceProcessSetupConfigSchema.optional(),
      /** Most recent SetupIntent processed by the reader. */
      setup_intent: z
        .union([z.string().max(5000), SetupIntentSchema])
        .describe('Most recent SetupIntent processed by the reader.')
    })
    .describe('Represents a reader action to process a setup intent')
  export type TerminalReaderReaderResourceProcessSetupIntentAction = z.infer<
    typeof TerminalReaderReaderResourceProcessSetupIntentActionSchema
  >

  /** Represents a reader action to refund a payment */
  export const TerminalReaderReaderResourceRefundPaymentActionSchema = z
    .object({
      /** The amount being refunded. */
      amount: z
        .number()
        .int()
        .describe('The amount being refunded.')
        .optional(),
      /** Charge that is being refunded. */
      charge: z
        .union([z.string().max(5000), ChargeSchema])
        .describe('Charge that is being refunded.')
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** Payment intent that is being refunded. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe('Payment intent that is being refunded.')
        .optional(),
      /** The reason for the refund. */
      reason: z
        .enum(['duplicate', 'fraudulent', 'requested_by_customer'])
        .describe('The reason for the refund.')
        .optional(),
      /** Unique identifier for the refund object. */
      refund: z
        .union([z.string().max(5000), RefundSchema])
        .describe('Unique identifier for the refund object.')
        .optional(),
      /** Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge. */
      refund_application_fee: z
        .boolean()
        .describe(
          'Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.'
        )
        .optional(),
      refund_payment_config:
        TerminalReaderReaderResourceRefundPaymentConfigSchema.optional(),
      /** Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge. */
      reverse_transfer: z
        .boolean()
        .describe(
          'Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.'
        )
        .optional()
    })
    .describe('Represents a reader action to refund a payment')
  export type TerminalReaderReaderResourceRefundPaymentAction = z.infer<
    typeof TerminalReaderReaderResourceRefundPaymentActionSchema
  >

  /**
   * This is an object representing a capability for a Stripe account.
   *
   * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
   */
  export const CapabilitySchema = z
    .object({
      /** The account for which the capability enables functionality. */
      account: z
        .union([z.string().max(5000), AccountSchema])
        .describe(
          'The account for which the capability enables functionality.'
        ),
      future_requirements: AccountCapabilityFutureRequirementsSchema.optional(),
      /** The identifier for the capability. */
      id: z.string().max(5000).describe('The identifier for the capability.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('capability')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Whether the capability has been requested. */
      requested: z
        .boolean()
        .describe('Whether the capability has been requested.'),
      /** Time at which the capability was requested. Measured in seconds since the Unix epoch. */
      requested_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which the capability was requested. Measured in seconds since the Unix epoch.'
        )
        .optional(),
      requirements: AccountCapabilityRequirementsSchema.optional(),
      /** The status of the capability. */
      status: z
        .enum(['active', 'disabled', 'inactive', 'pending', 'unrequested'])
        .describe('The status of the capability.')
    })
    .describe(
      'This is an object representing a capability for a Stripe account.\n\nRelated guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)'
    )
  export type Capability = z.infer<typeof CapabilitySchema>

  export const PaymentPagesCheckoutSessionInvoiceCreationSchema = z.object({
    /** Indicates whether invoice creation is enabled for the Checkout Session. */
    enabled: z
      .boolean()
      .describe(
        'Indicates whether invoice creation is enabled for the Checkout Session.'
      ),
    invoice_data: PaymentPagesCheckoutSessionInvoiceSettingsSchema
  })
  export type PaymentPagesCheckoutSessionInvoiceCreation = z.infer<
    typeof PaymentPagesCheckoutSessionInvoiceCreationSchema
  >

  export const PaymentLinksResourceInvoiceCreationSchema = z.object({
    /** Enable creating an invoice on successful payment. */
    enabled: z
      .boolean()
      .describe('Enable creating an invoice on successful payment.'),
    /** Configuration for the invoice. Default invoice values will be used if unspecified. */
    invoice_data: PaymentLinksResourceInvoiceSettingsSchema.nullable()
      .describe(
        'Configuration for the invoice. Default invoice values will be used if unspecified.'
      )
      .optional()
  })
  export type PaymentLinksResourceInvoiceCreation = z.infer<
    typeof PaymentLinksResourceInvoiceCreationSchema
  >

  /** The credit note line item object */
  export const CreditNoteLineItemSchema = z
    .object({
      /** The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
      amount: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.'
        ),
      /** The integer amount in cents (or local equivalent) representing the amount being credited for this line item, excluding all tax and discounts. */
      amount_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the amount being credited for this line item, excluding all tax and discounts.'
        )
        .optional(),
      /** Description of the item being credited. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe('Description of the item being credited.')
        .optional(),
      /** The integer amount in cents (or local equivalent) representing the discount being credited for this line item. */
      discount_amount: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the discount being credited for this line item.'
        ),
      /** The amount of discount calculated per discount for this line item */
      discount_amounts: z
        .array(DiscountsResourceDiscountAmountSchema)
        .describe(
          'The amount of discount calculated per discount for this line item'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** ID of the invoice line item being credited */
      invoice_line_item: z
        .string()
        .max(5000)
        .describe('ID of the invoice line item being credited')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('credit_note_line_item')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The pretax credit amounts (ex: discount, credit grants, etc) for this line item. */
      pretax_credit_amounts: z
        .array(CreditNotesPretaxCreditAmountSchema)
        .describe(
          'The pretax credit amounts (ex: discount, credit grants, etc) for this line item.'
        ),
      /** The number of units of product being credited. */
      quantity: z
        .number()
        .int()
        .nullable()
        .describe('The number of units of product being credited.')
        .optional(),
      /** The amount of tax calculated per tax rate for this line item */
      tax_amounts: z
        .array(CreditNoteTaxAmountSchema)
        .describe(
          'The amount of tax calculated per tax rate for this line item'
        ),
      /** The tax rates which apply to the line item. */
      tax_rates: z
        .array(TaxRateSchema)
        .describe('The tax rates which apply to the line item.'),
      /** The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice. */
      type: z
        .enum(['custom_line_item', 'invoice_line_item'])
        .describe(
          'The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.'
        ),
      /** The cost of each unit of product being credited. */
      unit_amount: z
        .number()
        .int()
        .nullable()
        .describe('The cost of each unit of product being credited.')
        .optional(),
      /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal: z
        .string()
        .nullable()
        .describe(
          'Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.'
        )
        .optional(),
      /** The amount in cents (or local equivalent) representing the unit amount being credited for this line item, excluding all tax and discounts. */
      unit_amount_excluding_tax: z
        .string()
        .nullable()
        .describe(
          'The amount in cents (or local equivalent) representing the unit amount being credited for this line item, excluding all tax and discounts.'
        )
        .optional()
    })
    .describe('The credit note line item object')
  export type CreditNoteLineItem = z.infer<typeof CreditNoteLineItemSchema>

  /** Represents a reader action to process a payment intent */
  export const TerminalReaderReaderResourceProcessPaymentIntentActionSchema = z
    .object({
      /** Most recent PaymentIntent processed by the reader. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .describe('Most recent PaymentIntent processed by the reader.'),
      process_config: TerminalReaderReaderResourceProcessConfigSchema.optional()
    })
    .describe('Represents a reader action to process a payment intent')
  export type TerminalReaderReaderResourceProcessPaymentIntentAction = z.infer<
    typeof TerminalReaderReaderResourceProcessPaymentIntentActionSchema
  >

  export const InboundTransfersSchema = z.object({
    billing_details: TreasurySharedResourceBillingDetailsSchema,
    /** The type of the payment method used in the InboundTransfer. */
    type: z
      .literal('us_bank_account')
      .describe('The type of the payment method used in the InboundTransfer.'),
    us_bank_account:
      InboundTransfersPaymentMethodDetailsUsBankAccountSchema.optional()
  })
  export type InboundTransfers = z.infer<typeof InboundTransfersSchema>

  export const OutboundPaymentsPaymentMethodDetailsSchema = z.object({
    billing_details: TreasurySharedResourceBillingDetailsSchema,
    financial_account:
      OutboundPaymentsPaymentMethodDetailsFinancialAccountSchema.optional(),
    /** The type of the payment method used in the OutboundPayment. */
    type: z
      .enum(['financial_account', 'us_bank_account'])
      .describe('The type of the payment method used in the OutboundPayment.'),
    us_bank_account:
      OutboundPaymentsPaymentMethodDetailsUsBankAccountSchema.optional()
  })
  export type OutboundPaymentsPaymentMethodDetails = z.infer<
    typeof OutboundPaymentsPaymentMethodDetailsSchema
  >

  export const OutboundTransfersPaymentMethodDetailsSchema = z.object({
    billing_details: TreasurySharedResourceBillingDetailsSchema,
    financial_account:
      OutboundTransfersPaymentMethodDetailsFinancialAccountSchema.optional(),
    /** The type of the payment method used in the OutboundTransfer. */
    type: z
      .enum(['financial_account', 'us_bank_account'])
      .describe('The type of the payment method used in the OutboundTransfer.'),
    us_bank_account:
      OutboundTransfersPaymentMethodDetailsUsBankAccountSchema.optional()
  })
  export type OutboundTransfersPaymentMethodDetails = z.infer<
    typeof OutboundTransfersPaymentMethodDetailsSchema
  >

  /**
   * Issue a credit note to adjust an invoice's amount after the invoice is finalized.
   *
   * Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
   */
  export const CreditNoteSchema = z
    .object({
      /** The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax. */
      amount: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.'
        ),
      /** This is the sum of all the shipping amounts. */
      amount_shipping: z
        .number()
        .int()
        .describe('This is the sum of all the shipping amounts.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** ID of the customer. */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .describe('ID of the customer.'),
      /** Customer balance transaction related to this credit note. */
      customer_balance_transaction: z
        .union([z.string().max(5000), CustomerBalanceTransactionSchema])
        .nullable()
        .describe('Customer balance transaction related to this credit note.')
        .optional(),
      /** The integer amount in cents (or local equivalent) representing the total amount of discount that was credited. */
      discount_amount: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.'
        ),
      /** The aggregate amounts calculated per discount for all line items. */
      discount_amounts: z
        .array(DiscountsResourceDiscountAmountSchema)
        .describe(
          'The aggregate amounts calculated per discount for all line items.'
        ),
      /** The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF. */
      effective_at: z
        .number()
        .int()
        .nullable()
        .describe(
          "The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** ID of the invoice. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .describe('ID of the invoice.'),
      /** Line items that make up the credit note */
      lines: z
        .object({
          /** Details about each object. */
          data: z
            .array(CreditNoteLineItemSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('Line items that make up the credit note'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Customer-facing text that appears on the credit note PDF. */
      memo: z
        .string()
        .max(5000)
        .nullable()
        .describe('Customer-facing text that appears on the credit note PDF.')
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
      number: z
        .string()
        .max(5000)
        .describe(
          'A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('credit_note')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Amount that was credited outside of Stripe. */
      out_of_band_amount: z
        .number()
        .int()
        .nullable()
        .describe('Amount that was credited outside of Stripe.')
        .optional(),
      /** The link to download the PDF of the credit note. */
      pdf: z
        .string()
        .max(5000)
        .describe('The link to download the PDF of the credit note.'),
      /** The pretax credit amounts (ex: discount, credit grants, etc) for all line items. */
      pretax_credit_amounts: z
        .array(CreditNotesPretaxCreditAmountSchema)
        .describe(
          'The pretax credit amounts (ex: discount, credit grants, etc) for all line items.'
        ),
      /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
      reason: z
        .enum([
          'duplicate',
          'fraudulent',
          'order_change',
          'product_unsatisfactory'
        ])
        .nullable()
        .describe(
          'Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`'
        )
        .optional(),
      /** Refund related to this credit note. */
      refund: z
        .union([z.string().max(5000), RefundSchema])
        .nullable()
        .describe('Refund related to this credit note.')
        .optional(),
      /** The details of the cost of shipping, including the ShippingRate applied to the invoice. */
      shipping_cost: InvoicesResourceShippingCostSchema.nullable()
        .describe(
          'The details of the cost of shipping, including the ShippingRate applied to the invoice.'
        )
        .optional(),
      /** Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding). */
      status: z
        .enum(['issued', 'void'])
        .describe(
          'Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).'
        ),
      /** The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts. */
      subtotal: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.'
        ),
      /** The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts. */
      subtotal_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.'
        )
        .optional(),
      /** The aggregate amounts calculated per tax rate for all line items. */
      tax_amounts: z
        .array(CreditNoteTaxAmountSchema)
        .describe(
          'The aggregate amounts calculated per tax rate for all line items.'
        ),
      /** The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount. */
      total: z
        .number()
        .int()
        .describe(
          'The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.'
        ),
      /** The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts. */
      total_excluding_tax: z
        .number()
        .int()
        .nullable()
        .describe(
          'The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.'
        )
        .optional(),
      /** Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid. */
      type: z
        .enum(['post_payment', 'pre_payment'])
        .describe(
          'Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.'
        ),
      /** The time that the credit note was voided. */
      voided_at: z
        .number()
        .int()
        .nullable()
        .describe('The time that the credit note was voided.')
        .optional()
    })
    .describe(
      "Issue a credit note to adjust an invoice's amount after the invoice is finalized.\n\nRelated guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)"
    )
  export type CreditNote = z.infer<typeof CreditNoteSchema>

  /**
   * Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
   * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
   * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
   * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
   *
   * Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
   */
  export const CustomerBalanceTransactionSchema = z
    .object({
      /** The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
      amount: z
        .number()
        .int()
        .describe(
          "The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`."
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The ID of the credit note (if any) related to the transaction. */
      credit_note: z
        .union([z.string().max(5000), CreditNoteSchema])
        .nullable()
        .describe(
          'The ID of the credit note (if any) related to the transaction.'
        )
        .optional(),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The ID of the customer the transaction belongs to. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .describe('The ID of the customer the transaction belongs to.'),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
      ending_balance: z
        .number()
        .int()
        .describe(
          "The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice."
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The ID of the invoice (if any) related to the transaction. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe('The ID of the invoice (if any) related to the transaction.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('customer_balance_transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. */
      type: z
        .enum([
          'adjustment',
          'applied_to_invoice',
          'credit_note',
          'initial',
          'invoice_overpaid',
          'invoice_too_large',
          'invoice_too_small',
          'migration',
          'unapplied_from_invoice',
          'unspent_receiver_credit'
        ])
        .describe(
          'Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.'
        )
    })
    .describe(
      "Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,\nwhich denotes a debit or credit that's automatically applied to their next invoice upon finalization.\nYou may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),\nor by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.\n\nRelated guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)"
    )
  export type CustomerBalanceTransaction = z.infer<
    typeof CustomerBalanceTransactionSchema
  >

  /**
   * A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access
   * control over a Customer.
   *
   * Related guides: [Customer Session with the Payment Element](/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),
   * [Customer Session with the Pricing Table](/payments/checkout/pricing-table#customer-session),
   * [Customer Session with the Buy Button](/payment-links/buy-button#pass-an-existing-customer).
   */
  export const CustomerSessionSchema = z
    .object({
      /**
       * The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.
       *
       * The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.
       */
      client_secret: z
        .string()
        .max(5000)
        .describe(
          'The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.\n\nThe client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.'
        ),
      components: CustomerSessionResourceComponentsSchema.optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** The Customer the Customer Session was created for. */
      customer: z
        .union([z.string().max(5000), CustomerSchema])
        .describe('The Customer the Customer Session was created for.'),
      /** The timestamp at which this Customer Session will expire. */
      expires_at: z
        .number()
        .int()
        .describe('The timestamp at which this Customer Session will expire.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('customer_session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        )
    })
    .describe(
      "A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access\ncontrol over a Customer.\n\nRelated guides: [Customer Session with the Payment Element](/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),\n[Customer Session with the Pricing Table](/payments/checkout/pricing-table#customer-session),\n[Customer Session with the Buy Button](/payment-links/buy-button#pass-an-existing-customer)."
    )
  export type CustomerSession = z.infer<typeof CustomerSessionSchema>

  /** The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed. */
  export const ThresholdsResourceUsageThresholdConfigSchema = z
    .object({
      /** The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time. */
      filters: z
        .array(ThresholdsResourceUsageAlertFilterSchema)
        .nullable()
        .describe(
          'The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.'
        )
        .optional(),
      /** The value at which this alert will trigger. */
      gte: z
        .number()
        .int()
        .describe('The value at which this alert will trigger.'),
      /** The [Billing Meter](/api/billing/meter) ID whose usage is monitored. */
      meter: z
        .union([z.string().max(5000), BillingMeterSchema])
        .describe(
          'The [Billing Meter](/api/billing/meter) ID whose usage is monitored.'
        ),
      /** Defines how the alert will behave. */
      recurrence: z
        .literal('one_time')
        .describe('Defines how the alert will behave.')
    })
    .describe(
      'The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.'
    )
  export type ThresholdsResourceUsageThresholdConfig = z.infer<
    typeof ThresholdsResourceUsageThresholdConfigSchema
  >

  /** A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests. */
  export const BillingAlertSchema = z
    .object({
      /** Defines the type of the alert. */
      alert_type: z
        .literal('usage_threshold')
        .describe('Defines the type of the alert.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('billing.alert')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Status of the alert. This can be active, inactive or archived. */
      status: z
        .enum(['active', 'archived', 'inactive'])
        .nullable()
        .describe(
          'Status of the alert. This can be active, inactive or archived.'
        )
        .optional(),
      /** Title of the alert. */
      title: z.string().max(5000).describe('Title of the alert.'),
      /** Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter). */
      usage_threshold: ThresholdsResourceUsageThresholdConfigSchema.nullable()
        .describe(
          'Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter).'
        )
        .optional()
    })
    .describe(
      'A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.'
    )
  export type BillingAlert = z.infer<typeof BillingAlertSchema>

  /**
   * ConfirmationTokens help transport client side data collected by Stripe JS over
   * to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
   * is successful, values present on the ConfirmationToken are written onto the Intent.
   *
   * To learn more about how to use ConfirmationToken, visit the related guides:
   * - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
   * - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
   */
  export const ConfirmationTokenSchema = z
    .object({
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent. */
      expires_at: z
        .number()
        .int()
        .nullable()
        .describe(
          'Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Data used for generating a Mandate. */
      mandate_data: ConfirmationTokensResourceMandateDataSchema.nullable()
        .describe('Data used for generating a Mandate.')
        .optional(),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('confirmation_token')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used. */
      payment_intent: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.'
        )
        .optional(),
      /** Payment-method-specific configuration for this ConfirmationToken. */
      payment_method_options:
        ConfirmationTokensResourcePaymentMethodOptionsSchema.nullable()
          .describe(
            'Payment-method-specific configuration for this ConfirmationToken.'
          )
          .optional(),
      /** Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken. */
      payment_method_preview:
        ConfirmationTokensResourcePaymentMethodPreviewSchema.nullable()
          .describe(
            'Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.'
          )
          .optional(),
      /** Return URL used to confirm the Intent. */
      return_url: z
        .string()
        .max(5000)
        .nullable()
        .describe('Return URL used to confirm the Intent.')
        .optional(),
      /**
       * Indicates that you intend to make future payments with this ConfirmationToken's payment method.
       *
       * The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
       */
      setup_future_usage: z
        .enum(['off_session', 'on_session'])
        .nullable()
        .describe(
          "Indicates that you intend to make future payments with this ConfirmationToken's payment method.\n\nThe presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete."
        )
        .optional(),
      /** ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used. */
      setup_intent: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.'
        )
        .optional(),
      /** Shipping information collected on this ConfirmationToken. */
      shipping: ConfirmationTokensResourceShippingSchema.nullable()
        .describe('Shipping information collected on this ConfirmationToken.')
        .optional(),
      /** Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken. */
      use_stripe_sdk: z
        .boolean()
        .describe(
          'Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.'
        )
    })
    .describe(
      'ConfirmationTokens help transport client side data collected by Stripe JS over\nto your server for confirming a PaymentIntent or SetupIntent. If the confirmation\nis successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n- [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)\n- [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).'
    )
  export type ConfirmationToken = z.infer<typeof ConfirmationTokenSchema>

  /** A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access. */
  export const FinancialConnectionsAccountSchema = z
    .object({
      /** The account holder that this account belongs to. */
      account_holder: BankConnectionsResourceAccountholderSchema.nullable()
        .describe('The account holder that this account belongs to.')
        .optional(),
      /** The most recent information about the account's balance. */
      balance: BankConnectionsResourceBalanceSchema.nullable()
        .describe("The most recent information about the account's balance.")
        .optional(),
      /** The state of the most recent attempt to refresh the account balance. */
      balance_refresh: BankConnectionsResourceBalanceRefreshSchema.nullable()
        .describe(
          'The state of the most recent attempt to refresh the account balance.'
        )
        .optional(),
      /** The type of the account. Account category is further divided in `subcategory`. */
      category: z
        .enum(['cash', 'credit', 'investment', 'other'])
        .describe(
          'The type of the account. Account category is further divided in `subcategory`.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** A human-readable name that has been assigned to this account, either by the account holder or by the institution. */
      display_name: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A human-readable name that has been assigned to this account, either by the account holder or by the institution.'
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The name of the institution that holds this account. */
      institution_name: z
        .string()
        .max(5000)
        .describe('The name of the institution that holds this account.'),
      /** The last 4 digits of the account number. If present, this will be 4 numeric characters. */
      last4: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The last 4 digits of the account number. If present, this will be 4 numeric characters.'
        )
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('financial_connections.account')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The most recent information about the account's owners. */
      ownership: z
        .union([
          z.string().max(5000),
          FinancialConnectionsAccountOwnershipSchema
        ])
        .nullable()
        .describe("The most recent information about the account's owners.")
        .optional(),
      /** The state of the most recent attempt to refresh the account owners. */
      ownership_refresh:
        BankConnectionsResourceOwnershipRefreshSchema.nullable()
          .describe(
            'The state of the most recent attempt to refresh the account owners.'
          )
          .optional(),
      /** The list of permissions granted by this account. */
      permissions: z
        .array(
          z.enum(['balances', 'ownership', 'payment_method', 'transactions'])
        )
        .nullable()
        .describe('The list of permissions granted by this account.')
        .optional(),
      /** The status of the link to the account. */
      status: z
        .enum(['active', 'disconnected', 'inactive'])
        .describe('The status of the link to the account.'),
      /**
       * If `category` is `cash`, one of:
       *
       *  - `checking`
       *  - `savings`
       *  - `other`
       *
       * If `category` is `credit`, one of:
       *
       *  - `mortgage`
       *  - `line_of_credit`
       *  - `credit_card`
       *  - `other`
       *
       * If `category` is `investment` or `other`, this will be `other`.
       */
      subcategory: z
        .enum([
          'checking',
          'credit_card',
          'line_of_credit',
          'mortgage',
          'other',
          'savings'
        ])
        .describe(
          'If `category` is `cash`, one of:\n\n - `checking`\n - `savings`\n - `other`\n\nIf `category` is `credit`, one of:\n\n - `mortgage`\n - `line_of_credit`\n - `credit_card`\n - `other`\n\nIf `category` is `investment` or `other`, this will be `other`.'
        ),
      /** The list of data refresh subscriptions requested on this account. */
      subscriptions: z
        .array(z.literal('transactions'))
        .nullable()
        .describe(
          'The list of data refresh subscriptions requested on this account.'
        )
        .optional(),
      /** The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account. */
      supported_payment_method_types: z
        .array(z.enum(['link', 'us_bank_account']))
        .describe(
          'The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.'
        ),
      /** The state of the most recent attempt to refresh the account transactions. */
      transaction_refresh:
        BankConnectionsResourceTransactionRefreshSchema.nullable()
          .describe(
            'The state of the most recent attempt to refresh the account transactions.'
          )
          .optional()
    })
    .describe(
      'A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.'
    )
  export type FinancialConnectionsAccount = z.infer<
    typeof FinancialConnectionsAccountSchema
  >

  /** Represents an action performed by the reader */
  export const TerminalReaderReaderResourceReaderActionSchema = z
    .object({
      /** Failure code, only set if status is `failed`. */
      failure_code: z
        .string()
        .max(5000)
        .nullable()
        .describe('Failure code, only set if status is `failed`.')
        .optional(),
      /** Detailed failure message, only set if status is `failed`. */
      failure_message: z
        .string()
        .max(5000)
        .nullable()
        .describe('Detailed failure message, only set if status is `failed`.')
        .optional(),
      process_payment_intent:
        TerminalReaderReaderResourceProcessPaymentIntentActionSchema.optional(),
      process_setup_intent:
        TerminalReaderReaderResourceProcessSetupIntentActionSchema.optional(),
      refund_payment:
        TerminalReaderReaderResourceRefundPaymentActionSchema.optional(),
      set_reader_display:
        TerminalReaderReaderResourceSetReaderDisplayActionSchema.optional(),
      /** Status of the action performed by the reader. */
      status: z
        .enum(['failed', 'in_progress', 'succeeded'])
        .describe('Status of the action performed by the reader.'),
      /** Type of action performed by the reader. */
      type: z
        .enum([
          'process_payment_intent',
          'process_setup_intent',
          'refund_payment',
          'set_reader_display'
        ])
        .describe('Type of action performed by the reader.')
    })
    .describe('Represents an action performed by the reader')
  export type TerminalReaderReaderResourceReaderAction = z.infer<
    typeof TerminalReaderReaderResourceReaderActionSchema
  >

  /** A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts. */
  export const FinancialConnectionsSessionSchema = z
    .object({
      /** The account holder for whom accounts are collected in this session. */
      account_holder: BankConnectionsResourceAccountholderSchema.nullable()
        .describe(
          'The account holder for whom accounts are collected in this session.'
        )
        .optional(),
      /** The accounts that were collected as part of this Session. */
      accounts: z
        .object({
          /** Details about each object. */
          data: z
            .array(FinancialConnectionsAccountSchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .regex(new RegExp('^/v1/financial_connections/accounts'))
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('The accounts that were collected as part of this Session.'),
      /** A value that will be passed to the client to launch the authentication flow. */
      client_secret: z
        .string()
        .max(5000)
        .describe(
          'A value that will be passed to the client to launch the authentication flow.'
        ),
      filters:
        BankConnectionsResourceLinkAccountSessionFiltersSchema.optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('financial_connections.session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Permissions requested for accounts collected during this session. */
      permissions: z
        .array(
          z.enum(['balances', 'ownership', 'payment_method', 'transactions'])
        )
        .describe(
          'Permissions requested for accounts collected during this session.'
        ),
      /** Data features requested to be retrieved upon account creation. */
      prefetch: z
        .array(z.enum(['balances', 'ownership', 'transactions']))
        .nullable()
        .describe(
          'Data features requested to be retrieved upon account creation.'
        )
        .optional(),
      /** For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app. */
      return_url: z
        .string()
        .max(5000)
        .describe(
          'For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.'
        )
        .optional()
    })
    .describe(
      'A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.'
    )
  export type FinancialConnectionsSession = z.infer<
    typeof FinancialConnectionsSessionSchema
  >

  /**
   * A Reader represents a physical device for accepting payment details.
   *
   * Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
   */
  export const TerminalReaderSchema = z
    .object({
      /** The most recent action performed by the reader. */
      action: TerminalReaderReaderResourceReaderActionSchema.nullable()
        .describe('The most recent action performed by the reader.')
        .optional(),
      /** The current software version of the reader. */
      device_sw_version: z
        .string()
        .max(5000)
        .nullable()
        .describe('The current software version of the reader.')
        .optional(),
      /** Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `stripe_s700`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`. */
      device_type: z
        .enum([
          'bbpos_chipper2x',
          'bbpos_wisepad3',
          'bbpos_wisepos_e',
          'mobile_phone_reader',
          'simulated_wisepos_e',
          'stripe_m2',
          'stripe_s700',
          'verifone_P400'
        ])
        .describe(
          'Type of reader, one of `bbpos_wisepad3`, `stripe_m2`, `stripe_s700`, `bbpos_chipper2x`, `bbpos_wisepos_e`, `verifone_P400`, `simulated_wisepos_e`, or `mobile_phone_reader`.'
        ),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The local IP address of the reader. */
      ip_address: z
        .string()
        .max(5000)
        .nullable()
        .describe('The local IP address of the reader.')
        .optional(),
      /** Custom label given to the reader for easier identification. */
      label: z
        .string()
        .max(5000)
        .describe(
          'Custom label given to the reader for easier identification.'
        ),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The location identifier of the reader. */
      location: z
        .union([z.string().max(5000), TerminalLocationSchema])
        .nullable()
        .describe('The location identifier of the reader.')
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('terminal.reader')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Serial number of the reader. */
      serial_number: z
        .string()
        .max(5000)
        .describe('Serial number of the reader.'),
      /** The networking status of the reader. We do not recommend using this field in flows that may block taking payments. */
      status: z
        .enum(['offline', 'online'])
        .nullable()
        .describe(
          'The networking status of the reader. We do not recommend using this field in flows that may block taking payments.'
        )
        .optional()
    })
    .describe(
      'A Reader represents a physical device for accepting payment details.\n\nRelated guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)'
    )
  export type TerminalReader = z.infer<typeof TerminalReaderSchema>

  /**
   * A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
   *
   * When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
   *
   * Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
   */
  export const PaymentLinkSchema = z
    .object({
      /** Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
      active: z
        .boolean()
        .describe(
          "Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated."
        ),
      after_completion: PaymentLinksResourceAfterCompletionSchema,
      /** Whether user redeemable promotion codes are enabled. */
      allow_promotion_codes: z
        .boolean()
        .describe('Whether user redeemable promotion codes are enabled.'),
      /** The ID of the Connect application that created the Payment Link. */
      application: z
        .union([
          z.string().max(5000),
          ApplicationSchema,
          DeletedApplicationSchema
        ])
        .nullable()
        .describe(
          'The ID of the Connect application that created the Payment Link.'
        )
        .optional(),
      /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. */
      application_fee_amount: z
        .number()
        .int()
        .nullable()
        .describe(
          "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account."
        )
        .optional(),
      /** This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. */
      application_fee_percent: z
        .number()
        .nullable()
        .describe(
          "This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account."
        )
        .optional(),
      automatic_tax: PaymentLinksResourceAutomaticTaxSchema,
      /** Configuration for collecting the customer's billing address. Defaults to `auto`. */
      billing_address_collection: z
        .enum(['auto', 'required'])
        .describe(
          "Configuration for collecting the customer's billing address. Defaults to `auto`."
        ),
      /** When set, provides configuration to gather active consent from customers. */
      consent_collection: PaymentLinksResourceConsentCollectionSchema.nullable()
        .describe(
          'When set, provides configuration to gather active consent from customers.'
        )
        .optional(),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
      custom_fields: z
        .array(PaymentLinksResourceCustomFieldsSchema)
        .describe(
          'Collect additional information from your customer using custom fields. Up to 3 fields are supported.'
        ),
      custom_text: PaymentLinksResourceCustomTextSchema,
      /** Configuration for Customer creation during checkout. */
      customer_creation: z
        .enum(['always', 'if_required'])
        .describe('Configuration for Customer creation during checkout.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** The custom message to be displayed to a customer when a payment link is no longer active. */
      inactive_message: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The custom message to be displayed to a customer when a payment link is no longer active.'
        )
        .optional(),
      /** Configuration for creating invoice for payment mode payment links. */
      invoice_creation: PaymentLinksResourceInvoiceCreationSchema.nullable()
        .describe(
          'Configuration for creating invoice for payment mode payment links.'
        )
        .optional(),
      /** The line items representing what is being sold. */
      line_items: z
        .object({
          /** Details about each object. */
          data: z.array(ItemSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('The line items representing what is being sold.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('payment_link')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
      on_behalf_of: z
        .union([z.string().max(5000), AccountSchema])
        .nullable()
        .describe(
          'The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.'
        )
        .optional(),
      /** Indicates the parameters to be passed to PaymentIntent creation during checkout. */
      payment_intent_data:
        PaymentLinksResourcePaymentIntentDataSchema.nullable()
          .describe(
            'Indicates the parameters to be passed to PaymentIntent creation during checkout.'
          )
          .optional(),
      /** Configuration for collecting a payment method during checkout. Defaults to `always`. */
      payment_method_collection: z
        .enum(['always', 'if_required'])
        .describe(
          'Configuration for collecting a payment method during checkout. Defaults to `always`.'
        ),
      /** The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
      payment_method_types: z
        .array(
          z.enum([
            'affirm',
            'afterpay_clearpay',
            'alipay',
            'alma',
            'au_becs_debit',
            'bacs_debit',
            'bancontact',
            'blik',
            'boleto',
            'card',
            'cashapp',
            'eps',
            'fpx',
            'giropay',
            'grabpay',
            'ideal',
            'klarna',
            'konbini',
            'link',
            'mobilepay',
            'multibanco',
            'oxxo',
            'p24',
            'pay_by_bank',
            'paynow',
            'paypal',
            'pix',
            'promptpay',
            'sepa_debit',
            'sofort',
            'swish',
            'twint',
            'us_bank_account',
            'wechat_pay',
            'zip'
          ])
        )
        .nullable()
        .describe(
          "The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods)."
        )
        .optional(),
      phone_number_collection: PaymentLinksResourcePhoneNumberCollectionSchema,
      /** Settings that restrict the usage of a payment link. */
      restrictions: PaymentLinksResourceRestrictionsSchema.nullable()
        .describe('Settings that restrict the usage of a payment link.')
        .optional(),
      /** Configuration for collecting the customer's shipping address. */
      shipping_address_collection:
        PaymentLinksResourceShippingAddressCollectionSchema.nullable()
          .describe(
            "Configuration for collecting the customer's shipping address."
          )
          .optional(),
      /** The shipping rate options applied to the session. */
      shipping_options: z
        .array(PaymentLinksResourceShippingOptionSchema)
        .describe('The shipping rate options applied to the session.'),
      /** Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button. */
      submit_type: z
        .enum(['auto', 'book', 'donate', 'pay', 'subscribe'])
        .describe(
          'Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.'
        ),
      /** When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
      subscription_data: PaymentLinksResourceSubscriptionDataSchema.nullable()
        .describe(
          'When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.'
        )
        .optional(),
      tax_id_collection: PaymentLinksResourceTaxIdCollectionSchema,
      /** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to. */
      transfer_data: PaymentLinksResourceTransferDataSchema.nullable()
        .describe(
          'The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.'
        )
        .optional(),
      /** The public URL that can be shared with customers. */
      url: z
        .string()
        .max(5000)
        .describe('The public URL that can be shared with customers.')
    })
    .describe(
      'A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.\n\nWhen a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.\n\nRelated guide: [Payment Links API](https://stripe.com/docs/payment-links)'
    )
  export type PaymentLink = z.infer<typeof PaymentLinkSchema>

  /**
   * Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
   *
   * Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
   */
  export const TreasuryInboundTransferSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Returns `true` if the InboundTransfer is able to be canceled. */
      cancelable: z
        .boolean()
        .describe(
          'Returns `true` if the InboundTransfer is able to be canceled.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** Details about this InboundTransfer's failure. Only set when status is `failed`. */
      failure_details:
        TreasuryInboundTransfersResourceFailureDetailsSchema.nullable()
          .describe(
            "Details about this InboundTransfer's failure. Only set when status is `failed`."
          )
          .optional(),
      /** The FinancialAccount that received the funds. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount that received the funds.'),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      linked_flows:
        TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlowsSchema,
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.inbound_transfer')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The origin payment method to be debited for an InboundTransfer. */
      origin_payment_method: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The origin payment method to be debited for an InboundTransfer.'
        )
        .optional(),
      /** Details about the PaymentMethod for an InboundTransfer. */
      origin_payment_method_details: InboundTransfersSchema.nullable()
        .describe('Details about the PaymentMethod for an InboundTransfer.')
        .optional(),
      /** Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state. */
      returned: z
        .boolean()
        .nullable()
        .describe(
          'Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.'
        )
        .optional(),
      /** Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`. */
      statement_descriptor: z
        .string()
        .max(5000)
        .describe(
          'Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.'
        ),
      /** Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails. */
      status: z
        .enum(['canceled', 'failed', 'processing', 'succeeded'])
        .describe(
          'Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.'
        ),
      status_transitions:
        TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitionsSchema,
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .nullable()
        .describe('The Transaction associated with this object.')
        .optional()
    })
    .describe(
      'Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.\n\nRelated guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)'
    )
  export type TreasuryInboundTransfer = z.infer<
    typeof TreasuryInboundTransferSchema
  >

  /** Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance. */
  export const TreasuryTransactionSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      balance_impact: TreasuryTransactionsResourceBalanceImpactSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        ),
      /** A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints. */
      entries: z
        .object({
          /** Details about each object. */
          data: z
            .array(TreasuryTransactionEntrySchema)
            .describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .regex(new RegExp('^/v1/treasury/transaction_entries'))
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .nullable()
        .describe(
          'A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.'
        )
        .optional(),
      /** The FinancialAccount associated with this object. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount associated with this object.'),
      /** ID of the flow that created the Transaction. */
      flow: z
        .string()
        .max(5000)
        .nullable()
        .describe('ID of the flow that created the Transaction.')
        .optional(),
      /** Details of the flow that created the Transaction. */
      flow_details: TreasuryTransactionsResourceFlowDetailsSchema.nullable()
        .describe('Details of the flow that created the Transaction.')
        .optional(),
      /** Type of the flow that created the Transaction. */
      flow_type: z
        .enum([
          'credit_reversal',
          'debit_reversal',
          'inbound_transfer',
          'issuing_authorization',
          'other',
          'outbound_payment',
          'outbound_transfer',
          'received_credit',
          'received_debit'
        ])
        .describe('Type of the flow that created the Transaction.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.transaction')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Status of the Transaction. */
      status: z
        .enum(['open', 'posted', 'void'])
        .describe('Status of the Transaction.'),
      status_transitions:
        TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitionsSchema
    })
    .describe(
      "Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance."
    )
  export type TreasuryTransaction = z.infer<typeof TreasuryTransactionSchema>

  /** TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions). */
  export const TreasuryTransactionEntrySchema = z
    .object({
      balance_impact: TreasuryTransactionsResourceBalanceImpactSchema,
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** When the TransactionEntry will impact the FinancialAccount's balance. */
      effective_at: z
        .number()
        .int()
        .describe(
          "When the TransactionEntry will impact the FinancialAccount's balance."
        ),
      /** The FinancialAccount associated with this object. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount associated with this object.'),
      /** Token of the flow associated with the TransactionEntry. */
      flow: z
        .string()
        .max(5000)
        .nullable()
        .describe('Token of the flow associated with the TransactionEntry.')
        .optional(),
      /** Details of the flow associated with the TransactionEntry. */
      flow_details: TreasuryTransactionsResourceFlowDetailsSchema.nullable()
        .describe('Details of the flow associated with the TransactionEntry.')
        .optional(),
      /** Type of the flow associated with the TransactionEntry. */
      flow_type: z
        .enum([
          'credit_reversal',
          'debit_reversal',
          'inbound_transfer',
          'issuing_authorization',
          'other',
          'outbound_payment',
          'outbound_transfer',
          'received_credit',
          'received_debit'
        ])
        .describe('Type of the flow associated with the TransactionEntry.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.transaction_entry')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .describe('The Transaction associated with this object.'),
      /** The specific money movement that generated the TransactionEntry. */
      type: z
        .enum([
          'credit_reversal',
          'credit_reversal_posting',
          'debit_reversal',
          'inbound_transfer',
          'inbound_transfer_return',
          'issuing_authorization_hold',
          'issuing_authorization_release',
          'other',
          'outbound_payment',
          'outbound_payment_cancellation',
          'outbound_payment_failure',
          'outbound_payment_posting',
          'outbound_payment_return',
          'outbound_transfer',
          'outbound_transfer_cancellation',
          'outbound_transfer_failure',
          'outbound_transfer_posting',
          'outbound_transfer_return',
          'received_credit',
          'received_debit'
        ])
        .describe(
          'The specific money movement that generated the TransactionEntry.'
        )
    })
    .describe(
      'TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).'
    )
  export type TreasuryTransactionEntry = z.infer<
    typeof TreasuryTransactionEntrySchema
  >

  export const TreasuryTransactionsResourceFlowDetailsSchema = z.object({
    credit_reversal: TreasuryCreditReversalSchema.optional(),
    debit_reversal: TreasuryDebitReversalSchema.optional(),
    inbound_transfer: TreasuryInboundTransferSchema.optional(),
    issuing_authorization: IssuingAuthorizationSchema.optional(),
    outbound_payment: TreasuryOutboundPaymentSchema.optional(),
    outbound_transfer: TreasuryOutboundTransferSchema.optional(),
    received_credit: TreasuryReceivedCreditSchema.optional(),
    received_debit: TreasuryReceivedDebitSchema.optional(),
    /** Type of the flow that created the Transaction. Set to the same value as `flow_type`. */
    type: z
      .enum([
        'credit_reversal',
        'debit_reversal',
        'inbound_transfer',
        'issuing_authorization',
        'other',
        'outbound_payment',
        'outbound_transfer',
        'received_credit',
        'received_debit'
      ])
      .describe(
        'Type of the flow that created the Transaction. Set to the same value as `flow_type`.'
      )
  })
  export type TreasuryTransactionsResourceFlowDetails = z.infer<
    typeof TreasuryTransactionsResourceFlowDetailsSchema
  >

  /** You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal. */
  export const TreasuryCreditReversalSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The FinancialAccount to reverse funds from. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount to reverse funds from.'),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The rails used to reverse the funds. */
      network: z
        .enum(['ach', 'stripe'])
        .describe('The rails used to reverse the funds.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.credit_reversal')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The ReceivedCredit being reversed. */
      received_credit: z
        .string()
        .max(5000)
        .describe('The ReceivedCredit being reversed.'),
      /** Status of the CreditReversal */
      status: z
        .enum(['canceled', 'posted', 'processing'])
        .describe('Status of the CreditReversal'),
      status_transitions:
        TreasuryReceivedCreditsResourceStatusTransitionsSchema,
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .nullable()
        .describe('The Transaction associated with this object.')
        .optional()
    })
    .describe(
      'You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.'
    )
  export type TreasuryCreditReversal = z.infer<
    typeof TreasuryCreditReversalSchema
  >

  /** You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal. */
  export const TreasuryDebitReversalSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** The FinancialAccount to reverse funds from. */
      financial_account: z
        .string()
        .max(5000)
        .nullable()
        .describe('The FinancialAccount to reverse funds from.')
        .optional(),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Other flows linked to a DebitReversal. */
      linked_flows:
        TreasuryReceivedDebitsResourceDebitReversalLinkedFlowsSchema.nullable()
          .describe('Other flows linked to a DebitReversal.')
          .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** The rails used to reverse the funds. */
      network: z
        .enum(['ach', 'card'])
        .describe('The rails used to reverse the funds.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.debit_reversal')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The ReceivedDebit being reversed. */
      received_debit: z
        .string()
        .max(5000)
        .describe('The ReceivedDebit being reversed.'),
      /** Status of the DebitReversal */
      status: z
        .enum(['failed', 'processing', 'succeeded'])
        .describe('Status of the DebitReversal'),
      status_transitions: TreasuryReceivedDebitsResourceStatusTransitionsSchema,
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .nullable()
        .describe('The Transaction associated with this object.')
        .optional()
    })
    .describe(
      'You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.'
    )
  export type TreasuryDebitReversal = z.infer<
    typeof TreasuryDebitReversalSchema
  >

  /**
   * Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
   *
   * Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
   *
   * Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
   */
  export const TreasuryOutboundPaymentSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Returns `true` if the object can be canceled, and `false` otherwise. */
      cancelable: z
        .boolean()
        .describe(
          'Returns `true` if the object can be canceled, and `false` otherwise.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent. */
      customer: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.'
        )
        .optional(),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`. */
      destination_payment_method: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.'
        )
        .optional(),
      /** Details about the PaymentMethod for an OutboundPayment. */
      destination_payment_method_details:
        OutboundPaymentsPaymentMethodDetailsSchema.nullable()
          .describe('Details about the PaymentMethod for an OutboundPayment.')
          .optional(),
      /** Details about the end user. */
      end_user_details:
        TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetailsSchema.nullable()
          .describe('Details about the end user.')
          .optional(),
      /** The date when funds are expected to arrive in the destination account. */
      expected_arrival_date: z
        .number()
        .int()
        .describe(
          'The date when funds are expected to arrive in the destination account.'
        ),
      /** The FinancialAccount that funds were pulled from. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount that funds were pulled from.'),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.outbound_payment')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Details about a returned OutboundPayment. Only set when the status is `returned`. */
      returned_details:
        TreasuryOutboundPaymentsResourceReturnedStatusSchema.nullable()
          .describe(
            'Details about a returned OutboundPayment. Only set when the status is `returned`.'
          )
          .optional(),
      /** The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer). */
      statement_descriptor: z
        .string()
        .max(5000)
        .describe(
          'The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).'
        ),
      /** Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`. */
      status: z
        .enum(['canceled', 'failed', 'posted', 'processing', 'returned'])
        .describe(
          'Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.'
        ),
      status_transitions:
        TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitionsSchema,
      /** Details about network-specific tracking information if available. */
      tracking_details:
        TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetailsSchema.nullable()
          .describe(
            'Details about network-specific tracking information if available.'
          )
          .optional(),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .describe('The Transaction associated with this object.')
    })
    .describe(
      "Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).\n\nSimulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.\n\nRelated guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)"
    )
  export type TreasuryOutboundPayment = z.infer<
    typeof TreasuryOutboundPaymentSchema
  >

  export const TreasuryOutboundPaymentsResourceReturnedStatusSchema = z.object({
    /** Reason for the return. */
    code: z
      .enum([
        'account_closed',
        'account_frozen',
        'bank_account_restricted',
        'bank_ownership_changed',
        'declined',
        'incorrect_account_holder_name',
        'invalid_account_number',
        'invalid_currency',
        'no_account',
        'other'
      ])
      .describe('Reason for the return.'),
    /** The Transaction associated with this object. */
    transaction: z
      .union([z.string().max(5000), TreasuryTransactionSchema])
      .describe('The Transaction associated with this object.')
  })
  export type TreasuryOutboundPaymentsResourceReturnedStatus = z.infer<
    typeof TreasuryOutboundPaymentsResourceReturnedStatusSchema
  >

  /**
   * Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
   *
   * Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
   *
   * Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
   */
  export const TreasuryOutboundTransferSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Returns `true` if the object can be canceled, and `false` otherwise. */
      cancelable: z
        .boolean()
        .describe(
          'Returns `true` if the object can be canceled, and `false` otherwise.'
        ),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        )
        .optional(),
      /** The PaymentMethod used as the payment instrument for an OutboundTransfer. */
      destination_payment_method: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The PaymentMethod used as the payment instrument for an OutboundTransfer.'
        )
        .optional(),
      destination_payment_method_details:
        OutboundTransfersPaymentMethodDetailsSchema,
      /** The date when funds are expected to arrive in the destination account. */
      expected_arrival_date: z
        .number()
        .int()
        .describe(
          'The date when funds are expected to arrive in the destination account.'
        ),
      /** The FinancialAccount that funds were pulled from. */
      financial_account: z
        .string()
        .max(5000)
        .describe('The FinancialAccount that funds were pulled from.'),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.outbound_transfer')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Details about a returned OutboundTransfer. Only set when the status is `returned`. */
      returned_details:
        TreasuryOutboundTransfersResourceReturnedDetailsSchema.nullable()
          .describe(
            'Details about a returned OutboundTransfer. Only set when the status is `returned`.'
          )
          .optional(),
      /** Information about the OutboundTransfer to be sent to the recipient account. */
      statement_descriptor: z
        .string()
        .max(5000)
        .describe(
          'Information about the OutboundTransfer to be sent to the recipient account.'
        ),
      /** Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`. */
      status: z
        .enum(['canceled', 'failed', 'posted', 'processing', 'returned'])
        .describe(
          'Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.'
        ),
      status_transitions:
        TreasuryOutboundTransfersResourceStatusTransitionsSchema,
      /** Details about network-specific tracking information if available. */
      tracking_details:
        TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetailsSchema.nullable()
          .describe(
            'Details about network-specific tracking information if available.'
          )
          .optional(),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .describe('The Transaction associated with this object.')
    })
    .describe(
      "Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.\n\nSimulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.\n\nRelated guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)"
    )
  export type TreasuryOutboundTransfer = z.infer<
    typeof TreasuryOutboundTransferSchema
  >

  export const TreasuryOutboundTransfersResourceReturnedDetailsSchema =
    z.object({
      /** Reason for the return. */
      code: z
        .enum([
          'account_closed',
          'account_frozen',
          'bank_account_restricted',
          'bank_ownership_changed',
          'declined',
          'incorrect_account_holder_name',
          'invalid_account_number',
          'invalid_currency',
          'no_account',
          'other'
        ])
        .describe('Reason for the return.'),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .describe('The Transaction associated with this object.')
    })
  export type TreasuryOutboundTransfersResourceReturnedDetails = z.infer<
    typeof TreasuryOutboundTransfersResourceReturnedDetailsSchema
  >

  /** ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount. */
  export const TreasuryReceivedCreditSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        ),
      /** Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen. */
      failure_code: z
        .enum([
          'account_closed',
          'account_frozen',
          'international_transaction',
          'other'
        ])
        .nullable()
        .describe(
          'Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.'
        )
        .optional(),
      /** The FinancialAccount that received the funds. */
      financial_account: z
        .string()
        .max(5000)
        .nullable()
        .describe('The FinancialAccount that received the funds.')
        .optional(),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      initiating_payment_method_details:
        TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema,
      linked_flows: TreasuryReceivedCreditsResourceLinkedFlowsSchema,
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The rails used to send the funds. */
      network: z
        .enum(['ach', 'card', 'stripe', 'us_domestic_wire'])
        .describe('The rails used to send the funds.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.received_credit')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Details describing when a ReceivedCredit may be reversed. */
      reversal_details:
        TreasuryReceivedCreditsResourceReversalDetailsSchema.nullable()
          .describe('Details describing when a ReceivedCredit may be reversed.')
          .optional(),
      /** Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field. */
      status: z
        .enum(['failed', 'succeeded'])
        .describe(
          'Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.'
        ),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .nullable()
        .describe('The Transaction associated with this object.')
        .optional()
    })
    .describe(
      'ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.'
    )
  export type TreasuryReceivedCredit = z.infer<
    typeof TreasuryReceivedCreditSchema
  >

  export const TreasuryReceivedCreditsResourceLinkedFlowsSchema = z.object({
    /** The CreditReversal created as a result of this ReceivedCredit being reversed. */
    credit_reversal: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The CreditReversal created as a result of this ReceivedCredit being reversed.'
      )
      .optional(),
    /** Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object. */
    issuing_authorization: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.'
      )
      .optional(),
    /** Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object. */
    issuing_transaction: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.'
      )
      .optional(),
    /** ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals. */
    source_flow: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.'
      )
      .optional(),
    /** The expandable object of the source flow. */
    source_flow_details:
      TreasuryReceivedCreditsResourceSourceFlowsDetailsSchema.nullable()
        .describe('The expandable object of the source flow.')
        .optional(),
    /** The type of flow that originated the ReceivedCredit (for example, `outbound_payment`). */
    source_flow_type: z
      .string()
      .max(5000)
      .nullable()
      .describe(
        'The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).'
      )
      .optional()
  })
  export type TreasuryReceivedCreditsResourceLinkedFlows = z.infer<
    typeof TreasuryReceivedCreditsResourceLinkedFlowsSchema
  >

  export const TreasuryReceivedCreditsResourceSourceFlowsDetailsSchema =
    z.object({
      credit_reversal: TreasuryCreditReversalSchema.optional(),
      outbound_payment: TreasuryOutboundPaymentSchema.optional(),
      outbound_transfer: TreasuryOutboundTransferSchema.optional(),
      payout: PayoutSchema.optional(),
      /** The type of the source flow that originated the ReceivedCredit. */
      type: z
        .enum([
          'credit_reversal',
          'other',
          'outbound_payment',
          'outbound_transfer',
          'payout'
        ])
        .describe(
          'The type of the source flow that originated the ReceivedCredit.'
        )
    })
  export type TreasuryReceivedCreditsResourceSourceFlowsDetails = z.infer<
    typeof TreasuryReceivedCreditsResourceSourceFlowsDetailsSchema
  >

  /** ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount. */
  export const TreasuryReceivedDebitSchema = z
    .object({
      /** Amount (in cents) transferred. */
      amount: z.number().int().describe('Amount (in cents) transferred.'),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        ),
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: z
        .string()
        .max(5000)
        .describe(
          'An arbitrary string attached to the object. Often useful for displaying to users.'
        ),
      /** Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen. */
      failure_code: z
        .enum([
          'account_closed',
          'account_frozen',
          'insufficient_funds',
          'international_transaction',
          'other'
        ])
        .nullable()
        .describe(
          "Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen."
        )
        .optional(),
      /** The FinancialAccount that funds were pulled from. */
      financial_account: z
        .string()
        .max(5000)
        .nullable()
        .describe('The FinancialAccount that funds were pulled from.')
        .optional(),
      /** A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses. */
      hosted_regulatory_receipt_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses."
        )
        .optional(),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      initiating_payment_method_details:
        TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetailsSchema.optional(),
      linked_flows: TreasuryReceivedDebitsResourceLinkedFlowsSchema,
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The network used for the ReceivedDebit. */
      network: z
        .enum(['ach', 'card', 'stripe'])
        .describe('The network used for the ReceivedDebit.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('treasury.received_debit')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** Details describing when a ReceivedDebit might be reversed. */
      reversal_details:
        TreasuryReceivedDebitsResourceReversalDetailsSchema.nullable()
          .describe(
            'Details describing when a ReceivedDebit might be reversed.'
          )
          .optional(),
      /** Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`. */
      status: z
        .enum(['failed', 'succeeded'])
        .describe(
          'Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.'
        ),
      /** The Transaction associated with this object. */
      transaction: z
        .union([z.string().max(5000), TreasuryTransactionSchema])
        .nullable()
        .describe('The Transaction associated with this object.')
        .optional()
    })
    .describe(
      'ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.'
    )
  export type TreasuryReceivedDebit = z.infer<
    typeof TreasuryReceivedDebitSchema
  >

  /**
   * A Checkout Session represents your customer's session as they pay for
   * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
   * or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
   * new Session each time your customer attempts to pay.
   *
   * Once payment is successful, the Checkout Session will contain a reference
   * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
   * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
   * [Subscription](https://stripe.com/docs/api/subscriptions).
   *
   * You can create a Checkout Session on your server and redirect to its URL
   * to begin Checkout.
   *
   * Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
   */
  export const CheckoutSessionSchema = z
    .object({
      /** Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing). */
      adaptive_pricing:
        PaymentPagesCheckoutSessionAdaptivePricingSchema.nullable()
          .describe(
            'Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).'
          )
          .optional(),
      /** When set, provides configuration for actions to take if this Checkout Session expires. */
      after_expiration:
        PaymentPagesCheckoutSessionAfterExpirationSchema.nullable()
          .describe(
            'When set, provides configuration for actions to take if this Checkout Session expires.'
          )
          .optional(),
      /** Enables user redeemable promotion codes. */
      allow_promotion_codes: z
        .boolean()
        .nullable()
        .describe('Enables user redeemable promotion codes.')
        .optional(),
      /** Total of all items before discounts or taxes are applied. */
      amount_subtotal: z
        .number()
        .int()
        .nullable()
        .describe('Total of all items before discounts or taxes are applied.')
        .optional(),
      /** Total of all items after discounts and taxes are applied. */
      amount_total: z
        .number()
        .int()
        .nullable()
        .describe('Total of all items after discounts and taxes are applied.')
        .optional(),
      automatic_tax: PaymentPagesCheckoutSessionAutomaticTaxSchema,
      /** Describes whether Checkout should collect the customer's billing address. Defaults to `auto`. */
      billing_address_collection: z
        .enum(['auto', 'required'])
        .nullable()
        .describe(
          "Describes whether Checkout should collect the customer's billing address. Defaults to `auto`."
        )
        .optional(),
      /** If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website. */
      cancel_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.'
        )
        .optional(),
      /**
       * A unique string to reference the Checkout Session. This can be a
       * customer ID, a cart ID, or similar, and can be used to reconcile the
       * Session with your internal systems.
       */
      client_reference_id: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nSession with your internal systems.'
        )
        .optional(),
      /** Client secret to be used when initializing Stripe.js embedded checkout. */
      client_secret: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'Client secret to be used when initializing Stripe.js embedded checkout.'
        )
        .optional(),
      /** Information about the customer collected within the Checkout Session. */
      collected_information:
        PaymentPagesCheckoutSessionCollectedInformationSchema.nullable()
          .describe(
            'Information about the customer collected within the Checkout Session.'
          )
          .optional(),
      /** Results of `consent_collection` for this session. */
      consent: PaymentPagesCheckoutSessionConsentSchema.nullable()
        .describe('Results of `consent_collection` for this session.')
        .optional(),
      /** When set, provides configuration for the Checkout Session to gather active consent from customers. */
      consent_collection:
        PaymentPagesCheckoutSessionConsentCollectionSchema.nullable()
          .describe(
            'When set, provides configuration for the Checkout Session to gather active consent from customers.'
          )
          .optional(),
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: z
        .number()
        .int()
        .describe(
          'Time at which the object was created. Measured in seconds since the Unix epoch.'
        ),
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: z
        .string()
        .nullable()
        .describe(
          'Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
        )
        .optional(),
      /** Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions */
      currency_conversion:
        PaymentPagesCheckoutSessionCurrencyConversionSchema.nullable()
          .describe(
            'Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions'
          )
          .optional(),
      /** Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
      custom_fields: z
        .array(PaymentPagesCheckoutSessionCustomFieldsSchema)
        .describe(
          'Collect additional information from your customer using custom fields. Up to 3 fields are supported.'
        ),
      custom_text: PaymentPagesCheckoutSessionCustomTextSchema,
      /**
       * The ID of the customer for this Session.
       * For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
       * will create a new customer object based on information provided
       * during the payment flow unless an existing customer was provided when
       * the Session was created.
       */
      customer: z
        .union([z.string().max(5000), CustomerSchema, DeletedCustomerSchema])
        .nullable()
        .describe(
          'The ID of the customer for this Session.\nFor Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout\nwill create a new customer object based on information provided\nduring the payment flow unless an existing customer was provided when\nthe Session was created.'
        )
        .optional(),
      /** Configure whether a Checkout Session creates a Customer when the Checkout Session completes. */
      customer_creation: z
        .enum(['always', 'if_required'])
        .nullable()
        .describe(
          'Configure whether a Checkout Session creates a Customer when the Checkout Session completes.'
        )
        .optional(),
      /** The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode. */
      customer_details:
        PaymentPagesCheckoutSessionCustomerDetailsSchema.nullable()
          .describe(
            "The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode."
          )
          .optional(),
      /**
       * If provided, this value will be used when the Customer object is created.
       * If not provided, customers will be asked to enter their email address.
       * Use this parameter to prefill customer data if you already have an email
       * on file. To access information about the customer once the payment flow is
       * complete, use the `customer` attribute.
       */
      customer_email: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once the payment flow is\ncomplete, use the `customer` attribute.'
        )
        .optional(),
      /** List of coupons and promotion codes attached to the Checkout Session. */
      discounts: z
        .array(PaymentPagesCheckoutSessionDiscountSchema)
        .nullable()
        .describe(
          'List of coupons and promotion codes attached to the Checkout Session.'
        )
        .optional(),
      /** The timestamp at which the Checkout Session will expire. */
      expires_at: z
        .number()
        .int()
        .describe('The timestamp at which the Checkout Session will expire.'),
      /** Unique identifier for the object. */
      id: z.string().max(5000).describe('Unique identifier for the object.'),
      /** ID of the invoice created by the Checkout Session, if it exists. */
      invoice: z
        .union([z.string().max(5000), InvoiceSchema])
        .nullable()
        .describe(
          'ID of the invoice created by the Checkout Session, if it exists.'
        )
        .optional(),
      /** Details on the state of invoice creation for the Checkout Session. */
      invoice_creation:
        PaymentPagesCheckoutSessionInvoiceCreationSchema.nullable()
          .describe(
            'Details on the state of invoice creation for the Checkout Session.'
          )
          .optional(),
      /** The line items purchased by the customer. */
      line_items: z
        .object({
          /** Details about each object. */
          data: z.array(ItemSchema).describe('Details about each object.'),
          /** True if this list has another page of items after this one that can be fetched. */
          has_more: z
            .boolean()
            .describe(
              'True if this list has another page of items after this one that can be fetched.'
            ),
          /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
          object: z
            .literal('list')
            .describe(
              "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
            ),
          /** The URL where this list can be accessed. */
          url: z
            .string()
            .max(5000)
            .describe('The URL where this list can be accessed.')
        })
        .describe('The line items purchased by the customer.')
        .optional(),
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: z
        .boolean()
        .describe(
          'Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.'
        ),
      /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
      locale: z
        .enum([
          'auto',
          'bg',
          'cs',
          'da',
          'de',
          'el',
          'en',
          'en-GB',
          'es',
          'es-419',
          'et',
          'fi',
          'fil',
          'fr',
          'fr-CA',
          'hr',
          'hu',
          'id',
          'it',
          'ja',
          'ko',
          'lt',
          'lv',
          'ms',
          'mt',
          'nb',
          'nl',
          'pl',
          'pt',
          'pt-BR',
          'ro',
          'ru',
          'sk',
          'sl',
          'sv',
          'th',
          'tr',
          'vi',
          'zh',
          'zh-HK',
          'zh-TW'
        ])
        .nullable()
        .describe(
          "The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used."
        )
        .optional(),
      /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: z
        .record(z.string().max(500))
        .nullable()
        .describe(
          'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.'
        )
        .optional(),
      /** The mode of the Checkout Session. */
      mode: z
        .enum(['payment', 'setup', 'subscription'])
        .describe('The mode of the Checkout Session.'),
      /** String representing the object's type. Objects of the same type share the same value. */
      object: z
        .literal('checkout.session')
        .describe(
          "String representing the object's type. Objects of the same type share the same value."
        ),
      /** The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
      payment_intent: z
        .union([z.string().max(5000), PaymentIntentSchema])
        .nullable()
        .describe(
          "The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead."
        )
        .optional(),
      /** The ID of the Payment Link that created this Session. */
      payment_link: z
        .union([z.string().max(5000), PaymentLinkSchema])
        .nullable()
        .describe('The ID of the Payment Link that created this Session.')
        .optional(),
      /** Configure whether a Checkout Session should collect a payment method. Defaults to `always`. */
      payment_method_collection: z
        .enum(['always', 'if_required'])
        .nullable()
        .describe(
          'Configure whether a Checkout Session should collect a payment method. Defaults to `always`.'
        )
        .optional(),
      /** Information about the payment method configuration used for this Checkout session if using dynamic payment methods. */
      payment_method_configuration_details:
        PaymentMethodConfigBizPaymentMethodConfigurationDetailsSchema.nullable()
          .describe(
            'Information about the payment method configuration used for this Checkout session if using dynamic payment methods.'
          )
          .optional(),
      /** Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
      payment_method_options:
        CheckoutSessionPaymentMethodOptionsSchema.nullable()
          .describe(
            'Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.'
          )
          .optional(),
      /**
       * A list of the types of payment methods (e.g. card) this Checkout
       * Session is allowed to accept.
       */
      payment_method_types: z
        .array(z.string().max(5000))
        .describe(
          'A list of the types of payment methods (e.g. card) this Checkout\nSession is allowed to accept.'
        ),
      /**
       * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
       * You can use this value to decide when to fulfill your customer's order.
       */
      payment_status: z
        .enum(['no_payment_required', 'paid', 'unpaid'])
        .describe(
          "The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.\nYou can use this value to decide when to fulfill your customer's order."
        ),
      phone_number_collection:
        PaymentPagesCheckoutSessionPhoneNumberCollectionSchema.optional(),
      /** The ID of the original expired Checkout Session that triggered the recovery flow. */
      recovered_from: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The ID of the original expired Checkout Session that triggered the recovery flow.'
        )
        .optional(),
      /** This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`. */
      redirect_on_completion: z
        .enum(['always', 'if_required', 'never'])
        .describe(
          'This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.'
        )
        .optional(),
      /** Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. */
      return_url: z
        .string()
        .max(5000)
        .describe(
          "Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site."
        )
        .optional(),
      /** Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode. */
      saved_payment_method_options:
        PaymentPagesCheckoutSessionSavedPaymentMethodOptionsSchema.nullable()
          .describe(
            'Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode.'
          )
          .optional(),
      /** The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
      setup_intent: z
        .union([z.string().max(5000), SetupIntentSchema])
        .nullable()
        .describe(
          "The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead."
        )
        .optional(),
      /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
      shipping_address_collection:
        PaymentPagesCheckoutSessionShippingAddressCollectionSchema.nullable()
          .describe(
            'When set, provides configuration for Checkout to collect a shipping address from a customer.'
          )
          .optional(),
      /** The details of the customer cost of shipping, including the customer chosen ShippingRate. */
      shipping_cost: PaymentPagesCheckoutSessionShippingCostSchema.nullable()
        .describe(
          'The details of the customer cost of shipping, including the customer chosen ShippingRate.'
        )
        .optional(),
      /** Shipping information for this Checkout Session. */
      shipping_details: ShippingSchema.nullable()
        .describe('Shipping information for this Checkout Session.')
        .optional(),
      /** The shipping rate options applied to this Session. */
      shipping_options: z
        .array(PaymentPagesCheckoutSessionShippingOptionSchema)
        .describe('The shipping rate options applied to this Session.'),
      /** The status of the Checkout Session, one of `open`, `complete`, or `expired`. */
      status: z
        .enum(['complete', 'expired', 'open'])
        .nullable()
        .describe(
          'The status of the Checkout Session, one of `open`, `complete`, or `expired`.'
        )
        .optional(),
      /**
       * Describes the type of transaction being performed by Checkout in order to customize
       * relevant text on the page, such as the submit button. `submit_type` can only be
       * specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
       */
      submit_type: z
        .enum(['auto', 'book', 'donate', 'pay', 'subscribe'])
        .nullable()
        .describe(
          'Describes the type of transaction being performed by Checkout in order to customize\nrelevant text on the page, such as the submit button. `submit_type` can only be\nspecified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.'
        )
        .optional(),
      /** The ID of the subscription for Checkout Sessions in `subscription` mode. */
      subscription: z
        .union([z.string().max(5000), SubscriptionSchema])
        .nullable()
        .describe(
          'The ID of the subscription for Checkout Sessions in `subscription` mode.'
        )
        .optional(),
      /**
       * The URL the customer will be directed to after the payment or
       * subscription creation is successful.
       */
      success_url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The URL the customer will be directed to after the payment or\nsubscription creation is successful.'
        )
        .optional(),
      tax_id_collection:
        PaymentPagesCheckoutSessionTaxIdCollectionSchema.optional(),
      /** Tax and discount details for the computed total amount. */
      total_details: PaymentPagesCheckoutSessionTotalDetailsSchema.nullable()
        .describe('Tax and discount details for the computed total amount.')
        .optional(),
      /** The UI mode of the Session. Defaults to `hosted`. */
      ui_mode: z
        .enum(['embedded', 'hosted'])
        .nullable()
        .describe('The UI mode of the Session. Defaults to `hosted`.')
        .optional(),
      /**
       * The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
       * This value is only present when the session is active.
       */
      url: z
        .string()
        .max(5000)
        .nullable()
        .describe(
          'The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`\nThis value is only present when the session is active.'
        )
        .optional()
    })
    .describe(
      "A Checkout Session represents your customer's session as they pay for\none-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)\nor [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a\nnew Session each time your customer attempts to pay.\n\nOnce payment is successful, the Checkout Session will contain a reference\nto the [Customer](https://stripe.com/docs/api/customers), and either the successful\n[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active\n[Subscription](https://stripe.com/docs/api/subscriptions).\n\nYou can create a Checkout Session on your server and redirect to its URL\nto begin Checkout.\n\nRelated guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)"
    )
  export type CheckoutSession = z.infer<typeof CheckoutSessionSchema>

  // -----------------------------------------------------------------------------
  // Operation schemas
  // -----------------------------------------------------------------------------

  export const GetAccountParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountParams = z.infer<typeof GetAccountParamsSchema>

  export const GetAccountResponseSchema = AccountSchema
  export type GetAccountResponse = z.infer<typeof GetAccountResponseSchema>

  export const PostAccountLinksParamsSchema = z.object({})
  export type PostAccountLinksParams = z.infer<
    typeof PostAccountLinksParamsSchema
  >

  export const PostAccountLinksResponseSchema = AccountLinkSchema
  export type PostAccountLinksResponse = z.infer<
    typeof PostAccountLinksResponseSchema
  >

  export const PostAccountSessionsParamsSchema = z.object({})
  export type PostAccountSessionsParams = z.infer<
    typeof PostAccountSessionsParamsSchema
  >

  export const PostAccountSessionsResponseSchema = AccountSessionSchema
  export type PostAccountSessionsResponse = z.infer<
    typeof PostAccountSessionsResponseSchema
  >

  export const GetAccountsParamsSchema = z.object({
    /** Only return connected accounts that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return connected accounts that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetAccountsParams = z.infer<typeof GetAccountsParamsSchema>

  export const GetAccountsResponseSchema = z.object({
    data: z.array(AccountSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/accounts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAccountsResponse = z.infer<typeof GetAccountsResponseSchema>

  export const PostAccountsParamsSchema = z.object({})
  export type PostAccountsParams = z.infer<typeof PostAccountsParamsSchema>

  export const PostAccountsResponseSchema = AccountSchema
  export type PostAccountsResponse = z.infer<typeof PostAccountsResponseSchema>

  export const GetAccountsAccountParamsSchema = z.object({
    account: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountParams = z.infer<
    typeof GetAccountsAccountParamsSchema
  >

  export const GetAccountsAccountResponseSchema = AccountSchema
  export type GetAccountsAccountResponse = z.infer<
    typeof GetAccountsAccountResponseSchema
  >

  export const PostAccountsAccountParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountParams = z.infer<
    typeof PostAccountsAccountParamsSchema
  >

  export const PostAccountsAccountResponseSchema = AccountSchema
  export type PostAccountsAccountResponse = z.infer<
    typeof PostAccountsAccountResponseSchema
  >

  export const DeleteAccountsAccountParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type DeleteAccountsAccountParams = z.infer<
    typeof DeleteAccountsAccountParamsSchema
  >

  export const DeleteAccountsAccountResponseSchema = DeletedAccountSchema
  export type DeleteAccountsAccountResponse = z.infer<
    typeof DeleteAccountsAccountResponseSchema
  >

  export const PostAccountsAccountBankAccountsParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountBankAccountsParams = z.infer<
    typeof PostAccountsAccountBankAccountsParamsSchema
  >

  export const PostAccountsAccountBankAccountsResponseSchema =
    ExternalAccountSchema
  export type PostAccountsAccountBankAccountsResponse = z.infer<
    typeof PostAccountsAccountBankAccountsResponseSchema
  >

  export const GetAccountsAccountBankAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountBankAccountsIdParams = z.infer<
    typeof GetAccountsAccountBankAccountsIdParamsSchema
  >

  export const GetAccountsAccountBankAccountsIdResponseSchema =
    ExternalAccountSchema
  export type GetAccountsAccountBankAccountsIdResponse = z.infer<
    typeof GetAccountsAccountBankAccountsIdResponseSchema
  >

  export const PostAccountsAccountBankAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string()
  })
  export type PostAccountsAccountBankAccountsIdParams = z.infer<
    typeof PostAccountsAccountBankAccountsIdParamsSchema
  >

  export const PostAccountsAccountBankAccountsIdResponseSchema =
    ExternalAccountSchema
  export type PostAccountsAccountBankAccountsIdResponse = z.infer<
    typeof PostAccountsAccountBankAccountsIdResponseSchema
  >

  export const DeleteAccountsAccountBankAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string()
  })
  export type DeleteAccountsAccountBankAccountsIdParams = z.infer<
    typeof DeleteAccountsAccountBankAccountsIdParamsSchema
  >

  export const DeleteAccountsAccountBankAccountsIdResponseSchema =
    DeletedExternalAccountSchema
  export type DeleteAccountsAccountBankAccountsIdResponse = z.infer<
    typeof DeleteAccountsAccountBankAccountsIdResponseSchema
  >

  export const GetAccountsAccountCapabilitiesParamsSchema = z.object({
    account: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountCapabilitiesParams = z.infer<
    typeof GetAccountsAccountCapabilitiesParamsSchema
  >

  export const GetAccountsAccountCapabilitiesResponseSchema = z.object({
    data: z.array(CapabilitySchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAccountsAccountCapabilitiesResponse = z.infer<
    typeof GetAccountsAccountCapabilitiesResponseSchema
  >

  export const GetAccountsAccountCapabilitiesCapabilityParamsSchema = z.object({
    account: z.string().max(5000),
    capability: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountCapabilitiesCapabilityParams = z.infer<
    typeof GetAccountsAccountCapabilitiesCapabilityParamsSchema
  >

  export const GetAccountsAccountCapabilitiesCapabilityResponseSchema =
    CapabilitySchema
  export type GetAccountsAccountCapabilitiesCapabilityResponse = z.infer<
    typeof GetAccountsAccountCapabilitiesCapabilityResponseSchema
  >

  export const PostAccountsAccountCapabilitiesCapabilityParamsSchema = z.object(
    { account: z.string().max(5000), capability: z.string() }
  )
  export type PostAccountsAccountCapabilitiesCapabilityParams = z.infer<
    typeof PostAccountsAccountCapabilitiesCapabilityParamsSchema
  >

  export const PostAccountsAccountCapabilitiesCapabilityResponseSchema =
    CapabilitySchema
  export type PostAccountsAccountCapabilitiesCapabilityResponse = z.infer<
    typeof PostAccountsAccountCapabilitiesCapabilityResponseSchema
  >

  export const GetAccountsAccountExternalAccountsParamsSchema = z.object({
    account: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filter external accounts according to a particular object type. */
    object: z
      .enum(['bank_account', 'card'])
      .describe(
        'Filter external accounts according to a particular object type.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetAccountsAccountExternalAccountsParams = z.infer<
    typeof GetAccountsAccountExternalAccountsParamsSchema
  >

  export const GetAccountsAccountExternalAccountsResponseSchema = z.object({
    /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
    data: z
      .array(z.union([BankAccountSchema, CardSchema]))
      .describe(
        'The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.'
      ),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAccountsAccountExternalAccountsResponse = z.infer<
    typeof GetAccountsAccountExternalAccountsResponseSchema
  >

  export const PostAccountsAccountExternalAccountsParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountExternalAccountsParams = z.infer<
    typeof PostAccountsAccountExternalAccountsParamsSchema
  >

  export const PostAccountsAccountExternalAccountsResponseSchema =
    ExternalAccountSchema
  export type PostAccountsAccountExternalAccountsResponse = z.infer<
    typeof PostAccountsAccountExternalAccountsResponseSchema
  >

  export const GetAccountsAccountExternalAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountExternalAccountsIdParams = z.infer<
    typeof GetAccountsAccountExternalAccountsIdParamsSchema
  >

  export const GetAccountsAccountExternalAccountsIdResponseSchema =
    ExternalAccountSchema
  export type GetAccountsAccountExternalAccountsIdResponse = z.infer<
    typeof GetAccountsAccountExternalAccountsIdResponseSchema
  >

  export const PostAccountsAccountExternalAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string()
  })
  export type PostAccountsAccountExternalAccountsIdParams = z.infer<
    typeof PostAccountsAccountExternalAccountsIdParamsSchema
  >

  export const PostAccountsAccountExternalAccountsIdResponseSchema =
    ExternalAccountSchema
  export type PostAccountsAccountExternalAccountsIdResponse = z.infer<
    typeof PostAccountsAccountExternalAccountsIdResponseSchema
  >

  export const DeleteAccountsAccountExternalAccountsIdParamsSchema = z.object({
    account: z.string().max(5000),
    id: z.string()
  })
  export type DeleteAccountsAccountExternalAccountsIdParams = z.infer<
    typeof DeleteAccountsAccountExternalAccountsIdParamsSchema
  >

  export const DeleteAccountsAccountExternalAccountsIdResponseSchema =
    DeletedExternalAccountSchema
  export type DeleteAccountsAccountExternalAccountsIdResponse = z.infer<
    typeof DeleteAccountsAccountExternalAccountsIdResponseSchema
  >

  export const PostAccountsAccountLoginLinksParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountLoginLinksParams = z.infer<
    typeof PostAccountsAccountLoginLinksParamsSchema
  >

  export const PostAccountsAccountLoginLinksResponseSchema = LoginLinkSchema
  export type PostAccountsAccountLoginLinksResponse = z.infer<
    typeof PostAccountsAccountLoginLinksResponseSchema
  >

  export const GetAccountsAccountPeopleParamsSchema = z.object({
    account: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filters on the list of people returned based on the person's relationship to the account's company. */
    relationship: z
      .object({
        authorizer: z.boolean().optional(),
        director: z.boolean().optional(),
        executive: z.boolean().optional(),
        legal_guardian: z.boolean().optional(),
        owner: z.boolean().optional(),
        representative: z.boolean().optional()
      })
      .describe(
        "Filters on the list of people returned based on the person's relationship to the account's company."
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetAccountsAccountPeopleParams = z.infer<
    typeof GetAccountsAccountPeopleParamsSchema
  >

  export const GetAccountsAccountPeopleResponseSchema = z.object({
    data: z.array(PersonSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAccountsAccountPeopleResponse = z.infer<
    typeof GetAccountsAccountPeopleResponseSchema
  >

  export const PostAccountsAccountPeopleParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountPeopleParams = z.infer<
    typeof PostAccountsAccountPeopleParamsSchema
  >

  export const PostAccountsAccountPeopleResponseSchema = PersonSchema
  export type PostAccountsAccountPeopleResponse = z.infer<
    typeof PostAccountsAccountPeopleResponseSchema
  >

  export const GetAccountsAccountPeoplePersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountPeoplePersonParams = z.infer<
    typeof GetAccountsAccountPeoplePersonParamsSchema
  >

  export const GetAccountsAccountPeoplePersonResponseSchema = PersonSchema
  export type GetAccountsAccountPeoplePersonResponse = z.infer<
    typeof GetAccountsAccountPeoplePersonResponseSchema
  >

  export const PostAccountsAccountPeoplePersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000)
  })
  export type PostAccountsAccountPeoplePersonParams = z.infer<
    typeof PostAccountsAccountPeoplePersonParamsSchema
  >

  export const PostAccountsAccountPeoplePersonResponseSchema = PersonSchema
  export type PostAccountsAccountPeoplePersonResponse = z.infer<
    typeof PostAccountsAccountPeoplePersonResponseSchema
  >

  export const DeleteAccountsAccountPeoplePersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000)
  })
  export type DeleteAccountsAccountPeoplePersonParams = z.infer<
    typeof DeleteAccountsAccountPeoplePersonParamsSchema
  >

  export const DeleteAccountsAccountPeoplePersonResponseSchema =
    DeletedPersonSchema
  export type DeleteAccountsAccountPeoplePersonResponse = z.infer<
    typeof DeleteAccountsAccountPeoplePersonResponseSchema
  >

  export const GetAccountsAccountPersonsParamsSchema = z.object({
    account: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filters on the list of people returned based on the person's relationship to the account's company. */
    relationship: z
      .object({
        authorizer: z.boolean().optional(),
        director: z.boolean().optional(),
        executive: z.boolean().optional(),
        legal_guardian: z.boolean().optional(),
        owner: z.boolean().optional(),
        representative: z.boolean().optional()
      })
      .describe(
        "Filters on the list of people returned based on the person's relationship to the account's company."
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetAccountsAccountPersonsParams = z.infer<
    typeof GetAccountsAccountPersonsParamsSchema
  >

  export const GetAccountsAccountPersonsResponseSchema = z.object({
    data: z.array(PersonSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAccountsAccountPersonsResponse = z.infer<
    typeof GetAccountsAccountPersonsResponseSchema
  >

  export const PostAccountsAccountPersonsParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountPersonsParams = z.infer<
    typeof PostAccountsAccountPersonsParamsSchema
  >

  export const PostAccountsAccountPersonsResponseSchema = PersonSchema
  export type PostAccountsAccountPersonsResponse = z.infer<
    typeof PostAccountsAccountPersonsResponseSchema
  >

  export const GetAccountsAccountPersonsPersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetAccountsAccountPersonsPersonParams = z.infer<
    typeof GetAccountsAccountPersonsPersonParamsSchema
  >

  export const GetAccountsAccountPersonsPersonResponseSchema = PersonSchema
  export type GetAccountsAccountPersonsPersonResponse = z.infer<
    typeof GetAccountsAccountPersonsPersonResponseSchema
  >

  export const PostAccountsAccountPersonsPersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000)
  })
  export type PostAccountsAccountPersonsPersonParams = z.infer<
    typeof PostAccountsAccountPersonsPersonParamsSchema
  >

  export const PostAccountsAccountPersonsPersonResponseSchema = PersonSchema
  export type PostAccountsAccountPersonsPersonResponse = z.infer<
    typeof PostAccountsAccountPersonsPersonResponseSchema
  >

  export const DeleteAccountsAccountPersonsPersonParamsSchema = z.object({
    account: z.string().max(5000),
    person: z.string().max(5000)
  })
  export type DeleteAccountsAccountPersonsPersonParams = z.infer<
    typeof DeleteAccountsAccountPersonsPersonParamsSchema
  >

  export const DeleteAccountsAccountPersonsPersonResponseSchema =
    DeletedPersonSchema
  export type DeleteAccountsAccountPersonsPersonResponse = z.infer<
    typeof DeleteAccountsAccountPersonsPersonResponseSchema
  >

  export const PostAccountsAccountRejectParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostAccountsAccountRejectParams = z.infer<
    typeof PostAccountsAccountRejectParamsSchema
  >

  export const PostAccountsAccountRejectResponseSchema = AccountSchema
  export type PostAccountsAccountRejectResponse = z.infer<
    typeof PostAccountsAccountRejectResponseSchema
  >

  export const GetApplePayDomainsParamsSchema = z.object({
    domain_name: z.string().max(5000).optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetApplePayDomainsParams = z.infer<
    typeof GetApplePayDomainsParamsSchema
  >

  export const GetApplePayDomainsResponseSchema = z.object({
    data: z.array(ApplePayDomainSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/apple_pay/domains'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetApplePayDomainsResponse = z.infer<
    typeof GetApplePayDomainsResponseSchema
  >

  export const PostApplePayDomainsParamsSchema = z.object({})
  export type PostApplePayDomainsParams = z.infer<
    typeof PostApplePayDomainsParamsSchema
  >

  export const PostApplePayDomainsResponseSchema = ApplePayDomainSchema
  export type PostApplePayDomainsResponse = z.infer<
    typeof PostApplePayDomainsResponseSchema
  >

  export const GetApplePayDomainsDomainParamsSchema = z.object({
    domain: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetApplePayDomainsDomainParams = z.infer<
    typeof GetApplePayDomainsDomainParamsSchema
  >

  export const GetApplePayDomainsDomainResponseSchema = ApplePayDomainSchema
  export type GetApplePayDomainsDomainResponse = z.infer<
    typeof GetApplePayDomainsDomainResponseSchema
  >

  export const DeleteApplePayDomainsDomainParamsSchema = z.object({
    domain: z.string().max(5000)
  })
  export type DeleteApplePayDomainsDomainParams = z.infer<
    typeof DeleteApplePayDomainsDomainParamsSchema
  >

  export const DeleteApplePayDomainsDomainResponseSchema =
    DeletedApplePayDomainSchema
  export type DeleteApplePayDomainsDomainResponse = z.infer<
    typeof DeleteApplePayDomainsDomainResponseSchema
  >

  export const GetApplicationFeesParamsSchema = z.object({
    /** Only return application fees for the charge specified by this charge ID. */
    charge: z
      .string()
      .max(5000)
      .describe(
        'Only return application fees for the charge specified by this charge ID.'
      )
      .optional(),
    /** Only return applications fees that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return applications fees that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetApplicationFeesParams = z.infer<
    typeof GetApplicationFeesParamsSchema
  >

  export const GetApplicationFeesResponseSchema = z.object({
    data: z.array(ApplicationFeeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/application_fees'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetApplicationFeesResponse = z.infer<
    typeof GetApplicationFeesResponseSchema
  >

  export const GetApplicationFeesFeeRefundsIdParamsSchema = z.object({
    fee: z.string().max(5000),
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetApplicationFeesFeeRefundsIdParams = z.infer<
    typeof GetApplicationFeesFeeRefundsIdParamsSchema
  >

  export const GetApplicationFeesFeeRefundsIdResponseSchema = FeeRefundSchema
  export type GetApplicationFeesFeeRefundsIdResponse = z.infer<
    typeof GetApplicationFeesFeeRefundsIdResponseSchema
  >

  export const PostApplicationFeesFeeRefundsIdParamsSchema = z.object({
    fee: z.string().max(5000),
    id: z.string().max(5000)
  })
  export type PostApplicationFeesFeeRefundsIdParams = z.infer<
    typeof PostApplicationFeesFeeRefundsIdParamsSchema
  >

  export const PostApplicationFeesFeeRefundsIdResponseSchema = FeeRefundSchema
  export type PostApplicationFeesFeeRefundsIdResponse = z.infer<
    typeof PostApplicationFeesFeeRefundsIdResponseSchema
  >

  export const GetApplicationFeesIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetApplicationFeesIdParams = z.infer<
    typeof GetApplicationFeesIdParamsSchema
  >

  export const GetApplicationFeesIdResponseSchema = ApplicationFeeSchema
  export type GetApplicationFeesIdResponse = z.infer<
    typeof GetApplicationFeesIdResponseSchema
  >

  export const PostApplicationFeesIdRefundParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostApplicationFeesIdRefundParams = z.infer<
    typeof PostApplicationFeesIdRefundParamsSchema
  >

  export const PostApplicationFeesIdRefundResponseSchema = ApplicationFeeSchema
  export type PostApplicationFeesIdRefundResponse = z.infer<
    typeof PostApplicationFeesIdRefundResponseSchema
  >

  export const GetApplicationFeesIdRefundsParamsSchema = z.object({
    id: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetApplicationFeesIdRefundsParams = z.infer<
    typeof GetApplicationFeesIdRefundsParamsSchema
  >

  export const GetApplicationFeesIdRefundsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(FeeRefundSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetApplicationFeesIdRefundsResponse = z.infer<
    typeof GetApplicationFeesIdRefundsResponseSchema
  >

  export const PostApplicationFeesIdRefundsParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostApplicationFeesIdRefundsParams = z.infer<
    typeof PostApplicationFeesIdRefundsParamsSchema
  >

  export const PostApplicationFeesIdRefundsResponseSchema = FeeRefundSchema
  export type PostApplicationFeesIdRefundsResponse = z.infer<
    typeof PostApplicationFeesIdRefundsResponseSchema
  >

  export const GetAppsSecretsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */
    scope: z
      .object({
        type: z.enum(['account', 'user']),
        user: z.string().max(5000).optional()
      })
      .describe(
        'Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.'
      ),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetAppsSecretsParams = z.infer<typeof GetAppsSecretsParamsSchema>

  export const GetAppsSecretsResponseSchema = z.object({
    data: z.array(AppsSecretSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/apps/secrets'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetAppsSecretsResponse = z.infer<
    typeof GetAppsSecretsResponseSchema
  >

  export const PostAppsSecretsParamsSchema = z.object({})
  export type PostAppsSecretsParams = z.infer<
    typeof PostAppsSecretsParamsSchema
  >

  export const PostAppsSecretsResponseSchema = AppsSecretSchema
  export type PostAppsSecretsResponse = z.infer<
    typeof PostAppsSecretsResponseSchema
  >

  export const PostAppsSecretsDeleteParamsSchema = z.object({})
  export type PostAppsSecretsDeleteParams = z.infer<
    typeof PostAppsSecretsDeleteParamsSchema
  >

  export const PostAppsSecretsDeleteResponseSchema = AppsSecretSchema
  export type PostAppsSecretsDeleteResponse = z.infer<
    typeof PostAppsSecretsDeleteResponseSchema
  >

  export const GetAppsSecretsFindParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A name for the secret that's unique within the scope. */
    name: z
      .string()
      .max(5000)
      .describe("A name for the secret that's unique within the scope."),
    /** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */
    scope: z
      .object({
        type: z.enum(['account', 'user']),
        user: z.string().max(5000).optional()
      })
      .describe(
        'Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.'
      )
  })
  export type GetAppsSecretsFindParams = z.infer<
    typeof GetAppsSecretsFindParamsSchema
  >

  export const GetAppsSecretsFindResponseSchema = AppsSecretSchema
  export type GetAppsSecretsFindResponse = z.infer<
    typeof GetAppsSecretsFindResponseSchema
  >

  export const GetBalanceParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBalanceParams = z.infer<typeof GetBalanceParamsSchema>

  export const GetBalanceResponseSchema = BalanceSchema
  export type GetBalanceResponse = z.infer<typeof GetBalanceResponseSchema>

  export const GetBalanceHistoryParamsSchema = z.object({
    /** Only return transactions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return transactions that were created during the given date interval.'
      )
      .optional(),
    /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
    payout: z
      .string()
      .max(5000)
      .describe(
        'For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.'
      )
      .optional(),
    /** Only returns the original transaction. */
    source: z
      .string()
      .max(5000)
      .describe('Only returns the original transaction.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.'
      )
      .optional()
  })
  export type GetBalanceHistoryParams = z.infer<
    typeof GetBalanceHistoryParamsSchema
  >

  export const GetBalanceHistoryResponseSchema = z.object({
    data: z.array(BalanceTransactionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/balance_transactions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBalanceHistoryResponse = z.infer<
    typeof GetBalanceHistoryResponseSchema
  >

  export const GetBalanceHistoryIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBalanceHistoryIdParams = z.infer<
    typeof GetBalanceHistoryIdParamsSchema
  >

  export const GetBalanceHistoryIdResponseSchema = BalanceTransactionSchema
  export type GetBalanceHistoryIdResponse = z.infer<
    typeof GetBalanceHistoryIdResponseSchema
  >

  export const GetBalanceTransactionsParamsSchema = z.object({
    /** Only return transactions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return transactions that were created during the given date interval.'
      )
      .optional(),
    /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: z
      .string()
      .describe(
        'Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
    payout: z
      .string()
      .max(5000)
      .describe(
        'For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.'
      )
      .optional(),
    /** Only returns the original transaction. */
    source: z
      .string()
      .max(5000)
      .describe('Only returns the original transaction.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
    type: z
      .string()
      .max(5000)
      .describe(
        'Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.'
      )
      .optional()
  })
  export type GetBalanceTransactionsParams = z.infer<
    typeof GetBalanceTransactionsParamsSchema
  >

  export const GetBalanceTransactionsResponseSchema = z.object({
    data: z.array(BalanceTransactionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/balance_transactions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBalanceTransactionsResponse = z.infer<
    typeof GetBalanceTransactionsResponseSchema
  >

  export const GetBalanceTransactionsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBalanceTransactionsIdParams = z.infer<
    typeof GetBalanceTransactionsIdParamsSchema
  >

  export const GetBalanceTransactionsIdResponseSchema = BalanceTransactionSchema
  export type GetBalanceTransactionsIdResponse = z.infer<
    typeof GetBalanceTransactionsIdResponseSchema
  >

  export const GetBillingAlertsParamsSchema = z.object({
    /** Filter results to only include this type of alert. */
    alert_type: z
      .literal('usage_threshold')
      .describe('Filter results to only include this type of alert.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filter results to only include alerts with the given meter. */
    meter: z
      .string()
      .max(5000)
      .describe('Filter results to only include alerts with the given meter.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetBillingAlertsParams = z.infer<
    typeof GetBillingAlertsParamsSchema
  >

  export const GetBillingAlertsResponseSchema = z.object({
    data: z.array(BillingAlertSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing/alerts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingAlertsResponse = z.infer<
    typeof GetBillingAlertsResponseSchema
  >

  export const PostBillingAlertsParamsSchema = z.object({})
  export type PostBillingAlertsParams = z.infer<
    typeof PostBillingAlertsParamsSchema
  >

  export const PostBillingAlertsResponseSchema = BillingAlertSchema
  export type PostBillingAlertsResponse = z.infer<
    typeof PostBillingAlertsResponseSchema
  >

  export const GetBillingAlertsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBillingAlertsIdParams = z.infer<
    typeof GetBillingAlertsIdParamsSchema
  >

  export const GetBillingAlertsIdResponseSchema = BillingAlertSchema
  export type GetBillingAlertsIdResponse = z.infer<
    typeof GetBillingAlertsIdResponseSchema
  >

  export const PostBillingAlertsIdActivateParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostBillingAlertsIdActivateParams = z.infer<
    typeof PostBillingAlertsIdActivateParamsSchema
  >

  export const PostBillingAlertsIdActivateResponseSchema = BillingAlertSchema
  export type PostBillingAlertsIdActivateResponse = z.infer<
    typeof PostBillingAlertsIdActivateResponseSchema
  >

  export const PostBillingAlertsIdArchiveParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostBillingAlertsIdArchiveParams = z.infer<
    typeof PostBillingAlertsIdArchiveParamsSchema
  >

  export const PostBillingAlertsIdArchiveResponseSchema = BillingAlertSchema
  export type PostBillingAlertsIdArchiveResponse = z.infer<
    typeof PostBillingAlertsIdArchiveResponseSchema
  >

  export const PostBillingAlertsIdDeactivateParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostBillingAlertsIdDeactivateParams = z.infer<
    typeof PostBillingAlertsIdDeactivateParamsSchema
  >

  export const PostBillingAlertsIdDeactivateResponseSchema = BillingAlertSchema
  export type PostBillingAlertsIdDeactivateResponse = z.infer<
    typeof PostBillingAlertsIdDeactivateResponseSchema
  >

  export const GetBillingCreditBalanceSummaryParamsSchema = z.object({
    /** The customer for which to fetch credit balance summary. */
    customer: z
      .string()
      .max(5000)
      .describe('The customer for which to fetch credit balance summary.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** The filter criteria for the credit balance summary. */
    filter: z
      .object({
        applicability_scope: z
          .object({
            price_type: z.literal('metered').optional(),
            prices: z.array(z.object({ id: z.string().max(5000) })).optional()
          })
          .optional(),
        credit_grant: z.string().max(5000).optional(),
        type: z.enum(['applicability_scope', 'credit_grant'])
      })
      .describe('The filter criteria for the credit balance summary.')
  })
  export type GetBillingCreditBalanceSummaryParams = z.infer<
    typeof GetBillingCreditBalanceSummaryParamsSchema
  >

  export const GetBillingCreditBalanceSummaryResponseSchema =
    BillingCreditBalanceSummarySchema
  export type GetBillingCreditBalanceSummaryResponse = z.infer<
    typeof GetBillingCreditBalanceSummaryResponseSchema
  >

  export const GetBillingCreditBalanceTransactionsParamsSchema = z.object({
    /** The credit grant for which to fetch credit balance transactions. */
    credit_grant: z
      .string()
      .max(5000)
      .describe(
        'The credit grant for which to fetch credit balance transactions.'
      )
      .optional(),
    /** The customer for which to fetch credit balance transactions. */
    customer: z
      .string()
      .max(5000)
      .describe('The customer for which to fetch credit balance transactions.'),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetBillingCreditBalanceTransactionsParams = z.infer<
    typeof GetBillingCreditBalanceTransactionsParamsSchema
  >

  export const GetBillingCreditBalanceTransactionsResponseSchema = z.object({
    data: z.array(BillingCreditBalanceTransactionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing/credit_grants'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingCreditBalanceTransactionsResponse = z.infer<
    typeof GetBillingCreditBalanceTransactionsResponseSchema
  >

  export const GetBillingCreditBalanceTransactionsIdParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBillingCreditBalanceTransactionsIdParams = z.infer<
    typeof GetBillingCreditBalanceTransactionsIdParamsSchema
  >

  export const GetBillingCreditBalanceTransactionsIdResponseSchema =
    BillingCreditBalanceTransactionSchema
  export type GetBillingCreditBalanceTransactionsIdResponse = z.infer<
    typeof GetBillingCreditBalanceTransactionsIdResponseSchema
  >

  export const GetBillingCreditGrantsParamsSchema = z.object({
    /** Only return credit grants for this customer. */
    customer: z
      .string()
      .max(5000)
      .describe('Only return credit grants for this customer.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetBillingCreditGrantsParams = z.infer<
    typeof GetBillingCreditGrantsParamsSchema
  >

  export const GetBillingCreditGrantsResponseSchema = z.object({
    data: z.array(BillingCreditGrantSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing/credit_grants'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingCreditGrantsResponse = z.infer<
    typeof GetBillingCreditGrantsResponseSchema
  >

  export const PostBillingCreditGrantsParamsSchema = z.object({})
  export type PostBillingCreditGrantsParams = z.infer<
    typeof PostBillingCreditGrantsParamsSchema
  >

  export const PostBillingCreditGrantsResponseSchema = BillingCreditGrantSchema
  export type PostBillingCreditGrantsResponse = z.infer<
    typeof PostBillingCreditGrantsResponseSchema
  >

  export const GetBillingCreditGrantsIdParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBillingCreditGrantsIdParams = z.infer<
    typeof GetBillingCreditGrantsIdParamsSchema
  >

  export const GetBillingCreditGrantsIdResponseSchema = BillingCreditGrantSchema
  export type GetBillingCreditGrantsIdResponse = z.infer<
    typeof GetBillingCreditGrantsIdResponseSchema
  >

  export const PostBillingCreditGrantsIdParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingCreditGrantsIdParams = z.infer<
    typeof PostBillingCreditGrantsIdParamsSchema
  >

  export const PostBillingCreditGrantsIdResponseSchema =
    BillingCreditGrantSchema
  export type PostBillingCreditGrantsIdResponse = z.infer<
    typeof PostBillingCreditGrantsIdResponseSchema
  >

  export const PostBillingCreditGrantsIdExpireParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingCreditGrantsIdExpireParams = z.infer<
    typeof PostBillingCreditGrantsIdExpireParamsSchema
  >

  export const PostBillingCreditGrantsIdExpireResponseSchema =
    BillingCreditGrantSchema
  export type PostBillingCreditGrantsIdExpireResponse = z.infer<
    typeof PostBillingCreditGrantsIdExpireResponseSchema
  >

  export const PostBillingCreditGrantsIdVoidParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingCreditGrantsIdVoidParams = z.infer<
    typeof PostBillingCreditGrantsIdVoidParamsSchema
  >

  export const PostBillingCreditGrantsIdVoidResponseSchema =
    BillingCreditGrantSchema
  export type PostBillingCreditGrantsIdVoidResponse = z.infer<
    typeof PostBillingCreditGrantsIdVoidResponseSchema
  >

  export const PostBillingMeterEventAdjustmentsParamsSchema = z.object({})
  export type PostBillingMeterEventAdjustmentsParams = z.infer<
    typeof PostBillingMeterEventAdjustmentsParamsSchema
  >

  export const PostBillingMeterEventAdjustmentsResponseSchema =
    BillingMeterEventAdjustmentSchema
  export type PostBillingMeterEventAdjustmentsResponse = z.infer<
    typeof PostBillingMeterEventAdjustmentsResponseSchema
  >

  export const PostBillingMeterEventsParamsSchema = z.object({})
  export type PostBillingMeterEventsParams = z.infer<
    typeof PostBillingMeterEventsParamsSchema
  >

  export const PostBillingMeterEventsResponseSchema = BillingMeterEventSchema
  export type PostBillingMeterEventsResponse = z.infer<
    typeof PostBillingMeterEventsResponseSchema
  >

  export const GetBillingMetersParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Filter results to only include meters with the given status. */
    status: z
      .enum(['active', 'inactive'])
      .describe('Filter results to only include meters with the given status.')
      .optional()
  })
  export type GetBillingMetersParams = z.infer<
    typeof GetBillingMetersParamsSchema
  >

  export const GetBillingMetersResponseSchema = z.object({
    data: z.array(BillingMeterSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing/meters'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingMetersResponse = z.infer<
    typeof GetBillingMetersResponseSchema
  >

  export const PostBillingMetersParamsSchema = z.object({})
  export type PostBillingMetersParams = z.infer<
    typeof PostBillingMetersParamsSchema
  >

  export const PostBillingMetersResponseSchema = BillingMeterSchema
  export type PostBillingMetersResponse = z.infer<
    typeof PostBillingMetersResponseSchema
  >

  export const GetBillingMetersIdParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetBillingMetersIdParams = z.infer<
    typeof GetBillingMetersIdParamsSchema
  >

  export const GetBillingMetersIdResponseSchema = BillingMeterSchema
  export type GetBillingMetersIdResponse = z.infer<
    typeof GetBillingMetersIdResponseSchema
  >

  export const PostBillingMetersIdParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingMetersIdParams = z.infer<
    typeof PostBillingMetersIdParamsSchema
  >

  export const PostBillingMetersIdResponseSchema = BillingMeterSchema
  export type PostBillingMetersIdResponse = z.infer<
    typeof PostBillingMetersIdResponseSchema
  >

  export const PostBillingMetersIdDeactivateParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingMetersIdDeactivateParams = z.infer<
    typeof PostBillingMetersIdDeactivateParamsSchema
  >

  export const PostBillingMetersIdDeactivateResponseSchema = BillingMeterSchema
  export type PostBillingMetersIdDeactivateResponse = z.infer<
    typeof PostBillingMetersIdDeactivateResponseSchema
  >

  export const GetBillingMetersIdEventSummariesParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.'),
    /** The customer for which to fetch event summaries. */
    customer: z
      .string()
      .max(5000)
      .describe('The customer for which to fetch event summaries.'),
    /** The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries. */
    end_time: z
      .number()
      .int()
      .describe(
        'The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.'
      ),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries. */
    start_time: z
      .number()
      .int()
      .describe(
        'The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.'
      ),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC). */
    value_grouping_window: z
      .enum(['day', 'hour'])
      .describe(
        'Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).'
      )
      .optional()
  })
  export type GetBillingMetersIdEventSummariesParams = z.infer<
    typeof GetBillingMetersIdEventSummariesParamsSchema
  >

  export const GetBillingMetersIdEventSummariesResponseSchema = z.object({
    data: z.array(BillingMeterEventSummarySchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing/meters/[^/]+/event_summaries'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingMetersIdEventSummariesResponse = z.infer<
    typeof GetBillingMetersIdEventSummariesResponseSchema
  >

  export const PostBillingMetersIdReactivateParamsSchema = z.object({
    /** Unique identifier for the object. */
    id: z.string().max(5000).describe('Unique identifier for the object.')
  })
  export type PostBillingMetersIdReactivateParams = z.infer<
    typeof PostBillingMetersIdReactivateParamsSchema
  >

  export const PostBillingMetersIdReactivateResponseSchema = BillingMeterSchema
  export type PostBillingMetersIdReactivateResponse = z.infer<
    typeof PostBillingMetersIdReactivateResponseSchema
  >

  export const GetBillingPortalConfigurationsParamsSchema = z.object({
    /** Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations). */
    active: z
      .boolean()
      .describe(
        'Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration). */
    is_default: z
      .boolean()
      .describe(
        'Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetBillingPortalConfigurationsParams = z.infer<
    typeof GetBillingPortalConfigurationsParamsSchema
  >

  export const GetBillingPortalConfigurationsResponseSchema = z.object({
    data: z.array(BillingPortalConfigurationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/billing_portal/configurations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetBillingPortalConfigurationsResponse = z.infer<
    typeof GetBillingPortalConfigurationsResponseSchema
  >

  export const PostBillingPortalConfigurationsParamsSchema = z.object({})
  export type PostBillingPortalConfigurationsParams = z.infer<
    typeof PostBillingPortalConfigurationsParamsSchema
  >

  export const PostBillingPortalConfigurationsResponseSchema =
    BillingPortalConfigurationSchema
  export type PostBillingPortalConfigurationsResponse = z.infer<
    typeof PostBillingPortalConfigurationsResponseSchema
  >

  export const GetBillingPortalConfigurationsConfigurationParamsSchema =
    z.object({
      configuration: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetBillingPortalConfigurationsConfigurationParams = z.infer<
    typeof GetBillingPortalConfigurationsConfigurationParamsSchema
  >

  export const GetBillingPortalConfigurationsConfigurationResponseSchema =
    BillingPortalConfigurationSchema
  export type GetBillingPortalConfigurationsConfigurationResponse = z.infer<
    typeof GetBillingPortalConfigurationsConfigurationResponseSchema
  >

  export const PostBillingPortalConfigurationsConfigurationParamsSchema =
    z.object({ configuration: z.string().max(5000) })
  export type PostBillingPortalConfigurationsConfigurationParams = z.infer<
    typeof PostBillingPortalConfigurationsConfigurationParamsSchema
  >

  export const PostBillingPortalConfigurationsConfigurationResponseSchema =
    BillingPortalConfigurationSchema
  export type PostBillingPortalConfigurationsConfigurationResponse = z.infer<
    typeof PostBillingPortalConfigurationsConfigurationResponseSchema
  >

  export const PostBillingPortalSessionsParamsSchema = z.object({})
  export type PostBillingPortalSessionsParams = z.infer<
    typeof PostBillingPortalSessionsParamsSchema
  >

  export const PostBillingPortalSessionsResponseSchema =
    BillingPortalSessionSchema
  export type PostBillingPortalSessionsResponse = z.infer<
    typeof PostBillingPortalSessionsResponseSchema
  >

  export const GetChargesParamsSchema = z.object({
    /** Only return charges that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return charges that were created during the given date interval.'
      )
      .optional(),
    /** Only return charges for the customer specified by this customer ID. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return charges for the customer specified by this customer ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
    payment_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return charges for this transfer group, limited to 100. */
    transfer_group: z
      .string()
      .max(5000)
      .describe('Only return charges for this transfer group, limited to 100.')
      .optional()
  })
  export type GetChargesParams = z.infer<typeof GetChargesParamsSchema>

  export const GetChargesResponseSchema = z.object({
    data: z.array(ChargeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/charges'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetChargesResponse = z.infer<typeof GetChargesResponseSchema>

  export const PostChargesParamsSchema = z.object({})
  export type PostChargesParams = z.infer<typeof PostChargesParamsSchema>

  export const PostChargesResponseSchema = ChargeSchema
  export type PostChargesResponse = z.infer<typeof PostChargesResponseSchema>

  export const GetChargesSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).'
      )
  })
  export type GetChargesSearchParams = z.infer<
    typeof GetChargesSearchParamsSchema
  >

  export const GetChargesSearchResponseSchema = z.object({
    data: z.array(ChargeSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetChargesSearchResponse = z.infer<
    typeof GetChargesSearchResponseSchema
  >

  export const GetChargesChargeParamsSchema = z.object({
    charge: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetChargesChargeParams = z.infer<
    typeof GetChargesChargeParamsSchema
  >

  export const GetChargesChargeResponseSchema = ChargeSchema
  export type GetChargesChargeResponse = z.infer<
    typeof GetChargesChargeResponseSchema
  >

  export const PostChargesChargeParamsSchema = z.object({
    charge: z.string().max(5000)
  })
  export type PostChargesChargeParams = z.infer<
    typeof PostChargesChargeParamsSchema
  >

  export const PostChargesChargeResponseSchema = ChargeSchema
  export type PostChargesChargeResponse = z.infer<
    typeof PostChargesChargeResponseSchema
  >

  export const PostChargesChargeCaptureParamsSchema = z.object({
    charge: z.string().max(5000)
  })
  export type PostChargesChargeCaptureParams = z.infer<
    typeof PostChargesChargeCaptureParamsSchema
  >

  export const PostChargesChargeCaptureResponseSchema = ChargeSchema
  export type PostChargesChargeCaptureResponse = z.infer<
    typeof PostChargesChargeCaptureResponseSchema
  >

  export const GetChargesChargeDisputeParamsSchema = z.object({
    charge: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetChargesChargeDisputeParams = z.infer<
    typeof GetChargesChargeDisputeParamsSchema
  >

  export const GetChargesChargeDisputeResponseSchema = DisputeSchema
  export type GetChargesChargeDisputeResponse = z.infer<
    typeof GetChargesChargeDisputeResponseSchema
  >

  export const PostChargesChargeDisputeParamsSchema = z.object({
    charge: z.string().max(5000)
  })
  export type PostChargesChargeDisputeParams = z.infer<
    typeof PostChargesChargeDisputeParamsSchema
  >

  export const PostChargesChargeDisputeResponseSchema = DisputeSchema
  export type PostChargesChargeDisputeResponse = z.infer<
    typeof PostChargesChargeDisputeResponseSchema
  >

  export const PostChargesChargeDisputeCloseParamsSchema = z.object({
    charge: z.string().max(5000)
  })
  export type PostChargesChargeDisputeCloseParams = z.infer<
    typeof PostChargesChargeDisputeCloseParamsSchema
  >

  export const PostChargesChargeDisputeCloseResponseSchema = DisputeSchema
  export type PostChargesChargeDisputeCloseResponse = z.infer<
    typeof PostChargesChargeDisputeCloseResponseSchema
  >

  export const PostChargesChargeRefundParamsSchema = z.object({
    /** The identifier of the charge to refund. */
    charge: z
      .string()
      .max(5000)
      .describe('The identifier of the charge to refund.')
  })
  export type PostChargesChargeRefundParams = z.infer<
    typeof PostChargesChargeRefundParamsSchema
  >

  export const PostChargesChargeRefundResponseSchema = ChargeSchema
  export type PostChargesChargeRefundResponse = z.infer<
    typeof PostChargesChargeRefundResponseSchema
  >

  export const GetChargesChargeRefundsParamsSchema = z.object({
    charge: z.string(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetChargesChargeRefundsParams = z.infer<
    typeof GetChargesChargeRefundsParamsSchema
  >

  export const GetChargesChargeRefundsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(RefundSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetChargesChargeRefundsResponse = z.infer<
    typeof GetChargesChargeRefundsResponseSchema
  >

  export const PostChargesChargeRefundsParamsSchema = z.object({
    /** The identifier of the charge to refund. */
    charge: z
      .string()
      .max(5000)
      .describe('The identifier of the charge to refund.')
  })
  export type PostChargesChargeRefundsParams = z.infer<
    typeof PostChargesChargeRefundsParamsSchema
  >

  export const PostChargesChargeRefundsResponseSchema = RefundSchema
  export type PostChargesChargeRefundsResponse = z.infer<
    typeof PostChargesChargeRefundsResponseSchema
  >

  export const GetChargesChargeRefundsRefundParamsSchema = z.object({
    charge: z.string(),
    refund: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetChargesChargeRefundsRefundParams = z.infer<
    typeof GetChargesChargeRefundsRefundParamsSchema
  >

  export const GetChargesChargeRefundsRefundResponseSchema = RefundSchema
  export type GetChargesChargeRefundsRefundResponse = z.infer<
    typeof GetChargesChargeRefundsRefundResponseSchema
  >

  export const PostChargesChargeRefundsRefundParamsSchema = z.object({
    charge: z.string(),
    refund: z.string()
  })
  export type PostChargesChargeRefundsRefundParams = z.infer<
    typeof PostChargesChargeRefundsRefundParamsSchema
  >

  export const PostChargesChargeRefundsRefundResponseSchema = RefundSchema
  export type PostChargesChargeRefundsRefundResponse = z.infer<
    typeof PostChargesChargeRefundsRefundResponseSchema
  >

  export const GetCheckoutSessionsParamsSchema = z.object({
    /** Only return Checkout Sessions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return Checkout Sessions that were created during the given date interval.'
      )
      .optional(),
    /** Only return the Checkout Sessions for the Customer specified. */
    customer: z
      .string()
      .max(5000)
      .describe('Only return the Checkout Sessions for the Customer specified.')
      .optional(),
    /** Only return the Checkout Sessions for the Customer details specified. */
    customer_details: z
      .object({ email: z.string() })
      .describe(
        'Only return the Checkout Sessions for the Customer details specified.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return the Checkout Session for the PaymentIntent specified. */
    payment_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return the Checkout Session for the PaymentIntent specified.'
      )
      .optional(),
    /** Only return the Checkout Sessions for the Payment Link specified. */
    payment_link: z
      .string()
      .max(5000)
      .describe(
        'Only return the Checkout Sessions for the Payment Link specified.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return the Checkout Sessions matching the given status. */
    status: z
      .enum(['complete', 'expired', 'open'])
      .describe('Only return the Checkout Sessions matching the given status.')
      .optional(),
    /** Only return the Checkout Session for the subscription specified. */
    subscription: z
      .string()
      .max(5000)
      .describe(
        'Only return the Checkout Session for the subscription specified.'
      )
      .optional()
  })
  export type GetCheckoutSessionsParams = z.infer<
    typeof GetCheckoutSessionsParamsSchema
  >

  export const GetCheckoutSessionsResponseSchema = z.object({
    data: z.array(CheckoutSessionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCheckoutSessionsResponse = z.infer<
    typeof GetCheckoutSessionsResponseSchema
  >

  export const PostCheckoutSessionsParamsSchema = z.object({})
  export type PostCheckoutSessionsParams = z.infer<
    typeof PostCheckoutSessionsParamsSchema
  >

  export const PostCheckoutSessionsResponseSchema = CheckoutSessionSchema
  export type PostCheckoutSessionsResponse = z.infer<
    typeof PostCheckoutSessionsResponseSchema
  >

  export const GetCheckoutSessionsSessionParamsSchema = z.object({
    session: z.string().max(66),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCheckoutSessionsSessionParams = z.infer<
    typeof GetCheckoutSessionsSessionParamsSchema
  >

  export const GetCheckoutSessionsSessionResponseSchema = CheckoutSessionSchema
  export type GetCheckoutSessionsSessionResponse = z.infer<
    typeof GetCheckoutSessionsSessionResponseSchema
  >

  export const PostCheckoutSessionsSessionParamsSchema = z.object({
    session: z.string().max(5000)
  })
  export type PostCheckoutSessionsSessionParams = z.infer<
    typeof PostCheckoutSessionsSessionParamsSchema
  >

  export const PostCheckoutSessionsSessionResponseSchema = CheckoutSessionSchema
  export type PostCheckoutSessionsSessionResponse = z.infer<
    typeof PostCheckoutSessionsSessionResponseSchema
  >

  export const PostCheckoutSessionsSessionExpireParamsSchema = z.object({
    session: z.string().max(5000)
  })
  export type PostCheckoutSessionsSessionExpireParams = z.infer<
    typeof PostCheckoutSessionsSessionExpireParamsSchema
  >

  export const PostCheckoutSessionsSessionExpireResponseSchema =
    CheckoutSessionSchema
  export type PostCheckoutSessionsSessionExpireResponse = z.infer<
    typeof PostCheckoutSessionsSessionExpireResponseSchema
  >

  export const GetCheckoutSessionsSessionLineItemsParamsSchema = z.object({
    session: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCheckoutSessionsSessionLineItemsParams = z.infer<
    typeof GetCheckoutSessionsSessionLineItemsParamsSchema
  >

  export const GetCheckoutSessionsSessionLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(ItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCheckoutSessionsSessionLineItemsResponse = z.infer<
    typeof GetCheckoutSessionsSessionLineItemsResponseSchema
  >

  export const GetClimateOrdersParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetClimateOrdersParams = z.infer<
    typeof GetClimateOrdersParamsSchema
  >

  export const GetClimateOrdersResponseSchema = z.object({
    data: z.array(ClimateOrderSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/climate/orders'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetClimateOrdersResponse = z.infer<
    typeof GetClimateOrdersResponseSchema
  >

  export const PostClimateOrdersParamsSchema = z.object({})
  export type PostClimateOrdersParams = z.infer<
    typeof PostClimateOrdersParamsSchema
  >

  export const PostClimateOrdersResponseSchema = ClimateOrderSchema
  export type PostClimateOrdersResponse = z.infer<
    typeof PostClimateOrdersResponseSchema
  >

  export const GetClimateOrdersOrderParamsSchema = z.object({
    /** Unique identifier of the order. */
    order: z.string().max(5000).describe('Unique identifier of the order.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetClimateOrdersOrderParams = z.infer<
    typeof GetClimateOrdersOrderParamsSchema
  >

  export const GetClimateOrdersOrderResponseSchema = ClimateOrderSchema
  export type GetClimateOrdersOrderResponse = z.infer<
    typeof GetClimateOrdersOrderResponseSchema
  >

  export const PostClimateOrdersOrderParamsSchema = z.object({
    /** Unique identifier of the order. */
    order: z.string().max(5000).describe('Unique identifier of the order.')
  })
  export type PostClimateOrdersOrderParams = z.infer<
    typeof PostClimateOrdersOrderParamsSchema
  >

  export const PostClimateOrdersOrderResponseSchema = ClimateOrderSchema
  export type PostClimateOrdersOrderResponse = z.infer<
    typeof PostClimateOrdersOrderResponseSchema
  >

  export const PostClimateOrdersOrderCancelParamsSchema = z.object({
    /** Unique identifier of the order. */
    order: z.string().max(5000).describe('Unique identifier of the order.')
  })
  export type PostClimateOrdersOrderCancelParams = z.infer<
    typeof PostClimateOrdersOrderCancelParamsSchema
  >

  export const PostClimateOrdersOrderCancelResponseSchema = ClimateOrderSchema
  export type PostClimateOrdersOrderCancelResponse = z.infer<
    typeof PostClimateOrdersOrderCancelResponseSchema
  >

  export const GetClimateProductsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetClimateProductsParams = z.infer<
    typeof GetClimateProductsParamsSchema
  >

  export const GetClimateProductsResponseSchema = z.object({
    data: z.array(ClimateProductSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/climate/products'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetClimateProductsResponse = z.infer<
    typeof GetClimateProductsResponseSchema
  >

  export const GetClimateProductsProductParamsSchema = z.object({
    product: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetClimateProductsProductParams = z.infer<
    typeof GetClimateProductsProductParamsSchema
  >

  export const GetClimateProductsProductResponseSchema = ClimateProductSchema
  export type GetClimateProductsProductResponse = z.infer<
    typeof GetClimateProductsProductResponseSchema
  >

  export const GetClimateSuppliersParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetClimateSuppliersParams = z.infer<
    typeof GetClimateSuppliersParamsSchema
  >

  export const GetClimateSuppliersResponseSchema = z.object({
    data: z.array(ClimateSupplierSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/climate/suppliers'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetClimateSuppliersResponse = z.infer<
    typeof GetClimateSuppliersResponseSchema
  >

  export const GetClimateSuppliersSupplierParamsSchema = z.object({
    supplier: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetClimateSuppliersSupplierParams = z.infer<
    typeof GetClimateSuppliersSupplierParamsSchema
  >

  export const GetClimateSuppliersSupplierResponseSchema = ClimateSupplierSchema
  export type GetClimateSuppliersSupplierResponse = z.infer<
    typeof GetClimateSuppliersSupplierResponseSchema
  >

  export const GetConfirmationTokensConfirmationTokenParamsSchema = z.object({
    confirmation_token: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetConfirmationTokensConfirmationTokenParams = z.infer<
    typeof GetConfirmationTokensConfirmationTokenParamsSchema
  >

  export const GetConfirmationTokensConfirmationTokenResponseSchema =
    ConfirmationTokenSchema
  export type GetConfirmationTokensConfirmationTokenResponse = z.infer<
    typeof GetConfirmationTokensConfirmationTokenResponseSchema
  >

  export const GetCountrySpecsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCountrySpecsParams = z.infer<
    typeof GetCountrySpecsParamsSchema
  >

  export const GetCountrySpecsResponseSchema = z.object({
    data: z.array(CountrySpecSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/country_specs'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCountrySpecsResponse = z.infer<
    typeof GetCountrySpecsResponseSchema
  >

  export const GetCountrySpecsCountryParamsSchema = z.object({
    country: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCountrySpecsCountryParams = z.infer<
    typeof GetCountrySpecsCountryParamsSchema
  >

  export const GetCountrySpecsCountryResponseSchema = CountrySpecSchema
  export type GetCountrySpecsCountryResponse = z.infer<
    typeof GetCountrySpecsCountryResponseSchema
  >

  export const GetCouponsParamsSchema = z.object({
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCouponsParams = z.infer<typeof GetCouponsParamsSchema>

  export const GetCouponsResponseSchema = z.object({
    data: z.array(CouponSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/coupons'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCouponsResponse = z.infer<typeof GetCouponsResponseSchema>

  export const PostCouponsParamsSchema = z.object({})
  export type PostCouponsParams = z.infer<typeof PostCouponsParamsSchema>

  export const PostCouponsResponseSchema = CouponSchema
  export type PostCouponsResponse = z.infer<typeof PostCouponsResponseSchema>

  export const GetCouponsCouponParamsSchema = z.object({
    coupon: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCouponsCouponParams = z.infer<
    typeof GetCouponsCouponParamsSchema
  >

  export const GetCouponsCouponResponseSchema = CouponSchema
  export type GetCouponsCouponResponse = z.infer<
    typeof GetCouponsCouponResponseSchema
  >

  export const PostCouponsCouponParamsSchema = z.object({
    coupon: z.string().max(5000)
  })
  export type PostCouponsCouponParams = z.infer<
    typeof PostCouponsCouponParamsSchema
  >

  export const PostCouponsCouponResponseSchema = CouponSchema
  export type PostCouponsCouponResponse = z.infer<
    typeof PostCouponsCouponResponseSchema
  >

  export const DeleteCouponsCouponParamsSchema = z.object({
    coupon: z.string().max(5000)
  })
  export type DeleteCouponsCouponParams = z.infer<
    typeof DeleteCouponsCouponParamsSchema
  >

  export const DeleteCouponsCouponResponseSchema = DeletedCouponSchema
  export type DeleteCouponsCouponResponse = z.infer<
    typeof DeleteCouponsCouponResponseSchema
  >

  export const GetCreditNotesParamsSchema = z.object({
    /** Only return credit notes that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return credit notes that were created during the given date interval.'
      )
      .optional(),
    /** Only return credit notes for the customer specified by this customer ID. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return credit notes for the customer specified by this customer ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Only return credit notes for the invoice specified by this invoice ID. */
    invoice: z
      .string()
      .max(5000)
      .describe(
        'Only return credit notes for the invoice specified by this invoice ID.'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCreditNotesParams = z.infer<typeof GetCreditNotesParamsSchema>

  export const GetCreditNotesResponseSchema = z.object({
    data: z.array(CreditNoteSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCreditNotesResponse = z.infer<
    typeof GetCreditNotesResponseSchema
  >

  export const PostCreditNotesParamsSchema = z.object({})
  export type PostCreditNotesParams = z.infer<
    typeof PostCreditNotesParamsSchema
  >

  export const PostCreditNotesResponseSchema = CreditNoteSchema
  export type PostCreditNotesResponse = z.infer<
    typeof PostCreditNotesResponseSchema
  >

  export const GetCreditNotesPreviewParamsSchema = z.object({
    /** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */
    amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the total amount of the credit note.'
      )
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
    credit_amount: z
      .number()
      .int()
      .describe(
        "The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice."
      )
      .optional(),
    /** The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF. */
    effective_at: z
      .number()
      .int()
      .describe(
        "The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF."
      )
      .optional(),
    /** Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`. */
    email_type: z
      .enum(['credit_note', 'none'])
      .describe(
        'Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** ID of the invoice. */
    invoice: z.string().max(5000).describe('ID of the invoice.'),
    /** Line items that make up the credit note. */
    lines: z
      .array(
        z.object({
          amount: z.number().int().optional(),
          description: z.string().max(5000).optional(),
          invoice_line_item: z.string().max(5000).optional(),
          quantity: z.number().int().optional(),
          tax_amounts: z
            .union([
              z.array(
                z.object({
                  amount: z.number().int(),
                  tax_rate: z.string().max(5000),
                  taxable_amount: z.number().int()
                })
              ),
              z.literal('')
            ])
            .optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional(),
          type: z.enum(['custom_line_item', 'invoice_line_item']),
          unit_amount: z.number().int().optional(),
          unit_amount_decimal: z.string().optional()
        })
      )
      .describe('Line items that make up the credit note.')
      .optional(),
    /** The credit note's memo appears on the credit note PDF. */
    memo: z
      .string()
      .max(5000)
      .describe("The credit note's memo appears on the credit note PDF.")
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata: z
      .record(z.string())
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
      )
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */
    out_of_band_amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.'
      )
      .optional(),
    /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
    reason: z
      .enum([
        'duplicate',
        'fraudulent',
        'order_change',
        'product_unsatisfactory'
      ])
      .describe(
        'Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`'
      )
      .optional(),
    /** ID of an existing refund to link this credit note to. */
    refund: z
      .string()
      .describe('ID of an existing refund to link this credit note to.')
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
    refund_amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.'
      )
      .optional(),
    /** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */
    shipping_cost: z
      .object({ shipping_rate: z.string().max(5000).optional() })
      .describe(
        'When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note.'
      )
      .optional()
  })
  export type GetCreditNotesPreviewParams = z.infer<
    typeof GetCreditNotesPreviewParamsSchema
  >

  export const GetCreditNotesPreviewResponseSchema = CreditNoteSchema
  export type GetCreditNotesPreviewResponse = z.infer<
    typeof GetCreditNotesPreviewResponseSchema
  >

  export const GetCreditNotesPreviewLinesParamsSchema = z.object({
    /** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */
    amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the total amount of the credit note.'
      )
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
    credit_amount: z
      .number()
      .int()
      .describe(
        "The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice."
      )
      .optional(),
    /** The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF. */
    effective_at: z
      .number()
      .int()
      .describe(
        "The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF."
      )
      .optional(),
    /** Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`. */
    email_type: z
      .enum(['credit_note', 'none'])
      .describe(
        'Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** ID of the invoice. */
    invoice: z.string().max(5000).describe('ID of the invoice.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Line items that make up the credit note. */
    lines: z
      .array(
        z.object({
          amount: z.number().int().optional(),
          description: z.string().max(5000).optional(),
          invoice_line_item: z.string().max(5000).optional(),
          quantity: z.number().int().optional(),
          tax_amounts: z
            .union([
              z.array(
                z.object({
                  amount: z.number().int(),
                  tax_rate: z.string().max(5000),
                  taxable_amount: z.number().int()
                })
              ),
              z.literal('')
            ])
            .optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional(),
          type: z.enum(['custom_line_item', 'invoice_line_item']),
          unit_amount: z.number().int().optional(),
          unit_amount_decimal: z.string().optional()
        })
      )
      .describe('Line items that make up the credit note.')
      .optional(),
    /** The credit note's memo appears on the credit note PDF. */
    memo: z
      .string()
      .max(5000)
      .describe("The credit note's memo appears on the credit note PDF.")
      .optional(),
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata: z
      .record(z.string())
      .describe(
        'Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.'
      )
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */
    out_of_band_amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.'
      )
      .optional(),
    /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
    reason: z
      .enum([
        'duplicate',
        'fraudulent',
        'order_change',
        'product_unsatisfactory'
      ])
      .describe(
        'Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`'
      )
      .optional(),
    /** ID of an existing refund to link this credit note to. */
    refund: z
      .string()
      .describe('ID of an existing refund to link this credit note to.')
      .optional(),
    /** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
    refund_amount: z
      .number()
      .int()
      .describe(
        'The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.'
      )
      .optional(),
    /** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */
    shipping_cost: z
      .object({ shipping_rate: z.string().max(5000).optional() })
      .describe(
        'When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCreditNotesPreviewLinesParams = z.infer<
    typeof GetCreditNotesPreviewLinesParamsSchema
  >

  export const GetCreditNotesPreviewLinesResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(CreditNoteLineItemSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCreditNotesPreviewLinesResponse = z.infer<
    typeof GetCreditNotesPreviewLinesResponseSchema
  >

  export const GetCreditNotesCreditNoteLinesParamsSchema = z.object({
    credit_note: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCreditNotesCreditNoteLinesParams = z.infer<
    typeof GetCreditNotesCreditNoteLinesParamsSchema
  >

  export const GetCreditNotesCreditNoteLinesResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(CreditNoteLineItemSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCreditNotesCreditNoteLinesResponse = z.infer<
    typeof GetCreditNotesCreditNoteLinesResponseSchema
  >

  export const GetCreditNotesIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCreditNotesIdParams = z.infer<
    typeof GetCreditNotesIdParamsSchema
  >

  export const GetCreditNotesIdResponseSchema = CreditNoteSchema
  export type GetCreditNotesIdResponse = z.infer<
    typeof GetCreditNotesIdResponseSchema
  >

  export const PostCreditNotesIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostCreditNotesIdParams = z.infer<
    typeof PostCreditNotesIdParamsSchema
  >

  export const PostCreditNotesIdResponseSchema = CreditNoteSchema
  export type PostCreditNotesIdResponse = z.infer<
    typeof PostCreditNotesIdResponseSchema
  >

  export const PostCreditNotesIdVoidParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostCreditNotesIdVoidParams = z.infer<
    typeof PostCreditNotesIdVoidParamsSchema
  >

  export const PostCreditNotesIdVoidResponseSchema = CreditNoteSchema
  export type PostCreditNotesIdVoidResponse = z.infer<
    typeof PostCreditNotesIdVoidResponseSchema
  >

  export const PostCustomerSessionsParamsSchema = z.object({})
  export type PostCustomerSessionsParams = z.infer<
    typeof PostCustomerSessionsParamsSchema
  >

  export const PostCustomerSessionsResponseSchema = CustomerSessionSchema
  export type PostCustomerSessionsResponse = z.infer<
    typeof PostCustomerSessionsResponseSchema
  >

  export const GetCustomersParamsSchema = z.object({
    /** Only return customers that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return customers that were created during the given date interval.'
      )
      .optional(),
    /** A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. */
    email: z
      .string()
      .max(512)
      .describe(
        "A case-sensitive filter on the list based on the customer's `email` field. The value must be a string."
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set. */
    test_clock: z
      .string()
      .max(5000)
      .describe(
        'Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set.'
      )
      .optional()
  })
  export type GetCustomersParams = z.infer<typeof GetCustomersParamsSchema>

  export const GetCustomersResponseSchema = z.object({
    data: z.array(CustomerSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/customers'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersResponse = z.infer<typeof GetCustomersResponseSchema>

  export const PostCustomersParamsSchema = z.object({})
  export type PostCustomersParams = z.infer<typeof PostCustomersParamsSchema>

  export const PostCustomersResponseSchema = CustomerSchema
  export type PostCustomersResponse = z.infer<
    typeof PostCustomersResponseSchema
  >

  export const GetCustomersSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).'
      )
  })
  export type GetCustomersSearchParams = z.infer<
    typeof GetCustomersSearchParamsSchema
  >

  export const GetCustomersSearchResponseSchema = z.object({
    data: z.array(CustomerSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetCustomersSearchResponse = z.infer<
    typeof GetCustomersSearchResponseSchema
  >

  export const GetCustomersCustomerParamsSchema = z.object({
    customer: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerParams = z.infer<
    typeof GetCustomersCustomerParamsSchema
  >

  export const GetCustomersCustomerResponseSchema = z.union([
    CustomerSchema,
    DeletedCustomerSchema
  ])
  export type GetCustomersCustomerResponse = z.infer<
    typeof GetCustomersCustomerResponseSchema
  >

  export const PostCustomersCustomerParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerParams = z.infer<
    typeof PostCustomersCustomerParamsSchema
  >

  export const PostCustomersCustomerResponseSchema = CustomerSchema
  export type PostCustomersCustomerResponse = z.infer<
    typeof PostCustomersCustomerResponseSchema
  >

  export const DeleteCustomersCustomerParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type DeleteCustomersCustomerParams = z.infer<
    typeof DeleteCustomersCustomerParamsSchema
  >

  export const DeleteCustomersCustomerResponseSchema = DeletedCustomerSchema
  export type DeleteCustomersCustomerResponse = z.infer<
    typeof DeleteCustomersCustomerResponseSchema
  >

  export const GetCustomersCustomerBalanceTransactionsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerBalanceTransactionsParams = z.infer<
    typeof GetCustomersCustomerBalanceTransactionsParamsSchema
  >

  export const GetCustomersCustomerBalanceTransactionsResponseSchema = z.object(
    {
      /** Details about each object. */
      data: z
        .array(CustomerBalanceTransactionSchema)
        .describe('Details about each object.'),
      /** True if this list has another page of items after this one that can be fetched. */
      has_more: z
        .boolean()
        .describe(
          'True if this list has another page of items after this one that can be fetched.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
      object: z
        .literal('list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
        ),
      /** The URL where this list can be accessed. */
      url: z
        .string()
        .max(5000)
        .describe('The URL where this list can be accessed.')
    }
  )
  export type GetCustomersCustomerBalanceTransactionsResponse = z.infer<
    typeof GetCustomersCustomerBalanceTransactionsResponseSchema
  >

  export const PostCustomersCustomerBalanceTransactionsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerBalanceTransactionsParams = z.infer<
    typeof PostCustomersCustomerBalanceTransactionsParamsSchema
  >

  export const PostCustomersCustomerBalanceTransactionsResponseSchema =
    CustomerBalanceTransactionSchema
  export type PostCustomersCustomerBalanceTransactionsResponse = z.infer<
    typeof PostCustomersCustomerBalanceTransactionsResponseSchema
  >

  export const GetCustomersCustomerBalanceTransactionsTransactionParamsSchema =
    z.object({
      customer: z.string().max(5000),
      transaction: z.string(),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetCustomersCustomerBalanceTransactionsTransactionParams =
    z.infer<
      typeof GetCustomersCustomerBalanceTransactionsTransactionParamsSchema
    >

  export const GetCustomersCustomerBalanceTransactionsTransactionResponseSchema =
    CustomerBalanceTransactionSchema
  export type GetCustomersCustomerBalanceTransactionsTransactionResponse =
    z.infer<
      typeof GetCustomersCustomerBalanceTransactionsTransactionResponseSchema
    >

  export const PostCustomersCustomerBalanceTransactionsTransactionParamsSchema =
    z.object({
      customer: z.string().max(5000),
      transaction: z.string().max(5000)
    })
  export type PostCustomersCustomerBalanceTransactionsTransactionParams =
    z.infer<
      typeof PostCustomersCustomerBalanceTransactionsTransactionParamsSchema
    >

  export const PostCustomersCustomerBalanceTransactionsTransactionResponseSchema =
    CustomerBalanceTransactionSchema
  export type PostCustomersCustomerBalanceTransactionsTransactionResponse =
    z.infer<
      typeof PostCustomersCustomerBalanceTransactionsTransactionResponseSchema
    >

  export const GetCustomersCustomerBankAccountsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerBankAccountsParams = z.infer<
    typeof GetCustomersCustomerBankAccountsParamsSchema
  >

  export const GetCustomersCustomerBankAccountsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(BankAccountSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerBankAccountsResponse = z.infer<
    typeof GetCustomersCustomerBankAccountsResponseSchema
  >

  export const PostCustomersCustomerBankAccountsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerBankAccountsParams = z.infer<
    typeof PostCustomersCustomerBankAccountsParamsSchema
  >

  export const PostCustomersCustomerBankAccountsResponseSchema =
    PaymentSourceSchema
  export type PostCustomersCustomerBankAccountsResponse = z.infer<
    typeof PostCustomersCustomerBankAccountsResponseSchema
  >

  export const GetCustomersCustomerBankAccountsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerBankAccountsIdParams = z.infer<
    typeof GetCustomersCustomerBankAccountsIdParamsSchema
  >

  export const GetCustomersCustomerBankAccountsIdResponseSchema =
    BankAccountSchema
  export type GetCustomersCustomerBankAccountsIdResponse = z.infer<
    typeof GetCustomersCustomerBankAccountsIdResponseSchema
  >

  export const PostCustomersCustomerBankAccountsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000)
  })
  export type PostCustomersCustomerBankAccountsIdParams = z.infer<
    typeof PostCustomersCustomerBankAccountsIdParamsSchema
  >

  export const PostCustomersCustomerBankAccountsIdResponseSchema = z.union([
    CardSchema,
    BankAccountSchema,
    SourceSchema
  ])
  export type PostCustomersCustomerBankAccountsIdResponse = z.infer<
    typeof PostCustomersCustomerBankAccountsIdResponseSchema
  >

  export const DeleteCustomersCustomerBankAccountsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string()
  })
  export type DeleteCustomersCustomerBankAccountsIdParams = z.infer<
    typeof DeleteCustomersCustomerBankAccountsIdParamsSchema
  >

  export const DeleteCustomersCustomerBankAccountsIdResponseSchema = z.union([
    PaymentSourceSchema,
    DeletedPaymentSourceSchema
  ])
  export type DeleteCustomersCustomerBankAccountsIdResponse = z.infer<
    typeof DeleteCustomersCustomerBankAccountsIdResponseSchema
  >

  export const PostCustomersCustomerBankAccountsIdVerifyParamsSchema = z.object(
    { customer: z.string().max(5000), id: z.string().max(5000) }
  )
  export type PostCustomersCustomerBankAccountsIdVerifyParams = z.infer<
    typeof PostCustomersCustomerBankAccountsIdVerifyParamsSchema
  >

  export const PostCustomersCustomerBankAccountsIdVerifyResponseSchema =
    BankAccountSchema
  export type PostCustomersCustomerBankAccountsIdVerifyResponse = z.infer<
    typeof PostCustomersCustomerBankAccountsIdVerifyResponseSchema
  >

  export const GetCustomersCustomerCardsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerCardsParams = z.infer<
    typeof GetCustomersCustomerCardsParamsSchema
  >

  export const GetCustomersCustomerCardsResponseSchema = z.object({
    data: z.array(CardSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerCardsResponse = z.infer<
    typeof GetCustomersCustomerCardsResponseSchema
  >

  export const PostCustomersCustomerCardsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerCardsParams = z.infer<
    typeof PostCustomersCustomerCardsParamsSchema
  >

  export const PostCustomersCustomerCardsResponseSchema = PaymentSourceSchema
  export type PostCustomersCustomerCardsResponse = z.infer<
    typeof PostCustomersCustomerCardsResponseSchema
  >

  export const GetCustomersCustomerCardsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerCardsIdParams = z.infer<
    typeof GetCustomersCustomerCardsIdParamsSchema
  >

  export const GetCustomersCustomerCardsIdResponseSchema = CardSchema
  export type GetCustomersCustomerCardsIdResponse = z.infer<
    typeof GetCustomersCustomerCardsIdResponseSchema
  >

  export const PostCustomersCustomerCardsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000)
  })
  export type PostCustomersCustomerCardsIdParams = z.infer<
    typeof PostCustomersCustomerCardsIdParamsSchema
  >

  export const PostCustomersCustomerCardsIdResponseSchema = z.union([
    CardSchema,
    BankAccountSchema,
    SourceSchema
  ])
  export type PostCustomersCustomerCardsIdResponse = z.infer<
    typeof PostCustomersCustomerCardsIdResponseSchema
  >

  export const DeleteCustomersCustomerCardsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string()
  })
  export type DeleteCustomersCustomerCardsIdParams = z.infer<
    typeof DeleteCustomersCustomerCardsIdParamsSchema
  >

  export const DeleteCustomersCustomerCardsIdResponseSchema = z.union([
    PaymentSourceSchema,
    DeletedPaymentSourceSchema
  ])
  export type DeleteCustomersCustomerCardsIdResponse = z.infer<
    typeof DeleteCustomersCustomerCardsIdResponseSchema
  >

  export const GetCustomersCustomerCashBalanceParamsSchema = z.object({
    customer: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerCashBalanceParams = z.infer<
    typeof GetCustomersCustomerCashBalanceParamsSchema
  >

  export const GetCustomersCustomerCashBalanceResponseSchema = CashBalanceSchema
  export type GetCustomersCustomerCashBalanceResponse = z.infer<
    typeof GetCustomersCustomerCashBalanceResponseSchema
  >

  export const PostCustomersCustomerCashBalanceParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerCashBalanceParams = z.infer<
    typeof PostCustomersCustomerCashBalanceParamsSchema
  >

  export const PostCustomersCustomerCashBalanceResponseSchema =
    CashBalanceSchema
  export type PostCustomersCustomerCashBalanceResponse = z.infer<
    typeof PostCustomersCustomerCashBalanceResponseSchema
  >

  export const GetCustomersCustomerCashBalanceTransactionsParamsSchema =
    z.object({
      customer: z.string().max(5000),
      /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
      ending_before: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
        )
        .optional(),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional(),
      /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
      limit: z
        .number()
        .int()
        .describe(
          'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
        )
        .optional(),
      /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
      starting_after: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
        )
        .optional()
    })
  export type GetCustomersCustomerCashBalanceTransactionsParams = z.infer<
    typeof GetCustomersCustomerCashBalanceTransactionsParamsSchema
  >

  /**
   * Customers with certain payments enabled have a cash balance, representing funds that were paid
   * by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
   * represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
   * to payments, and refunds to the customer.
   */
  export const GetCustomersCustomerCashBalanceTransactionsResponseSchema = z
    .object({
      /** Details about each object. */
      data: z
        .array(CustomerCashBalanceTransactionSchema)
        .describe('Details about each object.'),
      /** True if this list has another page of items after this one that can be fetched. */
      has_more: z
        .boolean()
        .describe(
          'True if this list has another page of items after this one that can be fetched.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
      object: z
        .literal('list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
        ),
      /** The URL where this list can be accessed. */
      url: z
        .string()
        .max(5000)
        .describe('The URL where this list can be accessed.')
    })
    .describe(
      'Customers with certain payments enabled have a cash balance, representing funds that were paid\nby the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions\nrepresent when funds are moved into or out of this balance. This includes funding by the customer, allocation\nto payments, and refunds to the customer.'
    )
  export type GetCustomersCustomerCashBalanceTransactionsResponse = z.infer<
    typeof GetCustomersCustomerCashBalanceTransactionsResponseSchema
  >

  export const GetCustomersCustomerCashBalanceTransactionsTransactionParamsSchema =
    z.object({
      customer: z.string().max(5000),
      transaction: z.string(),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetCustomersCustomerCashBalanceTransactionsTransactionParams =
    z.infer<
      typeof GetCustomersCustomerCashBalanceTransactionsTransactionParamsSchema
    >

  export const GetCustomersCustomerCashBalanceTransactionsTransactionResponseSchema =
    CustomerCashBalanceTransactionSchema
  export type GetCustomersCustomerCashBalanceTransactionsTransactionResponse =
    z.infer<
      typeof GetCustomersCustomerCashBalanceTransactionsTransactionResponseSchema
    >

  export const GetCustomersCustomerDiscountParamsSchema = z.object({
    customer: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerDiscountParams = z.infer<
    typeof GetCustomersCustomerDiscountParamsSchema
  >

  export const GetCustomersCustomerDiscountResponseSchema = DiscountSchema
  export type GetCustomersCustomerDiscountResponse = z.infer<
    typeof GetCustomersCustomerDiscountResponseSchema
  >

  export const DeleteCustomersCustomerDiscountParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type DeleteCustomersCustomerDiscountParams = z.infer<
    typeof DeleteCustomersCustomerDiscountParamsSchema
  >

  export const DeleteCustomersCustomerDiscountResponseSchema =
    DeletedDiscountSchema
  export type DeleteCustomersCustomerDiscountResponse = z.infer<
    typeof DeleteCustomersCustomerDiscountResponseSchema
  >

  export const PostCustomersCustomerFundingInstructionsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerFundingInstructionsParams = z.infer<
    typeof PostCustomersCustomerFundingInstructionsParamsSchema
  >

  export const PostCustomersCustomerFundingInstructionsResponseSchema =
    FundingInstructionsSchema
  export type PostCustomersCustomerFundingInstructionsResponse = z.infer<
    typeof PostCustomersCustomerFundingInstructionsResponseSchema
  >

  export const GetCustomersCustomerPaymentMethodsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`. */
    allow_redisplay: z
      .enum(['always', 'limited', 'unspecified'])
      .describe(
        'This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */
    type: z
      .enum([
        'acss_debit',
        'affirm',
        'afterpay_clearpay',
        'alipay',
        'alma',
        'amazon_pay',
        'au_becs_debit',
        'bacs_debit',
        'bancontact',
        'blik',
        'boleto',
        'card',
        'cashapp',
        'customer_balance',
        'eps',
        'fpx',
        'giropay',
        'grabpay',
        'ideal',
        'kakao_pay',
        'klarna',
        'konbini',
        'kr_card',
        'link',
        'mobilepay',
        'multibanco',
        'naver_pay',
        'oxxo',
        'p24',
        'pay_by_bank',
        'payco',
        'paynow',
        'paypal',
        'pix',
        'promptpay',
        'revolut_pay',
        'samsung_pay',
        'sepa_debit',
        'sofort',
        'swish',
        'twint',
        'us_bank_account',
        'wechat_pay',
        'zip'
      ])
      .describe(
        'An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.'
      )
      .optional()
  })
  export type GetCustomersCustomerPaymentMethodsParams = z.infer<
    typeof GetCustomersCustomerPaymentMethodsParamsSchema
  >

  export const GetCustomersCustomerPaymentMethodsResponseSchema = z.object({
    data: z.array(PaymentMethodSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerPaymentMethodsResponse = z.infer<
    typeof GetCustomersCustomerPaymentMethodsResponseSchema
  >

  export const GetCustomersCustomerPaymentMethodsPaymentMethodParamsSchema =
    z.object({
      customer: z.string().max(5000),
      payment_method: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetCustomersCustomerPaymentMethodsPaymentMethodParams = z.infer<
    typeof GetCustomersCustomerPaymentMethodsPaymentMethodParamsSchema
  >

  export const GetCustomersCustomerPaymentMethodsPaymentMethodResponseSchema =
    PaymentMethodSchema
  export type GetCustomersCustomerPaymentMethodsPaymentMethodResponse = z.infer<
    typeof GetCustomersCustomerPaymentMethodsPaymentMethodResponseSchema
  >

  export const GetCustomersCustomerSourcesParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filter sources according to a particular object type. */
    object: z
      .string()
      .max(5000)
      .describe('Filter sources according to a particular object type.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerSourcesParams = z.infer<
    typeof GetCustomersCustomerSourcesParamsSchema
  >

  export const GetCustomersCustomerSourcesResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(z.union([BankAccountSchema, CardSchema, SourceSchema]))
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerSourcesResponse = z.infer<
    typeof GetCustomersCustomerSourcesResponseSchema
  >

  export const PostCustomersCustomerSourcesParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerSourcesParams = z.infer<
    typeof PostCustomersCustomerSourcesParamsSchema
  >

  export const PostCustomersCustomerSourcesResponseSchema = PaymentSourceSchema
  export type PostCustomersCustomerSourcesResponse = z.infer<
    typeof PostCustomersCustomerSourcesResponseSchema
  >

  export const GetCustomersCustomerSourcesIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(500),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerSourcesIdParams = z.infer<
    typeof GetCustomersCustomerSourcesIdParamsSchema
  >

  export const GetCustomersCustomerSourcesIdResponseSchema = PaymentSourceSchema
  export type GetCustomersCustomerSourcesIdResponse = z.infer<
    typeof GetCustomersCustomerSourcesIdResponseSchema
  >

  export const PostCustomersCustomerSourcesIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000)
  })
  export type PostCustomersCustomerSourcesIdParams = z.infer<
    typeof PostCustomersCustomerSourcesIdParamsSchema
  >

  export const PostCustomersCustomerSourcesIdResponseSchema = z.union([
    CardSchema,
    BankAccountSchema,
    SourceSchema
  ])
  export type PostCustomersCustomerSourcesIdResponse = z.infer<
    typeof PostCustomersCustomerSourcesIdResponseSchema
  >

  export const DeleteCustomersCustomerSourcesIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string()
  })
  export type DeleteCustomersCustomerSourcesIdParams = z.infer<
    typeof DeleteCustomersCustomerSourcesIdParamsSchema
  >

  export const DeleteCustomersCustomerSourcesIdResponseSchema = z.union([
    PaymentSourceSchema,
    DeletedPaymentSourceSchema
  ])
  export type DeleteCustomersCustomerSourcesIdResponse = z.infer<
    typeof DeleteCustomersCustomerSourcesIdResponseSchema
  >

  export const PostCustomersCustomerSourcesIdVerifyParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string().max(5000)
  })
  export type PostCustomersCustomerSourcesIdVerifyParams = z.infer<
    typeof PostCustomersCustomerSourcesIdVerifyParamsSchema
  >

  export const PostCustomersCustomerSourcesIdVerifyResponseSchema =
    BankAccountSchema
  export type PostCustomersCustomerSourcesIdVerifyResponse = z.infer<
    typeof PostCustomersCustomerSourcesIdVerifyResponseSchema
  >

  export const GetCustomersCustomerSubscriptionsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerSubscriptionsParams = z.infer<
    typeof GetCustomersCustomerSubscriptionsParamsSchema
  >

  export const GetCustomersCustomerSubscriptionsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(SubscriptionSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerSubscriptionsResponse = z.infer<
    typeof GetCustomersCustomerSubscriptionsResponseSchema
  >

  export const PostCustomersCustomerSubscriptionsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerSubscriptionsParams = z.infer<
    typeof PostCustomersCustomerSubscriptionsParamsSchema
  >

  export const PostCustomersCustomerSubscriptionsResponseSchema =
    SubscriptionSchema
  export type PostCustomersCustomerSubscriptionsResponse = z.infer<
    typeof PostCustomersCustomerSubscriptionsResponseSchema
  >

  export const GetCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema =
    z.object({
      customer: z.string().max(5000),
      subscription_exposed_id: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetCustomersCustomerSubscriptionsSubscriptionExposedIdParams =
    z.infer<
      typeof GetCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
    >

  export const GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponse =
    z.infer<
      typeof GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema
    >

  export const PostCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema =
    z.object({
      customer: z.string().max(5000),
      subscription_exposed_id: z.string().max(5000)
    })
  export type PostCustomersCustomerSubscriptionsSubscriptionExposedIdParams =
    z.infer<
      typeof PostCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
    >

  export const PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponse =
    z.infer<
      typeof PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema
    >

  export const DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema =
    z.object({
      customer: z.string().max(5000),
      subscription_exposed_id: z.string().max(5000)
    })
  export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParams =
    z.infer<
      typeof DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
    >

  export const DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse =
    z.infer<
      typeof DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseSchema
    >

  export const GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema =
    z.object({
      customer: z.string().max(5000),
      subscription_exposed_id: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParams =
    z.infer<
      typeof GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema
    >

  export const GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseSchema =
    DiscountSchema
  export type GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse =
    z.infer<
      typeof GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseSchema
    >

  export const DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema =
    z.object({
      customer: z.string().max(5000),
      subscription_exposed_id: z.string().max(5000)
    })
  export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParams =
    z.infer<
      typeof DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema
    >

  export const DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseSchema =
    DeletedDiscountSchema
  export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse =
    z.infer<
      typeof DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseSchema
    >

  export const GetCustomersCustomerTaxIdsParamsSchema = z.object({
    customer: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetCustomersCustomerTaxIdsParams = z.infer<
    typeof GetCustomersCustomerTaxIdsParamsSchema
  >

  export const GetCustomersCustomerTaxIdsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(TaxIdSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetCustomersCustomerTaxIdsResponse = z.infer<
    typeof GetCustomersCustomerTaxIdsResponseSchema
  >

  export const PostCustomersCustomerTaxIdsParamsSchema = z.object({
    customer: z.string().max(5000)
  })
  export type PostCustomersCustomerTaxIdsParams = z.infer<
    typeof PostCustomersCustomerTaxIdsParamsSchema
  >

  export const PostCustomersCustomerTaxIdsResponseSchema = TaxIdSchema
  export type PostCustomersCustomerTaxIdsResponse = z.infer<
    typeof PostCustomersCustomerTaxIdsResponseSchema
  >

  export const GetCustomersCustomerTaxIdsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetCustomersCustomerTaxIdsIdParams = z.infer<
    typeof GetCustomersCustomerTaxIdsIdParamsSchema
  >

  export const GetCustomersCustomerTaxIdsIdResponseSchema = TaxIdSchema
  export type GetCustomersCustomerTaxIdsIdResponse = z.infer<
    typeof GetCustomersCustomerTaxIdsIdResponseSchema
  >

  export const DeleteCustomersCustomerTaxIdsIdParamsSchema = z.object({
    customer: z.string().max(5000),
    id: z.string()
  })
  export type DeleteCustomersCustomerTaxIdsIdParams = z.infer<
    typeof DeleteCustomersCustomerTaxIdsIdParamsSchema
  >

  export const DeleteCustomersCustomerTaxIdsIdResponseSchema =
    DeletedTaxIdSchema
  export type DeleteCustomersCustomerTaxIdsIdResponse = z.infer<
    typeof DeleteCustomersCustomerTaxIdsIdResponseSchema
  >

  export const GetDisputesParamsSchema = z.object({
    /** Only return disputes associated to the charge specified by this charge ID. */
    charge: z
      .string()
      .max(5000)
      .describe(
        'Only return disputes associated to the charge specified by this charge ID.'
      )
      .optional(),
    /** Only return disputes that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return disputes that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */
    payment_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetDisputesParams = z.infer<typeof GetDisputesParamsSchema>

  export const GetDisputesResponseSchema = z.object({
    data: z.array(DisputeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/disputes'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetDisputesResponse = z.infer<typeof GetDisputesResponseSchema>

  export const GetDisputesDisputeParamsSchema = z.object({
    dispute: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetDisputesDisputeParams = z.infer<
    typeof GetDisputesDisputeParamsSchema
  >

  export const GetDisputesDisputeResponseSchema = DisputeSchema
  export type GetDisputesDisputeResponse = z.infer<
    typeof GetDisputesDisputeResponseSchema
  >

  export const PostDisputesDisputeParamsSchema = z.object({
    dispute: z.string().max(5000)
  })
  export type PostDisputesDisputeParams = z.infer<
    typeof PostDisputesDisputeParamsSchema
  >

  export const PostDisputesDisputeResponseSchema = DisputeSchema
  export type PostDisputesDisputeResponse = z.infer<
    typeof PostDisputesDisputeResponseSchema
  >

  export const PostDisputesDisputeCloseParamsSchema = z.object({
    dispute: z.string().max(5000)
  })
  export type PostDisputesDisputeCloseParams = z.infer<
    typeof PostDisputesDisputeCloseParamsSchema
  >

  export const PostDisputesDisputeCloseResponseSchema = DisputeSchema
  export type PostDisputesDisputeCloseResponse = z.infer<
    typeof PostDisputesDisputeCloseResponseSchema
  >

  export const GetEntitlementsActiveEntitlementsParamsSchema = z.object({
    /** The ID of the customer. */
    customer: z.string().max(5000).describe('The ID of the customer.'),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetEntitlementsActiveEntitlementsParams = z.infer<
    typeof GetEntitlementsActiveEntitlementsParamsSchema
  >

  export const GetEntitlementsActiveEntitlementsResponseSchema = z.object({
    data: z.array(EntitlementsActiveEntitlementSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetEntitlementsActiveEntitlementsResponse = z.infer<
    typeof GetEntitlementsActiveEntitlementsResponseSchema
  >

  export const GetEntitlementsActiveEntitlementsIdParamsSchema = z.object({
    /** The ID of the entitlement. */
    id: z.string().max(5000).describe('The ID of the entitlement.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetEntitlementsActiveEntitlementsIdParams = z.infer<
    typeof GetEntitlementsActiveEntitlementsIdParamsSchema
  >

  export const GetEntitlementsActiveEntitlementsIdResponseSchema =
    EntitlementsActiveEntitlementSchema
  export type GetEntitlementsActiveEntitlementsIdResponse = z.infer<
    typeof GetEntitlementsActiveEntitlementsIdResponseSchema
  >

  export const GetEntitlementsFeaturesParamsSchema = z.object({
    /** If set, filter results to only include features with the given archive status. */
    archived: z
      .boolean()
      .describe(
        'If set, filter results to only include features with the given archive status.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** If set, filter results to only include features with the given lookup_key. */
    lookup_key: z
      .string()
      .max(5000)
      .describe(
        'If set, filter results to only include features with the given lookup_key.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetEntitlementsFeaturesParams = z.infer<
    typeof GetEntitlementsFeaturesParamsSchema
  >

  export const GetEntitlementsFeaturesResponseSchema = z.object({
    data: z.array(EntitlementsFeatureSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/entitlements/features'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetEntitlementsFeaturesResponse = z.infer<
    typeof GetEntitlementsFeaturesResponseSchema
  >

  export const PostEntitlementsFeaturesParamsSchema = z.object({})
  export type PostEntitlementsFeaturesParams = z.infer<
    typeof PostEntitlementsFeaturesParamsSchema
  >

  export const PostEntitlementsFeaturesResponseSchema =
    EntitlementsFeatureSchema
  export type PostEntitlementsFeaturesResponse = z.infer<
    typeof PostEntitlementsFeaturesResponseSchema
  >

  export const GetEntitlementsFeaturesIdParamsSchema = z.object({
    /** The ID of the feature. */
    id: z.string().max(5000).describe('The ID of the feature.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetEntitlementsFeaturesIdParams = z.infer<
    typeof GetEntitlementsFeaturesIdParamsSchema
  >

  export const GetEntitlementsFeaturesIdResponseSchema =
    EntitlementsFeatureSchema
  export type GetEntitlementsFeaturesIdResponse = z.infer<
    typeof GetEntitlementsFeaturesIdResponseSchema
  >

  export const PostEntitlementsFeaturesIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostEntitlementsFeaturesIdParams = z.infer<
    typeof PostEntitlementsFeaturesIdParamsSchema
  >

  export const PostEntitlementsFeaturesIdResponseSchema =
    EntitlementsFeatureSchema
  export type PostEntitlementsFeaturesIdResponse = z.infer<
    typeof PostEntitlementsFeaturesIdResponseSchema
  >

  export const PostEphemeralKeysParamsSchema = z.object({})
  export type PostEphemeralKeysParams = z.infer<
    typeof PostEphemeralKeysParamsSchema
  >

  export const PostEphemeralKeysResponseSchema = EphemeralKeySchema
  export type PostEphemeralKeysResponse = z.infer<
    typeof PostEphemeralKeysResponseSchema
  >

  export const DeleteEphemeralKeysKeyParamsSchema = z.object({
    key: z.string().max(5000)
  })
  export type DeleteEphemeralKeysKeyParams = z.infer<
    typeof DeleteEphemeralKeysKeyParamsSchema
  >

  export const DeleteEphemeralKeysKeyResponseSchema = EphemeralKeySchema
  export type DeleteEphemeralKeysKeyResponse = z.infer<
    typeof DeleteEphemeralKeysKeyResponseSchema
  >

  export const GetEventsParamsSchema = z.object({
    /** Only return events that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return events that were created during the given date interval.'
      )
      .optional(),
    /** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */
    delivery_success: z
      .boolean()
      .describe(
        'Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */
    type: z
      .string()
      .max(5000)
      .describe(
        'A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.'
      )
      .optional(),
    /** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */
    types: z
      .array(z.string().max(5000))
      .describe(
        'An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both.'
      )
      .optional()
  })
  export type GetEventsParams = z.infer<typeof GetEventsParamsSchema>

  export const GetEventsResponseSchema = z.object({
    data: z.array(EventSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/events'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetEventsResponse = z.infer<typeof GetEventsResponseSchema>

  export const GetEventsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetEventsIdParams = z.infer<typeof GetEventsIdParamsSchema>

  export const GetEventsIdResponseSchema = EventSchema
  export type GetEventsIdResponse = z.infer<typeof GetEventsIdResponseSchema>

  export const GetExchangeRatesParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetExchangeRatesParams = z.infer<
    typeof GetExchangeRatesParamsSchema
  >

  export const GetExchangeRatesResponseSchema = z.object({
    data: z.array(ExchangeRateSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/exchange_rates'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetExchangeRatesResponse = z.infer<
    typeof GetExchangeRatesResponseSchema
  >

  export const GetExchangeRatesRateIdParamsSchema = z.object({
    rate_id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetExchangeRatesRateIdParams = z.infer<
    typeof GetExchangeRatesRateIdParamsSchema
  >

  export const GetExchangeRatesRateIdResponseSchema = ExchangeRateSchema
  export type GetExchangeRatesRateIdResponse = z.infer<
    typeof GetExchangeRatesRateIdResponseSchema
  >

  export const GetFileLinksParamsSchema = z.object({
    /** Only return links that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return links that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Filter links by their expiration status. By default, Stripe returns all links. */
    expired: z
      .boolean()
      .describe(
        'Filter links by their expiration status. By default, Stripe returns all links.'
      )
      .optional(),
    /** Only return links for the given file. */
    file: z
      .string()
      .max(5000)
      .describe('Only return links for the given file.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetFileLinksParams = z.infer<typeof GetFileLinksParamsSchema>

  export const GetFileLinksResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(FileLinkSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/file_links'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetFileLinksResponse = z.infer<typeof GetFileLinksResponseSchema>

  export const PostFileLinksParamsSchema = z.object({})
  export type PostFileLinksParams = z.infer<typeof PostFileLinksParamsSchema>

  export const PostFileLinksResponseSchema = FileLinkSchema
  export type PostFileLinksResponse = z.infer<
    typeof PostFileLinksResponseSchema
  >

  export const GetFileLinksLinkParamsSchema = z.object({
    link: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetFileLinksLinkParams = z.infer<
    typeof GetFileLinksLinkParamsSchema
  >

  export const GetFileLinksLinkResponseSchema = FileLinkSchema
  export type GetFileLinksLinkResponse = z.infer<
    typeof GetFileLinksLinkResponseSchema
  >

  export const PostFileLinksLinkParamsSchema = z.object({ link: z.string() })
  export type PostFileLinksLinkParams = z.infer<
    typeof PostFileLinksLinkParamsSchema
  >

  export const PostFileLinksLinkResponseSchema = FileLinkSchema
  export type PostFileLinksLinkResponse = z.infer<
    typeof PostFileLinksLinkResponseSchema
  >

  export const GetFilesParamsSchema = z.object({
    /** Only return files that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return files that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filter queries by the file purpose. If you don't provide a purpose, the queries return unfiltered files. */
    purpose: z
      .enum([
        'account_requirement',
        'additional_verification',
        'business_icon',
        'business_logo',
        'customer_signature',
        'dispute_evidence',
        'document_provider_identity_document',
        'finance_report_run',
        'financial_account_statement',
        'identity_document',
        'identity_document_downloadable',
        'issuing_regulatory_reporting',
        'pci_document',
        'selfie',
        'sigma_scheduled_query',
        'tax_document_user_upload',
        'terminal_reader_splashscreen'
      ])
      .describe(
        "Filter queries by the file purpose. If you don't provide a purpose, the queries return unfiltered files."
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetFilesParams = z.infer<typeof GetFilesParamsSchema>

  export const GetFilesResponseSchema = z.object({
    data: z.array(FileSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/files'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetFilesResponse = z.infer<typeof GetFilesResponseSchema>

  export const PostFilesParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol. */
    file: z
      .string()
      .base64()
      .describe(
        'A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.'
      ),
    /** Optional parameters that automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file. */
    file_link_data: z
      .object({
        create: z.boolean(),
        expires_at: z.number().int().optional(),
        metadata: z.union([z.record(z.string()), z.literal('')]).optional()
      })
      .describe(
        'Optional parameters that automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file.'
      )
      .optional(),
    /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
    purpose: z
      .enum([
        'account_requirement',
        'additional_verification',
        'business_icon',
        'business_logo',
        'customer_signature',
        'dispute_evidence',
        'identity_document',
        'issuing_regulatory_reporting',
        'pci_document',
        'tax_document_user_upload',
        'terminal_reader_splashscreen'
      ])
      .describe(
        'The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.'
      )
  })
  export type PostFilesParams = z.infer<typeof PostFilesParamsSchema>

  export const PostFilesResponseSchema = FileSchema
  export type PostFilesResponse = z.infer<typeof PostFilesResponseSchema>

  export const GetFilesFileParamsSchema = z.object({
    file: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetFilesFileParams = z.infer<typeof GetFilesFileParamsSchema>

  export const GetFilesFileResponseSchema = FileSchema
  export type GetFilesFileResponse = z.infer<typeof GetFilesFileResponseSchema>

  export const GetFinancialConnectionsAccountsParamsSchema = z.object({
    /** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */
    account_holder: z
      .object({
        account: z.string().max(5000).optional(),
        customer: z.string().max(5000).optional()
      })
      .describe(
        'If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** If present, only return accounts that were collected as part of the given session. */
    session: z
      .string()
      .max(5000)
      .describe(
        'If present, only return accounts that were collected as part of the given session.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetFinancialConnectionsAccountsParams = z.infer<
    typeof GetFinancialConnectionsAccountsParamsSchema
  >

  export const GetFinancialConnectionsAccountsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(FinancialConnectionsAccountSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/financial_connections/accounts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetFinancialConnectionsAccountsResponse = z.infer<
    typeof GetFinancialConnectionsAccountsResponseSchema
  >

  export const GetFinancialConnectionsAccountsAccountParamsSchema = z.object({
    account: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetFinancialConnectionsAccountsAccountParams = z.infer<
    typeof GetFinancialConnectionsAccountsAccountParamsSchema
  >

  export const GetFinancialConnectionsAccountsAccountResponseSchema =
    FinancialConnectionsAccountSchema
  export type GetFinancialConnectionsAccountsAccountResponse = z.infer<
    typeof GetFinancialConnectionsAccountsAccountResponseSchema
  >

  export const PostFinancialConnectionsAccountsAccountDisconnectParamsSchema =
    z.object({ account: z.string().max(5000) })
  export type PostFinancialConnectionsAccountsAccountDisconnectParams = z.infer<
    typeof PostFinancialConnectionsAccountsAccountDisconnectParamsSchema
  >

  export const PostFinancialConnectionsAccountsAccountDisconnectResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostFinancialConnectionsAccountsAccountDisconnectResponse =
    z.infer<
      typeof PostFinancialConnectionsAccountsAccountDisconnectResponseSchema
    >

  export const GetFinancialConnectionsAccountsAccountOwnersParamsSchema =
    z.object({
      account: z.string().max(5000),
      /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
      ending_before: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
        )
        .optional(),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional(),
      /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
      limit: z
        .number()
        .int()
        .describe(
          'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
        )
        .optional(),
      /** The ID of the ownership object to fetch owners from. */
      ownership: z
        .string()
        .max(5000)
        .describe('The ID of the ownership object to fetch owners from.'),
      /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
      starting_after: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
        )
        .optional()
    })
  export type GetFinancialConnectionsAccountsAccountOwnersParams = z.infer<
    typeof GetFinancialConnectionsAccountsAccountOwnersParamsSchema
  >

  export const GetFinancialConnectionsAccountsAccountOwnersResponseSchema =
    z.object({
      /** Details about each object. */
      data: z
        .array(FinancialConnectionsAccountOwnerSchema)
        .describe('Details about each object.'),
      /** True if this list has another page of items after this one that can be fetched. */
      has_more: z
        .boolean()
        .describe(
          'True if this list has another page of items after this one that can be fetched.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
      object: z
        .literal('list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
        ),
      /** The URL where this list can be accessed. */
      url: z
        .string()
        .max(5000)
        .describe('The URL where this list can be accessed.')
    })
  export type GetFinancialConnectionsAccountsAccountOwnersResponse = z.infer<
    typeof GetFinancialConnectionsAccountsAccountOwnersResponseSchema
  >

  export const PostFinancialConnectionsAccountsAccountRefreshParamsSchema =
    z.object({ account: z.string().max(5000) })
  export type PostFinancialConnectionsAccountsAccountRefreshParams = z.infer<
    typeof PostFinancialConnectionsAccountsAccountRefreshParamsSchema
  >

  export const PostFinancialConnectionsAccountsAccountRefreshResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostFinancialConnectionsAccountsAccountRefreshResponse = z.infer<
    typeof PostFinancialConnectionsAccountsAccountRefreshResponseSchema
  >

  export const PostFinancialConnectionsAccountsAccountSubscribeParamsSchema =
    z.object({ account: z.string().max(5000) })
  export type PostFinancialConnectionsAccountsAccountSubscribeParams = z.infer<
    typeof PostFinancialConnectionsAccountsAccountSubscribeParamsSchema
  >

  export const PostFinancialConnectionsAccountsAccountSubscribeResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostFinancialConnectionsAccountsAccountSubscribeResponse =
    z.infer<
      typeof PostFinancialConnectionsAccountsAccountSubscribeResponseSchema
    >

  export const PostFinancialConnectionsAccountsAccountUnsubscribeParamsSchema =
    z.object({ account: z.string().max(5000) })
  export type PostFinancialConnectionsAccountsAccountUnsubscribeParams =
    z.infer<
      typeof PostFinancialConnectionsAccountsAccountUnsubscribeParamsSchema
    >

  export const PostFinancialConnectionsAccountsAccountUnsubscribeResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostFinancialConnectionsAccountsAccountUnsubscribeResponse =
    z.infer<
      typeof PostFinancialConnectionsAccountsAccountUnsubscribeResponseSchema
    >

  export const PostFinancialConnectionsSessionsParamsSchema = z.object({})
  export type PostFinancialConnectionsSessionsParams = z.infer<
    typeof PostFinancialConnectionsSessionsParamsSchema
  >

  export const PostFinancialConnectionsSessionsResponseSchema =
    FinancialConnectionsSessionSchema
  export type PostFinancialConnectionsSessionsResponse = z.infer<
    typeof PostFinancialConnectionsSessionsResponseSchema
  >

  export const GetFinancialConnectionsSessionsSessionParamsSchema = z.object({
    session: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetFinancialConnectionsSessionsSessionParams = z.infer<
    typeof GetFinancialConnectionsSessionsSessionParamsSchema
  >

  export const GetFinancialConnectionsSessionsSessionResponseSchema =
    FinancialConnectionsSessionSchema
  export type GetFinancialConnectionsSessionsSessionResponse = z.infer<
    typeof GetFinancialConnectionsSessionsSessionResponseSchema
  >

  export const GetFinancialConnectionsTransactionsParamsSchema = z.object({
    /** The ID of the Financial Connections Account whose transactions will be retrieved. */
    account: z
      .string()
      .max(5000)
      .describe(
        'The ID of the Financial Connections Account whose transactions will be retrieved.'
      ),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options: */
    transacted_at: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:'
      )
      .optional(),
    /** A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options: */
    transaction_refresh: z
      .object({ after: z.string().max(5000) })
      .describe(
        'A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:'
      )
      .optional()
  })
  export type GetFinancialConnectionsTransactionsParams = z.infer<
    typeof GetFinancialConnectionsTransactionsParamsSchema
  >

  export const GetFinancialConnectionsTransactionsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(FinancialConnectionsTransactionSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/financial_connections/transactions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetFinancialConnectionsTransactionsResponse = z.infer<
    typeof GetFinancialConnectionsTransactionsResponseSchema
  >

  export const GetFinancialConnectionsTransactionsTransactionParamsSchema =
    z.object({
      transaction: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetFinancialConnectionsTransactionsTransactionParams = z.infer<
    typeof GetFinancialConnectionsTransactionsTransactionParamsSchema
  >

  export const GetFinancialConnectionsTransactionsTransactionResponseSchema =
    FinancialConnectionsTransactionSchema
  export type GetFinancialConnectionsTransactionsTransactionResponse = z.infer<
    typeof GetFinancialConnectionsTransactionsTransactionResponseSchema
  >

  export const GetForwardingRequestsParamsSchema = z.object({
    /** Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values. */
    created: z
      .object({
        gt: z.number().int().optional(),
        gte: z.number().int().optional(),
        lt: z.number().int().optional(),
        lte: z.number().int().optional()
      })
      .describe(
        'Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.'
      )
      .optional(),
    /** A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.'
      )
      .optional()
  })
  export type GetForwardingRequestsParams = z.infer<
    typeof GetForwardingRequestsParamsSchema
  >

  /** List of ForwardingRequest data. */
  export const GetForwardingRequestsResponseSchema = z
    .object({
      data: z.array(ForwardingRequestSchema),
      /** True if this list has another page of items after this one that can be fetched. */
      has_more: z
        .boolean()
        .describe(
          'True if this list has another page of items after this one that can be fetched.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
      object: z
        .literal('list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
        ),
      /** The URL where this list can be accessed. */
      url: z
        .string()
        .max(5000)
        .describe('The URL where this list can be accessed.')
    })
    .describe('List of ForwardingRequest data.')
  export type GetForwardingRequestsResponse = z.infer<
    typeof GetForwardingRequestsResponseSchema
  >

  export const PostForwardingRequestsParamsSchema = z.object({})
  export type PostForwardingRequestsParams = z.infer<
    typeof PostForwardingRequestsParamsSchema
  >

  export const PostForwardingRequestsResponseSchema = ForwardingRequestSchema
  export type PostForwardingRequestsResponse = z.infer<
    typeof PostForwardingRequestsResponseSchema
  >

  export const GetForwardingRequestsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetForwardingRequestsIdParams = z.infer<
    typeof GetForwardingRequestsIdParamsSchema
  >

  export const GetForwardingRequestsIdResponseSchema = ForwardingRequestSchema
  export type GetForwardingRequestsIdResponse = z.infer<
    typeof GetForwardingRequestsIdResponseSchema
  >

  export const GetIdentityVerificationReportsParamsSchema = z.object({
    /** A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
    client_reference_id: z
      .string()
      .max(5000)
      .describe(
        'A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.'
      )
      .optional(),
    /** Only return VerificationReports that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return VerificationReports that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return VerificationReports of this type */
    type: z
      .enum(['document', 'id_number'])
      .describe('Only return VerificationReports of this type')
      .optional(),
    /** Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID. */
    verification_session: z
      .string()
      .max(5000)
      .describe(
        'Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.'
      )
      .optional()
  })
  export type GetIdentityVerificationReportsParams = z.infer<
    typeof GetIdentityVerificationReportsParamsSchema
  >

  export const GetIdentityVerificationReportsResponseSchema = z.object({
    data: z.array(IdentityVerificationReportSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/identity/verification_reports'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIdentityVerificationReportsResponse = z.infer<
    typeof GetIdentityVerificationReportsResponseSchema
  >

  export const GetIdentityVerificationReportsReportParamsSchema = z.object({
    report: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIdentityVerificationReportsReportParams = z.infer<
    typeof GetIdentityVerificationReportsReportParamsSchema
  >

  export const GetIdentityVerificationReportsReportResponseSchema =
    IdentityVerificationReportSchema
  export type GetIdentityVerificationReportsReportResponse = z.infer<
    typeof GetIdentityVerificationReportsReportResponseSchema
  >

  export const GetIdentityVerificationSessionsParamsSchema = z.object({
    /** A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems. */
    client_reference_id: z
      .string()
      .max(5000)
      .describe(
        'A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.'
      )
      .optional(),
    /** Only return VerificationSessions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return VerificationSessions that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    related_customer: z.string().max(5000).optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
    status: z
      .enum(['canceled', 'processing', 'requires_input', 'verified'])
      .describe(
        'Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).'
      )
      .optional()
  })
  export type GetIdentityVerificationSessionsParams = z.infer<
    typeof GetIdentityVerificationSessionsParamsSchema
  >

  export const GetIdentityVerificationSessionsResponseSchema = z.object({
    data: z.array(IdentityVerificationSessionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/identity/verification_sessions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIdentityVerificationSessionsResponse = z.infer<
    typeof GetIdentityVerificationSessionsResponseSchema
  >

  export const PostIdentityVerificationSessionsParamsSchema = z.object({})
  export type PostIdentityVerificationSessionsParams = z.infer<
    typeof PostIdentityVerificationSessionsParamsSchema
  >

  export const PostIdentityVerificationSessionsResponseSchema =
    IdentityVerificationSessionSchema
  export type PostIdentityVerificationSessionsResponse = z.infer<
    typeof PostIdentityVerificationSessionsResponseSchema
  >

  export const GetIdentityVerificationSessionsSessionParamsSchema = z.object({
    session: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIdentityVerificationSessionsSessionParams = z.infer<
    typeof GetIdentityVerificationSessionsSessionParamsSchema
  >

  export const GetIdentityVerificationSessionsSessionResponseSchema =
    IdentityVerificationSessionSchema
  export type GetIdentityVerificationSessionsSessionResponse = z.infer<
    typeof GetIdentityVerificationSessionsSessionResponseSchema
  >

  export const PostIdentityVerificationSessionsSessionParamsSchema = z.object({
    session: z.string().max(5000)
  })
  export type PostIdentityVerificationSessionsSessionParams = z.infer<
    typeof PostIdentityVerificationSessionsSessionParamsSchema
  >

  export const PostIdentityVerificationSessionsSessionResponseSchema =
    IdentityVerificationSessionSchema
  export type PostIdentityVerificationSessionsSessionResponse = z.infer<
    typeof PostIdentityVerificationSessionsSessionResponseSchema
  >

  export const PostIdentityVerificationSessionsSessionCancelParamsSchema =
    z.object({ session: z.string().max(5000) })
  export type PostIdentityVerificationSessionsSessionCancelParams = z.infer<
    typeof PostIdentityVerificationSessionsSessionCancelParamsSchema
  >

  export const PostIdentityVerificationSessionsSessionCancelResponseSchema =
    IdentityVerificationSessionSchema
  export type PostIdentityVerificationSessionsSessionCancelResponse = z.infer<
    typeof PostIdentityVerificationSessionsSessionCancelResponseSchema
  >

  export const PostIdentityVerificationSessionsSessionRedactParamsSchema =
    z.object({ session: z.string().max(5000) })
  export type PostIdentityVerificationSessionsSessionRedactParams = z.infer<
    typeof PostIdentityVerificationSessionsSessionRedactParamsSchema
  >

  export const PostIdentityVerificationSessionsSessionRedactResponseSchema =
    IdentityVerificationSessionSchema
  export type PostIdentityVerificationSessionsSessionRedactResponse = z.infer<
    typeof PostIdentityVerificationSessionsSessionRedactResponseSchema
  >

  export const GetInvoiceRenderingTemplatesParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    status: z.enum(['active', 'archived']).optional()
  })
  export type GetInvoiceRenderingTemplatesParams = z.infer<
    typeof GetInvoiceRenderingTemplatesParamsSchema
  >

  export const GetInvoiceRenderingTemplatesResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(InvoiceRenderingTemplateSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetInvoiceRenderingTemplatesResponse = z.infer<
    typeof GetInvoiceRenderingTemplatesResponseSchema
  >

  export const GetInvoiceRenderingTemplatesTemplateParamsSchema = z.object({
    template: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    version: z.number().int().optional()
  })
  export type GetInvoiceRenderingTemplatesTemplateParams = z.infer<
    typeof GetInvoiceRenderingTemplatesTemplateParamsSchema
  >

  export const GetInvoiceRenderingTemplatesTemplateResponseSchema =
    InvoiceRenderingTemplateSchema
  export type GetInvoiceRenderingTemplatesTemplateResponse = z.infer<
    typeof GetInvoiceRenderingTemplatesTemplateResponseSchema
  >

  export const PostInvoiceRenderingTemplatesTemplateArchiveParamsSchema =
    z.object({ template: z.string().max(5000) })
  export type PostInvoiceRenderingTemplatesTemplateArchiveParams = z.infer<
    typeof PostInvoiceRenderingTemplatesTemplateArchiveParamsSchema
  >

  export const PostInvoiceRenderingTemplatesTemplateArchiveResponseSchema =
    InvoiceRenderingTemplateSchema
  export type PostInvoiceRenderingTemplatesTemplateArchiveResponse = z.infer<
    typeof PostInvoiceRenderingTemplatesTemplateArchiveResponseSchema
  >

  export const PostInvoiceRenderingTemplatesTemplateUnarchiveParamsSchema =
    z.object({ template: z.string().max(5000) })
  export type PostInvoiceRenderingTemplatesTemplateUnarchiveParams = z.infer<
    typeof PostInvoiceRenderingTemplatesTemplateUnarchiveParamsSchema
  >

  export const PostInvoiceRenderingTemplatesTemplateUnarchiveResponseSchema =
    InvoiceRenderingTemplateSchema
  export type PostInvoiceRenderingTemplatesTemplateUnarchiveResponse = z.infer<
    typeof PostInvoiceRenderingTemplatesTemplateUnarchiveResponseSchema
  >

  export const GetInvoiceitemsParamsSchema = z.object({
    /** Only return invoice items that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return invoice items that were created during the given date interval.'
      )
      .optional(),
    /** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */
    invoice: z
      .string()
      .max(5000)
      .describe(
        'Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */
    pending: z
      .boolean()
      .describe(
        'Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetInvoiceitemsParams = z.infer<
    typeof GetInvoiceitemsParamsSchema
  >

  export const GetInvoiceitemsResponseSchema = z.object({
    data: z.array(InvoiceitemSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/invoiceitems'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetInvoiceitemsResponse = z.infer<
    typeof GetInvoiceitemsResponseSchema
  >

  export const PostInvoiceitemsParamsSchema = z.object({})
  export type PostInvoiceitemsParams = z.infer<
    typeof PostInvoiceitemsParamsSchema
  >

  export const PostInvoiceitemsResponseSchema = InvoiceitemSchema
  export type PostInvoiceitemsResponse = z.infer<
    typeof PostInvoiceitemsResponseSchema
  >

  export const GetInvoiceitemsInvoiceitemParamsSchema = z.object({
    invoiceitem: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetInvoiceitemsInvoiceitemParams = z.infer<
    typeof GetInvoiceitemsInvoiceitemParamsSchema
  >

  export const GetInvoiceitemsInvoiceitemResponseSchema = InvoiceitemSchema
  export type GetInvoiceitemsInvoiceitemResponse = z.infer<
    typeof GetInvoiceitemsInvoiceitemResponseSchema
  >

  export const PostInvoiceitemsInvoiceitemParamsSchema = z.object({
    invoiceitem: z.string().max(5000)
  })
  export type PostInvoiceitemsInvoiceitemParams = z.infer<
    typeof PostInvoiceitemsInvoiceitemParamsSchema
  >

  export const PostInvoiceitemsInvoiceitemResponseSchema = InvoiceitemSchema
  export type PostInvoiceitemsInvoiceitemResponse = z.infer<
    typeof PostInvoiceitemsInvoiceitemResponseSchema
  >

  export const DeleteInvoiceitemsInvoiceitemParamsSchema = z.object({
    invoiceitem: z.string().max(5000)
  })
  export type DeleteInvoiceitemsInvoiceitemParams = z.infer<
    typeof DeleteInvoiceitemsInvoiceitemParamsSchema
  >

  export const DeleteInvoiceitemsInvoiceitemResponseSchema =
    DeletedInvoiceitemSchema
  export type DeleteInvoiceitemsInvoiceitemResponse = z.infer<
    typeof DeleteInvoiceitemsInvoiceitemResponseSchema
  >

  export const GetInvoicesParamsSchema = z.object({
    /** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */
    collection_method: z
      .enum(['charge_automatically', 'send_invoice'])
      .describe(
        'The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.'
      )
      .optional(),
    /** Only return invoices that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return invoices that were created during the given date interval.'
      )
      .optional(),
    /** Only return invoices for the customer specified by this customer ID. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return invoices for the customer specified by this customer ID.'
      )
      .optional(),
    due_date: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
    status: z
      .enum(['draft', 'open', 'paid', 'uncollectible', 'void'])
      .describe(
        'The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)'
      )
      .optional(),
    /** Only return invoices for the subscription specified by this subscription ID. */
    subscription: z
      .string()
      .max(5000)
      .describe(
        'Only return invoices for the subscription specified by this subscription ID.'
      )
      .optional()
  })
  export type GetInvoicesParams = z.infer<typeof GetInvoicesParamsSchema>

  export const GetInvoicesResponseSchema = z.object({
    data: z.array(InvoiceSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/invoices'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetInvoicesResponse = z.infer<typeof GetInvoicesResponseSchema>

  export const PostInvoicesParamsSchema = z.object({})
  export type PostInvoicesParams = z.infer<typeof PostInvoicesParamsSchema>

  export const PostInvoicesResponseSchema = InvoiceSchema
  export type PostInvoicesResponse = z.infer<typeof PostInvoicesResponseSchema>

  export const PostInvoicesCreatePreviewParamsSchema = z.object({})
  export type PostInvoicesCreatePreviewParams = z.infer<
    typeof PostInvoicesCreatePreviewParamsSchema
  >

  export const PostInvoicesCreatePreviewResponseSchema = InvoiceSchema
  export type PostInvoicesCreatePreviewResponse = z.infer<
    typeof PostInvoicesCreatePreviewResponseSchema
  >

  export const GetInvoicesSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).'
      )
  })
  export type GetInvoicesSearchParams = z.infer<
    typeof GetInvoicesSearchParamsSchema
  >

  export const GetInvoicesSearchResponseSchema = z.object({
    data: z.array(InvoiceSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetInvoicesSearchResponse = z.infer<
    typeof GetInvoicesSearchResponseSchema
  >

  export const GetInvoicesUpcomingParamsSchema = z.object({
    /** Settings for automatic tax lookup for this invoice preview. */
    automatic_tax: z
      .object({
        enabled: z.boolean(),
        liability: z
          .object({
            account: z.string().optional(),
            type: z.enum(['account', 'self'])
          })
          .optional()
      })
      .describe('Settings for automatic tax lookup for this invoice preview.')
      .optional(),
    /** The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    coupon: z
      .string()
      .max(5000)
      .describe(
        'The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.'
      )
      .optional(),
    /** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */
    currency: z
      .string()
      .describe(
        'The currency to preview this invoice in. Defaults to that of `customer` if not specified.'
      )
      .optional(),
    /** The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
    customer: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set."
      )
      .optional(),
    /** Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
    customer_details: z
      .object({
        address: z
          .union([
            z.object({
              city: z.string().max(5000).optional(),
              country: z.string().max(5000).optional(),
              line1: z.string().max(5000).optional(),
              line2: z.string().max(5000).optional(),
              postal_code: z.string().max(5000).optional(),
              state: z.string().max(5000).optional()
            }),
            z.literal('')
          ])
          .optional(),
        shipping: z
          .union([
            z.object({
              address: z.object({
                city: z.string().max(5000).optional(),
                country: z.string().max(5000).optional(),
                line1: z.string().max(5000).optional(),
                line2: z.string().max(5000).optional(),
                postal_code: z.string().max(5000).optional(),
                state: z.string().max(5000).optional()
              }),
              name: z.string().max(5000),
              phone: z.string().max(5000).optional()
            }),
            z.literal('')
          ])
          .optional(),
        tax: z
          .object({
            ip_address: z.union([z.string(), z.literal('')]).optional()
          })
          .optional(),
        tax_exempt: z.enum(['', 'exempt', 'none', 'reverse']).optional(),
        tax_ids: z
          .array(
            z.object({
              type: z.enum([
                'ad_nrt',
                'ae_trn',
                'al_tin',
                'am_tin',
                'ao_tin',
                'ar_cuit',
                'au_abn',
                'au_arn',
                'ba_tin',
                'bb_tin',
                'bg_uic',
                'bh_vat',
                'bo_tin',
                'br_cnpj',
                'br_cpf',
                'bs_tin',
                'by_tin',
                'ca_bn',
                'ca_gst_hst',
                'ca_pst_bc',
                'ca_pst_mb',
                'ca_pst_sk',
                'ca_qst',
                'cd_nif',
                'ch_uid',
                'ch_vat',
                'cl_tin',
                'cn_tin',
                'co_nit',
                'cr_tin',
                'de_stn',
                'do_rcn',
                'ec_ruc',
                'eg_tin',
                'es_cif',
                'eu_oss_vat',
                'eu_vat',
                'gb_vat',
                'ge_vat',
                'gn_nif',
                'hk_br',
                'hr_oib',
                'hu_tin',
                'id_npwp',
                'il_vat',
                'in_gst',
                'is_vat',
                'jp_cn',
                'jp_rn',
                'jp_trn',
                'ke_pin',
                'kh_tin',
                'kr_brn',
                'kz_bin',
                'li_uid',
                'li_vat',
                'ma_vat',
                'md_vat',
                'me_pib',
                'mk_vat',
                'mr_nif',
                'mx_rfc',
                'my_frp',
                'my_itn',
                'my_sst',
                'ng_tin',
                'no_vat',
                'no_voec',
                'np_pan',
                'nz_gst',
                'om_vat',
                'pe_ruc',
                'ph_tin',
                'ro_tin',
                'rs_pib',
                'ru_inn',
                'ru_kpp',
                'sa_vat',
                'sg_gst',
                'sg_uen',
                'si_tin',
                'sn_ninea',
                'sr_fin',
                'sv_nit',
                'th_vat',
                'tj_tin',
                'tr_tin',
                'tw_vat',
                'tz_vat',
                'ua_vat',
                'ug_tin',
                'us_ein',
                'uy_ruc',
                'uz_tin',
                'uz_vat',
                've_rif',
                'vn_tin',
                'za_vat',
                'zm_tin',
                'zw_tin'
              ]),
              value: z.string()
            })
          )
          .optional()
      })
      .describe(
        'Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.'
      )
      .optional(),
    /** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts. */
    discounts: z
      .union([
        z.array(
          z.object({
            coupon: z.string().max(5000).optional(),
            discount: z.string().max(5000).optional(),
            promotion_code: z.string().max(5000).optional()
          })
        ),
        z.literal('')
      ])
      .describe(
        'The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** List of invoice items to add or update in the upcoming invoice preview (up to 250). */
    invoice_items: z
      .array(
        z.object({
          amount: z.number().int().optional(),
          currency: z.string().optional(),
          description: z.string().max(5000).optional(),
          discountable: z.boolean().optional(),
          discounts: z
            .union([
              z.array(
                z.object({
                  coupon: z.string().max(5000).optional(),
                  discount: z.string().max(5000).optional(),
                  promotion_code: z.string().max(5000).optional()
                })
              ),
              z.literal('')
            ])
            .optional(),
          invoiceitem: z.string().max(5000).optional(),
          metadata: z.union([z.record(z.string()), z.literal('')]).optional(),
          period: z
            .object({ end: z.number().int(), start: z.number().int() })
            .optional(),
          price: z.string().max(5000).optional(),
          price_data: z
            .object({
              currency: z.string(),
              product: z.string().max(5000),
              tax_behavior: z
                .enum(['exclusive', 'inclusive', 'unspecified'])
                .optional(),
              unit_amount: z.number().int().optional(),
              unit_amount_decimal: z.string().optional()
            })
            .optional(),
          quantity: z.number().int().optional(),
          tax_behavior: z
            .enum(['exclusive', 'inclusive', 'unspecified'])
            .optional(),
          tax_code: z.union([z.string(), z.literal('')]).optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional(),
          unit_amount: z.number().int().optional(),
          unit_amount_decimal: z.string().optional()
        })
      )
      .describe(
        'List of invoice items to add or update in the upcoming invoice preview (up to 250).'
      )
      .optional(),
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer: z
      .object({
        account: z.string().optional(),
        type: z.enum(['account', 'self'])
      })
      .describe(
        'The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.'
      )
      .optional(),
    /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
    on_behalf_of: z
      .union([z.string(), z.literal('')])
      .describe(
        'The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.'
      )
      .optional(),
    /** Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified. */
    preview_mode: z
      .enum(['next', 'recurring'])
      .describe(
        'Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.'
      )
      .optional(),
    /** The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
    schedule: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields."
      )
      .optional(),
    /** The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields. */
    schedule_details: z
      .object({
        end_behavior: z.enum(['cancel', 'release']).optional(),
        phases: z
          .array(
            z.object({
              add_invoice_items: z
                .array(
                  z.object({
                    discounts: z
                      .array(
                        z.object({
                          coupon: z.string().max(5000).optional(),
                          discount: z.string().max(5000).optional(),
                          promotion_code: z.string().max(5000).optional()
                        })
                      )
                      .optional(),
                    price: z.string().max(5000).optional(),
                    price_data: z
                      .object({
                        currency: z.string(),
                        product: z.string().max(5000),
                        tax_behavior: z
                          .enum(['exclusive', 'inclusive', 'unspecified'])
                          .optional(),
                        unit_amount: z.number().int().optional(),
                        unit_amount_decimal: z.string().optional()
                      })
                      .optional(),
                    quantity: z.number().int().optional(),
                    tax_rates: z
                      .union([z.array(z.string().max(5000)), z.literal('')])
                      .optional()
                  })
                )
                .optional(),
              application_fee_percent: z.number().optional(),
              automatic_tax: z
                .object({
                  enabled: z.boolean(),
                  liability: z
                    .object({
                      account: z.string().optional(),
                      type: z.enum(['account', 'self'])
                    })
                    .optional()
                })
                .optional(),
              billing_cycle_anchor: z
                .enum(['automatic', 'phase_start'])
                .optional(),
              billing_thresholds: z
                .union([
                  z.object({
                    amount_gte: z.number().int().optional(),
                    reset_billing_cycle_anchor: z.boolean().optional()
                  }),
                  z.literal('')
                ])
                .optional(),
              collection_method: z
                .enum(['charge_automatically', 'send_invoice'])
                .optional(),
              coupon: z.string().max(5000).optional(),
              default_payment_method: z.string().max(5000).optional(),
              default_tax_rates: z
                .union([z.array(z.string().max(5000)), z.literal('')])
                .optional(),
              description: z
                .union([z.string().max(500), z.literal('')])
                .optional(),
              discounts: z
                .union([
                  z.array(
                    z.object({
                      coupon: z.string().max(5000).optional(),
                      discount: z.string().max(5000).optional(),
                      promotion_code: z.string().max(5000).optional()
                    })
                  ),
                  z.literal('')
                ])
                .optional(),
              end_date: z
                .union([z.number().int(), z.literal('now')])
                .optional(),
              invoice_settings: z
                .object({
                  account_tax_ids: z
                    .union([z.array(z.string().max(5000)), z.literal('')])
                    .optional(),
                  days_until_due: z.number().int().optional(),
                  issuer: z
                    .object({
                      account: z.string().optional(),
                      type: z.enum(['account', 'self'])
                    })
                    .optional()
                })
                .optional(),
              items: z.array(
                z.object({
                  billing_thresholds: z
                    .union([
                      z.object({ usage_gte: z.number().int() }),
                      z.literal('')
                    ])
                    .optional(),
                  discounts: z
                    .union([
                      z.array(
                        z.object({
                          coupon: z.string().max(5000).optional(),
                          discount: z.string().max(5000).optional(),
                          promotion_code: z.string().max(5000).optional()
                        })
                      ),
                      z.literal('')
                    ])
                    .optional(),
                  metadata: z.record(z.string()).optional(),
                  price: z.string().max(5000).optional(),
                  price_data: z
                    .object({
                      currency: z.string(),
                      product: z.string().max(5000),
                      recurring: z.object({
                        interval: z.enum(['day', 'month', 'week', 'year']),
                        interval_count: z.number().int().optional()
                      }),
                      tax_behavior: z
                        .enum(['exclusive', 'inclusive', 'unspecified'])
                        .optional(),
                      unit_amount: z.number().int().optional(),
                      unit_amount_decimal: z.string().optional()
                    })
                    .optional(),
                  quantity: z.number().int().optional(),
                  tax_rates: z
                    .union([z.array(z.string().max(5000)), z.literal('')])
                    .optional()
                })
              ),
              iterations: z.number().int().optional(),
              metadata: z.record(z.string()).optional(),
              on_behalf_of: z.string().optional(),
              proration_behavior: z
                .enum(['always_invoice', 'create_prorations', 'none'])
                .optional(),
              start_date: z
                .union([z.number().int(), z.literal('now')])
                .optional(),
              transfer_data: z
                .object({
                  amount_percent: z.number().optional(),
                  destination: z.string()
                })
                .optional(),
              trial: z.boolean().optional(),
              trial_end: z
                .union([z.number().int(), z.literal('now')])
                .optional()
            })
          )
          .optional(),
        proration_behavior: z
          .enum(['always_invoice', 'create_prorations', 'none'])
          .optional()
      })
      .describe(
        'The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.'
      )
      .optional(),
    /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
    subscription: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions."
      )
      .optional(),
    /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead. */
    subscription_billing_cycle_anchor: z
      .union([z.enum(['now', 'unchanged']), z.number().int()])
      .describe(
        "For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead."
      )
      .optional(),
    /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead. */
    subscription_cancel_at: z
      .union([z.number().int(), z.literal('')])
      .describe(
        'A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.'
      )
      .optional(),
    /** Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead. */
    subscription_cancel_at_period_end: z
      .boolean()
      .describe(
        'Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.'
      )
      .optional(),
    /** This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead. */
    subscription_cancel_now: z
      .boolean()
      .describe(
        'This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.'
      )
      .optional(),
    /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead. */
    subscription_default_tax_rates: z
      .union([z.array(z.string().max(5000)), z.literal('')])
      .describe(
        'If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.'
      )
      .optional(),
    /** The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields. */
    subscription_details: z
      .object({
        billing_cycle_anchor: z
          .union([z.enum(['now', 'unchanged']), z.number().int()])
          .optional(),
        cancel_at: z.union([z.number().int(), z.literal('')]).optional(),
        cancel_at_period_end: z.boolean().optional(),
        cancel_now: z.boolean().optional(),
        default_tax_rates: z
          .union([z.array(z.string().max(5000)), z.literal('')])
          .optional(),
        items: z
          .array(
            z.object({
              billing_thresholds: z
                .union([
                  z.object({ usage_gte: z.number().int() }),
                  z.literal('')
                ])
                .optional(),
              clear_usage: z.boolean().optional(),
              deleted: z.boolean().optional(),
              discounts: z
                .union([
                  z.array(
                    z.object({
                      coupon: z.string().max(5000).optional(),
                      discount: z.string().max(5000).optional(),
                      promotion_code: z.string().max(5000).optional()
                    })
                  ),
                  z.literal('')
                ])
                .optional(),
              id: z.string().max(5000).optional(),
              metadata: z
                .union([z.record(z.string()), z.literal('')])
                .optional(),
              price: z.string().max(5000).optional(),
              price_data: z
                .object({
                  currency: z.string(),
                  product: z.string().max(5000),
                  recurring: z.object({
                    interval: z.enum(['day', 'month', 'week', 'year']),
                    interval_count: z.number().int().optional()
                  }),
                  tax_behavior: z
                    .enum(['exclusive', 'inclusive', 'unspecified'])
                    .optional(),
                  unit_amount: z.number().int().optional(),
                  unit_amount_decimal: z.string().optional()
                })
                .optional(),
              quantity: z.number().int().optional(),
              tax_rates: z
                .union([z.array(z.string().max(5000)), z.literal('')])
                .optional()
            })
          )
          .optional(),
        proration_behavior: z
          .enum(['always_invoice', 'create_prorations', 'none'])
          .optional(),
        proration_date: z.number().int().optional(),
        resume_at: z.literal('now').optional(),
        start_date: z.number().int().optional(),
        trial_end: z.union([z.literal('now'), z.number().int()]).optional()
      })
      .describe(
        'The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.'
      )
      .optional(),
    /** A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead. */
    subscription_items: z
      .array(
        z.object({
          billing_thresholds: z
            .union([z.object({ usage_gte: z.number().int() }), z.literal('')])
            .optional(),
          clear_usage: z.boolean().optional(),
          deleted: z.boolean().optional(),
          discounts: z
            .union([
              z.array(
                z.object({
                  coupon: z.string().max(5000).optional(),
                  discount: z.string().max(5000).optional(),
                  promotion_code: z.string().max(5000).optional()
                })
              ),
              z.literal('')
            ])
            .optional(),
          id: z.string().max(5000).optional(),
          metadata: z.union([z.record(z.string()), z.literal('')]).optional(),
          price: z.string().max(5000).optional(),
          price_data: z
            .object({
              currency: z.string(),
              product: z.string().max(5000),
              recurring: z.object({
                interval: z.enum(['day', 'month', 'week', 'year']),
                interval_count: z.number().int().optional()
              }),
              tax_behavior: z
                .enum(['exclusive', 'inclusive', 'unspecified'])
                .optional(),
              unit_amount: z.number().int().optional(),
              unit_amount_decimal: z.string().optional()
            })
            .optional(),
          quantity: z.number().int().optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional()
        })
      )
      .describe(
        'A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.'
      )
      .optional(),
    /** Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead. */
    subscription_proration_behavior: z
      .enum(['always_invoice', 'create_prorations', 'none'])
      .describe(
        "Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead."
      )
      .optional(),
    /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead. */
    subscription_proration_date: z
      .number()
      .int()
      .describe(
        "If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead."
      )
      .optional(),
    /** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead. */
    subscription_resume_at: z
      .literal('now')
      .describe(
        'For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.'
      )
      .optional(),
    /** Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead. */
    subscription_start_date: z
      .number()
      .int()
      .describe(
        'Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.'
      )
      .optional(),
    /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead. */
    subscription_trial_end: z
      .union([z.literal('now'), z.number().int()])
      .describe(
        'If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.'
      )
      .optional()
  })
  export type GetInvoicesUpcomingParams = z.infer<
    typeof GetInvoicesUpcomingParamsSchema
  >

  export const GetInvoicesUpcomingResponseSchema = InvoiceSchema
  export type GetInvoicesUpcomingResponse = z.infer<
    typeof GetInvoicesUpcomingResponseSchema
  >

  export const GetInvoicesUpcomingLinesParamsSchema = z.object({
    /** Settings for automatic tax lookup for this invoice preview. */
    automatic_tax: z
      .object({
        enabled: z.boolean(),
        liability: z
          .object({
            account: z.string().optional(),
            type: z.enum(['account', 'self'])
          })
          .optional()
      })
      .describe('Settings for automatic tax lookup for this invoice preview.')
      .optional(),
    /** The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    coupon: z
      .string()
      .max(5000)
      .describe(
        'The ID of the coupon to apply to this phase of the subscription schedule. This field has been deprecated and will be removed in a future API version. Use `discounts` instead.'
      )
      .optional(),
    /** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */
    currency: z
      .string()
      .describe(
        'The currency to preview this invoice in. Defaults to that of `customer` if not specified.'
      )
      .optional(),
    /** The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
    customer: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set."
      )
      .optional(),
    /** Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set. */
    customer_details: z
      .object({
        address: z
          .union([
            z.object({
              city: z.string().max(5000).optional(),
              country: z.string().max(5000).optional(),
              line1: z.string().max(5000).optional(),
              line2: z.string().max(5000).optional(),
              postal_code: z.string().max(5000).optional(),
              state: z.string().max(5000).optional()
            }),
            z.literal('')
          ])
          .optional(),
        shipping: z
          .union([
            z.object({
              address: z.object({
                city: z.string().max(5000).optional(),
                country: z.string().max(5000).optional(),
                line1: z.string().max(5000).optional(),
                line2: z.string().max(5000).optional(),
                postal_code: z.string().max(5000).optional(),
                state: z.string().max(5000).optional()
              }),
              name: z.string().max(5000),
              phone: z.string().max(5000).optional()
            }),
            z.literal('')
          ])
          .optional(),
        tax: z
          .object({
            ip_address: z.union([z.string(), z.literal('')]).optional()
          })
          .optional(),
        tax_exempt: z.enum(['', 'exempt', 'none', 'reverse']).optional(),
        tax_ids: z
          .array(
            z.object({
              type: z.enum([
                'ad_nrt',
                'ae_trn',
                'al_tin',
                'am_tin',
                'ao_tin',
                'ar_cuit',
                'au_abn',
                'au_arn',
                'ba_tin',
                'bb_tin',
                'bg_uic',
                'bh_vat',
                'bo_tin',
                'br_cnpj',
                'br_cpf',
                'bs_tin',
                'by_tin',
                'ca_bn',
                'ca_gst_hst',
                'ca_pst_bc',
                'ca_pst_mb',
                'ca_pst_sk',
                'ca_qst',
                'cd_nif',
                'ch_uid',
                'ch_vat',
                'cl_tin',
                'cn_tin',
                'co_nit',
                'cr_tin',
                'de_stn',
                'do_rcn',
                'ec_ruc',
                'eg_tin',
                'es_cif',
                'eu_oss_vat',
                'eu_vat',
                'gb_vat',
                'ge_vat',
                'gn_nif',
                'hk_br',
                'hr_oib',
                'hu_tin',
                'id_npwp',
                'il_vat',
                'in_gst',
                'is_vat',
                'jp_cn',
                'jp_rn',
                'jp_trn',
                'ke_pin',
                'kh_tin',
                'kr_brn',
                'kz_bin',
                'li_uid',
                'li_vat',
                'ma_vat',
                'md_vat',
                'me_pib',
                'mk_vat',
                'mr_nif',
                'mx_rfc',
                'my_frp',
                'my_itn',
                'my_sst',
                'ng_tin',
                'no_vat',
                'no_voec',
                'np_pan',
                'nz_gst',
                'om_vat',
                'pe_ruc',
                'ph_tin',
                'ro_tin',
                'rs_pib',
                'ru_inn',
                'ru_kpp',
                'sa_vat',
                'sg_gst',
                'sg_uen',
                'si_tin',
                'sn_ninea',
                'sr_fin',
                'sv_nit',
                'th_vat',
                'tj_tin',
                'tr_tin',
                'tw_vat',
                'tz_vat',
                'ua_vat',
                'ug_tin',
                'us_ein',
                'uy_ruc',
                'uz_tin',
                'uz_vat',
                've_rif',
                'vn_tin',
                'za_vat',
                'zm_tin',
                'zw_tin'
              ]),
              value: z.string()
            })
          )
          .optional()
      })
      .describe(
        'Details about the customer you want to invoice or overrides for an existing customer. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.'
      )
      .optional(),
    /** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts. */
    discounts: z
      .union([
        z.array(
          z.object({
            coupon: z.string().max(5000).optional(),
            discount: z.string().max(5000).optional(),
            promotion_code: z.string().max(5000).optional()
          })
        ),
        z.literal('')
      ])
      .describe(
        'The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the subscription or customer. This works for both coupons directly applied to an invoice and coupons applied to a subscription. Pass an empty string to avoid inheriting any discounts.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** List of invoice items to add or update in the upcoming invoice preview (up to 250). */
    invoice_items: z
      .array(
        z.object({
          amount: z.number().int().optional(),
          currency: z.string().optional(),
          description: z.string().max(5000).optional(),
          discountable: z.boolean().optional(),
          discounts: z
            .union([
              z.array(
                z.object({
                  coupon: z.string().max(5000).optional(),
                  discount: z.string().max(5000).optional(),
                  promotion_code: z.string().max(5000).optional()
                })
              ),
              z.literal('')
            ])
            .optional(),
          invoiceitem: z.string().max(5000).optional(),
          metadata: z.union([z.record(z.string()), z.literal('')]).optional(),
          period: z
            .object({ end: z.number().int(), start: z.number().int() })
            .optional(),
          price: z.string().max(5000).optional(),
          price_data: z
            .object({
              currency: z.string(),
              product: z.string().max(5000),
              tax_behavior: z
                .enum(['exclusive', 'inclusive', 'unspecified'])
                .optional(),
              unit_amount: z.number().int().optional(),
              unit_amount_decimal: z.string().optional()
            })
            .optional(),
          quantity: z.number().int().optional(),
          tax_behavior: z
            .enum(['exclusive', 'inclusive', 'unspecified'])
            .optional(),
          tax_code: z.union([z.string(), z.literal('')]).optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional(),
          unit_amount: z.number().int().optional(),
          unit_amount_decimal: z.string().optional()
        })
      )
      .describe(
        'List of invoice items to add or update in the upcoming invoice preview (up to 250).'
      )
      .optional(),
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer: z
      .object({
        account: z.string().optional(),
        type: z.enum(['account', 'self'])
      })
      .describe(
        'The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
    on_behalf_of: z
      .union([z.string(), z.literal('')])
      .describe(
        'The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.'
      )
      .optional(),
    /** Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified. */
    preview_mode: z
      .enum(['next', 'recurring'])
      .describe(
        'Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.'
      )
      .optional(),
    /** The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
    schedule: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields."
      )
      .optional(),
    /** The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields. */
    schedule_details: z
      .object({
        end_behavior: z.enum(['cancel', 'release']).optional(),
        phases: z
          .array(
            z.object({
              add_invoice_items: z
                .array(
                  z.object({
                    discounts: z
                      .array(
                        z.object({
                          coupon: z.string().max(5000).optional(),
                          discount: z.string().max(5000).optional(),
                          promotion_code: z.string().max(5000).optional()
                        })
                      )
                      .optional(),
                    price: z.string().max(5000).optional(),
                    price_data: z
                      .object({
                        currency: z.string(),
                        product: z.string().max(5000),
                        tax_behavior: z
                          .enum(['exclusive', 'inclusive', 'unspecified'])
                          .optional(),
                        unit_amount: z.number().int().optional(),
                        unit_amount_decimal: z.string().optional()
                      })
                      .optional(),
                    quantity: z.number().int().optional(),
                    tax_rates: z
                      .union([z.array(z.string().max(5000)), z.literal('')])
                      .optional()
                  })
                )
                .optional(),
              application_fee_percent: z.number().optional(),
              automatic_tax: z
                .object({
                  enabled: z.boolean(),
                  liability: z
                    .object({
                      account: z.string().optional(),
                      type: z.enum(['account', 'self'])
                    })
                    .optional()
                })
                .optional(),
              billing_cycle_anchor: z
                .enum(['automatic', 'phase_start'])
                .optional(),
              billing_thresholds: z
                .union([
                  z.object({
                    amount_gte: z.number().int().optional(),
                    reset_billing_cycle_anchor: z.boolean().optional()
                  }),
                  z.literal('')
                ])
                .optional(),
              collection_method: z
                .enum(['charge_automatically', 'send_invoice'])
                .optional(),
              coupon: z.string().max(5000).optional(),
              default_payment_method: z.string().max(5000).optional(),
              default_tax_rates: z
                .union([z.array(z.string().max(5000)), z.literal('')])
                .optional(),
              description: z
                .union([z.string().max(500), z.literal('')])
                .optional(),
              discounts: z
                .union([
                  z.array(
                    z.object({
                      coupon: z.string().max(5000).optional(),
                      discount: z.string().max(5000).optional(),
                      promotion_code: z.string().max(5000).optional()
                    })
                  ),
                  z.literal('')
                ])
                .optional(),
              end_date: z
                .union([z.number().int(), z.literal('now')])
                .optional(),
              invoice_settings: z
                .object({
                  account_tax_ids: z
                    .union([z.array(z.string().max(5000)), z.literal('')])
                    .optional(),
                  days_until_due: z.number().int().optional(),
                  issuer: z
                    .object({
                      account: z.string().optional(),
                      type: z.enum(['account', 'self'])
                    })
                    .optional()
                })
                .optional(),
              items: z.array(
                z.object({
                  billing_thresholds: z
                    .union([
                      z.object({ usage_gte: z.number().int() }),
                      z.literal('')
                    ])
                    .optional(),
                  discounts: z
                    .union([
                      z.array(
                        z.object({
                          coupon: z.string().max(5000).optional(),
                          discount: z.string().max(5000).optional(),
                          promotion_code: z.string().max(5000).optional()
                        })
                      ),
                      z.literal('')
                    ])
                    .optional(),
                  metadata: z.record(z.string()).optional(),
                  price: z.string().max(5000).optional(),
                  price_data: z
                    .object({
                      currency: z.string(),
                      product: z.string().max(5000),
                      recurring: z.object({
                        interval: z.enum(['day', 'month', 'week', 'year']),
                        interval_count: z.number().int().optional()
                      }),
                      tax_behavior: z
                        .enum(['exclusive', 'inclusive', 'unspecified'])
                        .optional(),
                      unit_amount: z.number().int().optional(),
                      unit_amount_decimal: z.string().optional()
                    })
                    .optional(),
                  quantity: z.number().int().optional(),
                  tax_rates: z
                    .union([z.array(z.string().max(5000)), z.literal('')])
                    .optional()
                })
              ),
              iterations: z.number().int().optional(),
              metadata: z.record(z.string()).optional(),
              on_behalf_of: z.string().optional(),
              proration_behavior: z
                .enum(['always_invoice', 'create_prorations', 'none'])
                .optional(),
              start_date: z
                .union([z.number().int(), z.literal('now')])
                .optional(),
              transfer_data: z
                .object({
                  amount_percent: z.number().optional(),
                  destination: z.string()
                })
                .optional(),
              trial: z.boolean().optional(),
              trial_end: z
                .union([z.number().int(), z.literal('now')])
                .optional()
            })
          )
          .optional(),
        proration_behavior: z
          .enum(['always_invoice', 'create_prorations', 'none'])
          .optional()
      })
      .describe(
        'The schedule creation or modification params to apply as a preview. Cannot be used with `subscription` or `subscription_` prefixed fields.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
    subscription: z
      .string()
      .max(5000)
      .describe(
        "The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions."
      )
      .optional(),
    /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead. */
    subscription_billing_cycle_anchor: z
      .union([z.enum(['now', 'unchanged']), z.number().int()])
      .describe(
        "For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.billing_cycle_anchor` instead."
      )
      .optional(),
    /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead. */
    subscription_cancel_at: z
      .union([z.number().int(), z.literal('')])
      .describe(
        'A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at` instead.'
      )
      .optional(),
    /** Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead. */
    subscription_cancel_at_period_end: z
      .boolean()
      .describe(
        'Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_at_period_end` instead.'
      )
      .optional(),
    /** This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead. */
    subscription_cancel_now: z
      .boolean()
      .describe(
        'This simulates the subscription being canceled or expired immediately. This field has been deprecated and will be removed in a future API version. Use `subscription_details.cancel_now` instead.'
      )
      .optional(),
    /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead. */
    subscription_default_tax_rates: z
      .union([z.array(z.string().max(5000)), z.literal('')])
      .describe(
        'If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. This field has been deprecated and will be removed in a future API version. Use `subscription_details.default_tax_rates` instead.'
      )
      .optional(),
    /** The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields. */
    subscription_details: z
      .object({
        billing_cycle_anchor: z
          .union([z.enum(['now', 'unchanged']), z.number().int()])
          .optional(),
        cancel_at: z.union([z.number().int(), z.literal('')]).optional(),
        cancel_at_period_end: z.boolean().optional(),
        cancel_now: z.boolean().optional(),
        default_tax_rates: z
          .union([z.array(z.string().max(5000)), z.literal('')])
          .optional(),
        items: z
          .array(
            z.object({
              billing_thresholds: z
                .union([
                  z.object({ usage_gte: z.number().int() }),
                  z.literal('')
                ])
                .optional(),
              clear_usage: z.boolean().optional(),
              deleted: z.boolean().optional(),
              discounts: z
                .union([
                  z.array(
                    z.object({
                      coupon: z.string().max(5000).optional(),
                      discount: z.string().max(5000).optional(),
                      promotion_code: z.string().max(5000).optional()
                    })
                  ),
                  z.literal('')
                ])
                .optional(),
              id: z.string().max(5000).optional(),
              metadata: z
                .union([z.record(z.string()), z.literal('')])
                .optional(),
              price: z.string().max(5000).optional(),
              price_data: z
                .object({
                  currency: z.string(),
                  product: z.string().max(5000),
                  recurring: z.object({
                    interval: z.enum(['day', 'month', 'week', 'year']),
                    interval_count: z.number().int().optional()
                  }),
                  tax_behavior: z
                    .enum(['exclusive', 'inclusive', 'unspecified'])
                    .optional(),
                  unit_amount: z.number().int().optional(),
                  unit_amount_decimal: z.string().optional()
                })
                .optional(),
              quantity: z.number().int().optional(),
              tax_rates: z
                .union([z.array(z.string().max(5000)), z.literal('')])
                .optional()
            })
          )
          .optional(),
        proration_behavior: z
          .enum(['always_invoice', 'create_prorations', 'none'])
          .optional(),
        proration_date: z.number().int().optional(),
        resume_at: z.literal('now').optional(),
        start_date: z.number().int().optional(),
        trial_end: z.union([z.literal('now'), z.number().int()]).optional()
      })
      .describe(
        'The subscription creation or modification params to apply as a preview. Cannot be used with `schedule` or `schedule_details` fields.'
      )
      .optional(),
    /** A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead. */
    subscription_items: z
      .array(
        z.object({
          billing_thresholds: z
            .union([z.object({ usage_gte: z.number().int() }), z.literal('')])
            .optional(),
          clear_usage: z.boolean().optional(),
          deleted: z.boolean().optional(),
          discounts: z
            .union([
              z.array(
                z.object({
                  coupon: z.string().max(5000).optional(),
                  discount: z.string().max(5000).optional(),
                  promotion_code: z.string().max(5000).optional()
                })
              ),
              z.literal('')
            ])
            .optional(),
          id: z.string().max(5000).optional(),
          metadata: z.union([z.record(z.string()), z.literal('')]).optional(),
          price: z.string().max(5000).optional(),
          price_data: z
            .object({
              currency: z.string(),
              product: z.string().max(5000),
              recurring: z.object({
                interval: z.enum(['day', 'month', 'week', 'year']),
                interval_count: z.number().int().optional()
              }),
              tax_behavior: z
                .enum(['exclusive', 'inclusive', 'unspecified'])
                .optional(),
              unit_amount: z.number().int().optional(),
              unit_amount_decimal: z.string().optional()
            })
            .optional(),
          quantity: z.number().int().optional(),
          tax_rates: z
            .union([z.array(z.string().max(5000)), z.literal('')])
            .optional()
        })
      )
      .describe(
        'A list of up to 20 subscription items, each with an attached price. This field has been deprecated and will be removed in a future API version. Use `subscription_details.items` instead.'
      )
      .optional(),
    /** Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead. */
    subscription_proration_behavior: z
      .enum(['always_invoice', 'create_prorations', 'none'])
      .describe(
        "Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_behavior` instead."
      )
      .optional(),
    /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead. */
    subscription_proration_date: z
      .number()
      .int()
      .describe(
        "If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. This field has been deprecated and will be removed in a future API version. Use `subscription_details.proration_date` instead."
      )
      .optional(),
    /** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead. */
    subscription_resume_at: z
      .literal('now')
      .describe(
        'For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. This field has been deprecated and will be removed in a future API version. Use `subscription_details.resume_at` instead.'
      )
      .optional(),
    /** Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead. */
    subscription_start_date: z
      .number()
      .int()
      .describe(
        'Date a subscription is intended to start (can be future or past). This field has been deprecated and will be removed in a future API version. Use `subscription_details.start_date` instead.'
      )
      .optional(),
    /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead. */
    subscription_trial_end: z
      .union([z.literal('now'), z.number().int()])
      .describe(
        'If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version. Use `subscription_details.trial_end` instead.'
      )
      .optional()
  })
  export type GetInvoicesUpcomingLinesParams = z.infer<
    typeof GetInvoicesUpcomingLinesParamsSchema
  >

  export const GetInvoicesUpcomingLinesResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(LineItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetInvoicesUpcomingLinesResponse = z.infer<
    typeof GetInvoicesUpcomingLinesResponseSchema
  >

  export const GetInvoicesInvoiceParamsSchema = z.object({
    invoice: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetInvoicesInvoiceParams = z.infer<
    typeof GetInvoicesInvoiceParamsSchema
  >

  export const GetInvoicesInvoiceResponseSchema = InvoiceSchema
  export type GetInvoicesInvoiceResponse = z.infer<
    typeof GetInvoicesInvoiceResponseSchema
  >

  export const PostInvoicesInvoiceParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceParams = z.infer<
    typeof PostInvoicesInvoiceParamsSchema
  >

  export const PostInvoicesInvoiceResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceResponse = z.infer<
    typeof PostInvoicesInvoiceResponseSchema
  >

  export const DeleteInvoicesInvoiceParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type DeleteInvoicesInvoiceParams = z.infer<
    typeof DeleteInvoicesInvoiceParamsSchema
  >

  export const DeleteInvoicesInvoiceResponseSchema = DeletedInvoiceSchema
  export type DeleteInvoicesInvoiceResponse = z.infer<
    typeof DeleteInvoicesInvoiceResponseSchema
  >

  export const PostInvoicesInvoiceAddLinesParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceAddLinesParams = z.infer<
    typeof PostInvoicesInvoiceAddLinesParamsSchema
  >

  export const PostInvoicesInvoiceAddLinesResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceAddLinesResponse = z.infer<
    typeof PostInvoicesInvoiceAddLinesResponseSchema
  >

  export const PostInvoicesInvoiceFinalizeParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceFinalizeParams = z.infer<
    typeof PostInvoicesInvoiceFinalizeParamsSchema
  >

  export const PostInvoicesInvoiceFinalizeResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceFinalizeResponse = z.infer<
    typeof PostInvoicesInvoiceFinalizeResponseSchema
  >

  export const GetInvoicesInvoiceLinesParamsSchema = z.object({
    invoice: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetInvoicesInvoiceLinesParams = z.infer<
    typeof GetInvoicesInvoiceLinesParamsSchema
  >

  export const GetInvoicesInvoiceLinesResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(LineItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetInvoicesInvoiceLinesResponse = z.infer<
    typeof GetInvoicesInvoiceLinesResponseSchema
  >

  export const PostInvoicesInvoiceLinesLineItemIdParamsSchema = z.object({
    /** Invoice ID of line item */
    invoice: z.string().max(5000).describe('Invoice ID of line item'),
    /** Invoice line item ID */
    line_item_id: z.string().max(5000).describe('Invoice line item ID')
  })
  export type PostInvoicesInvoiceLinesLineItemIdParams = z.infer<
    typeof PostInvoicesInvoiceLinesLineItemIdParamsSchema
  >

  export const PostInvoicesInvoiceLinesLineItemIdResponseSchema = LineItemSchema
  export type PostInvoicesInvoiceLinesLineItemIdResponse = z.infer<
    typeof PostInvoicesInvoiceLinesLineItemIdResponseSchema
  >

  export const PostInvoicesInvoiceMarkUncollectibleParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceMarkUncollectibleParams = z.infer<
    typeof PostInvoicesInvoiceMarkUncollectibleParamsSchema
  >

  export const PostInvoicesInvoiceMarkUncollectibleResponseSchema =
    InvoiceSchema
  export type PostInvoicesInvoiceMarkUncollectibleResponse = z.infer<
    typeof PostInvoicesInvoiceMarkUncollectibleResponseSchema
  >

  export const PostInvoicesInvoicePayParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoicePayParams = z.infer<
    typeof PostInvoicesInvoicePayParamsSchema
  >

  export const PostInvoicesInvoicePayResponseSchema = InvoiceSchema
  export type PostInvoicesInvoicePayResponse = z.infer<
    typeof PostInvoicesInvoicePayResponseSchema
  >

  export const PostInvoicesInvoiceRemoveLinesParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceRemoveLinesParams = z.infer<
    typeof PostInvoicesInvoiceRemoveLinesParamsSchema
  >

  export const PostInvoicesInvoiceRemoveLinesResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceRemoveLinesResponse = z.infer<
    typeof PostInvoicesInvoiceRemoveLinesResponseSchema
  >

  export const PostInvoicesInvoiceSendParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceSendParams = z.infer<
    typeof PostInvoicesInvoiceSendParamsSchema
  >

  export const PostInvoicesInvoiceSendResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceSendResponse = z.infer<
    typeof PostInvoicesInvoiceSendResponseSchema
  >

  export const PostInvoicesInvoiceUpdateLinesParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceUpdateLinesParams = z.infer<
    typeof PostInvoicesInvoiceUpdateLinesParamsSchema
  >

  export const PostInvoicesInvoiceUpdateLinesResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceUpdateLinesResponse = z.infer<
    typeof PostInvoicesInvoiceUpdateLinesResponseSchema
  >

  export const PostInvoicesInvoiceVoidParamsSchema = z.object({
    invoice: z.string().max(5000)
  })
  export type PostInvoicesInvoiceVoidParams = z.infer<
    typeof PostInvoicesInvoiceVoidParamsSchema
  >

  export const PostInvoicesInvoiceVoidResponseSchema = InvoiceSchema
  export type PostInvoicesInvoiceVoidResponse = z.infer<
    typeof PostInvoicesInvoiceVoidResponseSchema
  >

  export const GetIssuingAuthorizationsParamsSchema = z.object({
    /** Only return authorizations that belong to the given card. */
    card: z
      .string()
      .max(5000)
      .describe('Only return authorizations that belong to the given card.')
      .optional(),
    /** Only return authorizations that belong to the given cardholder. */
    cardholder: z
      .string()
      .max(5000)
      .describe(
        'Only return authorizations that belong to the given cardholder.'
      )
      .optional(),
    /** Only return authorizations that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return authorizations that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */
    status: z
      .enum(['closed', 'pending', 'reversed'])
      .describe(
        'Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.'
      )
      .optional()
  })
  export type GetIssuingAuthorizationsParams = z.infer<
    typeof GetIssuingAuthorizationsParamsSchema
  >

  export const GetIssuingAuthorizationsResponseSchema = z.object({
    data: z.array(IssuingAuthorizationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/authorizations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingAuthorizationsResponse = z.infer<
    typeof GetIssuingAuthorizationsResponseSchema
  >

  export const GetIssuingAuthorizationsAuthorizationParamsSchema = z.object({
    authorization: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingAuthorizationsAuthorizationParams = z.infer<
    typeof GetIssuingAuthorizationsAuthorizationParamsSchema
  >

  export const GetIssuingAuthorizationsAuthorizationResponseSchema =
    IssuingAuthorizationSchema
  export type GetIssuingAuthorizationsAuthorizationResponse = z.infer<
    typeof GetIssuingAuthorizationsAuthorizationResponseSchema
  >

  export const PostIssuingAuthorizationsAuthorizationParamsSchema = z.object({
    authorization: z.string().max(5000)
  })
  export type PostIssuingAuthorizationsAuthorizationParams = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationParamsSchema
  >

  export const PostIssuingAuthorizationsAuthorizationResponseSchema =
    IssuingAuthorizationSchema
  export type PostIssuingAuthorizationsAuthorizationResponse = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationResponseSchema
  >

  export const PostIssuingAuthorizationsAuthorizationApproveParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostIssuingAuthorizationsAuthorizationApproveParams = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationApproveParamsSchema
  >

  export const PostIssuingAuthorizationsAuthorizationApproveResponseSchema =
    IssuingAuthorizationSchema
  export type PostIssuingAuthorizationsAuthorizationApproveResponse = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationApproveResponseSchema
  >

  export const PostIssuingAuthorizationsAuthorizationDeclineParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostIssuingAuthorizationsAuthorizationDeclineParams = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationDeclineParamsSchema
  >

  export const PostIssuingAuthorizationsAuthorizationDeclineResponseSchema =
    IssuingAuthorizationSchema
  export type PostIssuingAuthorizationsAuthorizationDeclineResponse = z.infer<
    typeof PostIssuingAuthorizationsAuthorizationDeclineResponseSchema
  >

  export const GetIssuingCardholdersParamsSchema = z.object({
    /** Only return cardholders that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return cardholders that were created during the given date interval.'
      )
      .optional(),
    /** Only return cardholders that have the given email address. */
    email: z
      .string()
      .describe('Only return cardholders that have the given email address.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return cardholders that have the given phone number. */
    phone_number: z
      .string()
      .describe('Only return cardholders that have the given phone number.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */
    status: z
      .enum(['active', 'blocked', 'inactive'])
      .describe(
        'Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.'
      )
      .optional(),
    /** Only return cardholders that have the given type. One of `individual` or `company`. */
    type: z
      .enum(['company', 'individual'])
      .describe(
        'Only return cardholders that have the given type. One of `individual` or `company`.'
      )
      .optional()
  })
  export type GetIssuingCardholdersParams = z.infer<
    typeof GetIssuingCardholdersParamsSchema
  >

  export const GetIssuingCardholdersResponseSchema = z.object({
    data: z.array(IssuingCardholderSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/cardholders'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingCardholdersResponse = z.infer<
    typeof GetIssuingCardholdersResponseSchema
  >

  export const PostIssuingCardholdersParamsSchema = z.object({})
  export type PostIssuingCardholdersParams = z.infer<
    typeof PostIssuingCardholdersParamsSchema
  >

  export const PostIssuingCardholdersResponseSchema = IssuingCardholderSchema
  export type PostIssuingCardholdersResponse = z.infer<
    typeof PostIssuingCardholdersResponseSchema
  >

  export const GetIssuingCardholdersCardholderParamsSchema = z.object({
    cardholder: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingCardholdersCardholderParams = z.infer<
    typeof GetIssuingCardholdersCardholderParamsSchema
  >

  export const GetIssuingCardholdersCardholderResponseSchema =
    IssuingCardholderSchema
  export type GetIssuingCardholdersCardholderResponse = z.infer<
    typeof GetIssuingCardholdersCardholderResponseSchema
  >

  export const PostIssuingCardholdersCardholderParamsSchema = z.object({
    cardholder: z.string().max(5000)
  })
  export type PostIssuingCardholdersCardholderParams = z.infer<
    typeof PostIssuingCardholdersCardholderParamsSchema
  >

  export const PostIssuingCardholdersCardholderResponseSchema =
    IssuingCardholderSchema
  export type PostIssuingCardholdersCardholderResponse = z.infer<
    typeof PostIssuingCardholdersCardholderResponseSchema
  >

  export const GetIssuingCardsParamsSchema = z.object({
    /** Only return cards belonging to the Cardholder with the provided ID. */
    cardholder: z
      .string()
      .max(5000)
      .describe(
        'Only return cards belonging to the Cardholder with the provided ID.'
      )
      .optional(),
    /** Only return cards that were issued during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return cards that were issued during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Only return cards that have the given expiration month. */
    exp_month: z
      .number()
      .int()
      .describe('Only return cards that have the given expiration month.')
      .optional(),
    /** Only return cards that have the given expiration year. */
    exp_year: z
      .number()
      .int()
      .describe('Only return cards that have the given expiration year.')
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Only return cards that have the given last four digits. */
    last4: z
      .string()
      .max(5000)
      .describe('Only return cards that have the given last four digits.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    personalization_design: z.string().max(5000).optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */
    status: z
      .enum(['active', 'canceled', 'inactive'])
      .describe(
        'Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.'
      )
      .optional(),
    /** Only return cards that have the given type. One of `virtual` or `physical`. */
    type: z
      .enum(['physical', 'virtual'])
      .describe(
        'Only return cards that have the given type. One of `virtual` or `physical`.'
      )
      .optional()
  })
  export type GetIssuingCardsParams = z.infer<
    typeof GetIssuingCardsParamsSchema
  >

  export const GetIssuingCardsResponseSchema = z.object({
    data: z.array(IssuingCardSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/cards'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingCardsResponse = z.infer<
    typeof GetIssuingCardsResponseSchema
  >

  export const PostIssuingCardsParamsSchema = z.object({})
  export type PostIssuingCardsParams = z.infer<
    typeof PostIssuingCardsParamsSchema
  >

  export const PostIssuingCardsResponseSchema = IssuingCardSchema
  export type PostIssuingCardsResponse = z.infer<
    typeof PostIssuingCardsResponseSchema
  >

  export const GetIssuingCardsCardParamsSchema = z.object({
    card: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingCardsCardParams = z.infer<
    typeof GetIssuingCardsCardParamsSchema
  >

  export const GetIssuingCardsCardResponseSchema = IssuingCardSchema
  export type GetIssuingCardsCardResponse = z.infer<
    typeof GetIssuingCardsCardResponseSchema
  >

  export const PostIssuingCardsCardParamsSchema = z.object({
    card: z.string().max(5000)
  })
  export type PostIssuingCardsCardParams = z.infer<
    typeof PostIssuingCardsCardParamsSchema
  >

  export const PostIssuingCardsCardResponseSchema = IssuingCardSchema
  export type PostIssuingCardsCardResponse = z.infer<
    typeof PostIssuingCardsCardResponseSchema
  >

  export const GetIssuingDisputesParamsSchema = z.object({
    /** Only return Issuing disputes that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return Issuing disputes that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Select Issuing disputes with the given status. */
    status: z
      .enum(['expired', 'lost', 'submitted', 'unsubmitted', 'won'])
      .describe('Select Issuing disputes with the given status.')
      .optional(),
    /** Select the Issuing dispute for the given transaction. */
    transaction: z
      .string()
      .max(5000)
      .describe('Select the Issuing dispute for the given transaction.')
      .optional()
  })
  export type GetIssuingDisputesParams = z.infer<
    typeof GetIssuingDisputesParamsSchema
  >

  export const GetIssuingDisputesResponseSchema = z.object({
    data: z.array(IssuingDisputeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/disputes'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingDisputesResponse = z.infer<
    typeof GetIssuingDisputesResponseSchema
  >

  export const PostIssuingDisputesParamsSchema = z.object({})
  export type PostIssuingDisputesParams = z.infer<
    typeof PostIssuingDisputesParamsSchema
  >

  export const PostIssuingDisputesResponseSchema = IssuingDisputeSchema
  export type PostIssuingDisputesResponse = z.infer<
    typeof PostIssuingDisputesResponseSchema
  >

  export const GetIssuingDisputesDisputeParamsSchema = z.object({
    dispute: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingDisputesDisputeParams = z.infer<
    typeof GetIssuingDisputesDisputeParamsSchema
  >

  export const GetIssuingDisputesDisputeResponseSchema = IssuingDisputeSchema
  export type GetIssuingDisputesDisputeResponse = z.infer<
    typeof GetIssuingDisputesDisputeResponseSchema
  >

  export const PostIssuingDisputesDisputeParamsSchema = z.object({
    dispute: z.string().max(5000)
  })
  export type PostIssuingDisputesDisputeParams = z.infer<
    typeof PostIssuingDisputesDisputeParamsSchema
  >

  export const PostIssuingDisputesDisputeResponseSchema = IssuingDisputeSchema
  export type PostIssuingDisputesDisputeResponse = z.infer<
    typeof PostIssuingDisputesDisputeResponseSchema
  >

  export const PostIssuingDisputesDisputeSubmitParamsSchema = z.object({
    dispute: z.string().max(5000)
  })
  export type PostIssuingDisputesDisputeSubmitParams = z.infer<
    typeof PostIssuingDisputesDisputeSubmitParamsSchema
  >

  export const PostIssuingDisputesDisputeSubmitResponseSchema =
    IssuingDisputeSchema
  export type PostIssuingDisputesDisputeSubmitResponse = z.infer<
    typeof PostIssuingDisputesDisputeSubmitResponseSchema
  >

  export const GetIssuingPersonalizationDesignsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return personalization designs with the given lookup keys. */
    lookup_keys: z
      .array(z.string().max(200))
      .describe(
        'Only return personalization designs with the given lookup keys.'
      )
      .optional(),
    /** Only return personalization designs with the given preferences. */
    preferences: z
      .object({
        is_default: z.boolean().optional(),
        is_platform_default: z.boolean().optional()
      })
      .describe(
        'Only return personalization designs with the given preferences.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return personalization designs with the given status. */
    status: z
      .enum(['active', 'inactive', 'rejected', 'review'])
      .describe('Only return personalization designs with the given status.')
      .optional()
  })
  export type GetIssuingPersonalizationDesignsParams = z.infer<
    typeof GetIssuingPersonalizationDesignsParamsSchema
  >

  export const GetIssuingPersonalizationDesignsResponseSchema = z.object({
    data: z.array(IssuingPersonalizationDesignSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/personalization_designs'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingPersonalizationDesignsResponse = z.infer<
    typeof GetIssuingPersonalizationDesignsResponseSchema
  >

  export const PostIssuingPersonalizationDesignsParamsSchema = z.object({})
  export type PostIssuingPersonalizationDesignsParams = z.infer<
    typeof PostIssuingPersonalizationDesignsParamsSchema
  >

  export const PostIssuingPersonalizationDesignsResponseSchema =
    IssuingPersonalizationDesignSchema
  export type PostIssuingPersonalizationDesignsResponse = z.infer<
    typeof PostIssuingPersonalizationDesignsResponseSchema
  >

  export const GetIssuingPersonalizationDesignsPersonalizationDesignParamsSchema =
    z.object({
      personalization_design: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetIssuingPersonalizationDesignsPersonalizationDesignParams =
    z.infer<
      typeof GetIssuingPersonalizationDesignsPersonalizationDesignParamsSchema
    >

  export const GetIssuingPersonalizationDesignsPersonalizationDesignResponseSchema =
    IssuingPersonalizationDesignSchema
  export type GetIssuingPersonalizationDesignsPersonalizationDesignResponse =
    z.infer<
      typeof GetIssuingPersonalizationDesignsPersonalizationDesignResponseSchema
    >

  export const PostIssuingPersonalizationDesignsPersonalizationDesignParamsSchema =
    z.object({ personalization_design: z.string().max(5000) })
  export type PostIssuingPersonalizationDesignsPersonalizationDesignParams =
    z.infer<
      typeof PostIssuingPersonalizationDesignsPersonalizationDesignParamsSchema
    >

  export const PostIssuingPersonalizationDesignsPersonalizationDesignResponseSchema =
    IssuingPersonalizationDesignSchema
  export type PostIssuingPersonalizationDesignsPersonalizationDesignResponse =
    z.infer<
      typeof PostIssuingPersonalizationDesignsPersonalizationDesignResponseSchema
    >

  export const GetIssuingPhysicalBundlesParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return physical bundles with the given status. */
    status: z
      .enum(['active', 'inactive', 'review'])
      .describe('Only return physical bundles with the given status.')
      .optional(),
    /** Only return physical bundles with the given type. */
    type: z
      .enum(['custom', 'standard'])
      .describe('Only return physical bundles with the given type.')
      .optional()
  })
  export type GetIssuingPhysicalBundlesParams = z.infer<
    typeof GetIssuingPhysicalBundlesParamsSchema
  >

  export const GetIssuingPhysicalBundlesResponseSchema = z.object({
    data: z.array(IssuingPhysicalBundleSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/physical_bundles'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingPhysicalBundlesResponse = z.infer<
    typeof GetIssuingPhysicalBundlesResponseSchema
  >

  export const GetIssuingPhysicalBundlesPhysicalBundleParamsSchema = z.object({
    physical_bundle: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingPhysicalBundlesPhysicalBundleParams = z.infer<
    typeof GetIssuingPhysicalBundlesPhysicalBundleParamsSchema
  >

  export const GetIssuingPhysicalBundlesPhysicalBundleResponseSchema =
    IssuingPhysicalBundleSchema
  export type GetIssuingPhysicalBundlesPhysicalBundleResponse = z.infer<
    typeof GetIssuingPhysicalBundlesPhysicalBundleResponseSchema
  >

  export const GetIssuingSettlementsSettlementParamsSchema = z.object({
    settlement: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingSettlementsSettlementParams = z.infer<
    typeof GetIssuingSettlementsSettlementParamsSchema
  >

  export const GetIssuingSettlementsSettlementResponseSchema =
    IssuingSettlementSchema
  export type GetIssuingSettlementsSettlementResponse = z.infer<
    typeof GetIssuingSettlementsSettlementResponseSchema
  >

  export const PostIssuingSettlementsSettlementParamsSchema = z.object({
    settlement: z.string().max(5000)
  })
  export type PostIssuingSettlementsSettlementParams = z.infer<
    typeof PostIssuingSettlementsSettlementParamsSchema
  >

  export const PostIssuingSettlementsSettlementResponseSchema =
    IssuingSettlementSchema
  export type PostIssuingSettlementsSettlementResponse = z.infer<
    typeof PostIssuingSettlementsSettlementResponseSchema
  >

  export const GetIssuingTokensParamsSchema = z.object({
    /** The Issuing card identifier to list tokens for. */
    card: z
      .string()
      .max(5000)
      .describe('The Issuing card identifier to list tokens for.'),
    /** Only return Issuing tokens that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return Issuing tokens that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Select Issuing tokens with the given status. */
    status: z
      .enum(['active', 'deleted', 'requested', 'suspended'])
      .describe('Select Issuing tokens with the given status.')
      .optional()
  })
  export type GetIssuingTokensParams = z.infer<
    typeof GetIssuingTokensParamsSchema
  >

  export const GetIssuingTokensResponseSchema = z.object({
    data: z.array(IssuingTokenSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingTokensResponse = z.infer<
    typeof GetIssuingTokensResponseSchema
  >

  export const GetIssuingTokensTokenParamsSchema = z.object({
    token: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingTokensTokenParams = z.infer<
    typeof GetIssuingTokensTokenParamsSchema
  >

  export const GetIssuingTokensTokenResponseSchema = IssuingTokenSchema
  export type GetIssuingTokensTokenResponse = z.infer<
    typeof GetIssuingTokensTokenResponseSchema
  >

  export const PostIssuingTokensTokenParamsSchema = z.object({
    token: z.string().max(5000)
  })
  export type PostIssuingTokensTokenParams = z.infer<
    typeof PostIssuingTokensTokenParamsSchema
  >

  export const PostIssuingTokensTokenResponseSchema = IssuingTokenSchema
  export type PostIssuingTokensTokenResponse = z.infer<
    typeof PostIssuingTokensTokenResponseSchema
  >

  export const GetIssuingTransactionsParamsSchema = z.object({
    /** Only return transactions that belong to the given card. */
    card: z
      .string()
      .max(5000)
      .describe('Only return transactions that belong to the given card.')
      .optional(),
    /** Only return transactions that belong to the given cardholder. */
    cardholder: z
      .string()
      .max(5000)
      .describe('Only return transactions that belong to the given cardholder.')
      .optional(),
    /** Only return transactions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return transactions that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return transactions that have the given type. One of `capture` or `refund`. */
    type: z
      .enum(['capture', 'refund'])
      .describe(
        'Only return transactions that have the given type. One of `capture` or `refund`.'
      )
      .optional()
  })
  export type GetIssuingTransactionsParams = z.infer<
    typeof GetIssuingTransactionsParamsSchema
  >

  export const GetIssuingTransactionsResponseSchema = z.object({
    data: z.array(IssuingTransactionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/issuing/transactions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetIssuingTransactionsResponse = z.infer<
    typeof GetIssuingTransactionsResponseSchema
  >

  export const GetIssuingTransactionsTransactionParamsSchema = z.object({
    transaction: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetIssuingTransactionsTransactionParams = z.infer<
    typeof GetIssuingTransactionsTransactionParamsSchema
  >

  export const GetIssuingTransactionsTransactionResponseSchema =
    IssuingTransactionSchema
  export type GetIssuingTransactionsTransactionResponse = z.infer<
    typeof GetIssuingTransactionsTransactionResponseSchema
  >

  export const PostIssuingTransactionsTransactionParamsSchema = z.object({
    transaction: z.string().max(5000)
  })
  export type PostIssuingTransactionsTransactionParams = z.infer<
    typeof PostIssuingTransactionsTransactionParamsSchema
  >

  export const PostIssuingTransactionsTransactionResponseSchema =
    IssuingTransactionSchema
  export type PostIssuingTransactionsTransactionResponse = z.infer<
    typeof PostIssuingTransactionsTransactionResponseSchema
  >

  export const PostLinkAccountSessionsParamsSchema = z.object({})
  export type PostLinkAccountSessionsParams = z.infer<
    typeof PostLinkAccountSessionsParamsSchema
  >

  export const PostLinkAccountSessionsResponseSchema =
    FinancialConnectionsSessionSchema
  export type PostLinkAccountSessionsResponse = z.infer<
    typeof PostLinkAccountSessionsResponseSchema
  >

  export const GetLinkAccountSessionsSessionParamsSchema = z.object({
    session: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetLinkAccountSessionsSessionParams = z.infer<
    typeof GetLinkAccountSessionsSessionParamsSchema
  >

  export const GetLinkAccountSessionsSessionResponseSchema =
    FinancialConnectionsSessionSchema
  export type GetLinkAccountSessionsSessionResponse = z.infer<
    typeof GetLinkAccountSessionsSessionResponseSchema
  >

  export const GetLinkedAccountsParamsSchema = z.object({
    /** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */
    account_holder: z
      .object({
        account: z.string().max(5000).optional(),
        customer: z.string().max(5000).optional()
      })
      .describe(
        'If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** If present, only return accounts that were collected as part of the given session. */
    session: z
      .string()
      .max(5000)
      .describe(
        'If present, only return accounts that were collected as part of the given session.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetLinkedAccountsParams = z.infer<
    typeof GetLinkedAccountsParamsSchema
  >

  export const GetLinkedAccountsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(FinancialConnectionsAccountSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/financial_connections/accounts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetLinkedAccountsResponse = z.infer<
    typeof GetLinkedAccountsResponseSchema
  >

  export const GetLinkedAccountsAccountParamsSchema = z.object({
    account: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetLinkedAccountsAccountParams = z.infer<
    typeof GetLinkedAccountsAccountParamsSchema
  >

  export const GetLinkedAccountsAccountResponseSchema =
    FinancialConnectionsAccountSchema
  export type GetLinkedAccountsAccountResponse = z.infer<
    typeof GetLinkedAccountsAccountResponseSchema
  >

  export const PostLinkedAccountsAccountDisconnectParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostLinkedAccountsAccountDisconnectParams = z.infer<
    typeof PostLinkedAccountsAccountDisconnectParamsSchema
  >

  export const PostLinkedAccountsAccountDisconnectResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostLinkedAccountsAccountDisconnectResponse = z.infer<
    typeof PostLinkedAccountsAccountDisconnectResponseSchema
  >

  export const GetLinkedAccountsAccountOwnersParamsSchema = z.object({
    account: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The ID of the ownership object to fetch owners from. */
    ownership: z
      .string()
      .max(5000)
      .describe('The ID of the ownership object to fetch owners from.'),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetLinkedAccountsAccountOwnersParams = z.infer<
    typeof GetLinkedAccountsAccountOwnersParamsSchema
  >

  export const GetLinkedAccountsAccountOwnersResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(FinancialConnectionsAccountOwnerSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetLinkedAccountsAccountOwnersResponse = z.infer<
    typeof GetLinkedAccountsAccountOwnersResponseSchema
  >

  export const PostLinkedAccountsAccountRefreshParamsSchema = z.object({
    account: z.string().max(5000)
  })
  export type PostLinkedAccountsAccountRefreshParams = z.infer<
    typeof PostLinkedAccountsAccountRefreshParamsSchema
  >

  export const PostLinkedAccountsAccountRefreshResponseSchema =
    FinancialConnectionsAccountSchema
  export type PostLinkedAccountsAccountRefreshResponse = z.infer<
    typeof PostLinkedAccountsAccountRefreshResponseSchema
  >

  export const GetMandatesMandateParamsSchema = z.object({
    mandate: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetMandatesMandateParams = z.infer<
    typeof GetMandatesMandateParamsSchema
  >

  export const GetMandatesMandateResponseSchema = MandateSchema
  export type GetMandatesMandateResponse = z.infer<
    typeof GetMandatesMandateResponseSchema
  >

  export const GetPaymentIntentsParamsSchema = z.object({
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.'
      )
      .optional(),
    /** Only return PaymentIntents for the customer that this customer ID specifies. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return PaymentIntents for the customer that this customer ID specifies.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPaymentIntentsParams = z.infer<
    typeof GetPaymentIntentsParamsSchema
  >

  export const GetPaymentIntentsResponseSchema = z.object({
    data: z.array(PaymentIntentSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payment_intents'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentIntentsResponse = z.infer<
    typeof GetPaymentIntentsResponseSchema
  >

  export const PostPaymentIntentsParamsSchema = z.object({})
  export type PostPaymentIntentsParams = z.infer<
    typeof PostPaymentIntentsParamsSchema
  >

  export const PostPaymentIntentsResponseSchema = PaymentIntentSchema
  export type PostPaymentIntentsResponse = z.infer<
    typeof PostPaymentIntentsResponseSchema
  >

  export const GetPaymentIntentsSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).'
      )
  })
  export type GetPaymentIntentsSearchParams = z.infer<
    typeof GetPaymentIntentsSearchParamsSchema
  >

  export const GetPaymentIntentsSearchResponseSchema = z.object({
    data: z.array(PaymentIntentSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetPaymentIntentsSearchResponse = z.infer<
    typeof GetPaymentIntentsSearchResponseSchema
  >

  export const GetPaymentIntentsIntentParamsSchema = z.object({
    intent: z.string().max(5000),
    /** The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source. */
    client_secret: z
      .string()
      .max(5000)
      .describe(
        'The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPaymentIntentsIntentParams = z.infer<
    typeof GetPaymentIntentsIntentParamsSchema
  >

  export const GetPaymentIntentsIntentResponseSchema = PaymentIntentSchema
  export type GetPaymentIntentsIntentResponse = z.infer<
    typeof GetPaymentIntentsIntentResponseSchema
  >

  export const PostPaymentIntentsIntentParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostPaymentIntentsIntentParams = z.infer<
    typeof PostPaymentIntentsIntentParamsSchema
  >

  export const PostPaymentIntentsIntentResponseSchema = PaymentIntentSchema
  export type PostPaymentIntentsIntentResponse = z.infer<
    typeof PostPaymentIntentsIntentResponseSchema
  >

  export const PostPaymentIntentsIntentApplyCustomerBalanceParamsSchema =
    z.object({ intent: z.string().max(5000) })
  export type PostPaymentIntentsIntentApplyCustomerBalanceParams = z.infer<
    typeof PostPaymentIntentsIntentApplyCustomerBalanceParamsSchema
  >

  export const PostPaymentIntentsIntentApplyCustomerBalanceResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentApplyCustomerBalanceResponse = z.infer<
    typeof PostPaymentIntentsIntentApplyCustomerBalanceResponseSchema
  >

  export const PostPaymentIntentsIntentCancelParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostPaymentIntentsIntentCancelParams = z.infer<
    typeof PostPaymentIntentsIntentCancelParamsSchema
  >

  export const PostPaymentIntentsIntentCancelResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentCancelResponse = z.infer<
    typeof PostPaymentIntentsIntentCancelResponseSchema
  >

  export const PostPaymentIntentsIntentCaptureParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostPaymentIntentsIntentCaptureParams = z.infer<
    typeof PostPaymentIntentsIntentCaptureParamsSchema
  >

  export const PostPaymentIntentsIntentCaptureResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentCaptureResponse = z.infer<
    typeof PostPaymentIntentsIntentCaptureResponseSchema
  >

  export const PostPaymentIntentsIntentConfirmParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostPaymentIntentsIntentConfirmParams = z.infer<
    typeof PostPaymentIntentsIntentConfirmParamsSchema
  >

  export const PostPaymentIntentsIntentConfirmResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentConfirmResponse = z.infer<
    typeof PostPaymentIntentsIntentConfirmResponseSchema
  >

  export const PostPaymentIntentsIntentIncrementAuthorizationParamsSchema =
    z.object({ intent: z.string().max(5000) })
  export type PostPaymentIntentsIntentIncrementAuthorizationParams = z.infer<
    typeof PostPaymentIntentsIntentIncrementAuthorizationParamsSchema
  >

  export const PostPaymentIntentsIntentIncrementAuthorizationResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentIncrementAuthorizationResponse = z.infer<
    typeof PostPaymentIntentsIntentIncrementAuthorizationResponseSchema
  >

  export const PostPaymentIntentsIntentVerifyMicrodepositsParamsSchema =
    z.object({ intent: z.string().max(5000) })
  export type PostPaymentIntentsIntentVerifyMicrodepositsParams = z.infer<
    typeof PostPaymentIntentsIntentVerifyMicrodepositsParamsSchema
  >

  export const PostPaymentIntentsIntentVerifyMicrodepositsResponseSchema =
    PaymentIntentSchema
  export type PostPaymentIntentsIntentVerifyMicrodepositsResponse = z.infer<
    typeof PostPaymentIntentsIntentVerifyMicrodepositsResponseSchema
  >

  export const GetPaymentLinksParamsSchema = z.object({
    /** Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links). */
    active: z
      .boolean()
      .describe(
        'Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPaymentLinksParams = z.infer<
    typeof GetPaymentLinksParamsSchema
  >

  export const GetPaymentLinksResponseSchema = z.object({
    data: z.array(PaymentLinkSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payment_links'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentLinksResponse = z.infer<
    typeof GetPaymentLinksResponseSchema
  >

  export const PostPaymentLinksParamsSchema = z.object({})
  export type PostPaymentLinksParams = z.infer<
    typeof PostPaymentLinksParamsSchema
  >

  export const PostPaymentLinksResponseSchema = PaymentLinkSchema
  export type PostPaymentLinksResponse = z.infer<
    typeof PostPaymentLinksResponseSchema
  >

  export const GetPaymentLinksPaymentLinkParamsSchema = z.object({
    payment_link: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPaymentLinksPaymentLinkParams = z.infer<
    typeof GetPaymentLinksPaymentLinkParamsSchema
  >

  export const GetPaymentLinksPaymentLinkResponseSchema = PaymentLinkSchema
  export type GetPaymentLinksPaymentLinkResponse = z.infer<
    typeof GetPaymentLinksPaymentLinkResponseSchema
  >

  export const PostPaymentLinksPaymentLinkParamsSchema = z.object({
    payment_link: z.string().max(5000)
  })
  export type PostPaymentLinksPaymentLinkParams = z.infer<
    typeof PostPaymentLinksPaymentLinkParamsSchema
  >

  export const PostPaymentLinksPaymentLinkResponseSchema = PaymentLinkSchema
  export type PostPaymentLinksPaymentLinkResponse = z.infer<
    typeof PostPaymentLinksPaymentLinkResponseSchema
  >

  export const GetPaymentLinksPaymentLinkLineItemsParamsSchema = z.object({
    payment_link: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPaymentLinksPaymentLinkLineItemsParams = z.infer<
    typeof GetPaymentLinksPaymentLinkLineItemsParamsSchema
  >

  export const GetPaymentLinksPaymentLinkLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(ItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentLinksPaymentLinkLineItemsResponse = z.infer<
    typeof GetPaymentLinksPaymentLinkLineItemsResponseSchema
  >

  export const GetPaymentMethodConfigurationsParamsSchema = z.object({
    /** The Connect application to filter by. */
    application: z
      .union([z.string().max(100), z.literal('')])
      .describe('The Connect application to filter by.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPaymentMethodConfigurationsParams = z.infer<
    typeof GetPaymentMethodConfigurationsParamsSchema
  >

  export const GetPaymentMethodConfigurationsResponseSchema = z.object({
    data: z.array(PaymentMethodConfigurationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payment_method_configurations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentMethodConfigurationsResponse = z.infer<
    typeof GetPaymentMethodConfigurationsResponseSchema
  >

  export const PostPaymentMethodConfigurationsParamsSchema = z.object({})
  export type PostPaymentMethodConfigurationsParams = z.infer<
    typeof PostPaymentMethodConfigurationsParamsSchema
  >

  export const PostPaymentMethodConfigurationsResponseSchema =
    PaymentMethodConfigurationSchema
  export type PostPaymentMethodConfigurationsResponse = z.infer<
    typeof PostPaymentMethodConfigurationsResponseSchema
  >

  export const GetPaymentMethodConfigurationsConfigurationParamsSchema =
    z.object({
      configuration: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetPaymentMethodConfigurationsConfigurationParams = z.infer<
    typeof GetPaymentMethodConfigurationsConfigurationParamsSchema
  >

  export const GetPaymentMethodConfigurationsConfigurationResponseSchema =
    PaymentMethodConfigurationSchema
  export type GetPaymentMethodConfigurationsConfigurationResponse = z.infer<
    typeof GetPaymentMethodConfigurationsConfigurationResponseSchema
  >

  export const PostPaymentMethodConfigurationsConfigurationParamsSchema =
    z.object({ configuration: z.string().max(5000) })
  export type PostPaymentMethodConfigurationsConfigurationParams = z.infer<
    typeof PostPaymentMethodConfigurationsConfigurationParamsSchema
  >

  export const PostPaymentMethodConfigurationsConfigurationResponseSchema =
    PaymentMethodConfigurationSchema
  export type PostPaymentMethodConfigurationsConfigurationResponse = z.infer<
    typeof PostPaymentMethodConfigurationsConfigurationResponseSchema
  >

  export const GetPaymentMethodDomainsParamsSchema = z.object({
    /** The domain name that this payment method domain object represents. */
    domain_name: z
      .string()
      .max(5000)
      .describe(
        'The domain name that this payment method domain object represents.'
      )
      .optional(),
    /** Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements */
    enabled: z
      .boolean()
      .describe(
        'Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPaymentMethodDomainsParams = z.infer<
    typeof GetPaymentMethodDomainsParamsSchema
  >

  export const GetPaymentMethodDomainsResponseSchema = z.object({
    data: z.array(PaymentMethodDomainSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payment_method_domains'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentMethodDomainsResponse = z.infer<
    typeof GetPaymentMethodDomainsResponseSchema
  >

  export const PostPaymentMethodDomainsParamsSchema = z.object({})
  export type PostPaymentMethodDomainsParams = z.infer<
    typeof PostPaymentMethodDomainsParamsSchema
  >

  export const PostPaymentMethodDomainsResponseSchema =
    PaymentMethodDomainSchema
  export type PostPaymentMethodDomainsResponse = z.infer<
    typeof PostPaymentMethodDomainsResponseSchema
  >

  export const GetPaymentMethodDomainsPaymentMethodDomainParamsSchema =
    z.object({
      payment_method_domain: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetPaymentMethodDomainsPaymentMethodDomainParams = z.infer<
    typeof GetPaymentMethodDomainsPaymentMethodDomainParamsSchema
  >

  export const GetPaymentMethodDomainsPaymentMethodDomainResponseSchema =
    PaymentMethodDomainSchema
  export type GetPaymentMethodDomainsPaymentMethodDomainResponse = z.infer<
    typeof GetPaymentMethodDomainsPaymentMethodDomainResponseSchema
  >

  export const PostPaymentMethodDomainsPaymentMethodDomainParamsSchema =
    z.object({ payment_method_domain: z.string().max(5000) })
  export type PostPaymentMethodDomainsPaymentMethodDomainParams = z.infer<
    typeof PostPaymentMethodDomainsPaymentMethodDomainParamsSchema
  >

  export const PostPaymentMethodDomainsPaymentMethodDomainResponseSchema =
    PaymentMethodDomainSchema
  export type PostPaymentMethodDomainsPaymentMethodDomainResponse = z.infer<
    typeof PostPaymentMethodDomainsPaymentMethodDomainResponseSchema
  >

  export const PostPaymentMethodDomainsPaymentMethodDomainValidateParamsSchema =
    z.object({ payment_method_domain: z.string().max(5000) })
  export type PostPaymentMethodDomainsPaymentMethodDomainValidateParams =
    z.infer<
      typeof PostPaymentMethodDomainsPaymentMethodDomainValidateParamsSchema
    >

  export const PostPaymentMethodDomainsPaymentMethodDomainValidateResponseSchema =
    PaymentMethodDomainSchema
  export type PostPaymentMethodDomainsPaymentMethodDomainValidateResponse =
    z.infer<
      typeof PostPaymentMethodDomainsPaymentMethodDomainValidateResponseSchema
    >

  export const GetPaymentMethodsParamsSchema = z.object({
    /** The ID of the customer whose PaymentMethods will be retrieved. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'The ID of the customer whose PaymentMethods will be retrieved.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */
    type: z
      .enum([
        'acss_debit',
        'affirm',
        'afterpay_clearpay',
        'alipay',
        'alma',
        'amazon_pay',
        'au_becs_debit',
        'bacs_debit',
        'bancontact',
        'blik',
        'boleto',
        'card',
        'cashapp',
        'customer_balance',
        'eps',
        'fpx',
        'giropay',
        'grabpay',
        'ideal',
        'kakao_pay',
        'klarna',
        'konbini',
        'kr_card',
        'link',
        'mobilepay',
        'multibanco',
        'naver_pay',
        'oxxo',
        'p24',
        'pay_by_bank',
        'payco',
        'paynow',
        'paypal',
        'pix',
        'promptpay',
        'revolut_pay',
        'samsung_pay',
        'sepa_debit',
        'sofort',
        'swish',
        'twint',
        'us_bank_account',
        'wechat_pay',
        'zip'
      ])
      .describe(
        'An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.'
      )
      .optional()
  })
  export type GetPaymentMethodsParams = z.infer<
    typeof GetPaymentMethodsParamsSchema
  >

  export const GetPaymentMethodsResponseSchema = z.object({
    data: z.array(PaymentMethodSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payment_methods'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPaymentMethodsResponse = z.infer<
    typeof GetPaymentMethodsResponseSchema
  >

  export const PostPaymentMethodsParamsSchema = z.object({})
  export type PostPaymentMethodsParams = z.infer<
    typeof PostPaymentMethodsParamsSchema
  >

  export const PostPaymentMethodsResponseSchema = PaymentMethodSchema
  export type PostPaymentMethodsResponse = z.infer<
    typeof PostPaymentMethodsResponseSchema
  >

  export const GetPaymentMethodsPaymentMethodParamsSchema = z.object({
    payment_method: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPaymentMethodsPaymentMethodParams = z.infer<
    typeof GetPaymentMethodsPaymentMethodParamsSchema
  >

  export const GetPaymentMethodsPaymentMethodResponseSchema =
    PaymentMethodSchema
  export type GetPaymentMethodsPaymentMethodResponse = z.infer<
    typeof GetPaymentMethodsPaymentMethodResponseSchema
  >

  export const PostPaymentMethodsPaymentMethodParamsSchema = z.object({
    payment_method: z.string().max(5000)
  })
  export type PostPaymentMethodsPaymentMethodParams = z.infer<
    typeof PostPaymentMethodsPaymentMethodParamsSchema
  >

  export const PostPaymentMethodsPaymentMethodResponseSchema =
    PaymentMethodSchema
  export type PostPaymentMethodsPaymentMethodResponse = z.infer<
    typeof PostPaymentMethodsPaymentMethodResponseSchema
  >

  export const PostPaymentMethodsPaymentMethodAttachParamsSchema = z.object({
    payment_method: z.string().max(5000)
  })
  export type PostPaymentMethodsPaymentMethodAttachParams = z.infer<
    typeof PostPaymentMethodsPaymentMethodAttachParamsSchema
  >

  export const PostPaymentMethodsPaymentMethodAttachResponseSchema =
    PaymentMethodSchema
  export type PostPaymentMethodsPaymentMethodAttachResponse = z.infer<
    typeof PostPaymentMethodsPaymentMethodAttachResponseSchema
  >

  export const PostPaymentMethodsPaymentMethodDetachParamsSchema = z.object({
    payment_method: z.string().max(5000)
  })
  export type PostPaymentMethodsPaymentMethodDetachParams = z.infer<
    typeof PostPaymentMethodsPaymentMethodDetachParamsSchema
  >

  export const PostPaymentMethodsPaymentMethodDetachResponseSchema =
    PaymentMethodSchema
  export type PostPaymentMethodsPaymentMethodDetachResponse = z.infer<
    typeof PostPaymentMethodsPaymentMethodDetachResponseSchema
  >

  export const GetPayoutsParamsSchema = z.object({
    /** Only return payouts that are expected to arrive during the given date interval. */
    arrival_date: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return payouts that are expected to arrive during the given date interval.'
      )
      .optional(),
    /** Only return payouts that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return payouts that were created during the given date interval.'
      )
      .optional(),
    /** The ID of an external account - only return payouts sent to this external account. */
    destination: z
      .string()
      .describe(
        'The ID of an external account - only return payouts sent to this external account.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */
    status: z
      .string()
      .max(5000)
      .describe(
        'Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.'
      )
      .optional()
  })
  export type GetPayoutsParams = z.infer<typeof GetPayoutsParamsSchema>

  export const GetPayoutsResponseSchema = z.object({
    data: z.array(PayoutSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/payouts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPayoutsResponse = z.infer<typeof GetPayoutsResponseSchema>

  export const PostPayoutsParamsSchema = z.object({})
  export type PostPayoutsParams = z.infer<typeof PostPayoutsParamsSchema>

  export const PostPayoutsResponseSchema = PayoutSchema
  export type PostPayoutsResponse = z.infer<typeof PostPayoutsResponseSchema>

  export const GetPayoutsPayoutParamsSchema = z.object({
    payout: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPayoutsPayoutParams = z.infer<
    typeof GetPayoutsPayoutParamsSchema
  >

  export const GetPayoutsPayoutResponseSchema = PayoutSchema
  export type GetPayoutsPayoutResponse = z.infer<
    typeof GetPayoutsPayoutResponseSchema
  >

  export const PostPayoutsPayoutParamsSchema = z.object({
    payout: z.string().max(5000)
  })
  export type PostPayoutsPayoutParams = z.infer<
    typeof PostPayoutsPayoutParamsSchema
  >

  export const PostPayoutsPayoutResponseSchema = PayoutSchema
  export type PostPayoutsPayoutResponse = z.infer<
    typeof PostPayoutsPayoutResponseSchema
  >

  export const PostPayoutsPayoutCancelParamsSchema = z.object({
    payout: z.string().max(5000)
  })
  export type PostPayoutsPayoutCancelParams = z.infer<
    typeof PostPayoutsPayoutCancelParamsSchema
  >

  export const PostPayoutsPayoutCancelResponseSchema = PayoutSchema
  export type PostPayoutsPayoutCancelResponse = z.infer<
    typeof PostPayoutsPayoutCancelResponseSchema
  >

  export const PostPayoutsPayoutReverseParamsSchema = z.object({
    payout: z.string().max(5000)
  })
  export type PostPayoutsPayoutReverseParams = z.infer<
    typeof PostPayoutsPayoutReverseParamsSchema
  >

  export const PostPayoutsPayoutReverseResponseSchema = PayoutSchema
  export type PostPayoutsPayoutReverseResponse = z.infer<
    typeof PostPayoutsPayoutReverseResponseSchema
  >

  export const GetPlansParamsSchema = z.object({
    /** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */
    active: z
      .boolean()
      .describe(
        'Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).'
      )
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return plans for the given product. */
    product: z
      .string()
      .max(5000)
      .describe('Only return plans for the given product.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPlansParams = z.infer<typeof GetPlansParamsSchema>

  export const GetPlansResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(PlanSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/plans'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPlansResponse = z.infer<typeof GetPlansResponseSchema>

  export const PostPlansParamsSchema = z.object({})
  export type PostPlansParams = z.infer<typeof PostPlansParamsSchema>

  export const PostPlansResponseSchema = PlanSchema
  export type PostPlansResponse = z.infer<typeof PostPlansResponseSchema>

  export const GetPlansPlanParamsSchema = z.object({
    plan: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPlansPlanParams = z.infer<typeof GetPlansPlanParamsSchema>

  export const GetPlansPlanResponseSchema = PlanSchema
  export type GetPlansPlanResponse = z.infer<typeof GetPlansPlanResponseSchema>

  export const PostPlansPlanParamsSchema = z.object({
    plan: z.string().max(5000)
  })
  export type PostPlansPlanParams = z.infer<typeof PostPlansPlanParamsSchema>

  export const PostPlansPlanResponseSchema = PlanSchema
  export type PostPlansPlanResponse = z.infer<
    typeof PostPlansPlanResponseSchema
  >

  export const DeletePlansPlanParamsSchema = z.object({
    plan: z.string().max(5000)
  })
  export type DeletePlansPlanParams = z.infer<
    typeof DeletePlansPlanParamsSchema
  >

  export const DeletePlansPlanResponseSchema = DeletedPlanSchema
  export type DeletePlansPlanResponse = z.infer<
    typeof DeletePlansPlanResponseSchema
  >

  export const GetPricesParamsSchema = z.object({
    /** Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices). */
    active: z
      .boolean()
      .describe(
        'Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).'
      )
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** Only return prices for the given currency. */
    currency: z
      .string()
      .describe('Only return prices for the given currency.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return the price with these lookup_keys, if any exist. You can specify up to 10 lookup_keys. */
    lookup_keys: z
      .array(z.string().max(5000))
      .describe(
        'Only return the price with these lookup_keys, if any exist. You can specify up to 10 lookup_keys.'
      )
      .optional(),
    /** Only return prices for the given product. */
    product: z
      .string()
      .max(5000)
      .describe('Only return prices for the given product.')
      .optional(),
    /** Only return prices with these recurring fields. */
    recurring: z
      .object({
        interval: z.enum(['day', 'month', 'week', 'year']).optional(),
        meter: z.string().max(5000).optional(),
        usage_type: z.enum(['licensed', 'metered']).optional()
      })
      .describe('Only return prices with these recurring fields.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return prices of type `recurring` or `one_time`. */
    type: z
      .enum(['one_time', 'recurring'])
      .describe('Only return prices of type `recurring` or `one_time`.')
      .optional()
  })
  export type GetPricesParams = z.infer<typeof GetPricesParamsSchema>

  export const GetPricesResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(PriceSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/prices'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPricesResponse = z.infer<typeof GetPricesResponseSchema>

  export const PostPricesParamsSchema = z.object({})
  export type PostPricesParams = z.infer<typeof PostPricesParamsSchema>

  export const PostPricesResponseSchema = PriceSchema
  export type PostPricesResponse = z.infer<typeof PostPricesResponseSchema>

  export const GetPricesSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).'
      )
  })
  export type GetPricesSearchParams = z.infer<
    typeof GetPricesSearchParamsSchema
  >

  export const GetPricesSearchResponseSchema = z.object({
    data: z.array(PriceSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetPricesSearchResponse = z.infer<
    typeof GetPricesSearchResponseSchema
  >

  export const GetPricesPriceParamsSchema = z.object({
    price: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPricesPriceParams = z.infer<typeof GetPricesPriceParamsSchema>

  export const GetPricesPriceResponseSchema = PriceSchema
  export type GetPricesPriceResponse = z.infer<
    typeof GetPricesPriceResponseSchema
  >

  export const PostPricesPriceParamsSchema = z.object({
    price: z.string().max(5000)
  })
  export type PostPricesPriceParams = z.infer<
    typeof PostPricesPriceParamsSchema
  >

  export const PostPricesPriceResponseSchema = PriceSchema
  export type PostPricesPriceResponse = z.infer<
    typeof PostPricesPriceResponseSchema
  >

  export const GetProductsParamsSchema = z.object({
    /** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */
    active: z
      .boolean()
      .describe(
        'Only return products that are active or inactive (e.g., pass `false` to list all inactive products).'
      )
      .optional(),
    /** Only return products that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return products that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before). */
    ids: z
      .array(z.string().max(5000))
      .describe(
        'Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return products that can be shipped (i.e., physical, not digital products). */
    shippable: z
      .boolean()
      .describe(
        'Only return products that can be shipped (i.e., physical, not digital products).'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return products with the given url. */
    url: z
      .string()
      .max(5000)
      .describe('Only return products with the given url.')
      .optional()
  })
  export type GetProductsParams = z.infer<typeof GetProductsParamsSchema>

  export const GetProductsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(ProductSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/products'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetProductsResponse = z.infer<typeof GetProductsResponseSchema>

  export const PostProductsParamsSchema = z.object({})
  export type PostProductsParams = z.infer<typeof PostProductsParamsSchema>

  export const PostProductsResponseSchema = ProductSchema
  export type PostProductsResponse = z.infer<typeof PostProductsResponseSchema>

  export const GetProductsSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).'
      )
  })
  export type GetProductsSearchParams = z.infer<
    typeof GetProductsSearchParamsSchema
  >

  export const GetProductsSearchResponseSchema = z.object({
    data: z.array(ProductSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetProductsSearchResponse = z.infer<
    typeof GetProductsSearchResponseSchema
  >

  export const GetProductsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetProductsIdParams = z.infer<typeof GetProductsIdParamsSchema>

  export const GetProductsIdResponseSchema = ProductSchema
  export type GetProductsIdResponse = z.infer<
    typeof GetProductsIdResponseSchema
  >

  export const PostProductsIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostProductsIdParams = z.infer<typeof PostProductsIdParamsSchema>

  export const PostProductsIdResponseSchema = ProductSchema
  export type PostProductsIdResponse = z.infer<
    typeof PostProductsIdResponseSchema
  >

  export const DeleteProductsIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type DeleteProductsIdParams = z.infer<
    typeof DeleteProductsIdParamsSchema
  >

  export const DeleteProductsIdResponseSchema = DeletedProductSchema
  export type DeleteProductsIdResponse = z.infer<
    typeof DeleteProductsIdResponseSchema
  >

  export const GetProductsProductFeaturesParamsSchema = z.object({
    product: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetProductsProductFeaturesParams = z.infer<
    typeof GetProductsProductFeaturesParamsSchema
  >

  export const GetProductsProductFeaturesResponseSchema = z.object({
    data: z.array(ProductFeatureSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetProductsProductFeaturesResponse = z.infer<
    typeof GetProductsProductFeaturesResponseSchema
  >

  export const PostProductsProductFeaturesParamsSchema = z.object({
    product: z.string().max(5000)
  })
  export type PostProductsProductFeaturesParams = z.infer<
    typeof PostProductsProductFeaturesParamsSchema
  >

  export const PostProductsProductFeaturesResponseSchema = ProductFeatureSchema
  export type PostProductsProductFeaturesResponse = z.infer<
    typeof PostProductsProductFeaturesResponseSchema
  >

  export const GetProductsProductFeaturesIdParamsSchema = z.object({
    /** The ID of the product_feature. */
    id: z.string().max(5000).describe('The ID of the product_feature.'),
    /** The ID of the product. */
    product: z.string().max(5000).describe('The ID of the product.'),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetProductsProductFeaturesIdParams = z.infer<
    typeof GetProductsProductFeaturesIdParamsSchema
  >

  export const GetProductsProductFeaturesIdResponseSchema = ProductFeatureSchema
  export type GetProductsProductFeaturesIdResponse = z.infer<
    typeof GetProductsProductFeaturesIdResponseSchema
  >

  export const DeleteProductsProductFeaturesIdParamsSchema = z.object({
    id: z.string().max(5000),
    product: z.string().max(5000)
  })
  export type DeleteProductsProductFeaturesIdParams = z.infer<
    typeof DeleteProductsProductFeaturesIdParamsSchema
  >

  export const DeleteProductsProductFeaturesIdResponseSchema =
    DeletedProductFeatureSchema
  export type DeleteProductsProductFeaturesIdResponse = z.infer<
    typeof DeleteProductsProductFeaturesIdResponseSchema
  >

  export const GetPromotionCodesParamsSchema = z.object({
    /** Filter promotion codes by whether they are active. */
    active: z
      .boolean()
      .describe('Filter promotion codes by whether they are active.')
      .optional(),
    /** Only return promotion codes that have this case-insensitive code. */
    code: z
      .string()
      .max(5000)
      .describe(
        'Only return promotion codes that have this case-insensitive code.'
      )
      .optional(),
    /** Only return promotion codes for this coupon. */
    coupon: z
      .string()
      .max(5000)
      .describe('Only return promotion codes for this coupon.')
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** Only return promotion codes that are restricted to this customer. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return promotion codes that are restricted to this customer.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetPromotionCodesParams = z.infer<
    typeof GetPromotionCodesParamsSchema
  >

  export const GetPromotionCodesResponseSchema = z.object({
    data: z.array(PromotionCodeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/promotion_codes'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetPromotionCodesResponse = z.infer<
    typeof GetPromotionCodesResponseSchema
  >

  export const PostPromotionCodesParamsSchema = z.object({})
  export type PostPromotionCodesParams = z.infer<
    typeof PostPromotionCodesParamsSchema
  >

  export const PostPromotionCodesResponseSchema = PromotionCodeSchema
  export type PostPromotionCodesResponse = z.infer<
    typeof PostPromotionCodesResponseSchema
  >

  export const GetPromotionCodesPromotionCodeParamsSchema = z.object({
    promotion_code: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetPromotionCodesPromotionCodeParams = z.infer<
    typeof GetPromotionCodesPromotionCodeParamsSchema
  >

  export const GetPromotionCodesPromotionCodeResponseSchema =
    PromotionCodeSchema
  export type GetPromotionCodesPromotionCodeResponse = z.infer<
    typeof GetPromotionCodesPromotionCodeResponseSchema
  >

  export const PostPromotionCodesPromotionCodeParamsSchema = z.object({
    promotion_code: z.string().max(5000)
  })
  export type PostPromotionCodesPromotionCodeParams = z.infer<
    typeof PostPromotionCodesPromotionCodeParamsSchema
  >

  export const PostPromotionCodesPromotionCodeResponseSchema =
    PromotionCodeSchema
  export type PostPromotionCodesPromotionCodeResponse = z.infer<
    typeof PostPromotionCodesPromotionCodeResponseSchema
  >

  export const GetQuotesParamsSchema = z.object({
    /** The ID of the customer whose quotes will be retrieved. */
    customer: z
      .string()
      .max(5000)
      .describe('The ID of the customer whose quotes will be retrieved.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The status of the quote. */
    status: z
      .enum(['accepted', 'canceled', 'draft', 'open'])
      .describe('The status of the quote.')
      .optional(),
    /** Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set. */
    test_clock: z
      .string()
      .max(5000)
      .describe(
        'Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.'
      )
      .optional()
  })
  export type GetQuotesParams = z.infer<typeof GetQuotesParamsSchema>

  export const GetQuotesResponseSchema = z.object({
    data: z.array(QuoteSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/quotes'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetQuotesResponse = z.infer<typeof GetQuotesResponseSchema>

  export const PostQuotesParamsSchema = z.object({})
  export type PostQuotesParams = z.infer<typeof PostQuotesParamsSchema>

  export const PostQuotesResponseSchema = QuoteSchema
  export type PostQuotesResponse = z.infer<typeof PostQuotesResponseSchema>

  export const GetQuotesQuoteParamsSchema = z.object({
    quote: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetQuotesQuoteParams = z.infer<typeof GetQuotesQuoteParamsSchema>

  export const GetQuotesQuoteResponseSchema = QuoteSchema
  export type GetQuotesQuoteResponse = z.infer<
    typeof GetQuotesQuoteResponseSchema
  >

  export const PostQuotesQuoteParamsSchema = z.object({
    quote: z.string().max(5000)
  })
  export type PostQuotesQuoteParams = z.infer<
    typeof PostQuotesQuoteParamsSchema
  >

  export const PostQuotesQuoteResponseSchema = QuoteSchema
  export type PostQuotesQuoteResponse = z.infer<
    typeof PostQuotesQuoteResponseSchema
  >

  export const PostQuotesQuoteAcceptParamsSchema = z.object({
    quote: z.string().max(5000)
  })
  export type PostQuotesQuoteAcceptParams = z.infer<
    typeof PostQuotesQuoteAcceptParamsSchema
  >

  export const PostQuotesQuoteAcceptResponseSchema = QuoteSchema
  export type PostQuotesQuoteAcceptResponse = z.infer<
    typeof PostQuotesQuoteAcceptResponseSchema
  >

  export const PostQuotesQuoteCancelParamsSchema = z.object({
    quote: z.string().max(5000)
  })
  export type PostQuotesQuoteCancelParams = z.infer<
    typeof PostQuotesQuoteCancelParamsSchema
  >

  export const PostQuotesQuoteCancelResponseSchema = QuoteSchema
  export type PostQuotesQuoteCancelResponse = z.infer<
    typeof PostQuotesQuoteCancelResponseSchema
  >

  export const GetQuotesQuoteComputedUpfrontLineItemsParamsSchema = z.object({
    quote: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetQuotesQuoteComputedUpfrontLineItemsParams = z.infer<
    typeof GetQuotesQuoteComputedUpfrontLineItemsParamsSchema
  >

  export const GetQuotesQuoteComputedUpfrontLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(ItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetQuotesQuoteComputedUpfrontLineItemsResponse = z.infer<
    typeof GetQuotesQuoteComputedUpfrontLineItemsResponseSchema
  >

  export const PostQuotesQuoteFinalizeParamsSchema = z.object({
    quote: z.string().max(5000)
  })
  export type PostQuotesQuoteFinalizeParams = z.infer<
    typeof PostQuotesQuoteFinalizeParamsSchema
  >

  export const PostQuotesQuoteFinalizeResponseSchema = QuoteSchema
  export type PostQuotesQuoteFinalizeResponse = z.infer<
    typeof PostQuotesQuoteFinalizeResponseSchema
  >

  export const GetQuotesQuoteLineItemsParamsSchema = z.object({
    quote: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetQuotesQuoteLineItemsParams = z.infer<
    typeof GetQuotesQuoteLineItemsParamsSchema
  >

  export const GetQuotesQuoteLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(ItemSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetQuotesQuoteLineItemsResponse = z.infer<
    typeof GetQuotesQuoteLineItemsResponseSchema
  >

  export const GetQuotesQuotePdfParamsSchema = z.object({
    quote: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetQuotesQuotePdfParams = z.infer<
    typeof GetQuotesQuotePdfParamsSchema
  >

  export type GetQuotesQuotePdfResponse = undefined

  export const GetRadarEarlyFraudWarningsParamsSchema = z.object({
    /** Only return early fraud warnings for the charge specified by this charge ID. */
    charge: z
      .string()
      .describe(
        'Only return early fraud warnings for the charge specified by this charge ID.'
      )
      .optional(),
    /** Only return early fraud warnings that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return early fraud warnings that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
    payment_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetRadarEarlyFraudWarningsParams = z.infer<
    typeof GetRadarEarlyFraudWarningsParamsSchema
  >

  export const GetRadarEarlyFraudWarningsResponseSchema = z.object({
    data: z.array(RadarEarlyFraudWarningSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/radar/early_fraud_warnings'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetRadarEarlyFraudWarningsResponse = z.infer<
    typeof GetRadarEarlyFraudWarningsResponseSchema
  >

  export const GetRadarEarlyFraudWarningsEarlyFraudWarningParamsSchema =
    z.object({
      early_fraud_warning: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetRadarEarlyFraudWarningsEarlyFraudWarningParams = z.infer<
    typeof GetRadarEarlyFraudWarningsEarlyFraudWarningParamsSchema
  >

  export const GetRadarEarlyFraudWarningsEarlyFraudWarningResponseSchema =
    RadarEarlyFraudWarningSchema
  export type GetRadarEarlyFraudWarningsEarlyFraudWarningResponse = z.infer<
    typeof GetRadarEarlyFraudWarningsEarlyFraudWarningResponseSchema
  >

  export const GetRadarValueListItemsParamsSchema = z.object({
    /** Only return items that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return items that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Return items belonging to the parent list whose value matches the specified value (using an "is like" match). */
    value: z
      .string()
      .max(800)
      .describe(
        'Return items belonging to the parent list whose value matches the specified value (using an "is like" match).'
      )
      .optional(),
    /** Identifier for the parent value list this item belongs to. */
    value_list: z
      .string()
      .max(5000)
      .describe('Identifier for the parent value list this item belongs to.')
  })
  export type GetRadarValueListItemsParams = z.infer<
    typeof GetRadarValueListItemsParamsSchema
  >

  export const GetRadarValueListItemsResponseSchema = z.object({
    data: z.array(RadarValueListItemSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/radar/value_list_items'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetRadarValueListItemsResponse = z.infer<
    typeof GetRadarValueListItemsResponseSchema
  >

  export const PostRadarValueListItemsParamsSchema = z.object({})
  export type PostRadarValueListItemsParams = z.infer<
    typeof PostRadarValueListItemsParamsSchema
  >

  export const PostRadarValueListItemsResponseSchema = RadarValueListItemSchema
  export type PostRadarValueListItemsResponse = z.infer<
    typeof PostRadarValueListItemsResponseSchema
  >

  export const GetRadarValueListItemsItemParamsSchema = z.object({
    item: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetRadarValueListItemsItemParams = z.infer<
    typeof GetRadarValueListItemsItemParamsSchema
  >

  export const GetRadarValueListItemsItemResponseSchema =
    RadarValueListItemSchema
  export type GetRadarValueListItemsItemResponse = z.infer<
    typeof GetRadarValueListItemsItemResponseSchema
  >

  export const DeleteRadarValueListItemsItemParamsSchema = z.object({
    item: z.string().max(5000)
  })
  export type DeleteRadarValueListItemsItemParams = z.infer<
    typeof DeleteRadarValueListItemsItemParamsSchema
  >

  export const DeleteRadarValueListItemsItemResponseSchema =
    DeletedRadarValueListItemSchema
  export type DeleteRadarValueListItemsItemResponse = z.infer<
    typeof DeleteRadarValueListItemsItemResponseSchema
  >

  export const GetRadarValueListsParamsSchema = z.object({
    /** The alias used to reference the value list when writing rules. */
    alias: z
      .string()
      .max(100)
      .describe(
        'The alias used to reference the value list when writing rules.'
      )
      .optional(),
    /** A value contained within a value list - returns all value lists containing this value. */
    contains: z
      .string()
      .max(800)
      .describe(
        'A value contained within a value list - returns all value lists containing this value.'
      )
      .optional(),
    /** Only return value lists that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return value lists that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetRadarValueListsParams = z.infer<
    typeof GetRadarValueListsParamsSchema
  >

  export const GetRadarValueListsResponseSchema = z.object({
    data: z.array(RadarValueListSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/radar/value_lists'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetRadarValueListsResponse = z.infer<
    typeof GetRadarValueListsResponseSchema
  >

  export const PostRadarValueListsParamsSchema = z.object({})
  export type PostRadarValueListsParams = z.infer<
    typeof PostRadarValueListsParamsSchema
  >

  export const PostRadarValueListsResponseSchema = RadarValueListSchema
  export type PostRadarValueListsResponse = z.infer<
    typeof PostRadarValueListsResponseSchema
  >

  export const GetRadarValueListsValueListParamsSchema = z.object({
    value_list: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetRadarValueListsValueListParams = z.infer<
    typeof GetRadarValueListsValueListParamsSchema
  >

  export const GetRadarValueListsValueListResponseSchema = RadarValueListSchema
  export type GetRadarValueListsValueListResponse = z.infer<
    typeof GetRadarValueListsValueListResponseSchema
  >

  export const PostRadarValueListsValueListParamsSchema = z.object({
    value_list: z.string().max(5000)
  })
  export type PostRadarValueListsValueListParams = z.infer<
    typeof PostRadarValueListsValueListParamsSchema
  >

  export const PostRadarValueListsValueListResponseSchema = RadarValueListSchema
  export type PostRadarValueListsValueListResponse = z.infer<
    typeof PostRadarValueListsValueListResponseSchema
  >

  export const DeleteRadarValueListsValueListParamsSchema = z.object({
    value_list: z.string().max(5000)
  })
  export type DeleteRadarValueListsValueListParams = z.infer<
    typeof DeleteRadarValueListsValueListParamsSchema
  >

  export const DeleteRadarValueListsValueListResponseSchema =
    DeletedRadarValueListSchema
  export type DeleteRadarValueListsValueListResponse = z.infer<
    typeof DeleteRadarValueListsValueListResponseSchema
  >

  export const GetRefundsParamsSchema = z.object({
    /** Only return refunds for the charge specified by this charge ID. */
    charge: z
      .string()
      .describe(
        'Only return refunds for the charge specified by this charge ID.'
      )
      .optional(),
    /** Only return refunds that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return refunds that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return refunds for the PaymentIntent specified by this ID. */
    payment_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return refunds for the PaymentIntent specified by this ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetRefundsParams = z.infer<typeof GetRefundsParamsSchema>

  export const GetRefundsResponseSchema = z.object({
    data: z.array(RefundSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/refunds'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetRefundsResponse = z.infer<typeof GetRefundsResponseSchema>

  export const PostRefundsParamsSchema = z.object({})
  export type PostRefundsParams = z.infer<typeof PostRefundsParamsSchema>

  export const PostRefundsResponseSchema = RefundSchema
  export type PostRefundsResponse = z.infer<typeof PostRefundsResponseSchema>

  export const GetRefundsRefundParamsSchema = z.object({
    refund: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetRefundsRefundParams = z.infer<
    typeof GetRefundsRefundParamsSchema
  >

  export const GetRefundsRefundResponseSchema = RefundSchema
  export type GetRefundsRefundResponse = z.infer<
    typeof GetRefundsRefundResponseSchema
  >

  export const PostRefundsRefundParamsSchema = z.object({ refund: z.string() })
  export type PostRefundsRefundParams = z.infer<
    typeof PostRefundsRefundParamsSchema
  >

  export const PostRefundsRefundResponseSchema = RefundSchema
  export type PostRefundsRefundResponse = z.infer<
    typeof PostRefundsRefundResponseSchema
  >

  export const PostRefundsRefundCancelParamsSchema = z.object({
    refund: z.string()
  })
  export type PostRefundsRefundCancelParams = z.infer<
    typeof PostRefundsRefundCancelParamsSchema
  >

  export const PostRefundsRefundCancelResponseSchema = RefundSchema
  export type PostRefundsRefundCancelResponse = z.infer<
    typeof PostRefundsRefundCancelResponseSchema
  >

  export const GetReportingReportRunsParamsSchema = z.object({
    /** Only return Report Runs that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return Report Runs that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetReportingReportRunsParams = z.infer<
    typeof GetReportingReportRunsParamsSchema
  >

  export const GetReportingReportRunsResponseSchema = z.object({
    data: z.array(ReportingReportRunSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/reporting/report_runs'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetReportingReportRunsResponse = z.infer<
    typeof GetReportingReportRunsResponseSchema
  >

  export const PostReportingReportRunsParamsSchema = z.object({})
  export type PostReportingReportRunsParams = z.infer<
    typeof PostReportingReportRunsParamsSchema
  >

  export const PostReportingReportRunsResponseSchema = ReportingReportRunSchema
  export type PostReportingReportRunsResponse = z.infer<
    typeof PostReportingReportRunsResponseSchema
  >

  export const GetReportingReportRunsReportRunParamsSchema = z.object({
    report_run: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetReportingReportRunsReportRunParams = z.infer<
    typeof GetReportingReportRunsReportRunParamsSchema
  >

  export const GetReportingReportRunsReportRunResponseSchema =
    ReportingReportRunSchema
  export type GetReportingReportRunsReportRunResponse = z.infer<
    typeof GetReportingReportRunsReportRunResponseSchema
  >

  export const GetReportingReportTypesParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetReportingReportTypesParams = z.infer<
    typeof GetReportingReportTypesParamsSchema
  >

  export const GetReportingReportTypesResponseSchema = z.object({
    data: z.array(ReportingReportTypeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetReportingReportTypesResponse = z.infer<
    typeof GetReportingReportTypesResponseSchema
  >

  export const GetReportingReportTypesReportTypeParamsSchema = z.object({
    report_type: z.string(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetReportingReportTypesReportTypeParams = z.infer<
    typeof GetReportingReportTypesReportTypeParamsSchema
  >

  export const GetReportingReportTypesReportTypeResponseSchema =
    ReportingReportTypeSchema
  export type GetReportingReportTypesReportTypeResponse = z.infer<
    typeof GetReportingReportTypesReportTypeResponseSchema
  >

  export const GetReviewsParamsSchema = z.object({
    /** Only return reviews that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return reviews that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetReviewsParams = z.infer<typeof GetReviewsParamsSchema>

  export const GetReviewsResponseSchema = z.object({
    data: z.array(ReviewSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetReviewsResponse = z.infer<typeof GetReviewsResponseSchema>

  export const GetReviewsReviewParamsSchema = z.object({
    review: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetReviewsReviewParams = z.infer<
    typeof GetReviewsReviewParamsSchema
  >

  export const GetReviewsReviewResponseSchema = ReviewSchema
  export type GetReviewsReviewResponse = z.infer<
    typeof GetReviewsReviewResponseSchema
  >

  export const PostReviewsReviewApproveParamsSchema = z.object({
    review: z.string().max(5000)
  })
  export type PostReviewsReviewApproveParams = z.infer<
    typeof PostReviewsReviewApproveParamsSchema
  >

  export const PostReviewsReviewApproveResponseSchema = ReviewSchema
  export type PostReviewsReviewApproveResponse = z.infer<
    typeof PostReviewsReviewApproveResponseSchema
  >

  export const GetSetupAttemptsParamsSchema = z.object({
    /**
     * A filter on the list, based on the object `created` field. The value
     * can be a string with an integer Unix timestamp or a
     * dictionary with a number of different query options.
     */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value\ncan be a string with an integer Unix timestamp or a\ndictionary with a number of different query options.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /**
     * Only return SetupAttempts created by the SetupIntent specified by
     * this ID.
     */
    setup_intent: z
      .string()
      .max(5000)
      .describe(
        'Only return SetupAttempts created by the SetupIntent specified by\nthis ID.'
      ),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetSetupAttemptsParams = z.infer<
    typeof GetSetupAttemptsParamsSchema
  >

  export const GetSetupAttemptsResponseSchema = z.object({
    data: z.array(SetupAttemptSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/setup_attempts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSetupAttemptsResponse = z.infer<
    typeof GetSetupAttemptsResponseSchema
  >

  export const GetSetupIntentsParamsSchema = z.object({
    /**
     * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
     *
     * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
     */
    attach_to_self: z
      .boolean()
      .describe(
        "If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer."
      )
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** Only return SetupIntents for the customer specified by this customer ID. */
    customer: z
      .string()
      .max(5000)
      .describe(
        'Only return SetupIntents for the customer specified by this customer ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return SetupIntents that associate with the specified payment method. */
    payment_method: z
      .string()
      .max(5000)
      .describe(
        'Only return SetupIntents that associate with the specified payment method.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetSetupIntentsParams = z.infer<
    typeof GetSetupIntentsParamsSchema
  >

  export const GetSetupIntentsResponseSchema = z.object({
    data: z.array(SetupIntentSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/setup_intents'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSetupIntentsResponse = z.infer<
    typeof GetSetupIntentsResponseSchema
  >

  export const PostSetupIntentsParamsSchema = z.object({})
  export type PostSetupIntentsParams = z.infer<
    typeof PostSetupIntentsParamsSchema
  >

  export const PostSetupIntentsResponseSchema = SetupIntentSchema
  export type PostSetupIntentsResponse = z.infer<
    typeof PostSetupIntentsResponseSchema
  >

  export const GetSetupIntentsIntentParamsSchema = z.object({
    intent: z.string().max(5000),
    /** The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent. */
    client_secret: z
      .string()
      .max(5000)
      .describe(
        'The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetSetupIntentsIntentParams = z.infer<
    typeof GetSetupIntentsIntentParamsSchema
  >

  export const GetSetupIntentsIntentResponseSchema = SetupIntentSchema
  export type GetSetupIntentsIntentResponse = z.infer<
    typeof GetSetupIntentsIntentResponseSchema
  >

  export const PostSetupIntentsIntentParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostSetupIntentsIntentParams = z.infer<
    typeof PostSetupIntentsIntentParamsSchema
  >

  export const PostSetupIntentsIntentResponseSchema = SetupIntentSchema
  export type PostSetupIntentsIntentResponse = z.infer<
    typeof PostSetupIntentsIntentResponseSchema
  >

  export const PostSetupIntentsIntentCancelParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostSetupIntentsIntentCancelParams = z.infer<
    typeof PostSetupIntentsIntentCancelParamsSchema
  >

  export const PostSetupIntentsIntentCancelResponseSchema = SetupIntentSchema
  export type PostSetupIntentsIntentCancelResponse = z.infer<
    typeof PostSetupIntentsIntentCancelResponseSchema
  >

  export const PostSetupIntentsIntentConfirmParamsSchema = z.object({
    intent: z.string().max(5000)
  })
  export type PostSetupIntentsIntentConfirmParams = z.infer<
    typeof PostSetupIntentsIntentConfirmParamsSchema
  >

  export const PostSetupIntentsIntentConfirmResponseSchema = SetupIntentSchema
  export type PostSetupIntentsIntentConfirmResponse = z.infer<
    typeof PostSetupIntentsIntentConfirmResponseSchema
  >

  export const PostSetupIntentsIntentVerifyMicrodepositsParamsSchema = z.object(
    { intent: z.string().max(5000) }
  )
  export type PostSetupIntentsIntentVerifyMicrodepositsParams = z.infer<
    typeof PostSetupIntentsIntentVerifyMicrodepositsParamsSchema
  >

  export const PostSetupIntentsIntentVerifyMicrodepositsResponseSchema =
    SetupIntentSchema
  export type PostSetupIntentsIntentVerifyMicrodepositsResponse = z.infer<
    typeof PostSetupIntentsIntentVerifyMicrodepositsResponseSchema
  >

  export const GetShippingRatesParamsSchema = z.object({
    /** Only return shipping rates that are active or inactive. */
    active: z
      .boolean()
      .describe('Only return shipping rates that are active or inactive.')
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** Only return shipping rates for the given currency. */
    currency: z
      .string()
      .describe('Only return shipping rates for the given currency.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetShippingRatesParams = z.infer<
    typeof GetShippingRatesParamsSchema
  >

  export const GetShippingRatesResponseSchema = z.object({
    data: z.array(ShippingRateSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/shipping_rates'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetShippingRatesResponse = z.infer<
    typeof GetShippingRatesResponseSchema
  >

  export const PostShippingRatesParamsSchema = z.object({})
  export type PostShippingRatesParams = z.infer<
    typeof PostShippingRatesParamsSchema
  >

  export const PostShippingRatesResponseSchema = ShippingRateSchema
  export type PostShippingRatesResponse = z.infer<
    typeof PostShippingRatesResponseSchema
  >

  export const GetShippingRatesShippingRateTokenParamsSchema = z.object({
    shipping_rate_token: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetShippingRatesShippingRateTokenParams = z.infer<
    typeof GetShippingRatesShippingRateTokenParamsSchema
  >

  export const GetShippingRatesShippingRateTokenResponseSchema =
    ShippingRateSchema
  export type GetShippingRatesShippingRateTokenResponse = z.infer<
    typeof GetShippingRatesShippingRateTokenResponseSchema
  >

  export const PostShippingRatesShippingRateTokenParamsSchema = z.object({
    shipping_rate_token: z.string().max(5000)
  })
  export type PostShippingRatesShippingRateTokenParams = z.infer<
    typeof PostShippingRatesShippingRateTokenParamsSchema
  >

  export const PostShippingRatesShippingRateTokenResponseSchema =
    ShippingRateSchema
  export type PostShippingRatesShippingRateTokenResponse = z.infer<
    typeof PostShippingRatesShippingRateTokenResponseSchema
  >

  export const GetSigmaScheduledQueryRunsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetSigmaScheduledQueryRunsParams = z.infer<
    typeof GetSigmaScheduledQueryRunsParamsSchema
  >

  export const GetSigmaScheduledQueryRunsResponseSchema = z.object({
    data: z.array(ScheduledQueryRunSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/sigma/scheduled_query_runs'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSigmaScheduledQueryRunsResponse = z.infer<
    typeof GetSigmaScheduledQueryRunsResponseSchema
  >

  export const GetSigmaScheduledQueryRunsScheduledQueryRunParamsSchema =
    z.object({
      scheduled_query_run: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetSigmaScheduledQueryRunsScheduledQueryRunParams = z.infer<
    typeof GetSigmaScheduledQueryRunsScheduledQueryRunParamsSchema
  >

  export const GetSigmaScheduledQueryRunsScheduledQueryRunResponseSchema =
    ScheduledQueryRunSchema
  export type GetSigmaScheduledQueryRunsScheduledQueryRunResponse = z.infer<
    typeof GetSigmaScheduledQueryRunsScheduledQueryRunResponseSchema
  >

  export const PostSourcesParamsSchema = z.object({})
  export type PostSourcesParams = z.infer<typeof PostSourcesParamsSchema>

  export const PostSourcesResponseSchema = SourceSchema
  export type PostSourcesResponse = z.infer<typeof PostSourcesResponseSchema>

  export const GetSourcesSourceParamsSchema = z.object({
    source: z.string().max(5000),
    /** The client secret of the source. Required if a publishable key is used to retrieve the source. */
    client_secret: z
      .string()
      .max(5000)
      .describe(
        'The client secret of the source. Required if a publishable key is used to retrieve the source.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetSourcesSourceParams = z.infer<
    typeof GetSourcesSourceParamsSchema
  >

  export const GetSourcesSourceResponseSchema = SourceSchema
  export type GetSourcesSourceResponse = z.infer<
    typeof GetSourcesSourceResponseSchema
  >

  export const PostSourcesSourceParamsSchema = z.object({
    source: z.string().max(5000)
  })
  export type PostSourcesSourceParams = z.infer<
    typeof PostSourcesSourceParamsSchema
  >

  export const PostSourcesSourceResponseSchema = SourceSchema
  export type PostSourcesSourceResponse = z.infer<
    typeof PostSourcesSourceResponseSchema
  >

  export const GetSourcesSourceMandateNotificationsMandateNotificationParamsSchema =
    z.object({
      mandate_notification: z.string().max(5000),
      source: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetSourcesSourceMandateNotificationsMandateNotificationParams =
    z.infer<
      typeof GetSourcesSourceMandateNotificationsMandateNotificationParamsSchema
    >

  export const GetSourcesSourceMandateNotificationsMandateNotificationResponseSchema =
    SourceMandateNotificationSchema
  export type GetSourcesSourceMandateNotificationsMandateNotificationResponse =
    z.infer<
      typeof GetSourcesSourceMandateNotificationsMandateNotificationResponseSchema
    >

  export const GetSourcesSourceSourceTransactionsParamsSchema = z.object({
    source: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetSourcesSourceSourceTransactionsParams = z.infer<
    typeof GetSourcesSourceSourceTransactionsParamsSchema
  >

  export const GetSourcesSourceSourceTransactionsResponseSchema = z.object({
    data: z.array(SourceTransactionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSourcesSourceSourceTransactionsResponse = z.infer<
    typeof GetSourcesSourceSourceTransactionsResponseSchema
  >

  export const GetSourcesSourceSourceTransactionsSourceTransactionParamsSchema =
    z.object({
      source: z.string().max(5000),
      source_transaction: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetSourcesSourceSourceTransactionsSourceTransactionParams =
    z.infer<
      typeof GetSourcesSourceSourceTransactionsSourceTransactionParamsSchema
    >

  export const GetSourcesSourceSourceTransactionsSourceTransactionResponseSchema =
    SourceTransactionSchema
  export type GetSourcesSourceSourceTransactionsSourceTransactionResponse =
    z.infer<
      typeof GetSourcesSourceSourceTransactionsSourceTransactionResponseSchema
    >

  export const PostSourcesSourceVerifyParamsSchema = z.object({
    source: z.string().max(5000)
  })
  export type PostSourcesSourceVerifyParams = z.infer<
    typeof PostSourcesSourceVerifyParamsSchema
  >

  export const PostSourcesSourceVerifyResponseSchema = SourceSchema
  export type PostSourcesSourceVerifyResponse = z.infer<
    typeof PostSourcesSourceVerifyResponseSchema
  >

  export const GetSubscriptionItemsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The ID of the subscription whose items will be retrieved. */
    subscription: z
      .string()
      .max(5000)
      .describe('The ID of the subscription whose items will be retrieved.')
  })
  export type GetSubscriptionItemsParams = z.infer<
    typeof GetSubscriptionItemsParamsSchema
  >

  export const GetSubscriptionItemsResponseSchema = z.object({
    data: z.array(SubscriptionItemSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/subscription_items'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSubscriptionItemsResponse = z.infer<
    typeof GetSubscriptionItemsResponseSchema
  >

  export const PostSubscriptionItemsParamsSchema = z.object({})
  export type PostSubscriptionItemsParams = z.infer<
    typeof PostSubscriptionItemsParamsSchema
  >

  export const PostSubscriptionItemsResponseSchema = SubscriptionItemSchema
  export type PostSubscriptionItemsResponse = z.infer<
    typeof PostSubscriptionItemsResponseSchema
  >

  export const GetSubscriptionItemsItemParamsSchema = z.object({
    item: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetSubscriptionItemsItemParams = z.infer<
    typeof GetSubscriptionItemsItemParamsSchema
  >

  export const GetSubscriptionItemsItemResponseSchema = SubscriptionItemSchema
  export type GetSubscriptionItemsItemResponse = z.infer<
    typeof GetSubscriptionItemsItemResponseSchema
  >

  export const PostSubscriptionItemsItemParamsSchema = z.object({
    item: z.string().max(5000)
  })
  export type PostSubscriptionItemsItemParams = z.infer<
    typeof PostSubscriptionItemsItemParamsSchema
  >

  export const PostSubscriptionItemsItemResponseSchema = SubscriptionItemSchema
  export type PostSubscriptionItemsItemResponse = z.infer<
    typeof PostSubscriptionItemsItemResponseSchema
  >

  export const DeleteSubscriptionItemsItemParamsSchema = z.object({
    item: z.string().max(5000)
  })
  export type DeleteSubscriptionItemsItemParams = z.infer<
    typeof DeleteSubscriptionItemsItemParamsSchema
  >

  export const DeleteSubscriptionItemsItemResponseSchema =
    DeletedSubscriptionItemSchema
  export type DeleteSubscriptionItemsItemResponse = z.infer<
    typeof DeleteSubscriptionItemsItemResponseSchema
  >

  export const GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParamsSchema =
    z.object({
      subscription_item: z.string(),
      /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
      ending_before: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
        )
        .optional(),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional(),
      /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
      limit: z
        .number()
        .int()
        .describe(
          'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
        )
        .optional(),
      /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
      starting_after: z
        .string()
        .max(5000)
        .describe(
          'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
        )
        .optional()
    })
  export type GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParams =
    z.infer<
      typeof GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParamsSchema
    >

  export const GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponseSchema =
    z.object({
      data: z.array(UsageRecordSummarySchema),
      /** True if this list has another page of items after this one that can be fetched. */
      has_more: z
        .boolean()
        .describe(
          'True if this list has another page of items after this one that can be fetched.'
        ),
      /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
      object: z
        .literal('list')
        .describe(
          "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
        ),
      /** The URL where this list can be accessed. */
      url: z
        .string()
        .max(5000)
        .describe('The URL where this list can be accessed.')
    })
  export type GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponse =
    z.infer<
      typeof GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponseSchema
    >

  export const PostSubscriptionItemsSubscriptionItemUsageRecordsParamsSchema =
    z.object({ subscription_item: z.string() })
  export type PostSubscriptionItemsSubscriptionItemUsageRecordsParams = z.infer<
    typeof PostSubscriptionItemsSubscriptionItemUsageRecordsParamsSchema
  >

  export const PostSubscriptionItemsSubscriptionItemUsageRecordsResponseSchema =
    UsageRecordSchema
  export type PostSubscriptionItemsSubscriptionItemUsageRecordsResponse =
    z.infer<
      typeof PostSubscriptionItemsSubscriptionItemUsageRecordsResponseSchema
    >

  export const GetSubscriptionSchedulesParamsSchema = z.object({
    /** Only return subscription schedules that were created canceled the given date interval. */
    canceled_at: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscription schedules that were created canceled the given date interval.'
      )
      .optional(),
    /** Only return subscription schedules that completed during the given date interval. */
    completed_at: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscription schedules that completed during the given date interval.'
      )
      .optional(),
    /** Only return subscription schedules that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscription schedules that were created during the given date interval.'
      )
      .optional(),
    /** Only return subscription schedules for the given customer. */
    customer: z
      .string()
      .max(5000)
      .describe('Only return subscription schedules for the given customer.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return subscription schedules that were released during the given date interval. */
    released_at: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscription schedules that were released during the given date interval.'
      )
      .optional(),
    /** Only return subscription schedules that have not started yet. */
    scheduled: z
      .boolean()
      .describe('Only return subscription schedules that have not started yet.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetSubscriptionSchedulesParams = z.infer<
    typeof GetSubscriptionSchedulesParamsSchema
  >

  export const GetSubscriptionSchedulesResponseSchema = z.object({
    data: z.array(SubscriptionScheduleSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/subscription_schedules'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSubscriptionSchedulesResponse = z.infer<
    typeof GetSubscriptionSchedulesResponseSchema
  >

  export const PostSubscriptionSchedulesParamsSchema = z.object({})
  export type PostSubscriptionSchedulesParams = z.infer<
    typeof PostSubscriptionSchedulesParamsSchema
  >

  export const PostSubscriptionSchedulesResponseSchema =
    SubscriptionScheduleSchema
  export type PostSubscriptionSchedulesResponse = z.infer<
    typeof PostSubscriptionSchedulesResponseSchema
  >

  export const GetSubscriptionSchedulesScheduleParamsSchema = z.object({
    schedule: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetSubscriptionSchedulesScheduleParams = z.infer<
    typeof GetSubscriptionSchedulesScheduleParamsSchema
  >

  export const GetSubscriptionSchedulesScheduleResponseSchema =
    SubscriptionScheduleSchema
  export type GetSubscriptionSchedulesScheduleResponse = z.infer<
    typeof GetSubscriptionSchedulesScheduleResponseSchema
  >

  export const PostSubscriptionSchedulesScheduleParamsSchema = z.object({
    schedule: z.string().max(5000)
  })
  export type PostSubscriptionSchedulesScheduleParams = z.infer<
    typeof PostSubscriptionSchedulesScheduleParamsSchema
  >

  export const PostSubscriptionSchedulesScheduleResponseSchema =
    SubscriptionScheduleSchema
  export type PostSubscriptionSchedulesScheduleResponse = z.infer<
    typeof PostSubscriptionSchedulesScheduleResponseSchema
  >

  export const PostSubscriptionSchedulesScheduleCancelParamsSchema = z.object({
    schedule: z.string().max(5000)
  })
  export type PostSubscriptionSchedulesScheduleCancelParams = z.infer<
    typeof PostSubscriptionSchedulesScheduleCancelParamsSchema
  >

  export const PostSubscriptionSchedulesScheduleCancelResponseSchema =
    SubscriptionScheduleSchema
  export type PostSubscriptionSchedulesScheduleCancelResponse = z.infer<
    typeof PostSubscriptionSchedulesScheduleCancelResponseSchema
  >

  export const PostSubscriptionSchedulesScheduleReleaseParamsSchema = z.object({
    schedule: z.string().max(5000)
  })
  export type PostSubscriptionSchedulesScheduleReleaseParams = z.infer<
    typeof PostSubscriptionSchedulesScheduleReleaseParamsSchema
  >

  export const PostSubscriptionSchedulesScheduleReleaseResponseSchema =
    SubscriptionScheduleSchema
  export type PostSubscriptionSchedulesScheduleReleaseResponse = z.infer<
    typeof PostSubscriptionSchedulesScheduleReleaseResponseSchema
  >

  export const GetSubscriptionsParamsSchema = z.object({
    /** Filter subscriptions by their automatic tax settings. */
    automatic_tax: z
      .object({ enabled: z.boolean() })
      .describe('Filter subscriptions by their automatic tax settings.')
      .optional(),
    /** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */
    collection_method: z
      .enum(['charge_automatically', 'send_invoice'])
      .describe(
        'The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.'
      )
      .optional(),
    /** Only return subscriptions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscriptions that were created during the given date interval.'
      )
      .optional(),
    /** Only return subscriptions whose current_period_end falls within the given date interval. */
    current_period_end: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscriptions whose current_period_end falls within the given date interval.'
      )
      .optional(),
    /** Only return subscriptions whose current_period_start falls within the given date interval. */
    current_period_start: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return subscriptions whose current_period_start falls within the given date interval.'
      )
      .optional(),
    /** The ID of the customer whose subscriptions will be retrieved. */
    customer: z
      .string()
      .max(5000)
      .describe('The ID of the customer whose subscriptions will be retrieved.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Filter for subscriptions that contain this recurring price ID. */
    price: z
      .string()
      .max(5000)
      .describe(
        'Filter for subscriptions that contain this recurring price ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned. */
    status: z
      .enum([
        'active',
        'all',
        'canceled',
        'ended',
        'incomplete',
        'incomplete_expired',
        'past_due',
        'paused',
        'trialing',
        'unpaid'
      ])
      .describe(
        'The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.'
      )
      .optional(),
    /** Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set. */
    test_clock: z
      .string()
      .max(5000)
      .describe(
        'Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.'
      )
      .optional()
  })
  export type GetSubscriptionsParams = z.infer<
    typeof GetSubscriptionsParamsSchema
  >

  export const GetSubscriptionsResponseSchema = z.object({
    data: z.array(SubscriptionSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/subscriptions'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetSubscriptionsResponse = z.infer<
    typeof GetSubscriptionsResponseSchema
  >

  export const PostSubscriptionsParamsSchema = z.object({})
  export type PostSubscriptionsParams = z.infer<
    typeof PostSubscriptionsParamsSchema
  >

  export const PostSubscriptionsResponseSchema = SubscriptionSchema
  export type PostSubscriptionsResponse = z.infer<
    typeof PostSubscriptionsResponseSchema
  >

  export const GetSubscriptionsSearchParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */
    page: z
      .string()
      .max(5000)
      .describe(
        "A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results."
      )
      .optional(),
    /** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions). */
    query: z
      .string()
      .max(5000)
      .describe(
        'The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).'
      )
  })
  export type GetSubscriptionsSearchParams = z.infer<
    typeof GetSubscriptionsSearchParamsSchema
  >

  export const GetSubscriptionsSearchResponseSchema = z.object({
    data: z.array(SubscriptionSchema),
    has_more: z.boolean(),
    next_page: z.string().max(5000).nullable().optional(),
    /** String representing the object's type. Objects of the same type share the same value. */
    object: z
      .literal('search_result')
      .describe(
        "String representing the object's type. Objects of the same type share the same value."
      ),
    /** The total number of objects that match the query, only accurate up to 10,000. */
    total_count: z
      .number()
      .int()
      .describe(
        'The total number of objects that match the query, only accurate up to 10,000.'
      )
      .optional(),
    url: z.string().max(5000)
  })
  export type GetSubscriptionsSearchResponse = z.infer<
    typeof GetSubscriptionsSearchResponseSchema
  >

  export const GetSubscriptionsSubscriptionExposedIdParamsSchema = z.object({
    subscription_exposed_id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetSubscriptionsSubscriptionExposedIdParams = z.infer<
    typeof GetSubscriptionsSubscriptionExposedIdParamsSchema
  >

  export const GetSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type GetSubscriptionsSubscriptionExposedIdResponse = z.infer<
    typeof GetSubscriptionsSubscriptionExposedIdResponseSchema
  >

  export const PostSubscriptionsSubscriptionExposedIdParamsSchema = z.object({
    subscription_exposed_id: z.string().max(5000)
  })
  export type PostSubscriptionsSubscriptionExposedIdParams = z.infer<
    typeof PostSubscriptionsSubscriptionExposedIdParamsSchema
  >

  export const PostSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type PostSubscriptionsSubscriptionExposedIdResponse = z.infer<
    typeof PostSubscriptionsSubscriptionExposedIdResponseSchema
  >

  export const DeleteSubscriptionsSubscriptionExposedIdParamsSchema = z.object({
    subscription_exposed_id: z.string().max(5000)
  })
  export type DeleteSubscriptionsSubscriptionExposedIdParams = z.infer<
    typeof DeleteSubscriptionsSubscriptionExposedIdParamsSchema
  >

  export const DeleteSubscriptionsSubscriptionExposedIdResponseSchema =
    SubscriptionSchema
  export type DeleteSubscriptionsSubscriptionExposedIdResponse = z.infer<
    typeof DeleteSubscriptionsSubscriptionExposedIdResponseSchema
  >

  export const DeleteSubscriptionsSubscriptionExposedIdDiscountParamsSchema =
    z.object({ subscription_exposed_id: z.string().max(5000) })
  export type DeleteSubscriptionsSubscriptionExposedIdDiscountParams = z.infer<
    typeof DeleteSubscriptionsSubscriptionExposedIdDiscountParamsSchema
  >

  export const DeleteSubscriptionsSubscriptionExposedIdDiscountResponseSchema =
    DeletedDiscountSchema
  export type DeleteSubscriptionsSubscriptionExposedIdDiscountResponse =
    z.infer<
      typeof DeleteSubscriptionsSubscriptionExposedIdDiscountResponseSchema
    >

  export const PostSubscriptionsSubscriptionResumeParamsSchema = z.object({
    subscription: z.string().max(5000)
  })
  export type PostSubscriptionsSubscriptionResumeParams = z.infer<
    typeof PostSubscriptionsSubscriptionResumeParamsSchema
  >

  export const PostSubscriptionsSubscriptionResumeResponseSchema =
    SubscriptionSchema
  export type PostSubscriptionsSubscriptionResumeResponse = z.infer<
    typeof PostSubscriptionsSubscriptionResumeResponseSchema
  >

  export const PostTaxCalculationsParamsSchema = z.object({})
  export type PostTaxCalculationsParams = z.infer<
    typeof PostTaxCalculationsParamsSchema
  >

  export const PostTaxCalculationsResponseSchema = TaxCalculationSchema
  export type PostTaxCalculationsResponse = z.infer<
    typeof PostTaxCalculationsResponseSchema
  >

  export const GetTaxCalculationsCalculationParamsSchema = z.object({
    calculation: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxCalculationsCalculationParams = z.infer<
    typeof GetTaxCalculationsCalculationParamsSchema
  >

  export const GetTaxCalculationsCalculationResponseSchema =
    TaxCalculationSchema
  export type GetTaxCalculationsCalculationResponse = z.infer<
    typeof GetTaxCalculationsCalculationResponseSchema
  >

  export const GetTaxCalculationsCalculationLineItemsParamsSchema = z.object({
    calculation: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(500)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(500)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTaxCalculationsCalculationLineItemsParams = z.infer<
    typeof GetTaxCalculationsCalculationLineItemsParamsSchema
  >

  export const GetTaxCalculationsCalculationLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TaxCalculationLineItemSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/tax/calculations/[^/]+/line_items'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxCalculationsCalculationLineItemsResponse = z.infer<
    typeof GetTaxCalculationsCalculationLineItemsResponseSchema
  >

  export const GetTaxRegistrationsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** The status of the Tax Registration. */
    status: z
      .enum(['active', 'all', 'expired', 'scheduled'])
      .describe('The status of the Tax Registration.')
      .optional()
  })
  export type GetTaxRegistrationsParams = z.infer<
    typeof GetTaxRegistrationsParamsSchema
  >

  export const GetTaxRegistrationsResponseSchema = z.object({
    data: z.array(TaxRegistrationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/tax/registrations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxRegistrationsResponse = z.infer<
    typeof GetTaxRegistrationsResponseSchema
  >

  export const PostTaxRegistrationsParamsSchema = z.object({})
  export type PostTaxRegistrationsParams = z.infer<
    typeof PostTaxRegistrationsParamsSchema
  >

  export const PostTaxRegistrationsResponseSchema = TaxRegistrationSchema
  export type PostTaxRegistrationsResponse = z.infer<
    typeof PostTaxRegistrationsResponseSchema
  >

  export const GetTaxRegistrationsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxRegistrationsIdParams = z.infer<
    typeof GetTaxRegistrationsIdParamsSchema
  >

  export const GetTaxRegistrationsIdResponseSchema = TaxRegistrationSchema
  export type GetTaxRegistrationsIdResponse = z.infer<
    typeof GetTaxRegistrationsIdResponseSchema
  >

  export const PostTaxRegistrationsIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostTaxRegistrationsIdParams = z.infer<
    typeof PostTaxRegistrationsIdParamsSchema
  >

  export const PostTaxRegistrationsIdResponseSchema = TaxRegistrationSchema
  export type PostTaxRegistrationsIdResponse = z.infer<
    typeof PostTaxRegistrationsIdResponseSchema
  >

  export const GetTaxSettingsParamsSchema = z.object({
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxSettingsParams = z.infer<typeof GetTaxSettingsParamsSchema>

  export const GetTaxSettingsResponseSchema = TaxSettingsSchema
  export type GetTaxSettingsResponse = z.infer<
    typeof GetTaxSettingsResponseSchema
  >

  export const PostTaxSettingsParamsSchema = z.object({})
  export type PostTaxSettingsParams = z.infer<
    typeof PostTaxSettingsParamsSchema
  >

  export const PostTaxSettingsResponseSchema = TaxSettingsSchema
  export type PostTaxSettingsResponse = z.infer<
    typeof PostTaxSettingsResponseSchema
  >

  export const PostTaxTransactionsCreateFromCalculationParamsSchema = z.object(
    {}
  )
  export type PostTaxTransactionsCreateFromCalculationParams = z.infer<
    typeof PostTaxTransactionsCreateFromCalculationParamsSchema
  >

  export const PostTaxTransactionsCreateFromCalculationResponseSchema =
    TaxTransactionSchema
  export type PostTaxTransactionsCreateFromCalculationResponse = z.infer<
    typeof PostTaxTransactionsCreateFromCalculationResponseSchema
  >

  export const PostTaxTransactionsCreateReversalParamsSchema = z.object({})
  export type PostTaxTransactionsCreateReversalParams = z.infer<
    typeof PostTaxTransactionsCreateReversalParamsSchema
  >

  export const PostTaxTransactionsCreateReversalResponseSchema =
    TaxTransactionSchema
  export type PostTaxTransactionsCreateReversalResponse = z.infer<
    typeof PostTaxTransactionsCreateReversalResponseSchema
  >

  export const GetTaxTransactionsTransactionParamsSchema = z.object({
    transaction: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxTransactionsTransactionParams = z.infer<
    typeof GetTaxTransactionsTransactionParamsSchema
  >

  export const GetTaxTransactionsTransactionResponseSchema =
    TaxTransactionSchema
  export type GetTaxTransactionsTransactionResponse = z.infer<
    typeof GetTaxTransactionsTransactionResponseSchema
  >

  export const GetTaxTransactionsTransactionLineItemsParamsSchema = z.object({
    transaction: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(500)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(500)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTaxTransactionsTransactionLineItemsParams = z.infer<
    typeof GetTaxTransactionsTransactionLineItemsParamsSchema
  >

  export const GetTaxTransactionsTransactionLineItemsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TaxTransactionLineItemSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/tax/transactions/[^/]+/line_items'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxTransactionsTransactionLineItemsResponse = z.infer<
    typeof GetTaxTransactionsTransactionLineItemsResponseSchema
  >

  export const GetTaxCodesParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTaxCodesParams = z.infer<typeof GetTaxCodesParamsSchema>

  export const GetTaxCodesResponseSchema = z.object({
    data: z.array(TaxCodeSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxCodesResponse = z.infer<typeof GetTaxCodesResponseSchema>

  export const GetTaxCodesIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxCodesIdParams = z.infer<typeof GetTaxCodesIdParamsSchema>

  export const GetTaxCodesIdResponseSchema = TaxCodeSchema
  export type GetTaxCodesIdResponse = z.infer<
    typeof GetTaxCodesIdResponseSchema
  >

  export const GetTaxIdsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The account or customer the tax ID belongs to. Defaults to `owner[type]=self`. */
    owner: z
      .object({
        account: z.string().optional(),
        customer: z.string().max(5000).optional(),
        type: z.enum(['account', 'application', 'customer', 'self'])
      })
      .describe(
        'The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTaxIdsParams = z.infer<typeof GetTaxIdsParamsSchema>

  export const GetTaxIdsResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(TaxIdSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxIdsResponse = z.infer<typeof GetTaxIdsResponseSchema>

  export const PostTaxIdsParamsSchema = z.object({})
  export type PostTaxIdsParams = z.infer<typeof PostTaxIdsParamsSchema>

  export const PostTaxIdsResponseSchema = TaxIdSchema
  export type PostTaxIdsResponse = z.infer<typeof PostTaxIdsResponseSchema>

  export const GetTaxIdsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxIdsIdParams = z.infer<typeof GetTaxIdsIdParamsSchema>

  export const GetTaxIdsIdResponseSchema = TaxIdSchema
  export type GetTaxIdsIdResponse = z.infer<typeof GetTaxIdsIdResponseSchema>

  export const DeleteTaxIdsIdParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type DeleteTaxIdsIdParams = z.infer<typeof DeleteTaxIdsIdParamsSchema>

  export const DeleteTaxIdsIdResponseSchema = DeletedTaxIdSchema
  export type DeleteTaxIdsIdResponse = z.infer<
    typeof DeleteTaxIdsIdResponseSchema
  >

  export const GetTaxRatesParamsSchema = z.object({
    /** Optional flag to filter by tax rates that are either active or inactive (archived). */
    active: z
      .boolean()
      .describe(
        'Optional flag to filter by tax rates that are either active or inactive (archived).'
      )
      .optional(),
    /** Optional range for filtering created date. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe('Optional range for filtering created date.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive). */
    inclusive: z
      .boolean()
      .describe(
        'Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTaxRatesParams = z.infer<typeof GetTaxRatesParamsSchema>

  export const GetTaxRatesResponseSchema = z.object({
    data: z.array(TaxRateSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/tax_rates'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTaxRatesResponse = z.infer<typeof GetTaxRatesResponseSchema>

  export const PostTaxRatesParamsSchema = z.object({})
  export type PostTaxRatesParams = z.infer<typeof PostTaxRatesParamsSchema>

  export const PostTaxRatesResponseSchema = TaxRateSchema
  export type PostTaxRatesResponse = z.infer<typeof PostTaxRatesResponseSchema>

  export const GetTaxRatesTaxRateParamsSchema = z.object({
    tax_rate: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTaxRatesTaxRateParams = z.infer<
    typeof GetTaxRatesTaxRateParamsSchema
  >

  export const GetTaxRatesTaxRateResponseSchema = TaxRateSchema
  export type GetTaxRatesTaxRateResponse = z.infer<
    typeof GetTaxRatesTaxRateResponseSchema
  >

  export const PostTaxRatesTaxRateParamsSchema = z.object({
    tax_rate: z.string().max(5000)
  })
  export type PostTaxRatesTaxRateParams = z.infer<
    typeof PostTaxRatesTaxRateParamsSchema
  >

  export const PostTaxRatesTaxRateResponseSchema = TaxRateSchema
  export type PostTaxRatesTaxRateResponse = z.infer<
    typeof PostTaxRatesTaxRateResponseSchema
  >

  export const GetTerminalConfigurationsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** if present, only return the account default or non-default configurations. */
    is_account_default: z
      .boolean()
      .describe(
        'if present, only return the account default or non-default configurations.'
      )
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTerminalConfigurationsParams = z.infer<
    typeof GetTerminalConfigurationsParamsSchema
  >

  export const GetTerminalConfigurationsResponseSchema = z.object({
    data: z.array(TerminalConfigurationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/terminal/configurations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTerminalConfigurationsResponse = z.infer<
    typeof GetTerminalConfigurationsResponseSchema
  >

  export const PostTerminalConfigurationsParamsSchema = z.object({})
  export type PostTerminalConfigurationsParams = z.infer<
    typeof PostTerminalConfigurationsParamsSchema
  >

  export const PostTerminalConfigurationsResponseSchema =
    TerminalConfigurationSchema
  export type PostTerminalConfigurationsResponse = z.infer<
    typeof PostTerminalConfigurationsResponseSchema
  >

  export const GetTerminalConfigurationsConfigurationParamsSchema = z.object({
    configuration: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTerminalConfigurationsConfigurationParams = z.infer<
    typeof GetTerminalConfigurationsConfigurationParamsSchema
  >

  export const GetTerminalConfigurationsConfigurationResponseSchema = z.union([
    TerminalConfigurationSchema,
    DeletedTerminalConfigurationSchema
  ])
  export type GetTerminalConfigurationsConfigurationResponse = z.infer<
    typeof GetTerminalConfigurationsConfigurationResponseSchema
  >

  export const PostTerminalConfigurationsConfigurationParamsSchema = z.object({
    configuration: z.string().max(5000)
  })
  export type PostTerminalConfigurationsConfigurationParams = z.infer<
    typeof PostTerminalConfigurationsConfigurationParamsSchema
  >

  export const PostTerminalConfigurationsConfigurationResponseSchema = z.union([
    TerminalConfigurationSchema,
    DeletedTerminalConfigurationSchema
  ])
  export type PostTerminalConfigurationsConfigurationResponse = z.infer<
    typeof PostTerminalConfigurationsConfigurationResponseSchema
  >

  export const DeleteTerminalConfigurationsConfigurationParamsSchema = z.object(
    { configuration: z.string().max(5000) }
  )
  export type DeleteTerminalConfigurationsConfigurationParams = z.infer<
    typeof DeleteTerminalConfigurationsConfigurationParamsSchema
  >

  export const DeleteTerminalConfigurationsConfigurationResponseSchema =
    DeletedTerminalConfigurationSchema
  export type DeleteTerminalConfigurationsConfigurationResponse = z.infer<
    typeof DeleteTerminalConfigurationsConfigurationResponseSchema
  >

  export const PostTerminalConnectionTokensParamsSchema = z.object({})
  export type PostTerminalConnectionTokensParams = z.infer<
    typeof PostTerminalConnectionTokensParamsSchema
  >

  export const PostTerminalConnectionTokensResponseSchema =
    TerminalConnectionTokenSchema
  export type PostTerminalConnectionTokensResponse = z.infer<
    typeof PostTerminalConnectionTokensResponseSchema
  >

  export const GetTerminalLocationsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTerminalLocationsParams = z.infer<
    typeof GetTerminalLocationsParamsSchema
  >

  export const GetTerminalLocationsResponseSchema = z.object({
    data: z.array(TerminalLocationSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/terminal/locations'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTerminalLocationsResponse = z.infer<
    typeof GetTerminalLocationsResponseSchema
  >

  export const PostTerminalLocationsParamsSchema = z.object({})
  export type PostTerminalLocationsParams = z.infer<
    typeof PostTerminalLocationsParamsSchema
  >

  export const PostTerminalLocationsResponseSchema = TerminalLocationSchema
  export type PostTerminalLocationsResponse = z.infer<
    typeof PostTerminalLocationsResponseSchema
  >

  export const GetTerminalLocationsLocationParamsSchema = z.object({
    location: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTerminalLocationsLocationParams = z.infer<
    typeof GetTerminalLocationsLocationParamsSchema
  >

  export const GetTerminalLocationsLocationResponseSchema = z.union([
    TerminalLocationSchema,
    DeletedTerminalLocationSchema
  ])
  export type GetTerminalLocationsLocationResponse = z.infer<
    typeof GetTerminalLocationsLocationResponseSchema
  >

  export const PostTerminalLocationsLocationParamsSchema = z.object({
    location: z.string().max(5000)
  })
  export type PostTerminalLocationsLocationParams = z.infer<
    typeof PostTerminalLocationsLocationParamsSchema
  >

  export const PostTerminalLocationsLocationResponseSchema = z.union([
    TerminalLocationSchema,
    DeletedTerminalLocationSchema
  ])
  export type PostTerminalLocationsLocationResponse = z.infer<
    typeof PostTerminalLocationsLocationResponseSchema
  >

  export const DeleteTerminalLocationsLocationParamsSchema = z.object({
    location: z.string().max(5000)
  })
  export type DeleteTerminalLocationsLocationParams = z.infer<
    typeof DeleteTerminalLocationsLocationParamsSchema
  >

  export const DeleteTerminalLocationsLocationResponseSchema =
    DeletedTerminalLocationSchema
  export type DeleteTerminalLocationsLocationResponse = z.infer<
    typeof DeleteTerminalLocationsLocationResponseSchema
  >

  export const GetTerminalReadersParamsSchema = z.object({
    /** Filters readers by device type */
    device_type: z
      .enum([
        'bbpos_chipper2x',
        'bbpos_wisepad3',
        'bbpos_wisepos_e',
        'mobile_phone_reader',
        'simulated_wisepos_e',
        'stripe_m2',
        'stripe_s700',
        'verifone_P400'
      ])
      .describe('Filters readers by device type')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A location ID to filter the response list to only readers at the specific location */
    location: z
      .string()
      .max(5000)
      .describe(
        'A location ID to filter the response list to only readers at the specific location'
      )
      .optional(),
    /** Filters readers by serial number */
    serial_number: z
      .string()
      .max(5000)
      .describe('Filters readers by serial number')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** A status filter to filter readers to only offline or online readers */
    status: z
      .enum(['offline', 'online'])
      .describe(
        'A status filter to filter readers to only offline or online readers'
      )
      .optional()
  })
  export type GetTerminalReadersParams = z.infer<
    typeof GetTerminalReadersParamsSchema
  >

  export const GetTerminalReadersResponseSchema = z.object({
    /** A list of readers */
    data: z.array(TerminalReaderSchema).describe('A list of readers'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTerminalReadersResponse = z.infer<
    typeof GetTerminalReadersResponseSchema
  >

  export const PostTerminalReadersParamsSchema = z.object({})
  export type PostTerminalReadersParams = z.infer<
    typeof PostTerminalReadersParamsSchema
  >

  export const PostTerminalReadersResponseSchema = TerminalReaderSchema
  export type PostTerminalReadersResponse = z.infer<
    typeof PostTerminalReadersResponseSchema
  >

  export const GetTerminalReadersReaderParamsSchema = z.object({
    reader: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTerminalReadersReaderParams = z.infer<
    typeof GetTerminalReadersReaderParamsSchema
  >

  export const GetTerminalReadersReaderResponseSchema = z.union([
    TerminalReaderSchema,
    DeletedTerminalReaderSchema
  ])
  export type GetTerminalReadersReaderResponse = z.infer<
    typeof GetTerminalReadersReaderResponseSchema
  >

  export const PostTerminalReadersReaderParamsSchema = z.object({
    reader: z.string().max(5000)
  })
  export type PostTerminalReadersReaderParams = z.infer<
    typeof PostTerminalReadersReaderParamsSchema
  >

  export const PostTerminalReadersReaderResponseSchema = z.union([
    TerminalReaderSchema,
    DeletedTerminalReaderSchema
  ])
  export type PostTerminalReadersReaderResponse = z.infer<
    typeof PostTerminalReadersReaderResponseSchema
  >

  export const DeleteTerminalReadersReaderParamsSchema = z.object({
    reader: z.string().max(5000)
  })
  export type DeleteTerminalReadersReaderParams = z.infer<
    typeof DeleteTerminalReadersReaderParamsSchema
  >

  export const DeleteTerminalReadersReaderResponseSchema =
    DeletedTerminalReaderSchema
  export type DeleteTerminalReadersReaderResponse = z.infer<
    typeof DeleteTerminalReadersReaderResponseSchema
  >

  export const PostTerminalReadersReaderCancelActionParamsSchema = z.object({
    reader: z.string().max(5000)
  })
  export type PostTerminalReadersReaderCancelActionParams = z.infer<
    typeof PostTerminalReadersReaderCancelActionParamsSchema
  >

  export const PostTerminalReadersReaderCancelActionResponseSchema =
    TerminalReaderSchema
  export type PostTerminalReadersReaderCancelActionResponse = z.infer<
    typeof PostTerminalReadersReaderCancelActionResponseSchema
  >

  export const PostTerminalReadersReaderProcessPaymentIntentParamsSchema =
    z.object({ reader: z.string().max(5000) })
  export type PostTerminalReadersReaderProcessPaymentIntentParams = z.infer<
    typeof PostTerminalReadersReaderProcessPaymentIntentParamsSchema
  >

  export const PostTerminalReadersReaderProcessPaymentIntentResponseSchema =
    TerminalReaderSchema
  export type PostTerminalReadersReaderProcessPaymentIntentResponse = z.infer<
    typeof PostTerminalReadersReaderProcessPaymentIntentResponseSchema
  >

  export const PostTerminalReadersReaderProcessSetupIntentParamsSchema =
    z.object({ reader: z.string().max(5000) })
  export type PostTerminalReadersReaderProcessSetupIntentParams = z.infer<
    typeof PostTerminalReadersReaderProcessSetupIntentParamsSchema
  >

  export const PostTerminalReadersReaderProcessSetupIntentResponseSchema =
    TerminalReaderSchema
  export type PostTerminalReadersReaderProcessSetupIntentResponse = z.infer<
    typeof PostTerminalReadersReaderProcessSetupIntentResponseSchema
  >

  export const PostTerminalReadersReaderRefundPaymentParamsSchema = z.object({
    reader: z.string().max(5000)
  })
  export type PostTerminalReadersReaderRefundPaymentParams = z.infer<
    typeof PostTerminalReadersReaderRefundPaymentParamsSchema
  >

  export const PostTerminalReadersReaderRefundPaymentResponseSchema =
    TerminalReaderSchema
  export type PostTerminalReadersReaderRefundPaymentResponse = z.infer<
    typeof PostTerminalReadersReaderRefundPaymentResponseSchema
  >

  export const PostTerminalReadersReaderSetReaderDisplayParamsSchema = z.object(
    { reader: z.string().max(5000) }
  )
  export type PostTerminalReadersReaderSetReaderDisplayParams = z.infer<
    typeof PostTerminalReadersReaderSetReaderDisplayParamsSchema
  >

  export const PostTerminalReadersReaderSetReaderDisplayResponseSchema =
    TerminalReaderSchema
  export type PostTerminalReadersReaderSetReaderDisplayResponse = z.infer<
    typeof PostTerminalReadersReaderSetReaderDisplayResponseSchema
  >

  export const PostTestHelpersConfirmationTokensParamsSchema = z.object({})
  export type PostTestHelpersConfirmationTokensParams = z.infer<
    typeof PostTestHelpersConfirmationTokensParamsSchema
  >

  export const PostTestHelpersConfirmationTokensResponseSchema =
    ConfirmationTokenSchema
  export type PostTestHelpersConfirmationTokensResponse = z.infer<
    typeof PostTestHelpersConfirmationTokensResponseSchema
  >

  export const PostTestHelpersCustomersCustomerFundCashBalanceParamsSchema =
    z.object({ customer: z.string().max(5000) })
  export type PostTestHelpersCustomersCustomerFundCashBalanceParams = z.infer<
    typeof PostTestHelpersCustomersCustomerFundCashBalanceParamsSchema
  >

  export const PostTestHelpersCustomersCustomerFundCashBalanceResponseSchema =
    CustomerCashBalanceTransactionSchema
  export type PostTestHelpersCustomersCustomerFundCashBalanceResponse = z.infer<
    typeof PostTestHelpersCustomersCustomerFundCashBalanceResponseSchema
  >

  export const PostTestHelpersIssuingAuthorizationsParamsSchema = z.object({})
  export type PostTestHelpersIssuingAuthorizationsParams = z.infer<
    typeof PostTestHelpersIssuingAuthorizationsParamsSchema
  >

  export const PostTestHelpersIssuingAuthorizationsResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsResponse = z.infer<
    typeof PostTestHelpersIssuingAuthorizationsResponseSchema
  >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponseSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationExpireParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationExpireParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationExpireParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponseSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountResponseSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponseSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationReverseParamsSchema =
    z.object({ authorization: z.string().max(5000) })
  export type PostTestHelpersIssuingAuthorizationsAuthorizationReverseParams =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationReverseParamsSchema
    >

  export const PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponseSchema =
    IssuingAuthorizationSchema
  export type PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponse =
    z.infer<
      typeof PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponseSchema
    >

  export const PostTestHelpersIssuingCardsCardShippingDeliverParamsSchema =
    z.object({ card: z.string().max(5000) })
  export type PostTestHelpersIssuingCardsCardShippingDeliverParams = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingDeliverParamsSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingDeliverResponseSchema =
    IssuingCardSchema
  export type PostTestHelpersIssuingCardsCardShippingDeliverResponse = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingDeliverResponseSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingFailParamsSchema =
    z.object({ card: z.string().max(5000) })
  export type PostTestHelpersIssuingCardsCardShippingFailParams = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingFailParamsSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingFailResponseSchema =
    IssuingCardSchema
  export type PostTestHelpersIssuingCardsCardShippingFailResponse = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingFailResponseSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingReturnParamsSchema =
    z.object({ card: z.string().max(5000) })
  export type PostTestHelpersIssuingCardsCardShippingReturnParams = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingReturnParamsSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingReturnResponseSchema =
    IssuingCardSchema
  export type PostTestHelpersIssuingCardsCardShippingReturnResponse = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingReturnResponseSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingShipParamsSchema =
    z.object({ card: z.string().max(5000) })
  export type PostTestHelpersIssuingCardsCardShippingShipParams = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingShipParamsSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingShipResponseSchema =
    IssuingCardSchema
  export type PostTestHelpersIssuingCardsCardShippingShipResponse = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingShipResponseSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingSubmitParamsSchema =
    z.object({ card: z.string().max(5000) })
  export type PostTestHelpersIssuingCardsCardShippingSubmitParams = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingSubmitParamsSchema
  >

  export const PostTestHelpersIssuingCardsCardShippingSubmitResponseSchema =
    IssuingCardSchema
  export type PostTestHelpersIssuingCardsCardShippingSubmitResponse = z.infer<
    typeof PostTestHelpersIssuingCardsCardShippingSubmitResponseSchema
  >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateParamsSchema =
    z.object({ personalization_design: z.string().max(5000) })
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateParams =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateParamsSchema
    >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponseSchema =
    IssuingPersonalizationDesignSchema
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponse =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponseSchema
    >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateParamsSchema =
    z.object({ personalization_design: z.string().max(5000) })
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateParams =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateParamsSchema
    >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponseSchema =
    IssuingPersonalizationDesignSchema
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponse =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponseSchema
    >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectParamsSchema =
    z.object({ personalization_design: z.string().max(5000) })
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectParams =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectParamsSchema
    >

  export const PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponseSchema =
    IssuingPersonalizationDesignSchema
  export type PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponse =
    z.infer<
      typeof PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponseSchema
    >

  export const PostTestHelpersIssuingSettlementsParamsSchema = z.object({})
  export type PostTestHelpersIssuingSettlementsParams = z.infer<
    typeof PostTestHelpersIssuingSettlementsParamsSchema
  >

  export const PostTestHelpersIssuingSettlementsResponseSchema =
    IssuingSettlementSchema
  export type PostTestHelpersIssuingSettlementsResponse = z.infer<
    typeof PostTestHelpersIssuingSettlementsResponseSchema
  >

  export const PostTestHelpersIssuingSettlementsSettlementCompleteParamsSchema =
    z.object({
      /** The settlement token to mark as complete. */
      settlement: z
        .string()
        .max(5000)
        .describe('The settlement token to mark as complete.')
    })
  export type PostTestHelpersIssuingSettlementsSettlementCompleteParams =
    z.infer<
      typeof PostTestHelpersIssuingSettlementsSettlementCompleteParamsSchema
    >

  export const PostTestHelpersIssuingSettlementsSettlementCompleteResponseSchema =
    IssuingSettlementSchema
  export type PostTestHelpersIssuingSettlementsSettlementCompleteResponse =
    z.infer<
      typeof PostTestHelpersIssuingSettlementsSettlementCompleteResponseSchema
    >

  export const PostTestHelpersIssuingTransactionsCreateForceCaptureParamsSchema =
    z.object({})
  export type PostTestHelpersIssuingTransactionsCreateForceCaptureParams =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsCreateForceCaptureParamsSchema
    >

  export const PostTestHelpersIssuingTransactionsCreateForceCaptureResponseSchema =
    IssuingTransactionSchema
  export type PostTestHelpersIssuingTransactionsCreateForceCaptureResponse =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsCreateForceCaptureResponseSchema
    >

  export const PostTestHelpersIssuingTransactionsCreateUnlinkedRefundParamsSchema =
    z.object({})
  export type PostTestHelpersIssuingTransactionsCreateUnlinkedRefundParams =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsCreateUnlinkedRefundParamsSchema
    >

  export const PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponseSchema =
    IssuingTransactionSchema
  export type PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponse =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponseSchema
    >

  export const PostTestHelpersIssuingTransactionsTransactionRefundParamsSchema =
    z.object({ transaction: z.string().max(5000) })
  export type PostTestHelpersIssuingTransactionsTransactionRefundParams =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsTransactionRefundParamsSchema
    >

  export const PostTestHelpersIssuingTransactionsTransactionRefundResponseSchema =
    IssuingTransactionSchema
  export type PostTestHelpersIssuingTransactionsTransactionRefundResponse =
    z.infer<
      typeof PostTestHelpersIssuingTransactionsTransactionRefundResponseSchema
    >

  export const PostTestHelpersRefundsRefundExpireParamsSchema = z.object({
    refund: z.string()
  })
  export type PostTestHelpersRefundsRefundExpireParams = z.infer<
    typeof PostTestHelpersRefundsRefundExpireParamsSchema
  >

  export const PostTestHelpersRefundsRefundExpireResponseSchema = RefundSchema
  export type PostTestHelpersRefundsRefundExpireResponse = z.infer<
    typeof PostTestHelpersRefundsRefundExpireResponseSchema
  >

  export const PostTestHelpersTerminalReadersReaderPresentPaymentMethodParamsSchema =
    z.object({ reader: z.string().max(5000) })
  export type PostTestHelpersTerminalReadersReaderPresentPaymentMethodParams =
    z.infer<
      typeof PostTestHelpersTerminalReadersReaderPresentPaymentMethodParamsSchema
    >

  export const PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponseSchema =
    TerminalReaderSchema
  export type PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponse =
    z.infer<
      typeof PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponseSchema
    >

  export const GetTestHelpersTestClocksParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTestHelpersTestClocksParams = z.infer<
    typeof GetTestHelpersTestClocksParamsSchema
  >

  export const GetTestHelpersTestClocksResponseSchema = z.object({
    data: z.array(TestHelpersTestClockSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/test_helpers/test_clocks'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTestHelpersTestClocksResponse = z.infer<
    typeof GetTestHelpersTestClocksResponseSchema
  >

  export const PostTestHelpersTestClocksParamsSchema = z.object({})
  export type PostTestHelpersTestClocksParams = z.infer<
    typeof PostTestHelpersTestClocksParamsSchema
  >

  export const PostTestHelpersTestClocksResponseSchema =
    TestHelpersTestClockSchema
  export type PostTestHelpersTestClocksResponse = z.infer<
    typeof PostTestHelpersTestClocksResponseSchema
  >

  export const GetTestHelpersTestClocksTestClockParamsSchema = z.object({
    test_clock: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTestHelpersTestClocksTestClockParams = z.infer<
    typeof GetTestHelpersTestClocksTestClockParamsSchema
  >

  export const GetTestHelpersTestClocksTestClockResponseSchema =
    TestHelpersTestClockSchema
  export type GetTestHelpersTestClocksTestClockResponse = z.infer<
    typeof GetTestHelpersTestClocksTestClockResponseSchema
  >

  export const DeleteTestHelpersTestClocksTestClockParamsSchema = z.object({
    test_clock: z.string().max(5000)
  })
  export type DeleteTestHelpersTestClocksTestClockParams = z.infer<
    typeof DeleteTestHelpersTestClocksTestClockParamsSchema
  >

  export const DeleteTestHelpersTestClocksTestClockResponseSchema =
    DeletedTestHelpersTestClockSchema
  export type DeleteTestHelpersTestClocksTestClockResponse = z.infer<
    typeof DeleteTestHelpersTestClocksTestClockResponseSchema
  >

  export const PostTestHelpersTestClocksTestClockAdvanceParamsSchema = z.object(
    { test_clock: z.string().max(5000) }
  )
  export type PostTestHelpersTestClocksTestClockAdvanceParams = z.infer<
    typeof PostTestHelpersTestClocksTestClockAdvanceParamsSchema
  >

  export const PostTestHelpersTestClocksTestClockAdvanceResponseSchema =
    TestHelpersTestClockSchema
  export type PostTestHelpersTestClocksTestClockAdvanceResponse = z.infer<
    typeof PostTestHelpersTestClocksTestClockAdvanceResponseSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdFailParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryInboundTransfersIdFailParams = z.infer<
    typeof PostTestHelpersTreasuryInboundTransfersIdFailParamsSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdFailResponseSchema =
    TreasuryInboundTransferSchema
  export type PostTestHelpersTreasuryInboundTransfersIdFailResponse = z.infer<
    typeof PostTestHelpersTreasuryInboundTransfersIdFailResponseSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdReturnParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryInboundTransfersIdReturnParams = z.infer<
    typeof PostTestHelpersTreasuryInboundTransfersIdReturnParamsSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdReturnResponseSchema =
    TreasuryInboundTransferSchema
  export type PostTestHelpersTreasuryInboundTransfersIdReturnResponse = z.infer<
    typeof PostTestHelpersTreasuryInboundTransfersIdReturnResponseSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdSucceedParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryInboundTransfersIdSucceedParams = z.infer<
    typeof PostTestHelpersTreasuryInboundTransfersIdSucceedParamsSchema
  >

  export const PostTestHelpersTreasuryInboundTransfersIdSucceedResponseSchema =
    TreasuryInboundTransferSchema
  export type PostTestHelpersTreasuryInboundTransfersIdSucceedResponse =
    z.infer<
      typeof PostTestHelpersTreasuryInboundTransfersIdSucceedResponseSchema
    >

  export const PostTestHelpersTreasuryOutboundPaymentsIdParamsSchema = z.object(
    { id: z.string().max(5000) }
  )
  export type PostTestHelpersTreasuryOutboundPaymentsIdParams = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdParamsSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTestHelpersTreasuryOutboundPaymentsIdResponse = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdResponseSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdFailParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundPaymentsIdFailParams = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdFailParamsSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdFailResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTestHelpersTreasuryOutboundPaymentsIdFailResponse = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdFailResponseSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdPostParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundPaymentsIdPostParams = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdPostParamsSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdPostResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTestHelpersTreasuryOutboundPaymentsIdPostResponse = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdPostResponseSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdReturnParamsSchema =
    z.object({ id: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundPaymentsIdReturnParams = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdReturnParamsSchema
  >

  export const PostTestHelpersTreasuryOutboundPaymentsIdReturnResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTestHelpersTreasuryOutboundPaymentsIdReturnResponse = z.infer<
    typeof PostTestHelpersTreasuryOutboundPaymentsIdReturnResponseSchema
  >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferParamsSchema =
    z.object({ outbound_transfer: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferParams =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferParamsSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponse =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponseSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamsSchema =
    z.object({ outbound_transfer: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParams =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamsSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponse =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponseSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamsSchema =
    z.object({ outbound_transfer: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParams =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamsSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponse =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponseSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamsSchema =
    z.object({ outbound_transfer: z.string().max(5000) })
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParams =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamsSchema
    >

  export const PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponse =
    z.infer<
      typeof PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponseSchema
    >

  export const PostTestHelpersTreasuryReceivedCreditsParamsSchema = z.object({})
  export type PostTestHelpersTreasuryReceivedCreditsParams = z.infer<
    typeof PostTestHelpersTreasuryReceivedCreditsParamsSchema
  >

  export const PostTestHelpersTreasuryReceivedCreditsResponseSchema =
    TreasuryReceivedCreditSchema
  export type PostTestHelpersTreasuryReceivedCreditsResponse = z.infer<
    typeof PostTestHelpersTreasuryReceivedCreditsResponseSchema
  >

  export const PostTestHelpersTreasuryReceivedDebitsParamsSchema = z.object({})
  export type PostTestHelpersTreasuryReceivedDebitsParams = z.infer<
    typeof PostTestHelpersTreasuryReceivedDebitsParamsSchema
  >

  export const PostTestHelpersTreasuryReceivedDebitsResponseSchema =
    TreasuryReceivedDebitSchema
  export type PostTestHelpersTreasuryReceivedDebitsResponse = z.infer<
    typeof PostTestHelpersTreasuryReceivedDebitsResponseSchema
  >

  export const PostTokensParamsSchema = z.object({})
  export type PostTokensParams = z.infer<typeof PostTokensParamsSchema>

  export const PostTokensResponseSchema = TokenSchema
  export type PostTokensResponse = z.infer<typeof PostTokensResponseSchema>

  export const GetTokensTokenParamsSchema = z.object({
    token: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTokensTokenParams = z.infer<typeof GetTokensTokenParamsSchema>

  export const GetTokensTokenResponseSchema = TokenSchema
  export type GetTokensTokenResponse = z.infer<
    typeof GetTokensTokenResponseSchema
  >

  export const GetTopupsParamsSchema = z.object({
    /** A positive integer representing how much to transfer. */
    amount: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe('A positive integer representing how much to transfer.')
      .optional(),
    /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */
    status: z
      .enum(['canceled', 'failed', 'pending', 'succeeded'])
      .describe(
        'Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.'
      )
      .optional()
  })
  export type GetTopupsParams = z.infer<typeof GetTopupsParamsSchema>

  export const GetTopupsResponseSchema = z.object({
    data: z.array(TopupSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/topups'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTopupsResponse = z.infer<typeof GetTopupsResponseSchema>

  export const PostTopupsParamsSchema = z.object({})
  export type PostTopupsParams = z.infer<typeof PostTopupsParamsSchema>

  export const PostTopupsResponseSchema = TopupSchema
  export type PostTopupsResponse = z.infer<typeof PostTopupsResponseSchema>

  export const GetTopupsTopupParamsSchema = z.object({
    topup: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTopupsTopupParams = z.infer<typeof GetTopupsTopupParamsSchema>

  export const GetTopupsTopupResponseSchema = TopupSchema
  export type GetTopupsTopupResponse = z.infer<
    typeof GetTopupsTopupResponseSchema
  >

  export const PostTopupsTopupParamsSchema = z.object({
    topup: z.string().max(5000)
  })
  export type PostTopupsTopupParams = z.infer<
    typeof PostTopupsTopupParamsSchema
  >

  export const PostTopupsTopupResponseSchema = TopupSchema
  export type PostTopupsTopupResponse = z.infer<
    typeof PostTopupsTopupResponseSchema
  >

  export const PostTopupsTopupCancelParamsSchema = z.object({
    topup: z.string().max(5000)
  })
  export type PostTopupsTopupCancelParams = z.infer<
    typeof PostTopupsTopupCancelParamsSchema
  >

  export const PostTopupsTopupCancelResponseSchema = TopupSchema
  export type PostTopupsTopupCancelResponse = z.infer<
    typeof PostTopupsTopupCancelResponseSchema
  >

  export const GetTransfersParamsSchema = z.object({
    /** Only return transfers that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return transfers that were created during the given date interval.'
      )
      .optional(),
    /** Only return transfers for the destination specified by this account ID. */
    destination: z
      .string()
      .max(5000)
      .describe(
        'Only return transfers for the destination specified by this account ID.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return transfers with the specified transfer group. */
    transfer_group: z
      .string()
      .max(5000)
      .describe('Only return transfers with the specified transfer group.')
      .optional()
  })
  export type GetTransfersParams = z.infer<typeof GetTransfersParamsSchema>

  export const GetTransfersResponseSchema = z.object({
    /** Details about each object. */
    data: z.array(TransferSchema).describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/transfers'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTransfersResponse = z.infer<typeof GetTransfersResponseSchema>

  export const PostTransfersParamsSchema = z.object({})
  export type PostTransfersParams = z.infer<typeof PostTransfersParamsSchema>

  export const PostTransfersResponseSchema = TransferSchema
  export type PostTransfersResponse = z.infer<
    typeof PostTransfersResponseSchema
  >

  export const GetTransfersIdReversalsParamsSchema = z.object({
    id: z.string().max(5000),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetTransfersIdReversalsParams = z.infer<
    typeof GetTransfersIdReversalsParamsSchema
  >

  export const GetTransfersIdReversalsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TransferReversalSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTransfersIdReversalsResponse = z.infer<
    typeof GetTransfersIdReversalsResponseSchema
  >

  export const PostTransfersIdReversalsParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostTransfersIdReversalsParams = z.infer<
    typeof PostTransfersIdReversalsParamsSchema
  >

  export const PostTransfersIdReversalsResponseSchema = TransferReversalSchema
  export type PostTransfersIdReversalsResponse = z.infer<
    typeof PostTransfersIdReversalsResponseSchema
  >

  export const GetTransfersTransferParamsSchema = z.object({
    transfer: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTransfersTransferParams = z.infer<
    typeof GetTransfersTransferParamsSchema
  >

  export const GetTransfersTransferResponseSchema = TransferSchema
  export type GetTransfersTransferResponse = z.infer<
    typeof GetTransfersTransferResponseSchema
  >

  export const PostTransfersTransferParamsSchema = z.object({
    transfer: z.string().max(5000)
  })
  export type PostTransfersTransferParams = z.infer<
    typeof PostTransfersTransferParamsSchema
  >

  export const PostTransfersTransferResponseSchema = TransferSchema
  export type PostTransfersTransferResponse = z.infer<
    typeof PostTransfersTransferResponseSchema
  >

  export const GetTransfersTransferReversalsIdParamsSchema = z.object({
    id: z.string().max(5000),
    transfer: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTransfersTransferReversalsIdParams = z.infer<
    typeof GetTransfersTransferReversalsIdParamsSchema
  >

  export const GetTransfersTransferReversalsIdResponseSchema =
    TransferReversalSchema
  export type GetTransfersTransferReversalsIdResponse = z.infer<
    typeof GetTransfersTransferReversalsIdResponseSchema
  >

  export const PostTransfersTransferReversalsIdParamsSchema = z.object({
    id: z.string().max(5000),
    transfer: z.string().max(5000)
  })
  export type PostTransfersTransferReversalsIdParams = z.infer<
    typeof PostTransfersTransferReversalsIdParamsSchema
  >

  export const PostTransfersTransferReversalsIdResponseSchema =
    TransferReversalSchema
  export type PostTransfersTransferReversalsIdResponse = z.infer<
    typeof PostTransfersTransferReversalsIdResponseSchema
  >

  export const GetTreasuryCreditReversalsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return CreditReversals for the ReceivedCredit ID. */
    received_credit: z
      .string()
      .max(5000)
      .describe('Only return CreditReversals for the ReceivedCredit ID.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return CreditReversals for a given status. */
    status: z
      .enum(['canceled', 'posted', 'processing'])
      .describe('Only return CreditReversals for a given status.')
      .optional()
  })
  export type GetTreasuryCreditReversalsParams = z.infer<
    typeof GetTreasuryCreditReversalsParamsSchema
  >

  export const GetTreasuryCreditReversalsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryCreditReversalSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryCreditReversalsResponse = z.infer<
    typeof GetTreasuryCreditReversalsResponseSchema
  >

  export const PostTreasuryCreditReversalsParamsSchema = z.object({})
  export type PostTreasuryCreditReversalsParams = z.infer<
    typeof PostTreasuryCreditReversalsParamsSchema
  >

  export const PostTreasuryCreditReversalsResponseSchema =
    TreasuryCreditReversalSchema
  export type PostTreasuryCreditReversalsResponse = z.infer<
    typeof PostTreasuryCreditReversalsResponseSchema
  >

  export const GetTreasuryCreditReversalsCreditReversalParamsSchema = z.object({
    credit_reversal: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryCreditReversalsCreditReversalParams = z.infer<
    typeof GetTreasuryCreditReversalsCreditReversalParamsSchema
  >

  export const GetTreasuryCreditReversalsCreditReversalResponseSchema =
    TreasuryCreditReversalSchema
  export type GetTreasuryCreditReversalsCreditReversalResponse = z.infer<
    typeof GetTreasuryCreditReversalsCreditReversalResponseSchema
  >

  export const GetTreasuryDebitReversalsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return DebitReversals for the ReceivedDebit ID. */
    received_debit: z
      .string()
      .max(5000)
      .describe('Only return DebitReversals for the ReceivedDebit ID.')
      .optional(),
    /** Only return DebitReversals for a given resolution. */
    resolution: z
      .enum(['lost', 'won'])
      .describe('Only return DebitReversals for a given resolution.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return DebitReversals for a given status. */
    status: z
      .enum(['canceled', 'completed', 'processing'])
      .describe('Only return DebitReversals for a given status.')
      .optional()
  })
  export type GetTreasuryDebitReversalsParams = z.infer<
    typeof GetTreasuryDebitReversalsParamsSchema
  >

  export const GetTreasuryDebitReversalsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryDebitReversalSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryDebitReversalsResponse = z.infer<
    typeof GetTreasuryDebitReversalsResponseSchema
  >

  export const PostTreasuryDebitReversalsParamsSchema = z.object({})
  export type PostTreasuryDebitReversalsParams = z.infer<
    typeof PostTreasuryDebitReversalsParamsSchema
  >

  export const PostTreasuryDebitReversalsResponseSchema =
    TreasuryDebitReversalSchema
  export type PostTreasuryDebitReversalsResponse = z.infer<
    typeof PostTreasuryDebitReversalsResponseSchema
  >

  export const GetTreasuryDebitReversalsDebitReversalParamsSchema = z.object({
    debit_reversal: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryDebitReversalsDebitReversalParams = z.infer<
    typeof GetTreasuryDebitReversalsDebitReversalParamsSchema
  >

  export const GetTreasuryDebitReversalsDebitReversalResponseSchema =
    TreasuryDebitReversalSchema
  export type GetTreasuryDebitReversalsDebitReversalResponse = z.infer<
    typeof GetTreasuryDebitReversalsDebitReversalResponseSchema
  >

  export const GetTreasuryFinancialAccountsParamsSchema = z.object({
    /** Only return FinancialAccounts that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return FinancialAccounts that were created during the given date interval.'
      )
      .optional(),
    /** An object ID cursor for use in pagination. */
    ending_before: z
      .string()
      .max(5000)
      .describe('An object ID cursor for use in pagination.')
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit ranging from 1 to 100 (defaults to 10). */
    limit: z
      .number()
      .int()
      .describe('A limit ranging from 1 to 100 (defaults to 10).')
      .optional(),
    /** An object ID cursor for use in pagination. */
    starting_after: z
      .string()
      .max(5000)
      .describe('An object ID cursor for use in pagination.')
      .optional()
  })
  export type GetTreasuryFinancialAccountsParams = z.infer<
    typeof GetTreasuryFinancialAccountsParamsSchema
  >

  export const GetTreasuryFinancialAccountsResponseSchema = z.object({
    data: z.array(TreasuryFinancialAccountSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/treasury/financial_accounts'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryFinancialAccountsResponse = z.infer<
    typeof GetTreasuryFinancialAccountsResponseSchema
  >

  export const PostTreasuryFinancialAccountsParamsSchema = z.object({})
  export type PostTreasuryFinancialAccountsParams = z.infer<
    typeof PostTreasuryFinancialAccountsParamsSchema
  >

  export const PostTreasuryFinancialAccountsResponseSchema =
    TreasuryFinancialAccountSchema
  export type PostTreasuryFinancialAccountsResponse = z.infer<
    typeof PostTreasuryFinancialAccountsResponseSchema
  >

  export const GetTreasuryFinancialAccountsFinancialAccountParamsSchema =
    z.object({
      financial_account: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetTreasuryFinancialAccountsFinancialAccountParams = z.infer<
    typeof GetTreasuryFinancialAccountsFinancialAccountParamsSchema
  >

  export const GetTreasuryFinancialAccountsFinancialAccountResponseSchema =
    TreasuryFinancialAccountSchema
  export type GetTreasuryFinancialAccountsFinancialAccountResponse = z.infer<
    typeof GetTreasuryFinancialAccountsFinancialAccountResponseSchema
  >

  export const PostTreasuryFinancialAccountsFinancialAccountParamsSchema =
    z.object({ financial_account: z.string().max(5000) })
  export type PostTreasuryFinancialAccountsFinancialAccountParams = z.infer<
    typeof PostTreasuryFinancialAccountsFinancialAccountParamsSchema
  >

  export const PostTreasuryFinancialAccountsFinancialAccountResponseSchema =
    TreasuryFinancialAccountSchema
  export type PostTreasuryFinancialAccountsFinancialAccountResponse = z.infer<
    typeof PostTreasuryFinancialAccountsFinancialAccountResponseSchema
  >

  export const PostTreasuryFinancialAccountsFinancialAccountCloseParamsSchema =
    z.object({ financial_account: z.string().max(5000) })
  export type PostTreasuryFinancialAccountsFinancialAccountCloseParams =
    z.infer<
      typeof PostTreasuryFinancialAccountsFinancialAccountCloseParamsSchema
    >

  export const PostTreasuryFinancialAccountsFinancialAccountCloseResponseSchema =
    TreasuryFinancialAccountSchema
  export type PostTreasuryFinancialAccountsFinancialAccountCloseResponse =
    z.infer<
      typeof PostTreasuryFinancialAccountsFinancialAccountCloseResponseSchema
    >

  export const GetTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema =
    z.object({
      financial_account: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetTreasuryFinancialAccountsFinancialAccountFeaturesParams =
    z.infer<
      typeof GetTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema
    >

  export const GetTreasuryFinancialAccountsFinancialAccountFeaturesResponseSchema =
    TreasuryFinancialAccountFeaturesSchema
  export type GetTreasuryFinancialAccountsFinancialAccountFeaturesResponse =
    z.infer<
      typeof GetTreasuryFinancialAccountsFinancialAccountFeaturesResponseSchema
    >

  export const PostTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema =
    z.object({ financial_account: z.string().max(5000) })
  export type PostTreasuryFinancialAccountsFinancialAccountFeaturesParams =
    z.infer<
      typeof PostTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema
    >

  export const PostTreasuryFinancialAccountsFinancialAccountFeaturesResponseSchema =
    TreasuryFinancialAccountFeaturesSchema
  export type PostTreasuryFinancialAccountsFinancialAccountFeaturesResponse =
    z.infer<
      typeof PostTreasuryFinancialAccountsFinancialAccountFeaturesResponseSchema
    >

  export const GetTreasuryInboundTransfersParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`. */
    status: z
      .enum(['canceled', 'failed', 'processing', 'succeeded'])
      .describe(
        'Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.'
      )
      .optional()
  })
  export type GetTreasuryInboundTransfersParams = z.infer<
    typeof GetTreasuryInboundTransfersParamsSchema
  >

  export const GetTreasuryInboundTransfersResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryInboundTransferSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryInboundTransfersResponse = z.infer<
    typeof GetTreasuryInboundTransfersResponseSchema
  >

  export const PostTreasuryInboundTransfersParamsSchema = z.object({})
  export type PostTreasuryInboundTransfersParams = z.infer<
    typeof PostTreasuryInboundTransfersParamsSchema
  >

  export const PostTreasuryInboundTransfersResponseSchema =
    TreasuryInboundTransferSchema
  export type PostTreasuryInboundTransfersResponse = z.infer<
    typeof PostTreasuryInboundTransfersResponseSchema
  >

  export const GetTreasuryInboundTransfersIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryInboundTransfersIdParams = z.infer<
    typeof GetTreasuryInboundTransfersIdParamsSchema
  >

  export const GetTreasuryInboundTransfersIdResponseSchema =
    TreasuryInboundTransferSchema
  export type GetTreasuryInboundTransfersIdResponse = z.infer<
    typeof GetTreasuryInboundTransfersIdResponseSchema
  >

  export const PostTreasuryInboundTransfersInboundTransferCancelParamsSchema =
    z.object({ inbound_transfer: z.string().max(5000) })
  export type PostTreasuryInboundTransfersInboundTransferCancelParams = z.infer<
    typeof PostTreasuryInboundTransfersInboundTransferCancelParamsSchema
  >

  export const PostTreasuryInboundTransfersInboundTransferCancelResponseSchema =
    TreasuryInboundTransferSchema
  export type PostTreasuryInboundTransfersInboundTransferCancelResponse =
    z.infer<
      typeof PostTreasuryInboundTransfersInboundTransferCancelResponseSchema
    >

  export const GetTreasuryOutboundPaymentsParamsSchema = z.object({
    /** Only return OutboundPayments that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return OutboundPayments that were created during the given date interval.'
      )
      .optional(),
    /** Only return OutboundPayments sent to this customer. */
    customer: z
      .string()
      .max(5000)
      .describe('Only return OutboundPayments sent to this customer.')
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`. */
    status: z
      .enum(['canceled', 'failed', 'posted', 'processing', 'returned'])
      .describe(
        'Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.'
      )
      .optional()
  })
  export type GetTreasuryOutboundPaymentsParams = z.infer<
    typeof GetTreasuryOutboundPaymentsParamsSchema
  >

  export const GetTreasuryOutboundPaymentsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryOutboundPaymentSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/treasury/outbound_payments'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryOutboundPaymentsResponse = z.infer<
    typeof GetTreasuryOutboundPaymentsResponseSchema
  >

  export const PostTreasuryOutboundPaymentsParamsSchema = z.object({})
  export type PostTreasuryOutboundPaymentsParams = z.infer<
    typeof PostTreasuryOutboundPaymentsParamsSchema
  >

  export const PostTreasuryOutboundPaymentsResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTreasuryOutboundPaymentsResponse = z.infer<
    typeof PostTreasuryOutboundPaymentsResponseSchema
  >

  export const GetTreasuryOutboundPaymentsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryOutboundPaymentsIdParams = z.infer<
    typeof GetTreasuryOutboundPaymentsIdParamsSchema
  >

  export const GetTreasuryOutboundPaymentsIdResponseSchema =
    TreasuryOutboundPaymentSchema
  export type GetTreasuryOutboundPaymentsIdResponse = z.infer<
    typeof GetTreasuryOutboundPaymentsIdResponseSchema
  >

  export const PostTreasuryOutboundPaymentsIdCancelParamsSchema = z.object({
    id: z.string().max(5000)
  })
  export type PostTreasuryOutboundPaymentsIdCancelParams = z.infer<
    typeof PostTreasuryOutboundPaymentsIdCancelParamsSchema
  >

  export const PostTreasuryOutboundPaymentsIdCancelResponseSchema =
    TreasuryOutboundPaymentSchema
  export type PostTreasuryOutboundPaymentsIdCancelResponse = z.infer<
    typeof PostTreasuryOutboundPaymentsIdCancelResponseSchema
  >

  export const GetTreasuryOutboundTransfersParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`. */
    status: z
      .enum(['canceled', 'failed', 'posted', 'processing', 'returned'])
      .describe(
        'Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.'
      )
      .optional()
  })
  export type GetTreasuryOutboundTransfersParams = z.infer<
    typeof GetTreasuryOutboundTransfersParamsSchema
  >

  export const GetTreasuryOutboundTransfersResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryOutboundTransferSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryOutboundTransfersResponse = z.infer<
    typeof GetTreasuryOutboundTransfersResponseSchema
  >

  export const PostTreasuryOutboundTransfersParamsSchema = z.object({})
  export type PostTreasuryOutboundTransfersParams = z.infer<
    typeof PostTreasuryOutboundTransfersParamsSchema
  >

  export const PostTreasuryOutboundTransfersResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTreasuryOutboundTransfersResponse = z.infer<
    typeof PostTreasuryOutboundTransfersResponseSchema
  >

  export const GetTreasuryOutboundTransfersOutboundTransferParamsSchema =
    z.object({
      outbound_transfer: z.string().max(5000),
      /** Specifies which fields in the response should be expanded. */
      expand: z
        .array(z.string().max(5000))
        .describe('Specifies which fields in the response should be expanded.')
        .optional()
    })
  export type GetTreasuryOutboundTransfersOutboundTransferParams = z.infer<
    typeof GetTreasuryOutboundTransfersOutboundTransferParamsSchema
  >

  export const GetTreasuryOutboundTransfersOutboundTransferResponseSchema =
    TreasuryOutboundTransferSchema
  export type GetTreasuryOutboundTransfersOutboundTransferResponse = z.infer<
    typeof GetTreasuryOutboundTransfersOutboundTransferResponseSchema
  >

  export const PostTreasuryOutboundTransfersOutboundTransferCancelParamsSchema =
    z.object({ outbound_transfer: z.string().max(5000) })
  export type PostTreasuryOutboundTransfersOutboundTransferCancelParams =
    z.infer<
      typeof PostTreasuryOutboundTransfersOutboundTransferCancelParamsSchema
    >

  export const PostTreasuryOutboundTransfersOutboundTransferCancelResponseSchema =
    TreasuryOutboundTransferSchema
  export type PostTreasuryOutboundTransfersOutboundTransferCancelResponse =
    z.infer<
      typeof PostTreasuryOutboundTransfersOutboundTransferCancelResponseSchema
    >

  export const GetTreasuryReceivedCreditsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** The FinancialAccount that received the funds. */
    financial_account: z
      .string()
      .describe('The FinancialAccount that received the funds.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** Only return ReceivedCredits described by the flow. */
    linked_flows: z
      .object({
        source_flow_type: z.enum([
          'credit_reversal',
          'other',
          'outbound_payment',
          'outbound_transfer',
          'payout'
        ])
      })
      .describe('Only return ReceivedCredits described by the flow.')
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return ReceivedCredits that have the given status: `succeeded` or `failed`. */
    status: z
      .enum(['failed', 'succeeded'])
      .describe(
        'Only return ReceivedCredits that have the given status: `succeeded` or `failed`.'
      )
      .optional()
  })
  export type GetTreasuryReceivedCreditsParams = z.infer<
    typeof GetTreasuryReceivedCreditsParamsSchema
  >

  export const GetTreasuryReceivedCreditsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryReceivedCreditSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryReceivedCreditsResponse = z.infer<
    typeof GetTreasuryReceivedCreditsResponseSchema
  >

  export const GetTreasuryReceivedCreditsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryReceivedCreditsIdParams = z.infer<
    typeof GetTreasuryReceivedCreditsIdParamsSchema
  >

  export const GetTreasuryReceivedCreditsIdResponseSchema =
    TreasuryReceivedCreditSchema
  export type GetTreasuryReceivedCreditsIdResponse = z.infer<
    typeof GetTreasuryReceivedCreditsIdResponseSchema
  >

  export const GetTreasuryReceivedDebitsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** The FinancialAccount that funds were pulled from. */
    financial_account: z
      .string()
      .describe('The FinancialAccount that funds were pulled from.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return ReceivedDebits that have the given status: `succeeded` or `failed`. */
    status: z
      .enum(['failed', 'succeeded'])
      .describe(
        'Only return ReceivedDebits that have the given status: `succeeded` or `failed`.'
      )
      .optional()
  })
  export type GetTreasuryReceivedDebitsParams = z.infer<
    typeof GetTreasuryReceivedDebitsParamsSchema
  >

  export const GetTreasuryReceivedDebitsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryReceivedDebitSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryReceivedDebitsResponse = z.infer<
    typeof GetTreasuryReceivedDebitsResponseSchema
  >

  export const GetTreasuryReceivedDebitsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryReceivedDebitsIdParams = z.infer<
    typeof GetTreasuryReceivedDebitsIdParamsSchema
  >

  export const GetTreasuryReceivedDebitsIdResponseSchema =
    TreasuryReceivedDebitSchema
  export type GetTreasuryReceivedDebitsIdResponse = z.infer<
    typeof GetTreasuryReceivedDebitsIdResponseSchema
  >

  export const GetTreasuryTransactionEntriesParamsSchema = z.object({
    /** Only return TransactionEntries that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return TransactionEntries that were created during the given date interval.'
      )
      .optional(),
    effective_at: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The results are in reverse chronological order by `created` or `effective_at`. The default is `created`. */
    order_by: z
      .enum(['created', 'effective_at'])
      .describe(
        'The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return TransactionEntries associated with this Transaction. */
    transaction: z
      .string()
      .max(5000)
      .describe(
        'Only return TransactionEntries associated with this Transaction.'
      )
      .optional()
  })
  export type GetTreasuryTransactionEntriesParams = z.infer<
    typeof GetTreasuryTransactionEntriesParamsSchema
  >

  export const GetTreasuryTransactionEntriesResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryTransactionEntrySchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/treasury/transaction_entries'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryTransactionEntriesResponse = z.infer<
    typeof GetTreasuryTransactionEntriesResponseSchema
  >

  export const GetTreasuryTransactionEntriesIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryTransactionEntriesIdParams = z.infer<
    typeof GetTreasuryTransactionEntriesIdParamsSchema
  >

  export const GetTreasuryTransactionEntriesIdResponseSchema =
    TreasuryTransactionEntrySchema
  export type GetTreasuryTransactionEntriesIdResponse = z.infer<
    typeof GetTreasuryTransactionEntriesIdResponseSchema
  >

  export const GetTreasuryTransactionsParamsSchema = z.object({
    /** Only return Transactions that were created during the given date interval. */
    created: z
      .union([
        z.object({
          gt: z.number().int().optional(),
          gte: z.number().int().optional(),
          lt: z.number().int().optional(),
          lte: z.number().int().optional()
        }),
        z.number().int()
      ])
      .describe(
        'Only return Transactions that were created during the given date interval.'
      )
      .optional(),
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** Returns objects associated with this FinancialAccount. */
    financial_account: z
      .string()
      .describe('Returns objects associated with this FinancialAccount.'),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** The results are in reverse chronological order by `created` or `posted_at`. The default is `created`. */
    order_by: z
      .enum(['created', 'posted_at'])
      .describe(
        'The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional(),
    /** Only return Transactions that have the given status: `open`, `posted`, or `void`. */
    status: z
      .enum(['open', 'posted', 'void'])
      .describe(
        'Only return Transactions that have the given status: `open`, `posted`, or `void`.'
      )
      .optional(),
    /** A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified. */
    status_transitions: z
      .object({
        posted_at: z
          .union([
            z.object({
              gt: z.number().int().optional(),
              gte: z.number().int().optional(),
              lt: z.number().int().optional(),
              lte: z.number().int().optional()
            }),
            z.number().int()
          ])
          .optional()
      })
      .describe(
        'A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.'
      )
      .optional()
  })
  export type GetTreasuryTransactionsParams = z.infer<
    typeof GetTreasuryTransactionsParamsSchema
  >

  export const GetTreasuryTransactionsResponseSchema = z.object({
    /** Details about each object. */
    data: z
      .array(TreasuryTransactionSchema)
      .describe('Details about each object.'),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetTreasuryTransactionsResponse = z.infer<
    typeof GetTreasuryTransactionsResponseSchema
  >

  export const GetTreasuryTransactionsIdParamsSchema = z.object({
    id: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetTreasuryTransactionsIdParams = z.infer<
    typeof GetTreasuryTransactionsIdParamsSchema
  >

  export const GetTreasuryTransactionsIdResponseSchema =
    TreasuryTransactionSchema
  export type GetTreasuryTransactionsIdResponse = z.infer<
    typeof GetTreasuryTransactionsIdResponseSchema
  >

  export const GetWebhookEndpointsParamsSchema = z.object({
    /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
    ending_before: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.'
      )
      .optional(),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional(),
    /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
    limit: z
      .number()
      .int()
      .describe(
        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'
      )
      .optional(),
    /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
    starting_after: z
      .string()
      .max(5000)
      .describe(
        'A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.'
      )
      .optional()
  })
  export type GetWebhookEndpointsParams = z.infer<
    typeof GetWebhookEndpointsParamsSchema
  >

  export const GetWebhookEndpointsResponseSchema = z.object({
    data: z.array(WebhookEndpointSchema),
    /** True if this list has another page of items after this one that can be fetched. */
    has_more: z
      .boolean()
      .describe(
        'True if this list has another page of items after this one that can be fetched.'
      ),
    /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
    object: z
      .literal('list')
      .describe(
        "String representing the object's type. Objects of the same type share the same value. Always has the value `list`."
      ),
    /** The URL where this list can be accessed. */
    url: z
      .string()
      .regex(new RegExp('^/v1/webhook_endpoints'))
      .max(5000)
      .describe('The URL where this list can be accessed.')
  })
  export type GetWebhookEndpointsResponse = z.infer<
    typeof GetWebhookEndpointsResponseSchema
  >

  export const PostWebhookEndpointsParamsSchema = z.object({})
  export type PostWebhookEndpointsParams = z.infer<
    typeof PostWebhookEndpointsParamsSchema
  >

  export const PostWebhookEndpointsResponseSchema = WebhookEndpointSchema
  export type PostWebhookEndpointsResponse = z.infer<
    typeof PostWebhookEndpointsResponseSchema
  >

  export const GetWebhookEndpointsWebhookEndpointParamsSchema = z.object({
    webhook_endpoint: z.string().max(5000),
    /** Specifies which fields in the response should be expanded. */
    expand: z
      .array(z.string().max(5000))
      .describe('Specifies which fields in the response should be expanded.')
      .optional()
  })
  export type GetWebhookEndpointsWebhookEndpointParams = z.infer<
    typeof GetWebhookEndpointsWebhookEndpointParamsSchema
  >

  export const GetWebhookEndpointsWebhookEndpointResponseSchema =
    WebhookEndpointSchema
  export type GetWebhookEndpointsWebhookEndpointResponse = z.infer<
    typeof GetWebhookEndpointsWebhookEndpointResponseSchema
  >

  export const PostWebhookEndpointsWebhookEndpointParamsSchema = z.object({
    webhook_endpoint: z.string().max(5000)
  })
  export type PostWebhookEndpointsWebhookEndpointParams = z.infer<
    typeof PostWebhookEndpointsWebhookEndpointParamsSchema
  >

  export const PostWebhookEndpointsWebhookEndpointResponseSchema =
    WebhookEndpointSchema
  export type PostWebhookEndpointsWebhookEndpointResponse = z.infer<
    typeof PostWebhookEndpointsWebhookEndpointResponseSchema
  >

  export const DeleteWebhookEndpointsWebhookEndpointParamsSchema = z.object({
    webhook_endpoint: z.string().max(5000)
  })
  export type DeleteWebhookEndpointsWebhookEndpointParams = z.infer<
    typeof DeleteWebhookEndpointsWebhookEndpointParamsSchema
  >

  export const DeleteWebhookEndpointsWebhookEndpointResponseSchema =
    DeletedWebhookEndpointSchema
  export type DeleteWebhookEndpointsWebhookEndpointResponse = z.infer<
    typeof DeleteWebhookEndpointsWebhookEndpointResponseSchema
  >
}

/**
 * Agentic Stripe client.
 *
 * The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 */
export class StripeClient extends AIFunctionsProvider {
  protected readonly ky: KyInstance
  protected readonly apiKey: string
  protected readonly apiBaseUrl: string

  constructor({
    apiKey = getEnv('STRIPE_API_KEY'),
    apiBaseUrl = stripe.apiBaseUrl,
    ky = defaultKy
  }: {
    apiKey?: string
    apiBaseUrl?: string
    ky?: KyInstance
  } = {}) {
    assert(
      apiKey,
      'StripeClient missing required "apiKey" (defaults to "STRIPE_API_KEY")'
    )
    super()

    this.apiKey = apiKey
    this.apiBaseUrl = apiBaseUrl

    this.ky = ky.extend({
      prefixUrl: apiBaseUrl,
      headers: {
        Authorization: apiKey
      }
    })
  }

  /**
   * <p>Retrieves the details of an account.</p>.
   */
  @aiFunction({
    name: 'get_account',
    description: '<p>Retrieves the details of an account.</p>.',
    inputSchema: stripe.GetAccountParamsSchema
  })
  async GetAccount(
    params: stripe.GetAccountParams
  ): Promise<stripe.GetAccountResponse> {
    return this.ky
      .get('/v1/account', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetAccountResponse>()
  }

  /**
   * <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>.
   */
  @aiFunction({
    name: 'post_account_links',
    description:
      '<p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>.',
    inputSchema: stripe.PostAccountLinksParamsSchema
  })
  async PostAccountLinks(
    _params: stripe.PostAccountLinksParams
  ): Promise<stripe.PostAccountLinksResponse> {
    return this.ky
      .post('/v1/account_links')
      .json<stripe.PostAccountLinksResponse>()
  }

  /**
   * <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>.
   */
  @aiFunction({
    name: 'post_account_sessions',
    description:
      '<p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>.',
    inputSchema: stripe.PostAccountSessionsParamsSchema
  })
  async PostAccountSessions(
    _params: stripe.PostAccountSessionsParams
  ): Promise<stripe.PostAccountSessionsResponse> {
    return this.ky
      .post('/v1/account_sessions')
      .json<stripe.PostAccountSessionsResponse>()
  }

  /**
   * <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>.
   */
  @aiFunction({
    name: 'get_accounts',
    description:
      '<p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>.',
    inputSchema: stripe.GetAccountsParamsSchema
  })
  async GetAccounts(
    params: stripe.GetAccountsParams
  ): Promise<stripe.GetAccountsResponse> {
    return this.ky
      .get('/v1/accounts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetAccountsResponse>()
  }

  /**
 * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>

<p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
You can prefill any information on the account.</p>.
 */
  @aiFunction({
    name: 'post_accounts',
    description: `<p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>

<p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
You can prefill any information on the account.</p>.`,
    inputSchema: stripe.PostAccountsParamsSchema
  })
  async PostAccounts(
    _params: stripe.PostAccountsParams
  ): Promise<stripe.PostAccountsResponse> {
    return this.ky.post('/v1/accounts').json<stripe.PostAccountsResponse>()
  }

  /**
   * <p>Retrieves the details of an account.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account',
    description: '<p>Retrieves the details of an account.</p>.',
    inputSchema: stripe.GetAccountsAccountParamsSchema
  })
  async GetAccountsAccount(
    params: stripe.GetAccountsAccountParams
  ): Promise<stripe.GetAccountsAccountResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetAccountsAccountResponse>()
  }

  /**
 * <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
left unchanged.</p>

<p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>

<p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
after which some properties can no longer be updated.</p>

<p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
<a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>.
 */
  @aiFunction({
    name: 'post_accounts_account',
    description: `<p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
left unchanged.</p>

<p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>

<p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
after which some properties can no longer be updated.</p>

<p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
<a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>.`,
    inputSchema: stripe.PostAccountsAccountParamsSchema
  })
  async PostAccountsAccount(
    params: stripe.PostAccountsAccountParams
  ): Promise<stripe.PostAccountsAccountResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}`)
      .json<stripe.PostAccountsAccountResponse>()
  }

  /**
 * <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>

<p>Test-mode accounts can be deleted at any time.</p>

<p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balance_object">balances</a> are zero.</p>

<p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>.
 */
  @aiFunction({
    name: 'delete_accounts_account',
    description: `<p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>

<p>Test-mode accounts can be deleted at any time.</p>

<p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balance_object">balances</a> are zero.</p>

<p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>.`,
    inputSchema: stripe.DeleteAccountsAccountParamsSchema
  })
  async DeleteAccountsAccount(
    params: stripe.DeleteAccountsAccountParams
  ): Promise<stripe.DeleteAccountsAccountResponse> {
    return this.ky
      .delete(`/v1/accounts/${params.account}`)
      .json<stripe.DeleteAccountsAccountResponse>()
  }

  /**
   * <p>Create an external account for a given account.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_bank_accounts',
    description: '<p>Create an external account for a given account.</p>.',
    inputSchema: stripe.PostAccountsAccountBankAccountsParamsSchema
  })
  async PostAccountsAccountBankAccounts(
    params: stripe.PostAccountsAccountBankAccountsParams
  ): Promise<stripe.PostAccountsAccountBankAccountsResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/bank_accounts`)
      .json<stripe.PostAccountsAccountBankAccountsResponse>()
  }

  /**
   * <p>Retrieve a specified external account for a given account.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_bank_accounts_id',
    description:
      '<p>Retrieve a specified external account for a given account.</p>.',
    inputSchema: stripe.GetAccountsAccountBankAccountsIdParamsSchema
  })
  async GetAccountsAccountBankAccountsId(
    params: stripe.GetAccountsAccountBankAccountsIdParams
  ): Promise<stripe.GetAccountsAccountBankAccountsIdResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/bank_accounts/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetAccountsAccountBankAccountsIdResponse>()
  }

  /**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
a connected account and optionally sets it as the default for its currency. Other bank account
details are not editable by design.</p>

<p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>

<p>You can re-enable a disabled bank account by performing an update call without providing any
arguments or changes.</p>.
 */
  @aiFunction({
    name: 'post_accounts_account_bank_accounts_id',
    description: `<p>Updates the metadata, account holder name, account holder type of a bank account belonging to
a connected account and optionally sets it as the default for its currency. Other bank account
details are not editable by design.</p>

<p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>

<p>You can re-enable a disabled bank account by performing an update call without providing any
arguments or changes.</p>.`,
    inputSchema: stripe.PostAccountsAccountBankAccountsIdParamsSchema
  })
  async PostAccountsAccountBankAccountsId(
    params: stripe.PostAccountsAccountBankAccountsIdParams
  ): Promise<stripe.PostAccountsAccountBankAccountsIdResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/bank_accounts/${params.id}`)
      .json<stripe.PostAccountsAccountBankAccountsIdResponse>()
  }

  /**
   * <p>Delete a specified external account for a given account.</p>.
   */
  @aiFunction({
    name: 'delete_accounts_account_bank_accounts_id',
    description:
      '<p>Delete a specified external account for a given account.</p>.',
    inputSchema: stripe.DeleteAccountsAccountBankAccountsIdParamsSchema
  })
  async DeleteAccountsAccountBankAccountsId(
    params: stripe.DeleteAccountsAccountBankAccountsIdParams
  ): Promise<stripe.DeleteAccountsAccountBankAccountsIdResponse> {
    return this.ky
      .delete(`/v1/accounts/${params.account}/bank_accounts/${params.id}`)
      .json<stripe.DeleteAccountsAccountBankAccountsIdResponse>()
  }

  /**
   * <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_capabilities',
    description:
      '<p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>.',
    inputSchema: stripe.GetAccountsAccountCapabilitiesParamsSchema
  })
  async GetAccountsAccountCapabilities(
    params: stripe.GetAccountsAccountCapabilitiesParams
  ): Promise<stripe.GetAccountsAccountCapabilitiesResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/capabilities`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetAccountsAccountCapabilitiesResponse>()
  }

  /**
   * <p>Retrieves information about the specified Account Capability.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_capabilities_capability',
    description:
      '<p>Retrieves information about the specified Account Capability.</p>.',
    inputSchema: stripe.GetAccountsAccountCapabilitiesCapabilityParamsSchema
  })
  async GetAccountsAccountCapabilitiesCapability(
    params: stripe.GetAccountsAccountCapabilitiesCapabilityParams
  ): Promise<stripe.GetAccountsAccountCapabilitiesCapabilityResponse> {
    return this.ky
      .get(
        `/v1/accounts/${params.account}/capabilities/${params.capability}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetAccountsAccountCapabilitiesCapabilityResponse>()
  }

  /**
   * <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_capabilities_capability',
    description:
      '<p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>.',
    inputSchema: stripe.PostAccountsAccountCapabilitiesCapabilityParamsSchema
  })
  async PostAccountsAccountCapabilitiesCapability(
    params: stripe.PostAccountsAccountCapabilitiesCapabilityParams
  ): Promise<stripe.PostAccountsAccountCapabilitiesCapabilityResponse> {
    return this.ky
      .post(
        `/v1/accounts/${params.account}/capabilities/${params.capability}`
      )
      .json<stripe.PostAccountsAccountCapabilitiesCapabilityResponse>()
  }

  /**
   * <p>List external accounts for an account.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_external_accounts',
    description: '<p>List external accounts for an account.</p>.',
    inputSchema: stripe.GetAccountsAccountExternalAccountsParamsSchema
  })
  async GetAccountsAccountExternalAccounts(
    params: stripe.GetAccountsAccountExternalAccountsParams
  ): Promise<stripe.GetAccountsAccountExternalAccountsResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/external_accounts`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'object',
            'starting_after'
          )
        )
      })
      .json<stripe.GetAccountsAccountExternalAccountsResponse>()
  }

  /**
   * <p>Create an external account for a given account.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_external_accounts',
    description: '<p>Create an external account for a given account.</p>.',
    inputSchema: stripe.PostAccountsAccountExternalAccountsParamsSchema
  })
  async PostAccountsAccountExternalAccounts(
    params: stripe.PostAccountsAccountExternalAccountsParams
  ): Promise<stripe.PostAccountsAccountExternalAccountsResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/external_accounts`)
      .json<stripe.PostAccountsAccountExternalAccountsResponse>()
  }

  /**
   * <p>Retrieve a specified external account for a given account.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_external_accounts_id',
    description:
      '<p>Retrieve a specified external account for a given account.</p>.',
    inputSchema: stripe.GetAccountsAccountExternalAccountsIdParamsSchema
  })
  async GetAccountsAccountExternalAccountsId(
    params: stripe.GetAccountsAccountExternalAccountsIdParams
  ): Promise<stripe.GetAccountsAccountExternalAccountsIdResponse> {
    return this.ky
      .get(
        `/v1/accounts/${params.account}/external_accounts/${params.id}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetAccountsAccountExternalAccountsIdResponse>()
  }

  /**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
a connected account and optionally sets it as the default for its currency. Other bank account
details are not editable by design.</p>

<p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>

<p>You can re-enable a disabled bank account by performing an update call without providing any
arguments or changes.</p>.
 */
  @aiFunction({
    name: 'post_accounts_account_external_accounts_id',
    description: `<p>Updates the metadata, account holder name, account holder type of a bank account belonging to
a connected account and optionally sets it as the default for its currency. Other bank account
details are not editable by design.</p>

<p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>

<p>You can re-enable a disabled bank account by performing an update call without providing any
arguments or changes.</p>.`,
    inputSchema: stripe.PostAccountsAccountExternalAccountsIdParamsSchema
  })
  async PostAccountsAccountExternalAccountsId(
    params: stripe.PostAccountsAccountExternalAccountsIdParams
  ): Promise<stripe.PostAccountsAccountExternalAccountsIdResponse> {
    return this.ky
      .post(
        `/v1/accounts/${params.account}/external_accounts/${params.id}`
      )
      .json<stripe.PostAccountsAccountExternalAccountsIdResponse>()
  }

  /**
   * <p>Delete a specified external account for a given account.</p>.
   */
  @aiFunction({
    name: 'delete_accounts_account_external_accounts_id',
    description:
      '<p>Delete a specified external account for a given account.</p>.',
    inputSchema: stripe.DeleteAccountsAccountExternalAccountsIdParamsSchema
  })
  async DeleteAccountsAccountExternalAccountsId(
    params: stripe.DeleteAccountsAccountExternalAccountsIdParams
  ): Promise<stripe.DeleteAccountsAccountExternalAccountsIdResponse> {
    return this.ky
      .delete(
        `/v1/accounts/${params.account}/external_accounts/${params.id}`
      )
      .json<stripe.DeleteAccountsAccountExternalAccountsIdResponse>()
  }

  /**
 * <p>Creates a login link for a connected account to access the Express Dashboard.</p>

<p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>.
 */
  @aiFunction({
    name: 'post_accounts_account_login_links',
    description: `<p>Creates a login link for a connected account to access the Express Dashboard.</p>

<p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>.`,
    inputSchema: stripe.PostAccountsAccountLoginLinksParamsSchema
  })
  async PostAccountsAccountLoginLinks(
    params: stripe.PostAccountsAccountLoginLinksParams
  ): Promise<stripe.PostAccountsAccountLoginLinksResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/login_links`)
      .json<stripe.PostAccountsAccountLoginLinksResponse>()
  }

  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_people',
    description:
      '<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.',
    inputSchema: stripe.GetAccountsAccountPeopleParamsSchema
  })
  async GetAccountsAccountPeople(
    params: stripe.GetAccountsAccountPeopleParams
  ): Promise<stripe.GetAccountsAccountPeopleResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/people`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'relationship',
            'starting_after'
          )
        )
      })
      .json<stripe.GetAccountsAccountPeopleResponse>()
  }

  /**
   * <p>Creates a new person.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_people',
    description: '<p>Creates a new person.</p>.',
    inputSchema: stripe.PostAccountsAccountPeopleParamsSchema
  })
  async PostAccountsAccountPeople(
    params: stripe.PostAccountsAccountPeopleParams
  ): Promise<stripe.PostAccountsAccountPeopleResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/people`)
      .json<stripe.PostAccountsAccountPeopleResponse>()
  }

  /**
   * <p>Retrieves an existing person.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_people_person',
    description: '<p>Retrieves an existing person.</p>.',
    inputSchema: stripe.GetAccountsAccountPeoplePersonParamsSchema
  })
  async GetAccountsAccountPeoplePerson(
    params: stripe.GetAccountsAccountPeoplePersonParams
  ): Promise<stripe.GetAccountsAccountPeoplePersonResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/people/${params.person}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetAccountsAccountPeoplePersonResponse>()
  }

  /**
   * <p>Updates an existing person.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_people_person',
    description: '<p>Updates an existing person.</p>.',
    inputSchema: stripe.PostAccountsAccountPeoplePersonParamsSchema
  })
  async PostAccountsAccountPeoplePerson(
    params: stripe.PostAccountsAccountPeoplePersonParams
  ): Promise<stripe.PostAccountsAccountPeoplePersonResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/people/${params.person}`)
      .json<stripe.PostAccountsAccountPeoplePersonResponse>()
  }

  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>.
   */
  @aiFunction({
    name: 'delete_accounts_account_people_person',
    description:
      '<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>.',
    inputSchema: stripe.DeleteAccountsAccountPeoplePersonParamsSchema
  })
  async DeleteAccountsAccountPeoplePerson(
    params: stripe.DeleteAccountsAccountPeoplePersonParams
  ): Promise<stripe.DeleteAccountsAccountPeoplePersonResponse> {
    return this.ky
      .delete(`/v1/accounts/${params.account}/people/${params.person}`)
      .json<stripe.DeleteAccountsAccountPeoplePersonResponse>()
  }

  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_persons',
    description:
      '<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.',
    inputSchema: stripe.GetAccountsAccountPersonsParamsSchema
  })
  async GetAccountsAccountPersons(
    params: stripe.GetAccountsAccountPersonsParams
  ): Promise<stripe.GetAccountsAccountPersonsResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/persons`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'relationship',
            'starting_after'
          )
        )
      })
      .json<stripe.GetAccountsAccountPersonsResponse>()
  }

  /**
   * <p>Creates a new person.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_persons',
    description: '<p>Creates a new person.</p>.',
    inputSchema: stripe.PostAccountsAccountPersonsParamsSchema
  })
  async PostAccountsAccountPersons(
    params: stripe.PostAccountsAccountPersonsParams
  ): Promise<stripe.PostAccountsAccountPersonsResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/persons`)
      .json<stripe.PostAccountsAccountPersonsResponse>()
  }

  /**
   * <p>Retrieves an existing person.</p>.
   */
  @aiFunction({
    name: 'get_accounts_account_persons_person',
    description: '<p>Retrieves an existing person.</p>.',
    inputSchema: stripe.GetAccountsAccountPersonsPersonParamsSchema
  })
  async GetAccountsAccountPersonsPerson(
    params: stripe.GetAccountsAccountPersonsPersonParams
  ): Promise<stripe.GetAccountsAccountPersonsPersonResponse> {
    return this.ky
      .get(`/v1/accounts/${params.account}/persons/${params.person}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetAccountsAccountPersonsPersonResponse>()
  }

  /**
   * <p>Updates an existing person.</p>.
   */
  @aiFunction({
    name: 'post_accounts_account_persons_person',
    description: '<p>Updates an existing person.</p>.',
    inputSchema: stripe.PostAccountsAccountPersonsPersonParamsSchema
  })
  async PostAccountsAccountPersonsPerson(
    params: stripe.PostAccountsAccountPersonsPersonParams
  ): Promise<stripe.PostAccountsAccountPersonsPersonResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/persons/${params.person}`)
      .json<stripe.PostAccountsAccountPersonsPersonResponse>()
  }

  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>.
   */
  @aiFunction({
    name: 'delete_accounts_account_persons_person',
    description:
      '<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>.',
    inputSchema: stripe.DeleteAccountsAccountPersonsPersonParamsSchema
  })
  async DeleteAccountsAccountPersonsPerson(
    params: stripe.DeleteAccountsAccountPersonsPersonParams
  ): Promise<stripe.DeleteAccountsAccountPersonsPersonResponse> {
    return this.ky
      .delete(`/v1/accounts/${params.account}/persons/${params.person}`)
      .json<stripe.DeleteAccountsAccountPersonsPersonResponse>()
  }

  /**
 * <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>

<p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>.
 */
  @aiFunction({
    name: 'post_accounts_account_reject',
    description: `<p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>

<p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>.`,
    inputSchema: stripe.PostAccountsAccountRejectParamsSchema
  })
  async PostAccountsAccountReject(
    params: stripe.PostAccountsAccountRejectParams
  ): Promise<stripe.PostAccountsAccountRejectResponse> {
    return this.ky
      .post(`/v1/accounts/${params.account}/reject`)
      .json<stripe.PostAccountsAccountRejectResponse>()
  }

  /**
   * <p>List apple pay domains.</p>.
   */
  @aiFunction({
    name: 'get_apple_pay_domains',
    description: '<p>List apple pay domains.</p>.',
    inputSchema: stripe.GetApplePayDomainsParamsSchema
  })
  async GetApplePayDomains(
    params: stripe.GetApplePayDomainsParams
  ): Promise<stripe.GetApplePayDomainsResponse> {
    return this.ky
      .get('/v1/apple_pay/domains', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetApplePayDomainsResponse>()
  }

  /**
   * <p>Create an apple pay domain.</p>.
   */
  @aiFunction({
    name: 'post_apple_pay_domains',
    description: '<p>Create an apple pay domain.</p>.',
    inputSchema: stripe.PostApplePayDomainsParamsSchema
  })
  async PostApplePayDomains(
    _params: stripe.PostApplePayDomainsParams
  ): Promise<stripe.PostApplePayDomainsResponse> {
    return this.ky
      .post('/v1/apple_pay/domains')
      .json<stripe.PostApplePayDomainsResponse>()
  }

  /**
   * <p>Retrieve an apple pay domain.</p>.
   */
  @aiFunction({
    name: 'get_apple_pay_domains_domain',
    description: '<p>Retrieve an apple pay domain.</p>.',
    inputSchema: stripe.GetApplePayDomainsDomainParamsSchema
  })
  async GetApplePayDomainsDomain(
    params: stripe.GetApplePayDomainsDomainParams
  ): Promise<stripe.GetApplePayDomainsDomainResponse> {
    return this.ky
      .get(`/v1/apple_pay/domains/${params.domain}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetApplePayDomainsDomainResponse>()
  }

  /**
   * <p>Delete an apple pay domain.</p>.
   */
  @aiFunction({
    name: 'delete_apple_pay_domains_domain',
    description: '<p>Delete an apple pay domain.</p>.',
    inputSchema: stripe.DeleteApplePayDomainsDomainParamsSchema
  })
  async DeleteApplePayDomainsDomain(
    params: stripe.DeleteApplePayDomainsDomainParams
  ): Promise<stripe.DeleteApplePayDomainsDomainResponse> {
    return this.ky
      .delete(`/v1/apple_pay/domains/${params.domain}`)
      .json<stripe.DeleteApplePayDomainsDomainResponse>()
  }

  /**
   * <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>.
   */
  @aiFunction({
    name: 'get_application_fees',
    description:
      '<p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>.',
    inputSchema: stripe.GetApplicationFeesParamsSchema
  })
  async GetApplicationFees(
    params: stripe.GetApplicationFeesParams
  ): Promise<stripe.GetApplicationFeesResponse> {
    return this.ky
      .get('/v1/application_fees', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetApplicationFeesResponse>()
  }

  /**
   * <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>.
   */
  @aiFunction({
    name: 'get_application_fees_fee_refunds_id',
    description:
      '<p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>.',
    inputSchema: stripe.GetApplicationFeesFeeRefundsIdParamsSchema
  })
  async GetApplicationFeesFeeRefundsId(
    params: stripe.GetApplicationFeesFeeRefundsIdParams
  ): Promise<stripe.GetApplicationFeesFeeRefundsIdResponse> {
    return this.ky
      .get(`/v1/application_fees/${params.fee}/refunds/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetApplicationFeesFeeRefundsIdResponse>()
  }

  /**
 * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request only accepts metadata as an argument.</p>.
 */
  @aiFunction({
    name: 'post_application_fees_fee_refunds_id',
    description: `<p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request only accepts metadata as an argument.</p>.`,
    inputSchema: stripe.PostApplicationFeesFeeRefundsIdParamsSchema
  })
  async PostApplicationFeesFeeRefundsId(
    params: stripe.PostApplicationFeesFeeRefundsIdParams
  ): Promise<stripe.PostApplicationFeesFeeRefundsIdResponse> {
    return this.ky
      .post(`/v1/application_fees/${params.fee}/refunds/${params.id}`)
      .json<stripe.PostApplicationFeesFeeRefundsIdResponse>()
  }

  /**
   * <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>.
   */
  @aiFunction({
    name: 'get_application_fees_id',
    description:
      '<p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>.',
    inputSchema: stripe.GetApplicationFeesIdParamsSchema
  })
  async GetApplicationFeesId(
    params: stripe.GetApplicationFeesIdParams
  ): Promise<stripe.GetApplicationFeesIdResponse> {
    return this.ky
      .get(`/v1/application_fees/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetApplicationFeesIdResponse>()
  }

  @aiFunction({
    name: 'post_application_fees_id_refund',

    inputSchema: stripe.PostApplicationFeesIdRefundParamsSchema
  })
  async PostApplicationFeesIdRefund(
    params: stripe.PostApplicationFeesIdRefundParams
  ): Promise<stripe.PostApplicationFeesIdRefundResponse> {
    return this.ky
      .post(`/v1/application_fees/${params.id}/refund`)
      .json<stripe.PostApplicationFeesIdRefundResponse>()
  }

  /**
   * <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.
   */
  @aiFunction({
    name: 'get_application_fees_id_refunds',
    description:
      '<p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.',
    inputSchema: stripe.GetApplicationFeesIdRefundsParamsSchema
  })
  async GetApplicationFeesIdRefunds(
    params: stripe.GetApplicationFeesIdRefundsParams
  ): Promise<stripe.GetApplicationFeesIdRefundsResponse> {
    return this.ky
      .get(`/v1/application_fees/${params.id}/refunds`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetApplicationFeesIdRefundsResponse>()
  }

  /**
 * <p>Refunds an application fee that has previously been collected but not yet refunded.
Funds will be refunded to the Stripe account from which the fee was originally collected.</p>

<p>You can optionally refund only part of an application fee.
You can do so multiple times, until the entire fee has been refunded.</p>

<p>Once entirely refunded, an application fee can’t be refunded again.
This method will raise an error when called on an already-refunded application fee,
or when trying to refund more money than is left on an application fee.</p>.
 */
  @aiFunction({
    name: 'post_application_fees_id_refunds',
    description: `<p>Refunds an application fee that has previously been collected but not yet refunded.
Funds will be refunded to the Stripe account from which the fee was originally collected.</p>

<p>You can optionally refund only part of an application fee.
You can do so multiple times, until the entire fee has been refunded.</p>

<p>Once entirely refunded, an application fee can’t be refunded again.
This method will raise an error when called on an already-refunded application fee,
or when trying to refund more money than is left on an application fee.</p>.`,
    inputSchema: stripe.PostApplicationFeesIdRefundsParamsSchema
  })
  async PostApplicationFeesIdRefunds(
    params: stripe.PostApplicationFeesIdRefundsParams
  ): Promise<stripe.PostApplicationFeesIdRefundsResponse> {
    return this.ky
      .post(`/v1/application_fees/${params.id}/refunds`)
      .json<stripe.PostApplicationFeesIdRefundsResponse>()
  }

  /**
   * <p>List all secrets stored on the given scope.</p>.
   */
  @aiFunction({
    name: 'get_apps_secrets',
    description: '<p>List all secrets stored on the given scope.</p>.',
    inputSchema: stripe.GetAppsSecretsParamsSchema
  })
  async GetAppsSecrets(
    params: stripe.GetAppsSecretsParams
  ): Promise<stripe.GetAppsSecretsResponse> {
    return this.ky
      .get('/v1/apps/secrets', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetAppsSecretsResponse>()
  }

  /**
   * <p>Create or replace a secret in the secret store.</p>.
   */
  @aiFunction({
    name: 'post_apps_secrets',
    description: '<p>Create or replace a secret in the secret store.</p>.',
    inputSchema: stripe.PostAppsSecretsParamsSchema
  })
  async PostAppsSecrets(
    _params: stripe.PostAppsSecretsParams
  ): Promise<stripe.PostAppsSecretsResponse> {
    return this.ky
      .post('/v1/apps/secrets')
      .json<stripe.PostAppsSecretsResponse>()
  }

  /**
   * <p>Deletes a secret from the secret store by name and scope.</p>.
   */
  @aiFunction({
    name: 'post_apps_secrets_delete',
    description:
      '<p>Deletes a secret from the secret store by name and scope.</p>.',
    inputSchema: stripe.PostAppsSecretsDeleteParamsSchema
  })
  async PostAppsSecretsDelete(
    _params: stripe.PostAppsSecretsDeleteParams
  ): Promise<stripe.PostAppsSecretsDeleteResponse> {
    return this.ky
      .post('/v1/apps/secrets/delete')
      .json<stripe.PostAppsSecretsDeleteResponse>()
  }

  /**
   * <p>Finds a secret in the secret store by name and scope.</p>.
   */
  @aiFunction({
    name: 'get_apps_secrets_find',
    description:
      '<p>Finds a secret in the secret store by name and scope.</p>.',
    inputSchema: stripe.GetAppsSecretsFindParamsSchema
  })
  async GetAppsSecretsFind(
    params: stripe.GetAppsSecretsFindParams
  ): Promise<stripe.GetAppsSecretsFindResponse> {
    return this.ky
      .get('/v1/apps/secrets/find', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetAppsSecretsFindResponse>()
  }

  /**
 * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
 For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>.
 */
  @aiFunction({
    name: 'get_balance',
    description: `<p>Retrieves the current account balance, based on the authentication that was used to make the request.
 For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>.`,
    inputSchema: stripe.GetBalanceParamsSchema
  })
  async GetBalance(
    params: stripe.GetBalanceParams
  ): Promise<stripe.GetBalanceResponse> {
    return this.ky
      .get('/v1/balance', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBalanceResponse>()
  }

  /**
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>.
 */
  @aiFunction({
    name: 'get_balance_history',
    description: `<p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>.`,
    inputSchema: stripe.GetBalanceHistoryParamsSchema
  })
  async GetBalanceHistory(
    params: stripe.GetBalanceHistoryParams
  ): Promise<stripe.GetBalanceHistoryResponse> {
    return this.ky
      .get('/v1/balance/history', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBalanceHistoryResponse>()
  }

  /**
 * <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>.
 */
  @aiFunction({
    name: 'get_balance_history_id',
    description: `<p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>.`,
    inputSchema: stripe.GetBalanceHistoryIdParamsSchema
  })
  async GetBalanceHistoryId(
    params: stripe.GetBalanceHistoryIdParams
  ): Promise<stripe.GetBalanceHistoryIdResponse> {
    return this.ky
      .get(`/v1/balance/history/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBalanceHistoryIdResponse>()
  }

  /**
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>.
 */
  @aiFunction({
    name: 'get_balance_transactions',
    description: `<p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>

<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>.`,
    inputSchema: stripe.GetBalanceTransactionsParamsSchema
  })
  async GetBalanceTransactions(
    params: stripe.GetBalanceTransactionsParams
  ): Promise<stripe.GetBalanceTransactionsResponse> {
    return this.ky
      .get('/v1/balance_transactions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBalanceTransactionsResponse>()
  }

  /**
 * <p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>.
 */
  @aiFunction({
    name: 'get_balance_transactions_id',
    description: `<p>Retrieves the balance transaction with the given ID.</p>

<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>.`,
    inputSchema: stripe.GetBalanceTransactionsIdParamsSchema
  })
  async GetBalanceTransactionsId(
    params: stripe.GetBalanceTransactionsIdParams
  ): Promise<stripe.GetBalanceTransactionsIdResponse> {
    return this.ky
      .get(`/v1/balance_transactions/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBalanceTransactionsIdResponse>()
  }

  /**
   * <p>Lists billing active and inactive alerts</p>.
   */
  @aiFunction({
    name: 'get_billing_alerts',
    description: '<p>Lists billing active and inactive alerts</p>.',
    inputSchema: stripe.GetBillingAlertsParamsSchema
  })
  async GetBillingAlerts(
    params: stripe.GetBillingAlertsParams
  ): Promise<stripe.GetBillingAlertsResponse> {
    return this.ky
      .get('/v1/billing/alerts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingAlertsResponse>()
  }

  /**
   * <p>Creates a billing alert</p>.
   */
  @aiFunction({
    name: 'post_billing_alerts',
    description: '<p>Creates a billing alert</p>.',
    inputSchema: stripe.PostBillingAlertsParamsSchema
  })
  async PostBillingAlerts(
    _params: stripe.PostBillingAlertsParams
  ): Promise<stripe.PostBillingAlertsResponse> {
    return this.ky
      .post('/v1/billing/alerts')
      .json<stripe.PostBillingAlertsResponse>()
  }

  /**
   * <p>Retrieves a billing alert given an ID</p>.
   */
  @aiFunction({
    name: 'get_billing_alerts_id',
    description: '<p>Retrieves a billing alert given an ID</p>.',
    inputSchema: stripe.GetBillingAlertsIdParamsSchema
  })
  async GetBillingAlertsId(
    params: stripe.GetBillingAlertsIdParams
  ): Promise<stripe.GetBillingAlertsIdResponse> {
    return this.ky
      .get(`/v1/billing/alerts/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBillingAlertsIdResponse>()
  }

  /**
   * <p>Reactivates this alert, allowing it to trigger again.</p>.
   */
  @aiFunction({
    name: 'post_billing_alerts_id_activate',
    description:
      '<p>Reactivates this alert, allowing it to trigger again.</p>.',
    inputSchema: stripe.PostBillingAlertsIdActivateParamsSchema
  })
  async PostBillingAlertsIdActivate(
    params: stripe.PostBillingAlertsIdActivateParams
  ): Promise<stripe.PostBillingAlertsIdActivateResponse> {
    return this.ky
      .post(`/v1/billing/alerts/${params.id}/activate`)
      .json<stripe.PostBillingAlertsIdActivateResponse>()
  }

  /**
   * <p>Archives this alert, removing it from the list view and APIs. This is non-reversible.</p>.
   */
  @aiFunction({
    name: 'post_billing_alerts_id_archive',
    description:
      '<p>Archives this alert, removing it from the list view and APIs. This is non-reversible.</p>.',
    inputSchema: stripe.PostBillingAlertsIdArchiveParamsSchema
  })
  async PostBillingAlertsIdArchive(
    params: stripe.PostBillingAlertsIdArchiveParams
  ): Promise<stripe.PostBillingAlertsIdArchiveResponse> {
    return this.ky
      .post(`/v1/billing/alerts/${params.id}/archive`)
      .json<stripe.PostBillingAlertsIdArchiveResponse>()
  }

  /**
   * <p>Deactivates this alert, preventing it from triggering.</p>.
   */
  @aiFunction({
    name: 'post_billing_alerts_id_deactivate',
    description:
      '<p>Deactivates this alert, preventing it from triggering.</p>.',
    inputSchema: stripe.PostBillingAlertsIdDeactivateParamsSchema
  })
  async PostBillingAlertsIdDeactivate(
    params: stripe.PostBillingAlertsIdDeactivateParams
  ): Promise<stripe.PostBillingAlertsIdDeactivateResponse> {
    return this.ky
      .post(`/v1/billing/alerts/${params.id}/deactivate`)
      .json<stripe.PostBillingAlertsIdDeactivateResponse>()
  }

  /**
   * <p>Retrieves the credit balance summary for a customer.</p>.
   */
  @aiFunction({
    name: 'get_billing_credit_balance_summary',
    description: '<p>Retrieves the credit balance summary for a customer.</p>.',
    inputSchema: stripe.GetBillingCreditBalanceSummaryParamsSchema
  })
  async GetBillingCreditBalanceSummary(
    params: stripe.GetBillingCreditBalanceSummaryParams
  ): Promise<stripe.GetBillingCreditBalanceSummaryResponse> {
    return this.ky
      .get('/v1/billing/credit_balance_summary', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingCreditBalanceSummaryResponse>()
  }

  /**
   * <p>Retrieve a list of credit balance transactions.</p>.
   */
  @aiFunction({
    name: 'get_billing_credit_balance_transactions',
    description: '<p>Retrieve a list of credit balance transactions.</p>.',
    inputSchema: stripe.GetBillingCreditBalanceTransactionsParamsSchema
  })
  async GetBillingCreditBalanceTransactions(
    params: stripe.GetBillingCreditBalanceTransactionsParams
  ): Promise<stripe.GetBillingCreditBalanceTransactionsResponse> {
    return this.ky
      .get('/v1/billing/credit_balance_transactions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingCreditBalanceTransactionsResponse>()
  }

  /**
   * <p>Retrieves a credit balance transaction.</p>.
   */
  @aiFunction({
    name: 'get_billing_credit_balance_transactions_id',
    description: '<p>Retrieves a credit balance transaction.</p>.',
    inputSchema: stripe.GetBillingCreditBalanceTransactionsIdParamsSchema
  })
  async GetBillingCreditBalanceTransactionsId(
    params: stripe.GetBillingCreditBalanceTransactionsIdParams
  ): Promise<stripe.GetBillingCreditBalanceTransactionsIdResponse> {
    return this.ky
      .get(`/v1/billing/credit_balance_transactions/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBillingCreditBalanceTransactionsIdResponse>()
  }

  /**
   * <p>Retrieve a list of credit grants.</p>.
   */
  @aiFunction({
    name: 'get_billing_credit_grants',
    description: '<p>Retrieve a list of credit grants.</p>.',
    inputSchema: stripe.GetBillingCreditGrantsParamsSchema
  })
  async GetBillingCreditGrants(
    params: stripe.GetBillingCreditGrantsParams
  ): Promise<stripe.GetBillingCreditGrantsResponse> {
    return this.ky
      .get('/v1/billing/credit_grants', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingCreditGrantsResponse>()
  }

  /**
   * <p>Creates a credit grant.</p>.
   */
  @aiFunction({
    name: 'post_billing_credit_grants',
    description: '<p>Creates a credit grant.</p>.',
    inputSchema: stripe.PostBillingCreditGrantsParamsSchema
  })
  async PostBillingCreditGrants(
    _params: stripe.PostBillingCreditGrantsParams
  ): Promise<stripe.PostBillingCreditGrantsResponse> {
    return this.ky
      .post('/v1/billing/credit_grants')
      .json<stripe.PostBillingCreditGrantsResponse>()
  }

  /**
   * <p>Retrieves a credit grant.</p>.
   */
  @aiFunction({
    name: 'get_billing_credit_grants_id',
    description: '<p>Retrieves a credit grant.</p>.',
    inputSchema: stripe.GetBillingCreditGrantsIdParamsSchema
  })
  async GetBillingCreditGrantsId(
    params: stripe.GetBillingCreditGrantsIdParams
  ): Promise<stripe.GetBillingCreditGrantsIdResponse> {
    return this.ky
      .get(`/v1/billing/credit_grants/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBillingCreditGrantsIdResponse>()
  }

  /**
   * <p>Updates a credit grant.</p>.
   */
  @aiFunction({
    name: 'post_billing_credit_grants_id',
    description: '<p>Updates a credit grant.</p>.',
    inputSchema: stripe.PostBillingCreditGrantsIdParamsSchema
  })
  async PostBillingCreditGrantsId(
    params: stripe.PostBillingCreditGrantsIdParams
  ): Promise<stripe.PostBillingCreditGrantsIdResponse> {
    return this.ky
      .post(`/v1/billing/credit_grants/${params.id}`)
      .json<stripe.PostBillingCreditGrantsIdResponse>()
  }

  /**
   * <p>Expires a credit grant.</p>.
   */
  @aiFunction({
    name: 'post_billing_credit_grants_id_expire',
    description: '<p>Expires a credit grant.</p>.',
    inputSchema: stripe.PostBillingCreditGrantsIdExpireParamsSchema
  })
  async PostBillingCreditGrantsIdExpire(
    params: stripe.PostBillingCreditGrantsIdExpireParams
  ): Promise<stripe.PostBillingCreditGrantsIdExpireResponse> {
    return this.ky
      .post(`/v1/billing/credit_grants/${params.id}/expire`)
      .json<stripe.PostBillingCreditGrantsIdExpireResponse>()
  }

  /**
   * <p>Voids a credit grant.</p>.
   */
  @aiFunction({
    name: 'post_billing_credit_grants_id_void',
    description: '<p>Voids a credit grant.</p>.',
    inputSchema: stripe.PostBillingCreditGrantsIdVoidParamsSchema
  })
  async PostBillingCreditGrantsIdVoid(
    params: stripe.PostBillingCreditGrantsIdVoidParams
  ): Promise<stripe.PostBillingCreditGrantsIdVoidResponse> {
    return this.ky
      .post(`/v1/billing/credit_grants/${params.id}/void`)
      .json<stripe.PostBillingCreditGrantsIdVoidResponse>()
  }

  /**
   * <p>Creates a billing meter event adjustment.</p>.
   */
  @aiFunction({
    name: 'post_billing_meter_event_adjustments',
    description: '<p>Creates a billing meter event adjustment.</p>.',
    inputSchema: stripe.PostBillingMeterEventAdjustmentsParamsSchema
  })
  async PostBillingMeterEventAdjustments(
    _params: stripe.PostBillingMeterEventAdjustmentsParams
  ): Promise<stripe.PostBillingMeterEventAdjustmentsResponse> {
    return this.ky
      .post('/v1/billing/meter_event_adjustments')
      .json<stripe.PostBillingMeterEventAdjustmentsResponse>()
  }

  /**
   * <p>Creates a billing meter event.</p>.
   */
  @aiFunction({
    name: 'post_billing_meter_events',
    description: '<p>Creates a billing meter event.</p>.',
    inputSchema: stripe.PostBillingMeterEventsParamsSchema
  })
  async PostBillingMeterEvents(
    _params: stripe.PostBillingMeterEventsParams
  ): Promise<stripe.PostBillingMeterEventsResponse> {
    return this.ky
      .post('/v1/billing/meter_events')
      .json<stripe.PostBillingMeterEventsResponse>()
  }

  /**
   * <p>Retrieve a list of billing meters.</p>.
   */
  @aiFunction({
    name: 'get_billing_meters',
    description: '<p>Retrieve a list of billing meters.</p>.',
    inputSchema: stripe.GetBillingMetersParamsSchema
  })
  async GetBillingMeters(
    params: stripe.GetBillingMetersParams
  ): Promise<stripe.GetBillingMetersResponse> {
    return this.ky
      .get('/v1/billing/meters', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingMetersResponse>()
  }

  /**
   * <p>Creates a billing meter.</p>.
   */
  @aiFunction({
    name: 'post_billing_meters',
    description: '<p>Creates a billing meter.</p>.',
    inputSchema: stripe.PostBillingMetersParamsSchema
  })
  async PostBillingMeters(
    _params: stripe.PostBillingMetersParams
  ): Promise<stripe.PostBillingMetersResponse> {
    return this.ky
      .post('/v1/billing/meters')
      .json<stripe.PostBillingMetersResponse>()
  }

  /**
   * <p>Retrieves a billing meter given an ID.</p>.
   */
  @aiFunction({
    name: 'get_billing_meters_id',
    description: '<p>Retrieves a billing meter given an ID.</p>.',
    inputSchema: stripe.GetBillingMetersIdParamsSchema
  })
  async GetBillingMetersId(
    params: stripe.GetBillingMetersIdParams
  ): Promise<stripe.GetBillingMetersIdResponse> {
    return this.ky
      .get(`/v1/billing/meters/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBillingMetersIdResponse>()
  }

  /**
   * <p>Updates a billing meter.</p>.
   */
  @aiFunction({
    name: 'post_billing_meters_id',
    description: '<p>Updates a billing meter.</p>.',
    inputSchema: stripe.PostBillingMetersIdParamsSchema
  })
  async PostBillingMetersId(
    params: stripe.PostBillingMetersIdParams
  ): Promise<stripe.PostBillingMetersIdResponse> {
    return this.ky
      .post(`/v1/billing/meters/${params.id}`)
      .json<stripe.PostBillingMetersIdResponse>()
  }

  /**
   * <p>When a meter is deactivated, no more meter events will be accepted for this meter. You can’t attach a deactivated meter to a price.</p>.
   */
  @aiFunction({
    name: 'post_billing_meters_id_deactivate',
    description:
      '<p>When a meter is deactivated, no more meter events will be accepted for this meter. You can’t attach a deactivated meter to a price.</p>.',
    inputSchema: stripe.PostBillingMetersIdDeactivateParamsSchema
  })
  async PostBillingMetersIdDeactivate(
    params: stripe.PostBillingMetersIdDeactivateParams
  ): Promise<stripe.PostBillingMetersIdDeactivateResponse> {
    return this.ky
      .post(`/v1/billing/meters/${params.id}/deactivate`)
      .json<stripe.PostBillingMetersIdDeactivateResponse>()
  }

  /**
   * <p>Retrieve a list of billing meter event summaries.</p>.
   */
  @aiFunction({
    name: 'get_billing_meters_id_event_summaries',
    description: '<p>Retrieve a list of billing meter event summaries.</p>.',
    inputSchema: stripe.GetBillingMetersIdEventSummariesParamsSchema
  })
  async GetBillingMetersIdEventSummaries(
    params: stripe.GetBillingMetersIdEventSummariesParams
  ): Promise<stripe.GetBillingMetersIdEventSummariesResponse> {
    return this.ky
      .get(`/v1/billing/meters/${params.id}/event_summaries`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'customer',
            'end_time',
            'ending_before',
            'expand',
            'limit',
            'start_time',
            'starting_after',
            'value_grouping_window'
          )
        )
      })
      .json<stripe.GetBillingMetersIdEventSummariesResponse>()
  }

  /**
   * <p>When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.</p>.
   */
  @aiFunction({
    name: 'post_billing_meters_id_reactivate',
    description:
      '<p>When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.</p>.',
    inputSchema: stripe.PostBillingMetersIdReactivateParamsSchema
  })
  async PostBillingMetersIdReactivate(
    params: stripe.PostBillingMetersIdReactivateParams
  ): Promise<stripe.PostBillingMetersIdReactivateResponse> {
    return this.ky
      .post(`/v1/billing/meters/${params.id}/reactivate`)
      .json<stripe.PostBillingMetersIdReactivateResponse>()
  }

  /**
   * <p>Returns a list of configurations that describe the functionality of the customer portal.</p>.
   */
  @aiFunction({
    name: 'get_billing_portal_configurations',
    description:
      '<p>Returns a list of configurations that describe the functionality of the customer portal.</p>.',
    inputSchema: stripe.GetBillingPortalConfigurationsParamsSchema
  })
  async GetBillingPortalConfigurations(
    params: stripe.GetBillingPortalConfigurationsParams
  ): Promise<stripe.GetBillingPortalConfigurationsResponse> {
    return this.ky
      .get('/v1/billing_portal/configurations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetBillingPortalConfigurationsResponse>()
  }

  /**
   * <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>.
   */
  @aiFunction({
    name: 'post_billing_portal_configurations',
    description:
      '<p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>.',
    inputSchema: stripe.PostBillingPortalConfigurationsParamsSchema
  })
  async PostBillingPortalConfigurations(
    _params: stripe.PostBillingPortalConfigurationsParams
  ): Promise<stripe.PostBillingPortalConfigurationsResponse> {
    return this.ky
      .post('/v1/billing_portal/configurations')
      .json<stripe.PostBillingPortalConfigurationsResponse>()
  }

  /**
   * <p>Retrieves a configuration that describes the functionality of the customer portal.</p>.
   */
  @aiFunction({
    name: 'get_billing_portal_configurations_configuration',
    description:
      '<p>Retrieves a configuration that describes the functionality of the customer portal.</p>.',
    inputSchema: stripe.GetBillingPortalConfigurationsConfigurationParamsSchema
  })
  async GetBillingPortalConfigurationsConfiguration(
    params: stripe.GetBillingPortalConfigurationsConfigurationParams
  ): Promise<stripe.GetBillingPortalConfigurationsConfigurationResponse> {
    return this.ky
      .get(`/v1/billing_portal/configurations/${params.configuration}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetBillingPortalConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Updates a configuration that describes the functionality of the customer portal.</p>.
   */
  @aiFunction({
    name: 'post_billing_portal_configurations_configuration',
    description:
      '<p>Updates a configuration that describes the functionality of the customer portal.</p>.',
    inputSchema: stripe.PostBillingPortalConfigurationsConfigurationParamsSchema
  })
  async PostBillingPortalConfigurationsConfiguration(
    params: stripe.PostBillingPortalConfigurationsConfigurationParams
  ): Promise<stripe.PostBillingPortalConfigurationsConfigurationResponse> {
    return this.ky
      .post(`/v1/billing_portal/configurations/${params.configuration}`)
      .json<stripe.PostBillingPortalConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Creates a session of the customer portal.</p>.
   */
  @aiFunction({
    name: 'post_billing_portal_sessions',
    description: '<p>Creates a session of the customer portal.</p>.',
    inputSchema: stripe.PostBillingPortalSessionsParamsSchema
  })
  async PostBillingPortalSessions(
    _params: stripe.PostBillingPortalSessionsParams
  ): Promise<stripe.PostBillingPortalSessionsResponse> {
    return this.ky
      .post('/v1/billing_portal/sessions')
      .json<stripe.PostBillingPortalSessionsResponse>()
  }

  /**
   * <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>.
   */
  @aiFunction({
    name: 'get_charges',
    description:
      '<p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>.',
    inputSchema: stripe.GetChargesParamsSchema
  })
  async GetCharges(
    params: stripe.GetChargesParams
  ): Promise<stripe.GetChargesResponse> {
    return this.ky
      .get('/v1/charges', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetChargesResponse>()
  }

  /**
 * <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
object used to request payment.</p>.
 */
  @aiFunction({
    name: 'post_charges',
    description: `<p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
object used to request payment.</p>.`,
    inputSchema: stripe.PostChargesParamsSchema
  })
  async PostCharges(
    _params: stripe.PostChargesParams
  ): Promise<stripe.PostChargesResponse> {
    return this.ky.post('/v1/charges').json<stripe.PostChargesResponse>()
  }

  /**
 * <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_charges_search',
    description: `<p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetChargesSearchParamsSchema
  })
  async GetChargesSearch(
    params: stripe.GetChargesSearchParams
  ): Promise<stripe.GetChargesSearchResponse> {
    return this.ky
      .get('/v1/charges/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetChargesSearchResponse>()
  }

  /**
   * <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>.
   */
  @aiFunction({
    name: 'get_charges_charge',
    description:
      '<p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>.',
    inputSchema: stripe.GetChargesChargeParamsSchema
  })
  async GetChargesCharge(
    params: stripe.GetChargesChargeParams
  ): Promise<stripe.GetChargesChargeResponse> {
    return this.ky
      .get(`/v1/charges/${params.charge}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetChargesChargeResponse>()
  }

  /**
   * <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_charges_charge',
    description:
      '<p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostChargesChargeParamsSchema
  })
  async PostChargesCharge(
    params: stripe.PostChargesChargeParams
  ): Promise<stripe.PostChargesChargeResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}`)
      .json<stripe.PostChargesChargeResponse>()
  }

  /**
 * <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>

<p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>

<p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>.
 */
  @aiFunction({
    name: 'post_charges_charge_capture',
    description: `<p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>

<p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>

<p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>.`,
    inputSchema: stripe.PostChargesChargeCaptureParamsSchema
  })
  async PostChargesChargeCapture(
    params: stripe.PostChargesChargeCaptureParams
  ): Promise<stripe.PostChargesChargeCaptureResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/capture`)
      .json<stripe.PostChargesChargeCaptureResponse>()
  }

  /**
   * <p>Retrieve a dispute for a specified charge.</p>.
   */
  @aiFunction({
    name: 'get_charges_charge_dispute',
    description: '<p>Retrieve a dispute for a specified charge.</p>.',
    inputSchema: stripe.GetChargesChargeDisputeParamsSchema
  })
  async GetChargesChargeDispute(
    params: stripe.GetChargesChargeDisputeParams
  ): Promise<stripe.GetChargesChargeDisputeResponse> {
    return this.ky
      .get(`/v1/charges/${params.charge}/dispute`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetChargesChargeDisputeResponse>()
  }

  @aiFunction({
    name: 'post_charges_charge_dispute',

    inputSchema: stripe.PostChargesChargeDisputeParamsSchema
  })
  async PostChargesChargeDispute(
    params: stripe.PostChargesChargeDisputeParams
  ): Promise<stripe.PostChargesChargeDisputeResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/dispute`)
      .json<stripe.PostChargesChargeDisputeResponse>()
  }

  @aiFunction({
    name: 'post_charges_charge_dispute_close',

    inputSchema: stripe.PostChargesChargeDisputeCloseParamsSchema
  })
  async PostChargesChargeDisputeClose(
    params: stripe.PostChargesChargeDisputeCloseParams
  ): Promise<stripe.PostChargesChargeDisputeCloseResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/dispute/close`)
      .json<stripe.PostChargesChargeDisputeCloseResponse>()
  }

  /**
 * <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>

<p>This action refunds a previously created charge that’s not refunded yet.
Funds are refunded to the credit or debit card that’s originally charged.</p>

<p>You can optionally refund only part of a charge.
You can repeat this until the entire charge is refunded.</p>

<p>After you entirely refund a charge, you can’t refund it again.
This method raises an error when it’s called on an already-refunded charge,
or when you attempt to refund more money than is left on a charge.</p>.
 */
  @aiFunction({
    name: 'post_charges_charge_refund',
    description: `<p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>

<p>This action refunds a previously created charge that’s not refunded yet.
Funds are refunded to the credit or debit card that’s originally charged.</p>

<p>You can optionally refund only part of a charge.
You can repeat this until the entire charge is refunded.</p>

<p>After you entirely refund a charge, you can’t refund it again.
This method raises an error when it’s called on an already-refunded charge,
or when you attempt to refund more money than is left on a charge.</p>.`,
    inputSchema: stripe.PostChargesChargeRefundParamsSchema
  })
  async PostChargesChargeRefund(
    params: stripe.PostChargesChargeRefundParams
  ): Promise<stripe.PostChargesChargeRefundResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/refund`)
      .json<stripe.PostChargesChargeRefundResponse>()
  }

  /**
   * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.
   */
  @aiFunction({
    name: 'get_charges_charge_refunds',
    description:
      '<p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.',
    inputSchema: stripe.GetChargesChargeRefundsParamsSchema
  })
  async GetChargesChargeRefunds(
    params: stripe.GetChargesChargeRefundsParams
  ): Promise<stripe.GetChargesChargeRefundsResponse> {
    return this.ky
      .get(`/v1/charges/${params.charge}/refunds`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetChargesChargeRefundsResponse>()
  }

  /**
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>

<p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
Funds will be refunded to the credit or debit card that was originally charged.</p>

<p>You can optionally refund only part of a charge.
You can do so multiple times, until the entire charge has been refunded.</p>

<p>Once entirely refunded, a charge can’t be refunded again.
This method will raise an error when called on an already-refunded charge,
or when trying to refund more money than is left on a charge.</p>.
 */
  @aiFunction({
    name: 'post_charges_charge_refunds',
    description: `<p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>

<p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
Funds will be refunded to the credit or debit card that was originally charged.</p>

<p>You can optionally refund only part of a charge.
You can do so multiple times, until the entire charge has been refunded.</p>

<p>Once entirely refunded, a charge can’t be refunded again.
This method will raise an error when called on an already-refunded charge,
or when trying to refund more money than is left on a charge.</p>.`,
    inputSchema: stripe.PostChargesChargeRefundsParamsSchema
  })
  async PostChargesChargeRefunds(
    params: stripe.PostChargesChargeRefundsParams
  ): Promise<stripe.PostChargesChargeRefundsResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/refunds`)
      .json<stripe.PostChargesChargeRefundsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing refund.</p>.
   */
  @aiFunction({
    name: 'get_charges_charge_refunds_refund',
    description: '<p>Retrieves the details of an existing refund.</p>.',
    inputSchema: stripe.GetChargesChargeRefundsRefundParamsSchema
  })
  async GetChargesChargeRefundsRefund(
    params: stripe.GetChargesChargeRefundsRefundParams
  ): Promise<stripe.GetChargesChargeRefundsRefundResponse> {
    return this.ky
      .get(`/v1/charges/${params.charge}/refunds/${params.refund}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetChargesChargeRefundsRefundResponse>()
  }

  /**
   * <p>Update a specified refund.</p>.
   */
  @aiFunction({
    name: 'post_charges_charge_refunds_refund',
    description: '<p>Update a specified refund.</p>.',
    inputSchema: stripe.PostChargesChargeRefundsRefundParamsSchema
  })
  async PostChargesChargeRefundsRefund(
    params: stripe.PostChargesChargeRefundsRefundParams
  ): Promise<stripe.PostChargesChargeRefundsRefundResponse> {
    return this.ky
      .post(`/v1/charges/${params.charge}/refunds/${params.refund}`)
      .json<stripe.PostChargesChargeRefundsRefundResponse>()
  }

  /**
   * <p>Returns a list of Checkout Sessions.</p>.
   */
  @aiFunction({
    name: 'get_checkout_sessions',
    description: '<p>Returns a list of Checkout Sessions.</p>.',
    inputSchema: stripe.GetCheckoutSessionsParamsSchema
  })
  async GetCheckoutSessions(
    params: stripe.GetCheckoutSessionsParams
  ): Promise<stripe.GetCheckoutSessionsResponse> {
    return this.ky
      .get('/v1/checkout/sessions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCheckoutSessionsResponse>()
  }

  /**
   * <p>Creates a Session object.</p>.
   */
  @aiFunction({
    name: 'post_checkout_sessions',
    description: '<p>Creates a Session object.</p>.',
    inputSchema: stripe.PostCheckoutSessionsParamsSchema
  })
  async PostCheckoutSessions(
    _params: stripe.PostCheckoutSessionsParams
  ): Promise<stripe.PostCheckoutSessionsResponse> {
    return this.ky
      .post('/v1/checkout/sessions')
      .json<stripe.PostCheckoutSessionsResponse>()
  }

  /**
   * <p>Retrieves a Session object.</p>.
   */
  @aiFunction({
    name: 'get_checkout_sessions_session',
    description: '<p>Retrieves a Session object.</p>.',
    inputSchema: stripe.GetCheckoutSessionsSessionParamsSchema
  })
  async GetCheckoutSessionsSession(
    params: stripe.GetCheckoutSessionsSessionParams
  ): Promise<stripe.GetCheckoutSessionsSessionResponse> {
    return this.ky
      .get(`/v1/checkout/sessions/${params.session}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCheckoutSessionsSessionResponse>()
  }

  /**
   * <p>Updates a Session object.</p>.
   */
  @aiFunction({
    name: 'post_checkout_sessions_session',
    description: '<p>Updates a Session object.</p>.',
    inputSchema: stripe.PostCheckoutSessionsSessionParamsSchema
  })
  async PostCheckoutSessionsSession(
    params: stripe.PostCheckoutSessionsSessionParams
  ): Promise<stripe.PostCheckoutSessionsSessionResponse> {
    return this.ky
      .post(`/v1/checkout/sessions/${params.session}`)
      .json<stripe.PostCheckoutSessionsSessionResponse>()
  }

  /**
 * <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>

<p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>.
 */
  @aiFunction({
    name: 'post_checkout_sessions_session_expire',
    description: `<p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>

<p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>.`,
    inputSchema: stripe.PostCheckoutSessionsSessionExpireParamsSchema
  })
  async PostCheckoutSessionsSessionExpire(
    params: stripe.PostCheckoutSessionsSessionExpireParams
  ): Promise<stripe.PostCheckoutSessionsSessionExpireResponse> {
    return this.ky
      .post(`/v1/checkout/sessions/${params.session}/expire`)
      .json<stripe.PostCheckoutSessionsSessionExpireResponse>()
  }

  /**
   * <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_checkout_sessions_session_line_items',
    description:
      '<p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetCheckoutSessionsSessionLineItemsParamsSchema
  })
  async GetCheckoutSessionsSessionLineItems(
    params: stripe.GetCheckoutSessionsSessionLineItemsParams
  ): Promise<stripe.GetCheckoutSessionsSessionLineItemsResponse> {
    return this.ky
      .get(`/v1/checkout/sessions/${params.session}/line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCheckoutSessionsSessionLineItemsResponse>()
  }

  /**
 * <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
most recently created orders appearing first.</p>.
 */
  @aiFunction({
    name: 'get_climate_orders',
    description: `<p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
most recently created orders appearing first.</p>.`,
    inputSchema: stripe.GetClimateOrdersParamsSchema
  })
  async GetClimateOrders(
    params: stripe.GetClimateOrdersParams
  ): Promise<stripe.GetClimateOrdersResponse> {
    return this.ky
      .get('/v1/climate/orders', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetClimateOrdersResponse>()
  }

  /**
 * <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
after creation and payment will be deducted your Stripe balance.</p>.
 */
  @aiFunction({
    name: 'post_climate_orders',
    description: `<p>Creates a Climate order object for a given Climate product. The order will be processed immediately
after creation and payment will be deducted your Stripe balance.</p>.`,
    inputSchema: stripe.PostClimateOrdersParamsSchema
  })
  async PostClimateOrders(
    _params: stripe.PostClimateOrdersParams
  ): Promise<stripe.PostClimateOrdersResponse> {
    return this.ky
      .post('/v1/climate/orders')
      .json<stripe.PostClimateOrdersResponse>()
  }

  /**
   * <p>Retrieves the details of a Climate order object with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_climate_orders_order',
    description:
      '<p>Retrieves the details of a Climate order object with the given ID.</p>.',
    inputSchema: stripe.GetClimateOrdersOrderParamsSchema
  })
  async GetClimateOrdersOrder(
    params: stripe.GetClimateOrdersOrderParams
  ): Promise<stripe.GetClimateOrdersOrderResponse> {
    return this.ky
      .get(`/v1/climate/orders/${params.order}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetClimateOrdersOrderResponse>()
  }

  /**
   * <p>Updates the specified order by setting the values of the parameters passed.</p>.
   */
  @aiFunction({
    name: 'post_climate_orders_order',
    description:
      '<p>Updates the specified order by setting the values of the parameters passed.</p>.',
    inputSchema: stripe.PostClimateOrdersOrderParamsSchema
  })
  async PostClimateOrdersOrder(
    params: stripe.PostClimateOrdersOrderParams
  ): Promise<stripe.PostClimateOrdersOrderResponse> {
    return this.ky
      .post(`/v1/climate/orders/${params.order}`)
      .json<stripe.PostClimateOrdersOrderResponse>()
  }

  /**
 * <p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
provides 90 days advance notice and refunds the <code>amount_total</code>.</p>.
 */
  @aiFunction({
    name: 'post_climate_orders_order_cancel',
    description: `<p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
provides 90 days advance notice and refunds the <code>amount_total</code>.</p>.`,
    inputSchema: stripe.PostClimateOrdersOrderCancelParamsSchema
  })
  async PostClimateOrdersOrderCancel(
    params: stripe.PostClimateOrdersOrderCancelParams
  ): Promise<stripe.PostClimateOrdersOrderCancelResponse> {
    return this.ky
      .post(`/v1/climate/orders/${params.order}/cancel`)
      .json<stripe.PostClimateOrdersOrderCancelResponse>()
  }

  /**
   * <p>Lists all available Climate product objects.</p>.
   */
  @aiFunction({
    name: 'get_climate_products',
    description: '<p>Lists all available Climate product objects.</p>.',
    inputSchema: stripe.GetClimateProductsParamsSchema
  })
  async GetClimateProducts(
    params: stripe.GetClimateProductsParams
  ): Promise<stripe.GetClimateProductsResponse> {
    return this.ky
      .get('/v1/climate/products', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetClimateProductsResponse>()
  }

  /**
   * <p>Retrieves the details of a Climate product with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_climate_products_product',
    description:
      '<p>Retrieves the details of a Climate product with the given ID.</p>.',
    inputSchema: stripe.GetClimateProductsProductParamsSchema
  })
  async GetClimateProductsProduct(
    params: stripe.GetClimateProductsProductParams
  ): Promise<stripe.GetClimateProductsProductResponse> {
    return this.ky
      .get(`/v1/climate/products/${params.product}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetClimateProductsProductResponse>()
  }

  /**
   * <p>Lists all available Climate supplier objects.</p>.
   */
  @aiFunction({
    name: 'get_climate_suppliers',
    description: '<p>Lists all available Climate supplier objects.</p>.',
    inputSchema: stripe.GetClimateSuppliersParamsSchema
  })
  async GetClimateSuppliers(
    params: stripe.GetClimateSuppliersParams
  ): Promise<stripe.GetClimateSuppliersResponse> {
    return this.ky
      .get('/v1/climate/suppliers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetClimateSuppliersResponse>()
  }

  /**
   * <p>Retrieves a Climate supplier object.</p>.
   */
  @aiFunction({
    name: 'get_climate_suppliers_supplier',
    description: '<p>Retrieves a Climate supplier object.</p>.',
    inputSchema: stripe.GetClimateSuppliersSupplierParamsSchema
  })
  async GetClimateSuppliersSupplier(
    params: stripe.GetClimateSuppliersSupplierParams
  ): Promise<stripe.GetClimateSuppliersSupplierResponse> {
    return this.ky
      .get(`/v1/climate/suppliers/${params.supplier}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetClimateSuppliersSupplierResponse>()
  }

  /**
   * <p>Retrieves an existing ConfirmationToken object</p>.
   */
  @aiFunction({
    name: 'get_confirmation_tokens_confirmation_token',
    description: '<p>Retrieves an existing ConfirmationToken object</p>.',
    inputSchema: stripe.GetConfirmationTokensConfirmationTokenParamsSchema
  })
  async GetConfirmationTokensConfirmationToken(
    params: stripe.GetConfirmationTokensConfirmationTokenParams
  ): Promise<stripe.GetConfirmationTokensConfirmationTokenResponse> {
    return this.ky
      .get(`/v1/confirmation_tokens/${params.confirmation_token}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetConfirmationTokensConfirmationTokenResponse>()
  }

  /**
   * <p>Lists all Country Spec objects available in the API.</p>.
   */
  @aiFunction({
    name: 'get_country_specs',
    description: '<p>Lists all Country Spec objects available in the API.</p>.',
    inputSchema: stripe.GetCountrySpecsParamsSchema
  })
  async GetCountrySpecs(
    params: stripe.GetCountrySpecsParams
  ): Promise<stripe.GetCountrySpecsResponse> {
    return this.ky
      .get('/v1/country_specs', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCountrySpecsResponse>()
  }

  /**
   * <p>Returns a Country Spec for a given Country code.</p>.
   */
  @aiFunction({
    name: 'get_country_specs_country',
    description: '<p>Returns a Country Spec for a given Country code.</p>.',
    inputSchema: stripe.GetCountrySpecsCountryParamsSchema
  })
  async GetCountrySpecsCountry(
    params: stripe.GetCountrySpecsCountryParams
  ): Promise<stripe.GetCountrySpecsCountryResponse> {
    return this.ky
      .get(`/v1/country_specs/${params.country}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCountrySpecsCountryResponse>()
  }

  /**
   * <p>Returns a list of your coupons.</p>.
   */
  @aiFunction({
    name: 'get_coupons',
    description: '<p>Returns a list of your coupons.</p>.',
    inputSchema: stripe.GetCouponsParamsSchema
  })
  async GetCoupons(
    params: stripe.GetCouponsParams
  ): Promise<stripe.GetCouponsResponse> {
    return this.ky
      .get('/v1/coupons', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCouponsResponse>()
  }

  /**
 * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>

<p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>.
 */
  @aiFunction({
    name: 'post_coupons',
    description: `<p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>

<p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>.`,
    inputSchema: stripe.PostCouponsParamsSchema
  })
  async PostCoupons(
    _params: stripe.PostCouponsParams
  ): Promise<stripe.PostCouponsResponse> {
    return this.ky.post('/v1/coupons').json<stripe.PostCouponsResponse>()
  }

  /**
   * <p>Retrieves the coupon with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_coupons_coupon',
    description: '<p>Retrieves the coupon with the given ID.</p>.',
    inputSchema: stripe.GetCouponsCouponParamsSchema
  })
  async GetCouponsCoupon(
    params: stripe.GetCouponsCouponParams
  ): Promise<stripe.GetCouponsCouponResponse> {
    return this.ky
      .get(`/v1/coupons/${params.coupon}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCouponsCouponResponse>()
  }

  /**
   * <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>.
   */
  @aiFunction({
    name: 'post_coupons_coupon',
    description:
      '<p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>.',
    inputSchema: stripe.PostCouponsCouponParamsSchema
  })
  async PostCouponsCoupon(
    params: stripe.PostCouponsCouponParams
  ): Promise<stripe.PostCouponsCouponResponse> {
    return this.ky
      .post(`/v1/coupons/${params.coupon}`)
      .json<stripe.PostCouponsCouponResponse>()
  }

  /**
   * <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>.
   */
  @aiFunction({
    name: 'delete_coupons_coupon',
    description:
      '<p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>.',
    inputSchema: stripe.DeleteCouponsCouponParamsSchema
  })
  async DeleteCouponsCoupon(
    params: stripe.DeleteCouponsCouponParams
  ): Promise<stripe.DeleteCouponsCouponResponse> {
    return this.ky
      .delete(`/v1/coupons/${params.coupon}`)
      .json<stripe.DeleteCouponsCouponResponse>()
  }

  /**
   * <p>Returns a list of credit notes.</p>.
   */
  @aiFunction({
    name: 'get_credit_notes',
    description: '<p>Returns a list of credit notes.</p>.',
    inputSchema: stripe.GetCreditNotesParamsSchema
  })
  async GetCreditNotes(
    params: stripe.GetCreditNotesParams
  ): Promise<stripe.GetCreditNotesResponse> {
    return this.ky
      .get('/v1/credit_notes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCreditNotesResponse>()
  }

  /**
 * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
in any combination of the following:</p>

<ul>
<li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
<li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
<li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
</ul>

<p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>

<p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>.
 */
  @aiFunction({
    name: 'post_credit_notes',
    description: `<p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
in any combination of the following:</p>

<ul>
<li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
<li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
<li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
</ul>

<p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>

<p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>.`,
    inputSchema: stripe.PostCreditNotesParamsSchema
  })
  async PostCreditNotes(
    _params: stripe.PostCreditNotesParams
  ): Promise<stripe.PostCreditNotesResponse> {
    return this.ky
      .post('/v1/credit_notes')
      .json<stripe.PostCreditNotesResponse>()
  }

  /**
   * <p>Get a preview of a credit note without creating it.</p>.
   */
  @aiFunction({
    name: 'get_credit_notes_preview',
    description: '<p>Get a preview of a credit note without creating it.</p>.',
    inputSchema: stripe.GetCreditNotesPreviewParamsSchema
  })
  async GetCreditNotesPreview(
    params: stripe.GetCreditNotesPreviewParams
  ): Promise<stripe.GetCreditNotesPreviewResponse> {
    return this.ky
      .get('/v1/credit_notes/preview', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCreditNotesPreviewResponse>()
  }

  /**
   * <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_credit_notes_preview_lines',
    description:
      '<p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetCreditNotesPreviewLinesParamsSchema
  })
  async GetCreditNotesPreviewLines(
    params: stripe.GetCreditNotesPreviewLinesParams
  ): Promise<stripe.GetCreditNotesPreviewLinesResponse> {
    return this.ky
      .get('/v1/credit_notes/preview/lines', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCreditNotesPreviewLinesResponse>()
  }

  /**
   * <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_credit_notes_credit_note_lines',
    description:
      '<p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetCreditNotesCreditNoteLinesParamsSchema
  })
  async GetCreditNotesCreditNoteLines(
    params: stripe.GetCreditNotesCreditNoteLinesParams
  ): Promise<stripe.GetCreditNotesCreditNoteLinesResponse> {
    return this.ky
      .get(`/v1/credit_notes/${params.credit_note}/lines`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCreditNotesCreditNoteLinesResponse>()
  }

  /**
   * <p>Retrieves the credit note object with the given identifier.</p>.
   */
  @aiFunction({
    name: 'get_credit_notes_id',
    description:
      '<p>Retrieves the credit note object with the given identifier.</p>.',
    inputSchema: stripe.GetCreditNotesIdParamsSchema
  })
  async GetCreditNotesId(
    params: stripe.GetCreditNotesIdParams
  ): Promise<stripe.GetCreditNotesIdResponse> {
    return this.ky
      .get(`/v1/credit_notes/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCreditNotesIdResponse>()
  }

  /**
   * <p>Updates an existing credit note.</p>.
   */
  @aiFunction({
    name: 'post_credit_notes_id',
    description: '<p>Updates an existing credit note.</p>.',
    inputSchema: stripe.PostCreditNotesIdParamsSchema
  })
  async PostCreditNotesId(
    params: stripe.PostCreditNotesIdParams
  ): Promise<stripe.PostCreditNotesIdResponse> {
    return this.ky
      .post(`/v1/credit_notes/${params.id}`)
      .json<stripe.PostCreditNotesIdResponse>()
  }

  /**
   * <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>.
   */
  @aiFunction({
    name: 'post_credit_notes_id_void',
    description:
      '<p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>.',
    inputSchema: stripe.PostCreditNotesIdVoidParamsSchema
  })
  async PostCreditNotesIdVoid(
    params: stripe.PostCreditNotesIdVoidParams
  ): Promise<stripe.PostCreditNotesIdVoidResponse> {
    return this.ky
      .post(`/v1/credit_notes/${params.id}/void`)
      .json<stripe.PostCreditNotesIdVoidResponse>()
  }

  /**
   * <p>Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>.
   */
  @aiFunction({
    name: 'post_customer_sessions',
    description:
      '<p>Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>.',
    inputSchema: stripe.PostCustomerSessionsParamsSchema
  })
  async PostCustomerSessions(
    _params: stripe.PostCustomerSessionsParams
  ): Promise<stripe.PostCustomerSessionsResponse> {
    return this.ky
      .post('/v1/customer_sessions')
      .json<stripe.PostCustomerSessionsResponse>()
  }

  /**
   * <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>.
   */
  @aiFunction({
    name: 'get_customers',
    description:
      '<p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>.',
    inputSchema: stripe.GetCustomersParamsSchema
  })
  async GetCustomers(
    params: stripe.GetCustomersParams
  ): Promise<stripe.GetCustomersResponse> {
    return this.ky
      .get('/v1/customers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCustomersResponse>()
  }

  /**
   * <p>Creates a new customer object.</p>.
   */
  @aiFunction({
    name: 'post_customers',
    description: '<p>Creates a new customer object.</p>.',
    inputSchema: stripe.PostCustomersParamsSchema
  })
  async PostCustomers(
    _params: stripe.PostCustomersParams
  ): Promise<stripe.PostCustomersResponse> {
    return this.ky.post('/v1/customers').json<stripe.PostCustomersResponse>()
  }

  /**
 * <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_customers_search',
    description: `<p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetCustomersSearchParamsSchema
  })
  async GetCustomersSearch(
    params: stripe.GetCustomersSearchParams
  ): Promise<stripe.GetCustomersSearchResponse> {
    return this.ky
      .get('/v1/customers/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetCustomersSearchResponse>()
  }

  /**
   * <p>Retrieves a Customer object.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer',
    description: '<p>Retrieves a Customer object.</p>.',
    inputSchema: stripe.GetCustomersCustomerParamsSchema
  })
  async GetCustomersCustomer(
    params: stripe.GetCustomersCustomerParams
  ): Promise<stripe.GetCustomersCustomerResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerResponse>()
  }

  /**
 * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>

<p>This request accepts mostly the same arguments as the customer creation call.</p>.
 */
  @aiFunction({
    name: 'post_customers_customer',
    description: `<p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>

<p>This request accepts mostly the same arguments as the customer creation call.</p>.`,
    inputSchema: stripe.PostCustomersCustomerParamsSchema
  })
  async PostCustomersCustomer(
    params: stripe.PostCustomersCustomerParams
  ): Promise<stripe.PostCustomersCustomerResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}`)
      .json<stripe.PostCustomersCustomerResponse>()
  }

  /**
   * <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer',
    description:
      '<p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerParamsSchema
  })
  async DeleteCustomersCustomer(
    params: stripe.DeleteCustomersCustomerParams
  ): Promise<stripe.DeleteCustomersCustomerResponse> {
    return this.ky
      .delete(`/v1/customers/${params.customer}`)
      .json<stripe.DeleteCustomersCustomerResponse>()
  }

  /**
   * <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_balance_transactions',
    description:
      '<p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>.',
    inputSchema: stripe.GetCustomersCustomerBalanceTransactionsParamsSchema
  })
  async GetCustomersCustomerBalanceTransactions(
    params: stripe.GetCustomersCustomerBalanceTransactionsParams
  ): Promise<stripe.GetCustomersCustomerBalanceTransactionsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/balance_transactions`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerBalanceTransactionsResponse>()
  }

  /**
   * <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_balance_transactions',
    description:
      '<p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>.',
    inputSchema: stripe.PostCustomersCustomerBalanceTransactionsParamsSchema
  })
  async PostCustomersCustomerBalanceTransactions(
    params: stripe.PostCustomersCustomerBalanceTransactionsParams
  ): Promise<stripe.PostCustomersCustomerBalanceTransactionsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/balance_transactions`)
      .json<stripe.PostCustomersCustomerBalanceTransactionsResponse>()
  }

  /**
   * <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_balance_transactions_transaction',
    description:
      '<p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>.',
    inputSchema:
      stripe.GetCustomersCustomerBalanceTransactionsTransactionParamsSchema
  })
  async GetCustomersCustomerBalanceTransactionsTransaction(
    params: stripe.GetCustomersCustomerBalanceTransactionsTransactionParams
  ): Promise<stripe.GetCustomersCustomerBalanceTransactionsTransactionResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/balance_transactions/${params.transaction}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerBalanceTransactionsTransactionResponse>()
  }

  /**
   * <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_balance_transactions_transaction',
    description:
      '<p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>.',
    inputSchema:
      stripe.PostCustomersCustomerBalanceTransactionsTransactionParamsSchema
  })
  async PostCustomersCustomerBalanceTransactionsTransaction(
    params: stripe.PostCustomersCustomerBalanceTransactionsTransactionParams
  ): Promise<stripe.PostCustomersCustomerBalanceTransactionsTransactionResponse> {
    return this.ky
      .post(
        `/v1/customers/${params.customer}/balance_transactions/${params.transaction}`
      )
      .json<stripe.PostCustomersCustomerBalanceTransactionsTransactionResponse>()
  }

  /**
   * <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_bank_accounts',
    description:
      '<p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>.',
    inputSchema: stripe.GetCustomersCustomerBankAccountsParamsSchema
  })
  async GetCustomersCustomerBankAccounts(
    params: stripe.GetCustomersCustomerBankAccountsParams
  ): Promise<stripe.GetCustomersCustomerBankAccountsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/bank_accounts`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerBankAccountsResponse>()
  }

  /**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.
 */
  @aiFunction({
    name: 'post_customers_customer_bank_accounts',
    description: `<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.`,
    inputSchema: stripe.PostCustomersCustomerBankAccountsParamsSchema
  })
  async PostCustomersCustomerBankAccounts(
    params: stripe.PostCustomersCustomerBankAccountsParams
  ): Promise<stripe.PostCustomersCustomerBankAccountsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/bank_accounts`)
      .json<stripe.PostCustomersCustomerBankAccountsResponse>()
  }

  /**
   * <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_bank_accounts_id',
    description:
      '<p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>.',
    inputSchema: stripe.GetCustomersCustomerBankAccountsIdParamsSchema
  })
  async GetCustomersCustomerBankAccountsId(
    params: stripe.GetCustomersCustomerBankAccountsIdParams
  ): Promise<stripe.GetCustomersCustomerBankAccountsIdResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/bank_accounts/${params.id}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerBankAccountsIdResponse>()
  }

  /**
   * <p>Update a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_bank_accounts_id',
    description: '<p>Update a specified source for a given customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerBankAccountsIdParamsSchema
  })
  async PostCustomersCustomerBankAccountsId(
    params: stripe.PostCustomersCustomerBankAccountsIdParams
  ): Promise<stripe.PostCustomersCustomerBankAccountsIdResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/bank_accounts/${params.id}`)
      .json<stripe.PostCustomersCustomerBankAccountsIdResponse>()
  }

  /**
   * <p>Delete a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_bank_accounts_id',
    description: '<p>Delete a specified source for a given customer.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerBankAccountsIdParamsSchema
  })
  async DeleteCustomersCustomerBankAccountsId(
    params: stripe.DeleteCustomersCustomerBankAccountsIdParams
  ): Promise<stripe.DeleteCustomersCustomerBankAccountsIdResponse> {
    return this.ky
      .delete(
        `/v1/customers/${params.customer}/bank_accounts/${params.id}`
      )
      .json<stripe.DeleteCustomersCustomerBankAccountsIdResponse>()
  }

  /**
   * <p>Verify a specified bank account for a given customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_bank_accounts_id_verify',
    description:
      '<p>Verify a specified bank account for a given customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerBankAccountsIdVerifyParamsSchema
  })
  async PostCustomersCustomerBankAccountsIdVerify(
    params: stripe.PostCustomersCustomerBankAccountsIdVerifyParams
  ): Promise<stripe.PostCustomersCustomerBankAccountsIdVerifyResponse> {
    return this.ky
      .post(
        `/v1/customers/${params.customer}/bank_accounts/${params.id}/verify`
      )
      .json<stripe.PostCustomersCustomerBankAccountsIdVerifyResponse>()
  }

  /**
 * <p>You can see a list of the cards belonging to a customer.
Note that the 10 most recent sources are always available on the <code>Customer</code> object.
If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>.
 */
  @aiFunction({
    name: 'get_customers_customer_cards',
    description: `<p>You can see a list of the cards belonging to a customer.
Note that the 10 most recent sources are always available on the <code>Customer</code> object.
If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>.`,
    inputSchema: stripe.GetCustomersCustomerCardsParamsSchema
  })
  async GetCustomersCustomerCards(
    params: stripe.GetCustomersCustomerCardsParams
  ): Promise<stripe.GetCustomersCustomerCardsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/cards`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerCardsResponse>()
  }

  /**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.
 */
  @aiFunction({
    name: 'post_customers_customer_cards',
    description: `<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.`,
    inputSchema: stripe.PostCustomersCustomerCardsParamsSchema
  })
  async PostCustomersCustomerCards(
    params: stripe.PostCustomersCustomerCardsParams
  ): Promise<stripe.PostCustomersCustomerCardsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/cards`)
      .json<stripe.PostCustomersCustomerCardsResponse>()
  }

  /**
   * <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_cards_id',
    description:
      '<p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>.',
    inputSchema: stripe.GetCustomersCustomerCardsIdParamsSchema
  })
  async GetCustomersCustomerCardsId(
    params: stripe.GetCustomersCustomerCardsIdParams
  ): Promise<stripe.GetCustomersCustomerCardsIdResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/cards/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerCardsIdResponse>()
  }

  /**
   * <p>Update a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_cards_id',
    description: '<p>Update a specified source for a given customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerCardsIdParamsSchema
  })
  async PostCustomersCustomerCardsId(
    params: stripe.PostCustomersCustomerCardsIdParams
  ): Promise<stripe.PostCustomersCustomerCardsIdResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/cards/${params.id}`)
      .json<stripe.PostCustomersCustomerCardsIdResponse>()
  }

  /**
   * <p>Delete a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_cards_id',
    description: '<p>Delete a specified source for a given customer.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerCardsIdParamsSchema
  })
  async DeleteCustomersCustomerCardsId(
    params: stripe.DeleteCustomersCustomerCardsIdParams
  ): Promise<stripe.DeleteCustomersCustomerCardsIdResponse> {
    return this.ky
      .delete(`/v1/customers/${params.customer}/cards/${params.id}`)
      .json<stripe.DeleteCustomersCustomerCardsIdResponse>()
  }

  /**
   * <p>Retrieves a customer’s cash balance.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_cash_balance',
    description: '<p>Retrieves a customer’s cash balance.</p>.',
    inputSchema: stripe.GetCustomersCustomerCashBalanceParamsSchema
  })
  async GetCustomersCustomerCashBalance(
    params: stripe.GetCustomersCustomerCashBalanceParams
  ): Promise<stripe.GetCustomersCustomerCashBalanceResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/cash_balance`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerCashBalanceResponse>()
  }

  /**
   * <p>Changes the settings on a customer’s cash balance.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_cash_balance',
    description: '<p>Changes the settings on a customer’s cash balance.</p>.',
    inputSchema: stripe.PostCustomersCustomerCashBalanceParamsSchema
  })
  async PostCustomersCustomerCashBalance(
    params: stripe.PostCustomersCustomerCashBalanceParams
  ): Promise<stripe.PostCustomersCustomerCashBalanceResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/cash_balance`)
      .json<stripe.PostCustomersCustomerCashBalanceResponse>()
  }

  /**
   * <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_cash_balance_transactions',
    description:
      '<p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>.',
    inputSchema: stripe.GetCustomersCustomerCashBalanceTransactionsParamsSchema
  })
  async GetCustomersCustomerCashBalanceTransactions(
    params: stripe.GetCustomersCustomerCashBalanceTransactionsParams
  ): Promise<stripe.GetCustomersCustomerCashBalanceTransactionsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/cash_balance_transactions`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerCashBalanceTransactionsResponse>()
  }

  /**
   * <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_cash_balance_transactions_transaction',
    description:
      '<p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>.',
    inputSchema:
      stripe.GetCustomersCustomerCashBalanceTransactionsTransactionParamsSchema
  })
  async GetCustomersCustomerCashBalanceTransactionsTransaction(
    params: stripe.GetCustomersCustomerCashBalanceTransactionsTransactionParams
  ): Promise<stripe.GetCustomersCustomerCashBalanceTransactionsTransactionResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/cash_balance_transactions/${params.transaction}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerCashBalanceTransactionsTransactionResponse>()
  }

  @aiFunction({
    name: 'get_customers_customer_discount',

    inputSchema: stripe.GetCustomersCustomerDiscountParamsSchema
  })
  async GetCustomersCustomerDiscount(
    params: stripe.GetCustomersCustomerDiscountParams
  ): Promise<stripe.GetCustomersCustomerDiscountResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/discount`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerDiscountResponse>()
  }

  /**
   * <p>Removes the currently applied discount on a customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_discount',
    description:
      '<p>Removes the currently applied discount on a customer.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerDiscountParamsSchema
  })
  async DeleteCustomersCustomerDiscount(
    params: stripe.DeleteCustomersCustomerDiscountParams
  ): Promise<stripe.DeleteCustomersCustomerDiscountResponse> {
    return this.ky
      .delete(`/v1/customers/${params.customer}/discount`)
      .json<stripe.DeleteCustomersCustomerDiscountResponse>()
  }

  /**
 * <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
funding instructions will be created. If funding instructions have already been created for a given customer, the same
funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>.
 */
  @aiFunction({
    name: 'post_customers_customer_funding_instructions',
    description: `<p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
funding instructions will be created. If funding instructions have already been created for a given customer, the same
funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>.`,
    inputSchema: stripe.PostCustomersCustomerFundingInstructionsParamsSchema
  })
  async PostCustomersCustomerFundingInstructions(
    params: stripe.PostCustomersCustomerFundingInstructionsParams
  ): Promise<stripe.PostCustomersCustomerFundingInstructionsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/funding_instructions`)
      .json<stripe.PostCustomersCustomerFundingInstructionsResponse>()
  }

  /**
   * <p>Returns a list of PaymentMethods for a given Customer</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_payment_methods',
    description:
      '<p>Returns a list of PaymentMethods for a given Customer</p>.',
    inputSchema: stripe.GetCustomersCustomerPaymentMethodsParamsSchema
  })
  async GetCustomersCustomerPaymentMethods(
    params: stripe.GetCustomersCustomerPaymentMethodsParams
  ): Promise<stripe.GetCustomersCustomerPaymentMethodsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/payment_methods`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'allow_redisplay',
            'ending_before',
            'expand',
            'limit',
            'starting_after',
            'type'
          )
        )
      })
      .json<stripe.GetCustomersCustomerPaymentMethodsResponse>()
  }

  /**
   * <p>Retrieves a PaymentMethod object for a given Customer.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_payment_methods_payment_method',
    description:
      '<p>Retrieves a PaymentMethod object for a given Customer.</p>.',
    inputSchema:
      stripe.GetCustomersCustomerPaymentMethodsPaymentMethodParamsSchema
  })
  async GetCustomersCustomerPaymentMethodsPaymentMethod(
    params: stripe.GetCustomersCustomerPaymentMethodsPaymentMethodParams
  ): Promise<stripe.GetCustomersCustomerPaymentMethodsPaymentMethodResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/payment_methods/${params.payment_method}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerPaymentMethodsPaymentMethodResponse>()
  }

  /**
   * <p>List sources for a specified customer.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_sources',
    description: '<p>List sources for a specified customer.</p>.',
    inputSchema: stripe.GetCustomersCustomerSourcesParamsSchema
  })
  async GetCustomersCustomerSources(
    params: stripe.GetCustomersCustomerSourcesParams
  ): Promise<stripe.GetCustomersCustomerSourcesResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/sources`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'object',
            'starting_after'
          )
        )
      })
      .json<stripe.GetCustomersCustomerSourcesResponse>()
  }

  /**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.
 */
  @aiFunction({
    name: 'post_customers_customer_sources',
    description: `<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>

<p>If the card’s owner has no default card, then the new card will become the default.
However, if the owner already has a default, then it will not change.
To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>.`,
    inputSchema: stripe.PostCustomersCustomerSourcesParamsSchema
  })
  async PostCustomersCustomerSources(
    params: stripe.PostCustomersCustomerSourcesParams
  ): Promise<stripe.PostCustomersCustomerSourcesResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/sources`)
      .json<stripe.PostCustomersCustomerSourcesResponse>()
  }

  /**
   * <p>Retrieve a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_sources_id',
    description: '<p>Retrieve a specified source for a given customer.</p>.',
    inputSchema: stripe.GetCustomersCustomerSourcesIdParamsSchema
  })
  async GetCustomersCustomerSourcesId(
    params: stripe.GetCustomersCustomerSourcesIdParams
  ): Promise<stripe.GetCustomersCustomerSourcesIdResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/sources/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerSourcesIdResponse>()
  }

  /**
   * <p>Update a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_sources_id',
    description: '<p>Update a specified source for a given customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerSourcesIdParamsSchema
  })
  async PostCustomersCustomerSourcesId(
    params: stripe.PostCustomersCustomerSourcesIdParams
  ): Promise<stripe.PostCustomersCustomerSourcesIdResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/sources/${params.id}`)
      .json<stripe.PostCustomersCustomerSourcesIdResponse>()
  }

  /**
   * <p>Delete a specified source for a given customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_sources_id',
    description: '<p>Delete a specified source for a given customer.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerSourcesIdParamsSchema
  })
  async DeleteCustomersCustomerSourcesId(
    params: stripe.DeleteCustomersCustomerSourcesIdParams
  ): Promise<stripe.DeleteCustomersCustomerSourcesIdResponse> {
    return this.ky
      .delete(`/v1/customers/${params.customer}/sources/${params.id}`)
      .json<stripe.DeleteCustomersCustomerSourcesIdResponse>()
  }

  /**
   * <p>Verify a specified bank account for a given customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_sources_id_verify',
    description:
      '<p>Verify a specified bank account for a given customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerSourcesIdVerifyParamsSchema
  })
  async PostCustomersCustomerSourcesIdVerify(
    params: stripe.PostCustomersCustomerSourcesIdVerifyParams
  ): Promise<stripe.PostCustomersCustomerSourcesIdVerifyResponse> {
    return this.ky
      .post(
        `/v1/customers/${params.customer}/sources/${params.id}/verify`
      )
      .json<stripe.PostCustomersCustomerSourcesIdVerifyResponse>()
  }

  /**
   * <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_subscriptions',
    description:
      '<p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>.',
    inputSchema: stripe.GetCustomersCustomerSubscriptionsParamsSchema
  })
  async GetCustomersCustomerSubscriptions(
    params: stripe.GetCustomersCustomerSubscriptionsParams
  ): Promise<stripe.GetCustomersCustomerSubscriptionsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/subscriptions`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerSubscriptionsResponse>()
  }

  /**
   * <p>Creates a new subscription on an existing customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_subscriptions',
    description: '<p>Creates a new subscription on an existing customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerSubscriptionsParamsSchema
  })
  async PostCustomersCustomerSubscriptions(
    params: stripe.PostCustomersCustomerSubscriptionsParams
  ): Promise<stripe.PostCustomersCustomerSubscriptionsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/subscriptions`)
      .json<stripe.PostCustomersCustomerSubscriptionsResponse>()
  }

  /**
   * <p>Retrieves the subscription with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_subscriptions_subscription_exposed_id',
    description: '<p>Retrieves the subscription with the given ID.</p>.',
    inputSchema:
      stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async GetCustomersCustomerSubscriptionsSubscriptionExposedId(
    params: stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/subscriptions/${params.subscription_exposed_id}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponse>()
  }

  /**
   * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_subscriptions_subscription_exposed_id',
    description:
      '<p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>.',
    inputSchema:
      stripe.PostCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async PostCustomersCustomerSubscriptionsSubscriptionExposedId(
    params: stripe.PostCustomersCustomerSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .post(
        `/v1/customers/${params.customer}/subscriptions/${params.subscription_exposed_id}`
      )
      .json<stripe.PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponse>()
  }

  /**
 * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>

<p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>

<p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>.
 */
  @aiFunction({
    name: 'delete_customers_customer_subscriptions_subscription_exposed_id',
    description: `<p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>

<p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>

<p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>.`,
    inputSchema:
      stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async DeleteCustomersCustomerSubscriptionsSubscriptionExposedId(
    params: stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .delete(
        `/v1/customers/${params.customer}/subscriptions/${params.subscription_exposed_id}`
      )
      .json<stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse>()
  }

  @aiFunction({
    name: 'get_customers_customer_subscriptions_subscription_exposed_id_discount',

    inputSchema:
      stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema
  })
  async GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    params: stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParams
  ): Promise<stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse> {
    return this.ky
      .get(
        `/v1/customers/${params.customer}/subscriptions/${params.subscription_exposed_id}/discount`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse>()
  }

  /**
   * <p>Removes the currently applied discount on a customer.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_subscriptions_subscription_exposed_id_discount',
    description:
      '<p>Removes the currently applied discount on a customer.</p>.',
    inputSchema:
      stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamsSchema
  })
  async DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    params: stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParams
  ): Promise<stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse> {
    return this.ky
      .delete(
        `/v1/customers/${params.customer}/subscriptions/${params.subscription_exposed_id}/discount`
      )
      .json<stripe.DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse>()
  }

  /**
   * <p>Returns a list of tax IDs for a customer.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_tax_ids',
    description: '<p>Returns a list of tax IDs for a customer.</p>.',
    inputSchema: stripe.GetCustomersCustomerTaxIdsParamsSchema
  })
  async GetCustomersCustomerTaxIds(
    params: stripe.GetCustomersCustomerTaxIdsParams
  ): Promise<stripe.GetCustomersCustomerTaxIdsResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/tax_ids`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetCustomersCustomerTaxIdsResponse>()
  }

  /**
   * <p>Creates a new <code>tax_id</code> object for a customer.</p>.
   */
  @aiFunction({
    name: 'post_customers_customer_tax_ids',
    description:
      '<p>Creates a new <code>tax_id</code> object for a customer.</p>.',
    inputSchema: stripe.PostCustomersCustomerTaxIdsParamsSchema
  })
  async PostCustomersCustomerTaxIds(
    params: stripe.PostCustomersCustomerTaxIdsParams
  ): Promise<stripe.PostCustomersCustomerTaxIdsResponse> {
    return this.ky
      .post(`/v1/customers/${params.customer}/tax_ids`)
      .json<stripe.PostCustomersCustomerTaxIdsResponse>()
  }

  /**
   * <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>.
   */
  @aiFunction({
    name: 'get_customers_customer_tax_ids_id',
    description:
      '<p>Retrieves the <code>tax_id</code> object with the given identifier.</p>.',
    inputSchema: stripe.GetCustomersCustomerTaxIdsIdParamsSchema
  })
  async GetCustomersCustomerTaxIdsId(
    params: stripe.GetCustomersCustomerTaxIdsIdParams
  ): Promise<stripe.GetCustomersCustomerTaxIdsIdResponse> {
    return this.ky
      .get(`/v1/customers/${params.customer}/tax_ids/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetCustomersCustomerTaxIdsIdResponse>()
  }

  /**
   * <p>Deletes an existing <code>tax_id</code> object.</p>.
   */
  @aiFunction({
    name: 'delete_customers_customer_tax_ids_id',
    description: '<p>Deletes an existing <code>tax_id</code> object.</p>.',
    inputSchema: stripe.DeleteCustomersCustomerTaxIdsIdParamsSchema
  })
  async DeleteCustomersCustomerTaxIdsId(
    params: stripe.DeleteCustomersCustomerTaxIdsIdParams
  ): Promise<stripe.DeleteCustomersCustomerTaxIdsIdResponse> {
    return this.ky
      .delete(`/v1/customers/${params.customer}/tax_ids/${params.id}`)
      .json<stripe.DeleteCustomersCustomerTaxIdsIdResponse>()
  }

  /**
   * <p>Returns a list of your disputes.</p>.
   */
  @aiFunction({
    name: 'get_disputes',
    description: '<p>Returns a list of your disputes.</p>.',
    inputSchema: stripe.GetDisputesParamsSchema
  })
  async GetDisputes(
    params: stripe.GetDisputesParams
  ): Promise<stripe.GetDisputesResponse> {
    return this.ky
      .get('/v1/disputes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetDisputesResponse>()
  }

  /**
   * <p>Retrieves the dispute with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_disputes_dispute',
    description: '<p>Retrieves the dispute with the given ID.</p>.',
    inputSchema: stripe.GetDisputesDisputeParamsSchema
  })
  async GetDisputesDispute(
    params: stripe.GetDisputesDisputeParams
  ): Promise<stripe.GetDisputesDisputeResponse> {
    return this.ky
      .get(`/v1/disputes/${params.dispute}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetDisputesDisputeResponse>()
  }

  /**
 * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>

<p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>.
 */
  @aiFunction({
    name: 'post_disputes_dispute',
    description: `<p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>

<p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>.`,
    inputSchema: stripe.PostDisputesDisputeParamsSchema
  })
  async PostDisputesDispute(
    params: stripe.PostDisputesDisputeParams
  ): Promise<stripe.PostDisputesDisputeResponse> {
    return this.ky
      .post(`/v1/disputes/${params.dispute}`)
      .json<stripe.PostDisputesDisputeResponse>()
  }

  /**
 * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>

<p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>.
 */
  @aiFunction({
    name: 'post_disputes_dispute_close',
    description: `<p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>

<p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>.`,
    inputSchema: stripe.PostDisputesDisputeCloseParamsSchema
  })
  async PostDisputesDisputeClose(
    params: stripe.PostDisputesDisputeCloseParams
  ): Promise<stripe.PostDisputesDisputeCloseResponse> {
    return this.ky
      .post(`/v1/disputes/${params.dispute}/close`)
      .json<stripe.PostDisputesDisputeCloseResponse>()
  }

  /**
   * <p>Retrieve a list of active entitlements for a customer</p>.
   */
  @aiFunction({
    name: 'get_entitlements_active_entitlements',
    description:
      '<p>Retrieve a list of active entitlements for a customer</p>.',
    inputSchema: stripe.GetEntitlementsActiveEntitlementsParamsSchema
  })
  async GetEntitlementsActiveEntitlements(
    params: stripe.GetEntitlementsActiveEntitlementsParams
  ): Promise<stripe.GetEntitlementsActiveEntitlementsResponse> {
    return this.ky
      .get('/v1/entitlements/active_entitlements', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetEntitlementsActiveEntitlementsResponse>()
  }

  /**
   * <p>Retrieve an active entitlement</p>.
   */
  @aiFunction({
    name: 'get_entitlements_active_entitlements_id',
    description: '<p>Retrieve an active entitlement</p>.',
    inputSchema: stripe.GetEntitlementsActiveEntitlementsIdParamsSchema
  })
  async GetEntitlementsActiveEntitlementsId(
    params: stripe.GetEntitlementsActiveEntitlementsIdParams
  ): Promise<stripe.GetEntitlementsActiveEntitlementsIdResponse> {
    return this.ky
      .get(`/v1/entitlements/active_entitlements/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetEntitlementsActiveEntitlementsIdResponse>()
  }

  /**
   * <p>Retrieve a list of features</p>.
   */
  @aiFunction({
    name: 'get_entitlements_features',
    description: '<p>Retrieve a list of features</p>.',
    inputSchema: stripe.GetEntitlementsFeaturesParamsSchema
  })
  async GetEntitlementsFeatures(
    params: stripe.GetEntitlementsFeaturesParams
  ): Promise<stripe.GetEntitlementsFeaturesResponse> {
    return this.ky
      .get('/v1/entitlements/features', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetEntitlementsFeaturesResponse>()
  }

  /**
   * <p>Creates a feature</p>.
   */
  @aiFunction({
    name: 'post_entitlements_features',
    description: '<p>Creates a feature</p>.',
    inputSchema: stripe.PostEntitlementsFeaturesParamsSchema
  })
  async PostEntitlementsFeatures(
    _params: stripe.PostEntitlementsFeaturesParams
  ): Promise<stripe.PostEntitlementsFeaturesResponse> {
    return this.ky
      .post('/v1/entitlements/features')
      .json<stripe.PostEntitlementsFeaturesResponse>()
  }

  /**
   * <p>Retrieves a feature</p>.
   */
  @aiFunction({
    name: 'get_entitlements_features_id',
    description: '<p>Retrieves a feature</p>.',
    inputSchema: stripe.GetEntitlementsFeaturesIdParamsSchema
  })
  async GetEntitlementsFeaturesId(
    params: stripe.GetEntitlementsFeaturesIdParams
  ): Promise<stripe.GetEntitlementsFeaturesIdResponse> {
    return this.ky
      .get(`/v1/entitlements/features/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetEntitlementsFeaturesIdResponse>()
  }

  /**
   * <p>Update a feature’s metadata or permanently deactivate it.</p>.
   */
  @aiFunction({
    name: 'post_entitlements_features_id',
    description:
      '<p>Update a feature’s metadata or permanently deactivate it.</p>.',
    inputSchema: stripe.PostEntitlementsFeaturesIdParamsSchema
  })
  async PostEntitlementsFeaturesId(
    params: stripe.PostEntitlementsFeaturesIdParams
  ): Promise<stripe.PostEntitlementsFeaturesIdResponse> {
    return this.ky
      .post(`/v1/entitlements/features/${params.id}`)
      .json<stripe.PostEntitlementsFeaturesIdResponse>()
  }

  /**
   * <p>Creates a short-lived API key for a given resource.</p>.
   */
  @aiFunction({
    name: 'post_ephemeral_keys',
    description: '<p>Creates a short-lived API key for a given resource.</p>.',
    inputSchema: stripe.PostEphemeralKeysParamsSchema
  })
  async PostEphemeralKeys(
    _params: stripe.PostEphemeralKeysParams
  ): Promise<stripe.PostEphemeralKeysResponse> {
    return this.ky
      .post('/v1/ephemeral_keys')
      .json<stripe.PostEphemeralKeysResponse>()
  }

  /**
   * <p>Invalidates a short-lived API key for a given resource.</p>.
   */
  @aiFunction({
    name: 'delete_ephemeral_keys_key',
    description:
      '<p>Invalidates a short-lived API key for a given resource.</p>.',
    inputSchema: stripe.DeleteEphemeralKeysKeyParamsSchema
  })
  async DeleteEphemeralKeysKey(
    params: stripe.DeleteEphemeralKeysKeyParams
  ): Promise<stripe.DeleteEphemeralKeysKeyResponse> {
    return this.ky
      .delete(`/v1/ephemeral_keys/${params.key}`)
      .json<stripe.DeleteEphemeralKeysKeyResponse>()
  }

  /**
   * <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>.
   */
  @aiFunction({
    name: 'get_events',
    description:
      '<p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>.',
    inputSchema: stripe.GetEventsParamsSchema
  })
  async GetEvents(
    params: stripe.GetEventsParams
  ): Promise<stripe.GetEventsResponse> {
    return this.ky
      .get('/v1/events', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetEventsResponse>()
  }

  /**
   * <p>Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a webhook.</p>.
   */
  @aiFunction({
    name: 'get_events_id',
    description:
      '<p>Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a webhook.</p>.',
    inputSchema: stripe.GetEventsIdParamsSchema
  })
  async GetEventsId(
    params: stripe.GetEventsIdParams
  ): Promise<stripe.GetEventsIdResponse> {
    return this.ky
      .get(`/v1/events/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetEventsIdResponse>()
  }

  /**
   * <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>.
   */
  @aiFunction({
    name: 'get_exchange_rates',
    description:
      '<p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>.',
    inputSchema: stripe.GetExchangeRatesParamsSchema
  })
  async GetExchangeRates(
    params: stripe.GetExchangeRatesParams
  ): Promise<stripe.GetExchangeRatesResponse> {
    return this.ky
      .get('/v1/exchange_rates', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetExchangeRatesResponse>()
  }

  /**
   * <p>Retrieves the exchange rates from the given currency to every supported currency.</p>.
   */
  @aiFunction({
    name: 'get_exchange_rates_rate_id',
    description:
      '<p>Retrieves the exchange rates from the given currency to every supported currency.</p>.',
    inputSchema: stripe.GetExchangeRatesRateIdParamsSchema
  })
  async GetExchangeRatesRateId(
    params: stripe.GetExchangeRatesRateIdParams
  ): Promise<stripe.GetExchangeRatesRateIdResponse> {
    return this.ky
      .get(`/v1/exchange_rates/${params.rate_id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetExchangeRatesRateIdResponse>()
  }

  /**
   * <p>Returns a list of file links.</p>.
   */
  @aiFunction({
    name: 'get_file_links',
    description: '<p>Returns a list of file links.</p>.',
    inputSchema: stripe.GetFileLinksParamsSchema
  })
  async GetFileLinks(
    params: stripe.GetFileLinksParams
  ): Promise<stripe.GetFileLinksResponse> {
    return this.ky
      .get('/v1/file_links', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetFileLinksResponse>()
  }

  /**
   * <p>Creates a new file link object.</p>.
   */
  @aiFunction({
    name: 'post_file_links',
    description: '<p>Creates a new file link object.</p>.',
    inputSchema: stripe.PostFileLinksParamsSchema
  })
  async PostFileLinks(
    _params: stripe.PostFileLinksParams
  ): Promise<stripe.PostFileLinksResponse> {
    return this.ky.post('/v1/file_links').json<stripe.PostFileLinksResponse>()
  }

  /**
   * <p>Retrieves the file link with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_file_links_link',
    description: '<p>Retrieves the file link with the given ID.</p>.',
    inputSchema: stripe.GetFileLinksLinkParamsSchema
  })
  async GetFileLinksLink(
    params: stripe.GetFileLinksLinkParams
  ): Promise<stripe.GetFileLinksLinkResponse> {
    return this.ky
      .get(`/v1/file_links/${params.link}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetFileLinksLinkResponse>()
  }

  /**
   * <p>Updates an existing file link object. Expired links can no longer be updated.</p>.
   */
  @aiFunction({
    name: 'post_file_links_link',
    description:
      '<p>Updates an existing file link object. Expired links can no longer be updated.</p>.',
    inputSchema: stripe.PostFileLinksLinkParamsSchema
  })
  async PostFileLinksLink(
    params: stripe.PostFileLinksLinkParams
  ): Promise<stripe.PostFileLinksLinkResponse> {
    return this.ky
      .post(`/v1/file_links/${params.link}`)
      .json<stripe.PostFileLinksLinkResponse>()
  }

  /**
   * <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>.
   */
  @aiFunction({
    name: 'get_files',
    description:
      '<p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>.',
    inputSchema: stripe.GetFilesParamsSchema
  })
  async GetFiles(
    params: stripe.GetFilesParams
  ): Promise<stripe.GetFilesResponse> {
    return this.ky
      .get('/v1/files', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetFilesResponse>()
  }

  /**
 * <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>

<p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>.
 */
  @aiFunction({
    name: 'post_files',
    description: `<p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>

<p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>.`,
    inputSchema: stripe.PostFilesParamsSchema
  })
  async PostFiles(
    params: stripe.PostFilesParams
  ): Promise<stripe.PostFilesResponse> {
    return this.ky
      .post('/v1/files', {
        form: params
      })
      .json<stripe.PostFilesResponse>()
  }

  /**
   * <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>.
   */
  @aiFunction({
    name: 'get_files_file',
    description:
      '<p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>.',
    inputSchema: stripe.GetFilesFileParamsSchema
  })
  async GetFilesFile(
    params: stripe.GetFilesFileParams
  ): Promise<stripe.GetFilesFileResponse> {
    return this.ky
      .get(`/v1/files/${params.file}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetFilesFileResponse>()
  }

  /**
   * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_financial_connections_accounts',
    description:
      '<p>Returns a list of Financial Connections <code>Account</code> objects.</p>.',
    inputSchema: stripe.GetFinancialConnectionsAccountsParamsSchema
  })
  async GetFinancialConnectionsAccounts(
    params: stripe.GetFinancialConnectionsAccountsParams
  ): Promise<stripe.GetFinancialConnectionsAccountsResponse> {
    return this.ky
      .get('/v1/financial_connections/accounts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetFinancialConnectionsAccountsResponse>()
  }

  /**
   * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'get_financial_connections_accounts_account',
    description:
      '<p>Retrieves the details of an Financial Connections <code>Account</code>.</p>.',
    inputSchema: stripe.GetFinancialConnectionsAccountsAccountParamsSchema
  })
  async GetFinancialConnectionsAccountsAccount(
    params: stripe.GetFinancialConnectionsAccountsAccountParams
  ): Promise<stripe.GetFinancialConnectionsAccountsAccountResponse> {
    return this.ky
      .get(`/v1/financial_connections/accounts/${params.account}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetFinancialConnectionsAccountsAccountResponse>()
  }

  /**
   * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>.
   */
  @aiFunction({
    name: 'post_financial_connections_accounts_account_disconnect',
    description:
      '<p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>.',
    inputSchema:
      stripe.PostFinancialConnectionsAccountsAccountDisconnectParamsSchema
  })
  async PostFinancialConnectionsAccountsAccountDisconnect(
    params: stripe.PostFinancialConnectionsAccountsAccountDisconnectParams
  ): Promise<stripe.PostFinancialConnectionsAccountsAccountDisconnectResponse> {
    return this.ky
      .post(
        `/v1/financial_connections/accounts/${params.account}/disconnect`
      )
      .json<stripe.PostFinancialConnectionsAccountsAccountDisconnectResponse>()
  }

  /**
   * <p>Lists all owners for a given <code>Account</code></p>.
   */
  @aiFunction({
    name: 'get_financial_connections_accounts_account_owners',
    description: '<p>Lists all owners for a given <code>Account</code></p>.',
    inputSchema: stripe.GetFinancialConnectionsAccountsAccountOwnersParamsSchema
  })
  async GetFinancialConnectionsAccountsAccountOwners(
    params: stripe.GetFinancialConnectionsAccountsAccountOwnersParams
  ): Promise<stripe.GetFinancialConnectionsAccountsAccountOwnersResponse> {
    return this.ky
      .get(`/v1/financial_connections/accounts/${params.account}/owners`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'ownership',
            'starting_after'
          )
        )
      })
      .json<stripe.GetFinancialConnectionsAccountsAccountOwnersResponse>()
  }

  /**
   * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'post_financial_connections_accounts_account_refresh',
    description:
      '<p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>.',
    inputSchema:
      stripe.PostFinancialConnectionsAccountsAccountRefreshParamsSchema
  })
  async PostFinancialConnectionsAccountsAccountRefresh(
    params: stripe.PostFinancialConnectionsAccountsAccountRefreshParams
  ): Promise<stripe.PostFinancialConnectionsAccountsAccountRefreshResponse> {
    return this.ky
      .post(`/v1/financial_connections/accounts/${params.account}/refresh`)
      .json<stripe.PostFinancialConnectionsAccountsAccountRefreshResponse>()
  }

  /**
   * <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'post_financial_connections_accounts_account_subscribe',
    description:
      '<p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>.',
    inputSchema:
      stripe.PostFinancialConnectionsAccountsAccountSubscribeParamsSchema
  })
  async PostFinancialConnectionsAccountsAccountSubscribe(
    params: stripe.PostFinancialConnectionsAccountsAccountSubscribeParams
  ): Promise<stripe.PostFinancialConnectionsAccountsAccountSubscribeResponse> {
    return this.ky
      .post(`/v1/financial_connections/accounts/${params.account}/subscribe`)
      .json<stripe.PostFinancialConnectionsAccountsAccountSubscribeResponse>()
  }

  /**
   * <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'post_financial_connections_accounts_account_unsubscribe',
    description:
      '<p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>.',
    inputSchema:
      stripe.PostFinancialConnectionsAccountsAccountUnsubscribeParamsSchema
  })
  async PostFinancialConnectionsAccountsAccountUnsubscribe(
    params: stripe.PostFinancialConnectionsAccountsAccountUnsubscribeParams
  ): Promise<stripe.PostFinancialConnectionsAccountsAccountUnsubscribeResponse> {
    return this.ky
      .post(
        `/v1/financial_connections/accounts/${params.account}/unsubscribe`
      )
      .json<stripe.PostFinancialConnectionsAccountsAccountUnsubscribeResponse>()
  }

  /**
   * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>.
   */
  @aiFunction({
    name: 'post_financial_connections_sessions',
    description:
      '<p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>.',
    inputSchema: stripe.PostFinancialConnectionsSessionsParamsSchema
  })
  async PostFinancialConnectionsSessions(
    _params: stripe.PostFinancialConnectionsSessionsParams
  ): Promise<stripe.PostFinancialConnectionsSessionsResponse> {
    return this.ky
      .post('/v1/financial_connections/sessions')
      .json<stripe.PostFinancialConnectionsSessionsResponse>()
  }

  /**
   * <p>Retrieves the details of a Financial Connections <code>Session</code></p>.
   */
  @aiFunction({
    name: 'get_financial_connections_sessions_session',
    description:
      '<p>Retrieves the details of a Financial Connections <code>Session</code></p>.',
    inputSchema: stripe.GetFinancialConnectionsSessionsSessionParamsSchema
  })
  async GetFinancialConnectionsSessionsSession(
    params: stripe.GetFinancialConnectionsSessionsSessionParams
  ): Promise<stripe.GetFinancialConnectionsSessionsSessionResponse> {
    return this.ky
      .get(`/v1/financial_connections/sessions/${params.session}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetFinancialConnectionsSessionsSessionResponse>()
  }

  /**
   * <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_financial_connections_transactions',
    description:
      '<p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>.',
    inputSchema: stripe.GetFinancialConnectionsTransactionsParamsSchema
  })
  async GetFinancialConnectionsTransactions(
    params: stripe.GetFinancialConnectionsTransactionsParams
  ): Promise<stripe.GetFinancialConnectionsTransactionsResponse> {
    return this.ky
      .get('/v1/financial_connections/transactions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetFinancialConnectionsTransactionsResponse>()
  }

  /**
   * <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>.
   */
  @aiFunction({
    name: 'get_financial_connections_transactions_transaction',
    description:
      '<p>Retrieves the details of a Financial Connections <code>Transaction</code></p>.',
    inputSchema:
      stripe.GetFinancialConnectionsTransactionsTransactionParamsSchema
  })
  async GetFinancialConnectionsTransactionsTransaction(
    params: stripe.GetFinancialConnectionsTransactionsTransactionParams
  ): Promise<stripe.GetFinancialConnectionsTransactionsTransactionResponse> {
    return this.ky
      .get(`/v1/financial_connections/transactions/${params.transaction}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetFinancialConnectionsTransactionsTransactionResponse>()
  }

  /**
   * <p>Lists all ForwardingRequest objects.</p>.
   */
  @aiFunction({
    name: 'get_forwarding_requests',
    description: '<p>Lists all ForwardingRequest objects.</p>.',
    inputSchema: stripe.GetForwardingRequestsParamsSchema
  })
  async GetForwardingRequests(
    params: stripe.GetForwardingRequestsParams
  ): Promise<stripe.GetForwardingRequestsResponse> {
    return this.ky
      .get('/v1/forwarding/requests', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetForwardingRequestsResponse>()
  }

  /**
   * <p>Creates a ForwardingRequest object.</p>.
   */
  @aiFunction({
    name: 'post_forwarding_requests',
    description: '<p>Creates a ForwardingRequest object.</p>.',
    inputSchema: stripe.PostForwardingRequestsParamsSchema
  })
  async PostForwardingRequests(
    _params: stripe.PostForwardingRequestsParams
  ): Promise<stripe.PostForwardingRequestsResponse> {
    return this.ky
      .post('/v1/forwarding/requests')
      .json<stripe.PostForwardingRequestsResponse>()
  }

  /**
   * <p>Retrieves a ForwardingRequest object.</p>.
   */
  @aiFunction({
    name: 'get_forwarding_requests_id',
    description: '<p>Retrieves a ForwardingRequest object.</p>.',
    inputSchema: stripe.GetForwardingRequestsIdParamsSchema
  })
  async GetForwardingRequestsId(
    params: stripe.GetForwardingRequestsIdParams
  ): Promise<stripe.GetForwardingRequestsIdResponse> {
    return this.ky
      .get(`/v1/forwarding/requests/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetForwardingRequestsIdResponse>()
  }

  /**
   * <p>List all verification reports.</p>.
   */
  @aiFunction({
    name: 'get_identity_verification_reports',
    description: '<p>List all verification reports.</p>.',
    inputSchema: stripe.GetIdentityVerificationReportsParamsSchema
  })
  async GetIdentityVerificationReports(
    params: stripe.GetIdentityVerificationReportsParams
  ): Promise<stripe.GetIdentityVerificationReportsResponse> {
    return this.ky
      .get('/v1/identity/verification_reports', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIdentityVerificationReportsResponse>()
  }

  /**
   * <p>Retrieves an existing VerificationReport</p>.
   */
  @aiFunction({
    name: 'get_identity_verification_reports_report',
    description: '<p>Retrieves an existing VerificationReport</p>.',
    inputSchema: stripe.GetIdentityVerificationReportsReportParamsSchema
  })
  async GetIdentityVerificationReportsReport(
    params: stripe.GetIdentityVerificationReportsReportParams
  ): Promise<stripe.GetIdentityVerificationReportsReportResponse> {
    return this.ky
      .get(`/v1/identity/verification_reports/${params.report}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIdentityVerificationReportsReportResponse>()
  }

  /**
   * <p>Returns a list of VerificationSessions</p>.
   */
  @aiFunction({
    name: 'get_identity_verification_sessions',
    description: '<p>Returns a list of VerificationSessions</p>.',
    inputSchema: stripe.GetIdentityVerificationSessionsParamsSchema
  })
  async GetIdentityVerificationSessions(
    params: stripe.GetIdentityVerificationSessionsParams
  ): Promise<stripe.GetIdentityVerificationSessionsResponse> {
    return this.ky
      .get('/v1/identity/verification_sessions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIdentityVerificationSessionsResponse>()
  }

  /**
 * <p>Creates a VerificationSession object.</p>

<p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>

<p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>

<p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>.
 */
  @aiFunction({
    name: 'post_identity_verification_sessions',
    description: `<p>Creates a VerificationSession object.</p>

<p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>

<p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>

<p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>.`,
    inputSchema: stripe.PostIdentityVerificationSessionsParamsSchema
  })
  async PostIdentityVerificationSessions(
    _params: stripe.PostIdentityVerificationSessionsParams
  ): Promise<stripe.PostIdentityVerificationSessionsResponse> {
    return this.ky
      .post('/v1/identity/verification_sessions')
      .json<stripe.PostIdentityVerificationSessionsResponse>()
  }

  /**
 * <p>Retrieves the details of a VerificationSession that was previously created.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
<code>client_secret</code> or <code>url</code> to allow re-submission.</p>.
 */
  @aiFunction({
    name: 'get_identity_verification_sessions_session',
    description: `<p>Retrieves the details of a VerificationSession that was previously created.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
<code>client_secret</code> or <code>url</code> to allow re-submission.</p>.`,
    inputSchema: stripe.GetIdentityVerificationSessionsSessionParamsSchema
  })
  async GetIdentityVerificationSessionsSession(
    params: stripe.GetIdentityVerificationSessionsSessionParams
  ): Promise<stripe.GetIdentityVerificationSessionsSessionResponse> {
    return this.ky
      .get(`/v1/identity/verification_sessions/${params.session}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIdentityVerificationSessionsSessionResponse>()
  }

  /**
 * <p>Updates a VerificationSession object.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to update the
verification check and options.</p>.
 */
  @aiFunction({
    name: 'post_identity_verification_sessions_session',
    description: `<p>Updates a VerificationSession object.</p>

<p>When the session status is <code>requires_input</code>, you can use this method to update the
verification check and options.</p>.`,
    inputSchema: stripe.PostIdentityVerificationSessionsSessionParamsSchema
  })
  async PostIdentityVerificationSessionsSession(
    params: stripe.PostIdentityVerificationSessionsSessionParams
  ): Promise<stripe.PostIdentityVerificationSessionsSessionResponse> {
    return this.ky
      .post(`/v1/identity/verification_sessions/${params.session}`)
      .json<stripe.PostIdentityVerificationSessionsSessionResponse>()
  }

  /**
 * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>

<p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>.
 */
  @aiFunction({
    name: 'post_identity_verification_sessions_session_cancel',
    description: `<p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>

<p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>.`,
    inputSchema:
      stripe.PostIdentityVerificationSessionsSessionCancelParamsSchema
  })
  async PostIdentityVerificationSessionsSessionCancel(
    params: stripe.PostIdentityVerificationSessionsSessionCancelParams
  ): Promise<stripe.PostIdentityVerificationSessionsSessionCancelResponse> {
    return this.ky
      .post(`/v1/identity/verification_sessions/${params.session}/cancel`)
      .json<stripe.PostIdentityVerificationSessionsSessionCancelResponse>()
  }

  /**
 * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
the VerificationSession and all objects related to it, including VerificationReports, Events,
request logs, etc.</p>

<p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
<a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
state will automatically cancel it.</p>

<p>The redaction process may take up to four days. When the redaction process is in progress, the
VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
will be emitted.</p>

<p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
used for any purpose.</p>

<p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>.
 */
  @aiFunction({
    name: 'post_identity_verification_sessions_session_redact',
    description: `<p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
the VerificationSession and all objects related to it, including VerificationReports, Events,
request logs, etc.</p>

<p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
<a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
state will automatically cancel it.</p>

<p>The redaction process may take up to four days. When the redaction process is in progress, the
VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
will be emitted.</p>

<p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
used for any purpose.</p>

<p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>.`,
    inputSchema:
      stripe.PostIdentityVerificationSessionsSessionRedactParamsSchema
  })
  async PostIdentityVerificationSessionsSessionRedact(
    params: stripe.PostIdentityVerificationSessionsSessionRedactParams
  ): Promise<stripe.PostIdentityVerificationSessionsSessionRedactResponse> {
    return this.ky
      .post(`/v1/identity/verification_sessions/${params.session}/redact`)
      .json<stripe.PostIdentityVerificationSessionsSessionRedactResponse>()
  }

  /**
   * <p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>.
   */
  @aiFunction({
    name: 'get_invoice_rendering_templates',
    description:
      '<p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>.',
    inputSchema: stripe.GetInvoiceRenderingTemplatesParamsSchema
  })
  async GetInvoiceRenderingTemplates(
    params: stripe.GetInvoiceRenderingTemplatesParams
  ): Promise<stripe.GetInvoiceRenderingTemplatesResponse> {
    return this.ky
      .get('/v1/invoice_rendering_templates', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoiceRenderingTemplatesResponse>()
  }

  /**
   * <p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.</p>.
   */
  @aiFunction({
    name: 'get_invoice_rendering_templates_template',
    description:
      '<p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.</p>.',
    inputSchema: stripe.GetInvoiceRenderingTemplatesTemplateParamsSchema
  })
  async GetInvoiceRenderingTemplatesTemplate(
    params: stripe.GetInvoiceRenderingTemplatesTemplateParams
  ): Promise<stripe.GetInvoiceRenderingTemplatesTemplateResponse> {
    return this.ky
      .get(`/v1/invoice_rendering_templates/${params.template}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand', 'version'))
      })
      .json<stripe.GetInvoiceRenderingTemplatesTemplateResponse>()
  }

  /**
   * <p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.</p>.
   */
  @aiFunction({
    name: 'post_invoice_rendering_templates_template_archive',
    description:
      '<p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.</p>.',
    inputSchema: stripe.PostInvoiceRenderingTemplatesTemplateArchiveParamsSchema
  })
  async PostInvoiceRenderingTemplatesTemplateArchive(
    params: stripe.PostInvoiceRenderingTemplatesTemplateArchiveParams
  ): Promise<stripe.PostInvoiceRenderingTemplatesTemplateArchiveResponse> {
    return this.ky
      .post(`/v1/invoice_rendering_templates/${params.template}/archive`)
      .json<stripe.PostInvoiceRenderingTemplatesTemplateArchiveResponse>()
  }

  /**
   * <p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>.
   */
  @aiFunction({
    name: 'post_invoice_rendering_templates_template_unarchive',
    description:
      '<p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>.',
    inputSchema:
      stripe.PostInvoiceRenderingTemplatesTemplateUnarchiveParamsSchema
  })
  async PostInvoiceRenderingTemplatesTemplateUnarchive(
    params: stripe.PostInvoiceRenderingTemplatesTemplateUnarchiveParams
  ): Promise<stripe.PostInvoiceRenderingTemplatesTemplateUnarchiveResponse> {
    return this.ky
      .post(`/v1/invoice_rendering_templates/${params.template}/unarchive`)
      .json<stripe.PostInvoiceRenderingTemplatesTemplateUnarchiveResponse>()
  }

  /**
   * <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>.
   */
  @aiFunction({
    name: 'get_invoiceitems',
    description:
      '<p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>.',
    inputSchema: stripe.GetInvoiceitemsParamsSchema
  })
  async GetInvoiceitems(
    params: stripe.GetInvoiceitemsParams
  ): Promise<stripe.GetInvoiceitemsResponse> {
    return this.ky
      .get('/v1/invoiceitems', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoiceitemsResponse>()
  }

  /**
   * <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>.
   */
  @aiFunction({
    name: 'post_invoiceitems',
    description:
      '<p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>.',
    inputSchema: stripe.PostInvoiceitemsParamsSchema
  })
  async PostInvoiceitems(
    _params: stripe.PostInvoiceitemsParams
  ): Promise<stripe.PostInvoiceitemsResponse> {
    return this.ky
      .post('/v1/invoiceitems')
      .json<stripe.PostInvoiceitemsResponse>()
  }

  /**
   * <p>Retrieves the invoice item with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_invoiceitems_invoiceitem',
    description: '<p>Retrieves the invoice item with the given ID.</p>.',
    inputSchema: stripe.GetInvoiceitemsInvoiceitemParamsSchema
  })
  async GetInvoiceitemsInvoiceitem(
    params: stripe.GetInvoiceitemsInvoiceitemParams
  ): Promise<stripe.GetInvoiceitemsInvoiceitemResponse> {
    return this.ky
      .get(`/v1/invoiceitems/${params.invoiceitem}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetInvoiceitemsInvoiceitemResponse>()
  }

  /**
   * <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>.
   */
  @aiFunction({
    name: 'post_invoiceitems_invoiceitem',
    description:
      '<p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>.',
    inputSchema: stripe.PostInvoiceitemsInvoiceitemParamsSchema
  })
  async PostInvoiceitemsInvoiceitem(
    params: stripe.PostInvoiceitemsInvoiceitemParams
  ): Promise<stripe.PostInvoiceitemsInvoiceitemResponse> {
    return this.ky
      .post(`/v1/invoiceitems/${params.invoiceitem}`)
      .json<stripe.PostInvoiceitemsInvoiceitemResponse>()
  }

  /**
   * <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>.
   */
  @aiFunction({
    name: 'delete_invoiceitems_invoiceitem',
    description:
      '<p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>.',
    inputSchema: stripe.DeleteInvoiceitemsInvoiceitemParamsSchema
  })
  async DeleteInvoiceitemsInvoiceitem(
    params: stripe.DeleteInvoiceitemsInvoiceitemParams
  ): Promise<stripe.DeleteInvoiceitemsInvoiceitemResponse> {
    return this.ky
      .delete(`/v1/invoiceitems/${params.invoiceitem}`)
      .json<stripe.DeleteInvoiceitemsInvoiceitemResponse>()
  }

  /**
   * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>.
   */
  @aiFunction({
    name: 'get_invoices',
    description:
      '<p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>.',
    inputSchema: stripe.GetInvoicesParamsSchema
  })
  async GetInvoices(
    params: stripe.GetInvoicesParams
  ): Promise<stripe.GetInvoicesResponse> {
    return this.ky
      .get('/v1/invoices', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoicesResponse>()
  }

  /**
   * <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>.
   */
  @aiFunction({
    name: 'post_invoices',
    description:
      '<p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>.',
    inputSchema: stripe.PostInvoicesParamsSchema
  })
  async PostInvoices(
    _params: stripe.PostInvoicesParams
  ): Promise<stripe.PostInvoicesResponse> {
    return this.ky.post('/v1/invoices').json<stripe.PostInvoicesResponse>()
  }

  /**
 * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>

<p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>.
 */
  @aiFunction({
    name: 'post_invoices_create_preview',
    description: `<p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>

<p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>.`,
    inputSchema: stripe.PostInvoicesCreatePreviewParamsSchema
  })
  async PostInvoicesCreatePreview(
    _params: stripe.PostInvoicesCreatePreviewParams
  ): Promise<stripe.PostInvoicesCreatePreviewResponse> {
    return this.ky
      .post('/v1/invoices/create_preview')
      .json<stripe.PostInvoicesCreatePreviewResponse>()
  }

  /**
 * <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_invoices_search',
    description: `<p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetInvoicesSearchParamsSchema
  })
  async GetInvoicesSearch(
    params: stripe.GetInvoicesSearchParams
  ): Promise<stripe.GetInvoicesSearchResponse> {
    return this.ky
      .get('/v1/invoices/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoicesSearchResponse>()
  }

  /**
 * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>

<p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>.
 */
  @aiFunction({
    name: 'get_invoices_upcoming',
    description: `<p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>

<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>

<p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>.`,
    inputSchema: stripe.GetInvoicesUpcomingParamsSchema
  })
  async GetInvoicesUpcoming(
    params: stripe.GetInvoicesUpcomingParams
  ): Promise<stripe.GetInvoicesUpcomingResponse> {
    return this.ky
      .get('/v1/invoices/upcoming', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoicesUpcomingResponse>()
  }

  /**
   * <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_invoices_upcoming_lines',
    description:
      '<p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetInvoicesUpcomingLinesParamsSchema
  })
  async GetInvoicesUpcomingLines(
    params: stripe.GetInvoicesUpcomingLinesParams
  ): Promise<stripe.GetInvoicesUpcomingLinesResponse> {
    return this.ky
      .get('/v1/invoices/upcoming/lines', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetInvoicesUpcomingLinesResponse>()
  }

  /**
   * <p>Retrieves the invoice with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_invoices_invoice',
    description: '<p>Retrieves the invoice with the given ID.</p>.',
    inputSchema: stripe.GetInvoicesInvoiceParamsSchema
  })
  async GetInvoicesInvoice(
    params: stripe.GetInvoicesInvoiceParams
  ): Promise<stripe.GetInvoicesInvoiceResponse> {
    return this.ky
      .get(`/v1/invoices/${params.invoice}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetInvoicesInvoiceResponse>()
  }

  /**
 * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
monetary values, as well as <code>collection_method</code>, become uneditable.</p>

<p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
<code>auto_advance=false</code>.</p>.
 */
  @aiFunction({
    name: 'post_invoices_invoice',
    description: `<p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
monetary values, as well as <code>collection_method</code>, become uneditable.</p>

<p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
<code>auto_advance=false</code>.</p>.`,
    inputSchema: stripe.PostInvoicesInvoiceParamsSchema
  })
  async PostInvoicesInvoice(
    params: stripe.PostInvoicesInvoiceParams
  ): Promise<stripe.PostInvoicesInvoiceResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}`)
      .json<stripe.PostInvoicesInvoiceResponse>()
  }

  /**
   * <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>.
   */
  @aiFunction({
    name: 'delete_invoices_invoice',
    description:
      '<p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>.',
    inputSchema: stripe.DeleteInvoicesInvoiceParamsSchema
  })
  async DeleteInvoicesInvoice(
    params: stripe.DeleteInvoicesInvoiceParams
  ): Promise<stripe.DeleteInvoicesInvoiceResponse> {
    return this.ky
      .delete(`/v1/invoices/${params.invoice}`)
      .json<stripe.DeleteInvoicesInvoiceResponse>()
  }

  /**
   * <p>Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_add_lines',
    description:
      '<p>Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.</p>.',
    inputSchema: stripe.PostInvoicesInvoiceAddLinesParamsSchema
  })
  async PostInvoicesInvoiceAddLines(
    params: stripe.PostInvoicesInvoiceAddLinesParams
  ): Promise<stripe.PostInvoicesInvoiceAddLinesResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/add_lines`)
      .json<stripe.PostInvoicesInvoiceAddLinesResponse>()
  }

  /**
   * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_finalize',
    description:
      '<p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>.',
    inputSchema: stripe.PostInvoicesInvoiceFinalizeParamsSchema
  })
  async PostInvoicesInvoiceFinalize(
    params: stripe.PostInvoicesInvoiceFinalizeParams
  ): Promise<stripe.PostInvoicesInvoiceFinalizeResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/finalize`)
      .json<stripe.PostInvoicesInvoiceFinalizeResponse>()
  }

  /**
   * <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_invoices_invoice_lines',
    description:
      '<p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetInvoicesInvoiceLinesParamsSchema
  })
  async GetInvoicesInvoiceLines(
    params: stripe.GetInvoicesInvoiceLinesParams
  ): Promise<stripe.GetInvoicesInvoiceLinesResponse> {
    return this.ky
      .get(`/v1/invoices/${params.invoice}/lines`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetInvoicesInvoiceLinesResponse>()
  }

  /**
 * <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
Updating an invoice’s line item is only possible before the invoice is finalized.</p>.
 */
  @aiFunction({
    name: 'post_invoices_invoice_lines_line_item_id',
    description: `<p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
Updating an invoice’s line item is only possible before the invoice is finalized.</p>.`,
    inputSchema: stripe.PostInvoicesInvoiceLinesLineItemIdParamsSchema
  })
  async PostInvoicesInvoiceLinesLineItemId(
    params: stripe.PostInvoicesInvoiceLinesLineItemIdParams
  ): Promise<stripe.PostInvoicesInvoiceLinesLineItemIdResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/lines/${params.line_item_id}`)
      .json<stripe.PostInvoicesInvoiceLinesLineItemIdResponse>()
  }

  /**
   * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_mark_uncollectible',
    description:
      '<p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>.',
    inputSchema: stripe.PostInvoicesInvoiceMarkUncollectibleParamsSchema
  })
  async PostInvoicesInvoiceMarkUncollectible(
    params: stripe.PostInvoicesInvoiceMarkUncollectibleParams
  ): Promise<stripe.PostInvoicesInvoiceMarkUncollectibleResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/mark_uncollectible`)
      .json<stripe.PostInvoicesInvoiceMarkUncollectibleResponse>()
  }

  /**
   * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_pay',
    description:
      '<p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>.',
    inputSchema: stripe.PostInvoicesInvoicePayParamsSchema
  })
  async PostInvoicesInvoicePay(
    params: stripe.PostInvoicesInvoicePayParams
  ): Promise<stripe.PostInvoicesInvoicePayResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/pay`)
      .json<stripe.PostInvoicesInvoicePayResponse>()
  }

  /**
   * <p>Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_remove_lines',
    description:
      '<p>Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.</p>.',
    inputSchema: stripe.PostInvoicesInvoiceRemoveLinesParamsSchema
  })
  async PostInvoicesInvoiceRemoveLines(
    params: stripe.PostInvoicesInvoiceRemoveLinesParams
  ): Promise<stripe.PostInvoicesInvoiceRemoveLinesResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/remove_lines`)
      .json<stripe.PostInvoicesInvoiceRemoveLinesResponse>()
  }

  /**
 * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>

<p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>.
 */
  @aiFunction({
    name: 'post_invoices_invoice_send',
    description: `<p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>

<p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>.`,
    inputSchema: stripe.PostInvoicesInvoiceSendParamsSchema
  })
  async PostInvoicesInvoiceSend(
    params: stripe.PostInvoicesInvoiceSendParams
  ): Promise<stripe.PostInvoicesInvoiceSendResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/send`)
      .json<stripe.PostInvoicesInvoiceSendResponse>()
  }

  /**
   * <p>Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.</p>.
   */
  @aiFunction({
    name: 'post_invoices_invoice_update_lines',
    description:
      '<p>Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.</p>.',
    inputSchema: stripe.PostInvoicesInvoiceUpdateLinesParamsSchema
  })
  async PostInvoicesInvoiceUpdateLines(
    params: stripe.PostInvoicesInvoiceUpdateLinesParams
  ): Promise<stripe.PostInvoicesInvoiceUpdateLinesResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/update_lines`)
      .json<stripe.PostInvoicesInvoiceUpdateLinesResponse>()
  }

  /**
 * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>

<p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>.
 */
  @aiFunction({
    name: 'post_invoices_invoice_void',
    description: `<p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>

<p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>.`,
    inputSchema: stripe.PostInvoicesInvoiceVoidParamsSchema
  })
  async PostInvoicesInvoiceVoid(
    params: stripe.PostInvoicesInvoiceVoidParams
  ): Promise<stripe.PostInvoicesInvoiceVoidResponse> {
    return this.ky
      .post(`/v1/invoices/${params.invoice}/void`)
      .json<stripe.PostInvoicesInvoiceVoidResponse>()
  }

  /**
   * <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_authorizations',
    description:
      '<p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingAuthorizationsParamsSchema
  })
  async GetIssuingAuthorizations(
    params: stripe.GetIssuingAuthorizationsParams
  ): Promise<stripe.GetIssuingAuthorizationsResponse> {
    return this.ky
      .get('/v1/issuing/authorizations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingAuthorizationsResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Authorization</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_authorizations_authorization',
    description:
      '<p>Retrieves an Issuing <code>Authorization</code> object.</p>.',
    inputSchema: stripe.GetIssuingAuthorizationsAuthorizationParamsSchema
  })
  async GetIssuingAuthorizationsAuthorization(
    params: stripe.GetIssuingAuthorizationsAuthorizationParams
  ): Promise<stripe.GetIssuingAuthorizationsAuthorizationResponse> {
    return this.ky
      .get(`/v1/issuing/authorizations/${params.authorization}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingAuthorizationsAuthorizationResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_issuing_authorizations_authorization',
    description:
      '<p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostIssuingAuthorizationsAuthorizationParamsSchema
  })
  async PostIssuingAuthorizationsAuthorization(
    params: stripe.PostIssuingAuthorizationsAuthorizationParams
  ): Promise<stripe.PostIssuingAuthorizationsAuthorizationResponse> {
    return this.ky
      .post(`/v1/issuing/authorizations/${params.authorization}`)
      .json<stripe.PostIssuingAuthorizationsAuthorizationResponse>()
  }

  /**
 * <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>.
 */
  @aiFunction({
    name: 'post_issuing_authorizations_authorization_approve',
    description: `<p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>.`,
    inputSchema:
      stripe.PostIssuingAuthorizationsAuthorizationApproveParamsSchema
  })
  async PostIssuingAuthorizationsAuthorizationApprove(
    params: stripe.PostIssuingAuthorizationsAuthorizationApproveParams
  ): Promise<stripe.PostIssuingAuthorizationsAuthorizationApproveResponse> {
    return this.ky
      .post(`/v1/issuing/authorizations/${params.authorization}/approve`)
      .json<stripe.PostIssuingAuthorizationsAuthorizationApproveResponse>()
  }

  /**
 * <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>.
 */
  @aiFunction({
    name: 'post_issuing_authorizations_authorization_decline',
    description: `<p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>.`,
    inputSchema:
      stripe.PostIssuingAuthorizationsAuthorizationDeclineParamsSchema
  })
  async PostIssuingAuthorizationsAuthorizationDecline(
    params: stripe.PostIssuingAuthorizationsAuthorizationDeclineParams
  ): Promise<stripe.PostIssuingAuthorizationsAuthorizationDeclineResponse> {
    return this.ky
      .post(`/v1/issuing/authorizations/${params.authorization}/decline`)
      .json<stripe.PostIssuingAuthorizationsAuthorizationDeclineResponse>()
  }

  /**
   * <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_cardholders',
    description:
      '<p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingCardholdersParamsSchema
  })
  async GetIssuingCardholders(
    params: stripe.GetIssuingCardholdersParams
  ): Promise<stripe.GetIssuingCardholdersResponse> {
    return this.ky
      .get('/v1/issuing/cardholders', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingCardholdersResponse>()
  }

  /**
   * <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>.
   */
  @aiFunction({
    name: 'post_issuing_cardholders',
    description:
      '<p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>.',
    inputSchema: stripe.PostIssuingCardholdersParamsSchema
  })
  async PostIssuingCardholders(
    _params: stripe.PostIssuingCardholdersParams
  ): Promise<stripe.PostIssuingCardholdersResponse> {
    return this.ky
      .post('/v1/issuing/cardholders')
      .json<stripe.PostIssuingCardholdersResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Cardholder</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_cardholders_cardholder',
    description: '<p>Retrieves an Issuing <code>Cardholder</code> object.</p>.',
    inputSchema: stripe.GetIssuingCardholdersCardholderParamsSchema
  })
  async GetIssuingCardholdersCardholder(
    params: stripe.GetIssuingCardholdersCardholderParams
  ): Promise<stripe.GetIssuingCardholdersCardholderResponse> {
    return this.ky
      .get(`/v1/issuing/cardholders/${params.cardholder}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingCardholdersCardholderResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_issuing_cardholders_cardholder',
    description:
      '<p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostIssuingCardholdersCardholderParamsSchema
  })
  async PostIssuingCardholdersCardholder(
    params: stripe.PostIssuingCardholdersCardholderParams
  ): Promise<stripe.PostIssuingCardholdersCardholderResponse> {
    return this.ky
      .post(`/v1/issuing/cardholders/${params.cardholder}`)
      .json<stripe.PostIssuingCardholdersCardholderResponse>()
  }

  /**
   * <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_cards',
    description:
      '<p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingCardsParamsSchema
  })
  async GetIssuingCards(
    params: stripe.GetIssuingCardsParams
  ): Promise<stripe.GetIssuingCardsResponse> {
    return this.ky
      .get('/v1/issuing/cards', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingCardsResponse>()
  }

  /**
   * <p>Creates an Issuing <code>Card</code> object.</p>.
   */
  @aiFunction({
    name: 'post_issuing_cards',
    description: '<p>Creates an Issuing <code>Card</code> object.</p>.',
    inputSchema: stripe.PostIssuingCardsParamsSchema
  })
  async PostIssuingCards(
    _params: stripe.PostIssuingCardsParams
  ): Promise<stripe.PostIssuingCardsResponse> {
    return this.ky
      .post('/v1/issuing/cards')
      .json<stripe.PostIssuingCardsResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Card</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_cards_card',
    description: '<p>Retrieves an Issuing <code>Card</code> object.</p>.',
    inputSchema: stripe.GetIssuingCardsCardParamsSchema
  })
  async GetIssuingCardsCard(
    params: stripe.GetIssuingCardsCardParams
  ): Promise<stripe.GetIssuingCardsCardResponse> {
    return this.ky
      .get(`/v1/issuing/cards/${params.card}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingCardsCardResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_issuing_cards_card',
    description:
      '<p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostIssuingCardsCardParamsSchema
  })
  async PostIssuingCardsCard(
    params: stripe.PostIssuingCardsCardParams
  ): Promise<stripe.PostIssuingCardsCardResponse> {
    return this.ky
      .post(`/v1/issuing/cards/${params.card}`)
      .json<stripe.PostIssuingCardsCardResponse>()
  }

  /**
   * <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_disputes',
    description:
      '<p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingDisputesParamsSchema
  })
  async GetIssuingDisputes(
    params: stripe.GetIssuingDisputesParams
  ): Promise<stripe.GetIssuingDisputesResponse> {
    return this.ky
      .get('/v1/issuing/disputes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingDisputesResponse>()
  }

  /**
   * <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>.
   */
  @aiFunction({
    name: 'post_issuing_disputes',
    description:
      '<p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>.',
    inputSchema: stripe.PostIssuingDisputesParamsSchema
  })
  async PostIssuingDisputes(
    _params: stripe.PostIssuingDisputesParams
  ): Promise<stripe.PostIssuingDisputesResponse> {
    return this.ky
      .post('/v1/issuing/disputes')
      .json<stripe.PostIssuingDisputesResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Dispute</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_disputes_dispute',
    description: '<p>Retrieves an Issuing <code>Dispute</code> object.</p>.',
    inputSchema: stripe.GetIssuingDisputesDisputeParamsSchema
  })
  async GetIssuingDisputesDispute(
    params: stripe.GetIssuingDisputesDisputeParams
  ): Promise<stripe.GetIssuingDisputesDisputeResponse> {
    return this.ky
      .get(`/v1/issuing/disputes/${params.dispute}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingDisputesDisputeResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>.
   */
  @aiFunction({
    name: 'post_issuing_disputes_dispute',
    description:
      '<p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>.',
    inputSchema: stripe.PostIssuingDisputesDisputeParamsSchema
  })
  async PostIssuingDisputesDispute(
    params: stripe.PostIssuingDisputesDisputeParams
  ): Promise<stripe.PostIssuingDisputesDisputeResponse> {
    return this.ky
      .post(`/v1/issuing/disputes/${params.dispute}`)
      .json<stripe.PostIssuingDisputesDisputeResponse>()
  }

  /**
   * <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>.
   */
  @aiFunction({
    name: 'post_issuing_disputes_dispute_submit',
    description:
      '<p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>.',
    inputSchema: stripe.PostIssuingDisputesDisputeSubmitParamsSchema
  })
  async PostIssuingDisputesDisputeSubmit(
    params: stripe.PostIssuingDisputesDisputeSubmitParams
  ): Promise<stripe.PostIssuingDisputesDisputeSubmitResponse> {
    return this.ky
      .post(`/v1/issuing/disputes/${params.dispute}/submit`)
      .json<stripe.PostIssuingDisputesDisputeSubmitResponse>()
  }

  /**
   * <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_personalization_designs',
    description:
      '<p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingPersonalizationDesignsParamsSchema
  })
  async GetIssuingPersonalizationDesigns(
    params: stripe.GetIssuingPersonalizationDesignsParams
  ): Promise<stripe.GetIssuingPersonalizationDesignsResponse> {
    return this.ky
      .get('/v1/issuing/personalization_designs', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingPersonalizationDesignsResponse>()
  }

  /**
   * <p>Creates a personalization design object.</p>.
   */
  @aiFunction({
    name: 'post_issuing_personalization_designs',
    description: '<p>Creates a personalization design object.</p>.',
    inputSchema: stripe.PostIssuingPersonalizationDesignsParamsSchema
  })
  async PostIssuingPersonalizationDesigns(
    _params: stripe.PostIssuingPersonalizationDesignsParams
  ): Promise<stripe.PostIssuingPersonalizationDesignsResponse> {
    return this.ky
      .post('/v1/issuing/personalization_designs')
      .json<stripe.PostIssuingPersonalizationDesignsResponse>()
  }

  /**
   * <p>Retrieves a personalization design object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_personalization_designs_personalization_design',
    description: '<p>Retrieves a personalization design object.</p>.',
    inputSchema:
      stripe.GetIssuingPersonalizationDesignsPersonalizationDesignParamsSchema
  })
  async GetIssuingPersonalizationDesignsPersonalizationDesign(
    params: stripe.GetIssuingPersonalizationDesignsPersonalizationDesignParams
  ): Promise<stripe.GetIssuingPersonalizationDesignsPersonalizationDesignResponse> {
    return this.ky
      .get(
        `/v1/issuing/personalization_designs/${params.personalization_design}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetIssuingPersonalizationDesignsPersonalizationDesignResponse>()
  }

  /**
   * <p>Updates a card personalization object.</p>.
   */
  @aiFunction({
    name: 'post_issuing_personalization_designs_personalization_design',
    description: '<p>Updates a card personalization object.</p>.',
    inputSchema:
      stripe.PostIssuingPersonalizationDesignsPersonalizationDesignParamsSchema
  })
  async PostIssuingPersonalizationDesignsPersonalizationDesign(
    params: stripe.PostIssuingPersonalizationDesignsPersonalizationDesignParams
  ): Promise<stripe.PostIssuingPersonalizationDesignsPersonalizationDesignResponse> {
    return this.ky
      .post(
        `/v1/issuing/personalization_designs/${params.personalization_design}`
      )
      .json<stripe.PostIssuingPersonalizationDesignsPersonalizationDesignResponse>()
  }

  /**
   * <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_physical_bundles',
    description:
      '<p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingPhysicalBundlesParamsSchema
  })
  async GetIssuingPhysicalBundles(
    params: stripe.GetIssuingPhysicalBundlesParams
  ): Promise<stripe.GetIssuingPhysicalBundlesResponse> {
    return this.ky
      .get('/v1/issuing/physical_bundles', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingPhysicalBundlesResponse>()
  }

  /**
   * <p>Retrieves a physical bundle object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_physical_bundles_physical_bundle',
    description: '<p>Retrieves a physical bundle object.</p>.',
    inputSchema: stripe.GetIssuingPhysicalBundlesPhysicalBundleParamsSchema
  })
  async GetIssuingPhysicalBundlesPhysicalBundle(
    params: stripe.GetIssuingPhysicalBundlesPhysicalBundleParams
  ): Promise<stripe.GetIssuingPhysicalBundlesPhysicalBundleResponse> {
    return this.ky
      .get(`/v1/issuing/physical_bundles/${params.physical_bundle}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingPhysicalBundlesPhysicalBundleResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Settlement</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_settlements_settlement',
    description: '<p>Retrieves an Issuing <code>Settlement</code> object.</p>.',
    inputSchema: stripe.GetIssuingSettlementsSettlementParamsSchema
  })
  async GetIssuingSettlementsSettlement(
    params: stripe.GetIssuingSettlementsSettlementParams
  ): Promise<stripe.GetIssuingSettlementsSettlementResponse> {
    return this.ky
      .get(`/v1/issuing/settlements/${params.settlement}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingSettlementsSettlementResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_issuing_settlements_settlement',
    description:
      '<p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostIssuingSettlementsSettlementParamsSchema
  })
  async PostIssuingSettlementsSettlement(
    params: stripe.PostIssuingSettlementsSettlementParams
  ): Promise<stripe.PostIssuingSettlementsSettlementResponse> {
    return this.ky
      .post(`/v1/issuing/settlements/${params.settlement}`)
      .json<stripe.PostIssuingSettlementsSettlementResponse>()
  }

  /**
   * <p>Lists all Issuing <code>Token</code> objects for a given card.</p>.
   */
  @aiFunction({
    name: 'get_issuing_tokens',
    description:
      '<p>Lists all Issuing <code>Token</code> objects for a given card.</p>.',
    inputSchema: stripe.GetIssuingTokensParamsSchema
  })
  async GetIssuingTokens(
    params: stripe.GetIssuingTokensParams
  ): Promise<stripe.GetIssuingTokensResponse> {
    return this.ky
      .get('/v1/issuing/tokens', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingTokensResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Token</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_tokens_token',
    description: '<p>Retrieves an Issuing <code>Token</code> object.</p>.',
    inputSchema: stripe.GetIssuingTokensTokenParamsSchema
  })
  async GetIssuingTokensToken(
    params: stripe.GetIssuingTokensTokenParams
  ): Promise<stripe.GetIssuingTokensTokenResponse> {
    return this.ky
      .get(`/v1/issuing/tokens/${params.token}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingTokensTokenResponse>()
  }

  /**
   * <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>.
   */
  @aiFunction({
    name: 'post_issuing_tokens_token',
    description:
      '<p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>.',
    inputSchema: stripe.PostIssuingTokensTokenParamsSchema
  })
  async PostIssuingTokensToken(
    params: stripe.PostIssuingTokensTokenParams
  ): Promise<stripe.PostIssuingTokensTokenResponse> {
    return this.ky
      .post(`/v1/issuing/tokens/${params.token}`)
      .json<stripe.PostIssuingTokensTokenResponse>()
  }

  /**
   * <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_issuing_transactions',
    description:
      '<p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetIssuingTransactionsParamsSchema
  })
  async GetIssuingTransactions(
    params: stripe.GetIssuingTransactionsParams
  ): Promise<stripe.GetIssuingTransactionsResponse> {
    return this.ky
      .get('/v1/issuing/transactions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetIssuingTransactionsResponse>()
  }

  /**
   * <p>Retrieves an Issuing <code>Transaction</code> object.</p>.
   */
  @aiFunction({
    name: 'get_issuing_transactions_transaction',
    description:
      '<p>Retrieves an Issuing <code>Transaction</code> object.</p>.',
    inputSchema: stripe.GetIssuingTransactionsTransactionParamsSchema
  })
  async GetIssuingTransactionsTransaction(
    params: stripe.GetIssuingTransactionsTransactionParams
  ): Promise<stripe.GetIssuingTransactionsTransactionResponse> {
    return this.ky
      .get(`/v1/issuing/transactions/${params.transaction}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetIssuingTransactionsTransactionResponse>()
  }

  /**
   * <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_issuing_transactions_transaction',
    description:
      '<p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostIssuingTransactionsTransactionParamsSchema
  })
  async PostIssuingTransactionsTransaction(
    params: stripe.PostIssuingTransactionsTransactionParams
  ): Promise<stripe.PostIssuingTransactionsTransactionResponse> {
    return this.ky
      .post(`/v1/issuing/transactions/${params.transaction}`)
      .json<stripe.PostIssuingTransactionsTransactionResponse>()
  }

  /**
   * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>.
   */
  @aiFunction({
    name: 'post_link_account_sessions',
    description:
      '<p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>.',
    inputSchema: stripe.PostLinkAccountSessionsParamsSchema
  })
  async PostLinkAccountSessions(
    _params: stripe.PostLinkAccountSessionsParams
  ): Promise<stripe.PostLinkAccountSessionsResponse> {
    return this.ky
      .post('/v1/link_account_sessions')
      .json<stripe.PostLinkAccountSessionsResponse>()
  }

  /**
   * <p>Retrieves the details of a Financial Connections <code>Session</code></p>.
   */
  @aiFunction({
    name: 'get_link_account_sessions_session',
    description:
      '<p>Retrieves the details of a Financial Connections <code>Session</code></p>.',
    inputSchema: stripe.GetLinkAccountSessionsSessionParamsSchema
  })
  async GetLinkAccountSessionsSession(
    params: stripe.GetLinkAccountSessionsSessionParams
  ): Promise<stripe.GetLinkAccountSessionsSessionResponse> {
    return this.ky
      .get(`/v1/link_account_sessions/${params.session}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetLinkAccountSessionsSessionResponse>()
  }

  /**
   * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_linked_accounts',
    description:
      '<p>Returns a list of Financial Connections <code>Account</code> objects.</p>.',
    inputSchema: stripe.GetLinkedAccountsParamsSchema
  })
  async GetLinkedAccounts(
    params: stripe.GetLinkedAccountsParams
  ): Promise<stripe.GetLinkedAccountsResponse> {
    return this.ky
      .get('/v1/linked_accounts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetLinkedAccountsResponse>()
  }

  /**
   * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'get_linked_accounts_account',
    description:
      '<p>Retrieves the details of an Financial Connections <code>Account</code>.</p>.',
    inputSchema: stripe.GetLinkedAccountsAccountParamsSchema
  })
  async GetLinkedAccountsAccount(
    params: stripe.GetLinkedAccountsAccountParams
  ): Promise<stripe.GetLinkedAccountsAccountResponse> {
    return this.ky
      .get(`/v1/linked_accounts/${params.account}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetLinkedAccountsAccountResponse>()
  }

  /**
   * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>.
   */
  @aiFunction({
    name: 'post_linked_accounts_account_disconnect',
    description:
      '<p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>.',
    inputSchema: stripe.PostLinkedAccountsAccountDisconnectParamsSchema
  })
  async PostLinkedAccountsAccountDisconnect(
    params: stripe.PostLinkedAccountsAccountDisconnectParams
  ): Promise<stripe.PostLinkedAccountsAccountDisconnectResponse> {
    return this.ky
      .post(`/v1/linked_accounts/${params.account}/disconnect`)
      .json<stripe.PostLinkedAccountsAccountDisconnectResponse>()
  }

  /**
   * <p>Lists all owners for a given <code>Account</code></p>.
   */
  @aiFunction({
    name: 'get_linked_accounts_account_owners',
    description: '<p>Lists all owners for a given <code>Account</code></p>.',
    inputSchema: stripe.GetLinkedAccountsAccountOwnersParamsSchema
  })
  async GetLinkedAccountsAccountOwners(
    params: stripe.GetLinkedAccountsAccountOwnersParams
  ): Promise<stripe.GetLinkedAccountsAccountOwnersResponse> {
    return this.ky
      .get(`/v1/linked_accounts/${params.account}/owners`, {
        searchParams: sanitizeSearchParams(
          pick(
            params,
            'ending_before',
            'expand',
            'limit',
            'ownership',
            'starting_after'
          )
        )
      })
      .json<stripe.GetLinkedAccountsAccountOwnersResponse>()
  }

  /**
   * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>.
   */
  @aiFunction({
    name: 'post_linked_accounts_account_refresh',
    description:
      '<p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>.',
    inputSchema: stripe.PostLinkedAccountsAccountRefreshParamsSchema
  })
  async PostLinkedAccountsAccountRefresh(
    params: stripe.PostLinkedAccountsAccountRefreshParams
  ): Promise<stripe.PostLinkedAccountsAccountRefreshResponse> {
    return this.ky
      .post(`/v1/linked_accounts/${params.account}/refresh`)
      .json<stripe.PostLinkedAccountsAccountRefreshResponse>()
  }

  /**
   * <p>Retrieves a Mandate object.</p>.
   */
  @aiFunction({
    name: 'get_mandates_mandate',
    description: '<p>Retrieves a Mandate object.</p>.',
    inputSchema: stripe.GetMandatesMandateParamsSchema
  })
  async GetMandatesMandate(
    params: stripe.GetMandatesMandateParams
  ): Promise<stripe.GetMandatesMandateResponse> {
    return this.ky
      .get(`/v1/mandates/${params.mandate}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetMandatesMandateResponse>()
  }

  /**
   * <p>Returns a list of PaymentIntents.</p>.
   */
  @aiFunction({
    name: 'get_payment_intents',
    description: '<p>Returns a list of PaymentIntents.</p>.',
    inputSchema: stripe.GetPaymentIntentsParamsSchema
  })
  async GetPaymentIntents(
    params: stripe.GetPaymentIntentsParams
  ): Promise<stripe.GetPaymentIntentsResponse> {
    return this.ky
      .get('/v1/payment_intents', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentIntentsResponse>()
  }

  /**
 * <p>Creates a PaymentIntent object.</p>

<p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
with the Payment Intents API</a>.</p>

<p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
and confirming the PaymentIntent in the same call. You can use any parameters
available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
<code>confirm=true</code>.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents',
    description: `<p>Creates a PaymentIntent object.</p>

<p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
with the Payment Intents API</a>.</p>

<p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
and confirming the PaymentIntent in the same call. You can use any parameters
available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
<code>confirm=true</code>.</p>.`,
    inputSchema: stripe.PostPaymentIntentsParamsSchema
  })
  async PostPaymentIntents(
    _params: stripe.PostPaymentIntentsParams
  ): Promise<stripe.PostPaymentIntentsResponse> {
    return this.ky
      .post('/v1/payment_intents')
      .json<stripe.PostPaymentIntentsResponse>()
  }

  /**
 * <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_payment_intents_search',
    description: `<p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetPaymentIntentsSearchParamsSchema
  })
  async GetPaymentIntentsSearch(
    params: stripe.GetPaymentIntentsSearchParams
  ): Promise<stripe.GetPaymentIntentsSearchResponse> {
    return this.ky
      .get('/v1/payment_intents/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentIntentsSearchResponse>()
  }

  /**
 * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>

<p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>

<p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>.
 */
  @aiFunction({
    name: 'get_payment_intents_intent',
    description: `<p>Retrieves the details of a PaymentIntent that has previously been created. </p>

<p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>

<p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>.`,
    inputSchema: stripe.GetPaymentIntentsIntentParamsSchema
  })
  async GetPaymentIntentsIntent(
    params: stripe.GetPaymentIntentsIntentParams
  ): Promise<stripe.GetPaymentIntentsIntentResponse> {
    return this.ky
      .get(`/v1/payment_intents/${params.intent}`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'client_secret', 'expand')
        )
      })
      .json<stripe.GetPaymentIntentsIntentResponse>()
  }

  /**
 * <p>Updates properties on a PaymentIntent object without confirming.</p>

<p>Depending on which properties you update, you might need to confirm the
PaymentIntent again. For example, updating the <code>payment_method</code>
always requires you to confirm the PaymentIntent again. If you prefer to
update and confirm at the same time, we recommend updating properties through
the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents_intent',
    description: `<p>Updates properties on a PaymentIntent object without confirming.</p>

<p>Depending on which properties you update, you might need to confirm the
PaymentIntent again. For example, updating the <code>payment_method</code>
always requires you to confirm the PaymentIntent again. If you prefer to
update and confirm at the same time, we recommend updating properties through
the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>.`,
    inputSchema: stripe.PostPaymentIntentsIntentParamsSchema
  })
  async PostPaymentIntentsIntent(
    params: stripe.PostPaymentIntentsIntentParams
  ): Promise<stripe.PostPaymentIntentsIntentResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}`)
      .json<stripe.PostPaymentIntentsIntentResponse>()
  }

  /**
   * <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>.
   */
  @aiFunction({
    name: 'post_payment_intents_intent_apply_customer_balance',
    description:
      '<p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>.',
    inputSchema: stripe.PostPaymentIntentsIntentApplyCustomerBalanceParamsSchema
  })
  async PostPaymentIntentsIntentApplyCustomerBalance(
    params: stripe.PostPaymentIntentsIntentApplyCustomerBalanceParams
  ): Promise<stripe.PostPaymentIntentsIntentApplyCustomerBalanceResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/apply_customer_balance`)
      .json<stripe.PostPaymentIntentsIntentApplyCustomerBalanceResponse>()
  }

  /**
 * <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>

<p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>

<p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents_intent_cancel',
    description: `<p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>

<p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>

<p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>.`,
    inputSchema: stripe.PostPaymentIntentsIntentCancelParamsSchema
  })
  async PostPaymentIntentsIntentCancel(
    params: stripe.PostPaymentIntentsIntentCancelParams
  ): Promise<stripe.PostPaymentIntentsIntentCancelResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/cancel`)
      .json<stripe.PostPaymentIntentsIntentCancelResponse>()
  }

  /**
 * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>

<p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>

<p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents_intent_capture',
    description: `<p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>

<p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>

<p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>.`,
    inputSchema: stripe.PostPaymentIntentsIntentCaptureParamsSchema
  })
  async PostPaymentIntentsIntentCapture(
    params: stripe.PostPaymentIntentsIntentCaptureParams
  ): Promise<stripe.PostPaymentIntentsIntentCaptureResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/capture`)
      .json<stripe.PostPaymentIntentsIntentCaptureResponse>()
  }

  /**
 * <p>Confirm that your customer intends to pay with current or provided
payment method. Upon confirmation, the PaymentIntent will attempt to initiate
a payment.
If the selected payment method requires additional authentication steps, the
PaymentIntent will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If payment fails,
the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
<code>canceled</code> status if the confirmation limit is reached. If
payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
After <code>next_action</code>s are handled by the client, no additional
confirmation is required to complete the payment.
If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
initiated using a secret key.
If any actions are required for the payment, the PaymentIntent will
return to the <code>requires_confirmation</code> state
after those actions are completed. Your server needs to then
explicitly re-confirm the PaymentIntent to initiate the next payment
attempt.
There is a variable upper limit on how many times a PaymentIntent can be confirmed.
After this limit is reached, any further calls to this endpoint will
transition the PaymentIntent to the <code>canceled</code> state.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents_intent_confirm',
    description: `<p>Confirm that your customer intends to pay with current or provided
payment method. Upon confirmation, the PaymentIntent will attempt to initiate
a payment.
If the selected payment method requires additional authentication steps, the
PaymentIntent will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If payment fails,
the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
<code>canceled</code> status if the confirmation limit is reached. If
payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
After <code>next_action</code>s are handled by the client, no additional
confirmation is required to complete the payment.
If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
initiated using a secret key.
If any actions are required for the payment, the PaymentIntent will
return to the <code>requires_confirmation</code> state
after those actions are completed. Your server needs to then
explicitly re-confirm the PaymentIntent to initiate the next payment
attempt.
There is a variable upper limit on how many times a PaymentIntent can be confirmed.
After this limit is reached, any further calls to this endpoint will
transition the PaymentIntent to the <code>canceled</code> state.</p>.`,
    inputSchema: stripe.PostPaymentIntentsIntentConfirmParamsSchema
  })
  async PostPaymentIntentsIntentConfirm(
    params: stripe.PostPaymentIntentsIntentConfirmParams
  ): Promise<stripe.PostPaymentIntentsIntentConfirmResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/confirm`)
      .json<stripe.PostPaymentIntentsIntentConfirmResponse>()
  }

  /**
 * <p>Perform an incremental authorization on an eligible
<a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
PaymentIntent’s status must be <code>requires_capture</code> and
<a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
must be <code>true</code>.</p>

<p>Incremental authorizations attempt to increase the authorized amount on
your customer’s card to the new, higher <code>amount</code> provided. Similar to the
initial authorization, incremental authorizations can be declined. A
single PaymentIntent can call this endpoint multiple times to further
increase the authorized amount.</p>

<p>If the incremental authorization succeeds, the PaymentIntent object
returns with the updated
<a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
If the incremental authorization fails, a
<a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
fields on the PaymentIntent or Charge update. The PaymentIntent
object remains capturable for the previously authorized amount.</p>

<p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
After it’s captured, a PaymentIntent can no longer be incremented.</p>

<p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>.
 */
  @aiFunction({
    name: 'post_payment_intents_intent_increment_authorization',
    description: `<p>Perform an incremental authorization on an eligible
<a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
PaymentIntent’s status must be <code>requires_capture</code> and
<a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
must be <code>true</code>.</p>

<p>Incremental authorizations attempt to increase the authorized amount on
your customer’s card to the new, higher <code>amount</code> provided. Similar to the
initial authorization, incremental authorizations can be declined. A
single PaymentIntent can call this endpoint multiple times to further
increase the authorized amount.</p>

<p>If the incremental authorization succeeds, the PaymentIntent object
returns with the updated
<a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
If the incremental authorization fails, a
<a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
fields on the PaymentIntent or Charge update. The PaymentIntent
object remains capturable for the previously authorized amount.</p>

<p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
After it’s captured, a PaymentIntent can no longer be incremented.</p>

<p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>.`,
    inputSchema:
      stripe.PostPaymentIntentsIntentIncrementAuthorizationParamsSchema
  })
  async PostPaymentIntentsIntentIncrementAuthorization(
    params: stripe.PostPaymentIntentsIntentIncrementAuthorizationParams
  ): Promise<stripe.PostPaymentIntentsIntentIncrementAuthorizationResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/increment_authorization`)
      .json<stripe.PostPaymentIntentsIntentIncrementAuthorizationResponse>()
  }

  /**
   * <p>Verifies microdeposits on a PaymentIntent object.</p>.
   */
  @aiFunction({
    name: 'post_payment_intents_intent_verify_microdeposits',
    description: '<p>Verifies microdeposits on a PaymentIntent object.</p>.',
    inputSchema: stripe.PostPaymentIntentsIntentVerifyMicrodepositsParamsSchema
  })
  async PostPaymentIntentsIntentVerifyMicrodeposits(
    params: stripe.PostPaymentIntentsIntentVerifyMicrodepositsParams
  ): Promise<stripe.PostPaymentIntentsIntentVerifyMicrodepositsResponse> {
    return this.ky
      .post(`/v1/payment_intents/${params.intent}/verify_microdeposits`)
      .json<stripe.PostPaymentIntentsIntentVerifyMicrodepositsResponse>()
  }

  /**
   * <p>Returns a list of your payment links.</p>.
   */
  @aiFunction({
    name: 'get_payment_links',
    description: '<p>Returns a list of your payment links.</p>.',
    inputSchema: stripe.GetPaymentLinksParamsSchema
  })
  async GetPaymentLinks(
    params: stripe.GetPaymentLinksParams
  ): Promise<stripe.GetPaymentLinksResponse> {
    return this.ky
      .get('/v1/payment_links', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentLinksResponse>()
  }

  /**
   * <p>Creates a payment link.</p>.
   */
  @aiFunction({
    name: 'post_payment_links',
    description: '<p>Creates a payment link.</p>.',
    inputSchema: stripe.PostPaymentLinksParamsSchema
  })
  async PostPaymentLinks(
    _params: stripe.PostPaymentLinksParams
  ): Promise<stripe.PostPaymentLinksResponse> {
    return this.ky
      .post('/v1/payment_links')
      .json<stripe.PostPaymentLinksResponse>()
  }

  /**
   * <p>Retrieve a payment link.</p>.
   */
  @aiFunction({
    name: 'get_payment_links_payment_link',
    description: '<p>Retrieve a payment link.</p>.',
    inputSchema: stripe.GetPaymentLinksPaymentLinkParamsSchema
  })
  async GetPaymentLinksPaymentLink(
    params: stripe.GetPaymentLinksPaymentLinkParams
  ): Promise<stripe.GetPaymentLinksPaymentLinkResponse> {
    return this.ky
      .get(`/v1/payment_links/${params.payment_link}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPaymentLinksPaymentLinkResponse>()
  }

  /**
   * <p>Updates a payment link.</p>.
   */
  @aiFunction({
    name: 'post_payment_links_payment_link',
    description: '<p>Updates a payment link.</p>.',
    inputSchema: stripe.PostPaymentLinksPaymentLinkParamsSchema
  })
  async PostPaymentLinksPaymentLink(
    params: stripe.PostPaymentLinksPaymentLinkParams
  ): Promise<stripe.PostPaymentLinksPaymentLinkResponse> {
    return this.ky
      .post(`/v1/payment_links/${params.payment_link}`)
      .json<stripe.PostPaymentLinksPaymentLinkResponse>()
  }

  /**
   * <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_payment_links_payment_link_line_items',
    description:
      '<p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetPaymentLinksPaymentLinkLineItemsParamsSchema
  })
  async GetPaymentLinksPaymentLinkLineItems(
    params: stripe.GetPaymentLinksPaymentLinkLineItemsParams
  ): Promise<stripe.GetPaymentLinksPaymentLinkLineItemsResponse> {
    return this.ky
      .get(`/v1/payment_links/${params.payment_link}/line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetPaymentLinksPaymentLinkLineItemsResponse>()
  }

  /**
   * <p>List payment method configurations</p>.
   */
  @aiFunction({
    name: 'get_payment_method_configurations',
    description: '<p>List payment method configurations</p>.',
    inputSchema: stripe.GetPaymentMethodConfigurationsParamsSchema
  })
  async GetPaymentMethodConfigurations(
    params: stripe.GetPaymentMethodConfigurationsParams
  ): Promise<stripe.GetPaymentMethodConfigurationsResponse> {
    return this.ky
      .get('/v1/payment_method_configurations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentMethodConfigurationsResponse>()
  }

  /**
   * <p>Creates a payment method configuration</p>.
   */
  @aiFunction({
    name: 'post_payment_method_configurations',
    description: '<p>Creates a payment method configuration</p>.',
    inputSchema: stripe.PostPaymentMethodConfigurationsParamsSchema
  })
  async PostPaymentMethodConfigurations(
    _params: stripe.PostPaymentMethodConfigurationsParams
  ): Promise<stripe.PostPaymentMethodConfigurationsResponse> {
    return this.ky
      .post('/v1/payment_method_configurations')
      .json<stripe.PostPaymentMethodConfigurationsResponse>()
  }

  /**
   * <p>Retrieve payment method configuration</p>.
   */
  @aiFunction({
    name: 'get_payment_method_configurations_configuration',
    description: '<p>Retrieve payment method configuration</p>.',
    inputSchema: stripe.GetPaymentMethodConfigurationsConfigurationParamsSchema
  })
  async GetPaymentMethodConfigurationsConfiguration(
    params: stripe.GetPaymentMethodConfigurationsConfigurationParams
  ): Promise<stripe.GetPaymentMethodConfigurationsConfigurationResponse> {
    return this.ky
      .get(`/v1/payment_method_configurations/${params.configuration}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPaymentMethodConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Update payment method configuration</p>.
   */
  @aiFunction({
    name: 'post_payment_method_configurations_configuration',
    description: '<p>Update payment method configuration</p>.',
    inputSchema: stripe.PostPaymentMethodConfigurationsConfigurationParamsSchema
  })
  async PostPaymentMethodConfigurationsConfiguration(
    params: stripe.PostPaymentMethodConfigurationsConfigurationParams
  ): Promise<stripe.PostPaymentMethodConfigurationsConfigurationResponse> {
    return this.ky
      .post(`/v1/payment_method_configurations/${params.configuration}`)
      .json<stripe.PostPaymentMethodConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Lists the details of existing payment method domains.</p>.
   */
  @aiFunction({
    name: 'get_payment_method_domains',
    description:
      '<p>Lists the details of existing payment method domains.</p>.',
    inputSchema: stripe.GetPaymentMethodDomainsParamsSchema
  })
  async GetPaymentMethodDomains(
    params: stripe.GetPaymentMethodDomainsParams
  ): Promise<stripe.GetPaymentMethodDomainsResponse> {
    return this.ky
      .get('/v1/payment_method_domains', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentMethodDomainsResponse>()
  }

  /**
   * <p>Creates a payment method domain.</p>.
   */
  @aiFunction({
    name: 'post_payment_method_domains',
    description: '<p>Creates a payment method domain.</p>.',
    inputSchema: stripe.PostPaymentMethodDomainsParamsSchema
  })
  async PostPaymentMethodDomains(
    _params: stripe.PostPaymentMethodDomainsParams
  ): Promise<stripe.PostPaymentMethodDomainsResponse> {
    return this.ky
      .post('/v1/payment_method_domains')
      .json<stripe.PostPaymentMethodDomainsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing payment method domain.</p>.
   */
  @aiFunction({
    name: 'get_payment_method_domains_payment_method_domain',
    description:
      '<p>Retrieves the details of an existing payment method domain.</p>.',
    inputSchema: stripe.GetPaymentMethodDomainsPaymentMethodDomainParamsSchema
  })
  async GetPaymentMethodDomainsPaymentMethodDomain(
    params: stripe.GetPaymentMethodDomainsPaymentMethodDomainParams
  ): Promise<stripe.GetPaymentMethodDomainsPaymentMethodDomainResponse> {
    return this.ky
      .get(`/v1/payment_method_domains/${params.payment_method_domain}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPaymentMethodDomainsPaymentMethodDomainResponse>()
  }

  /**
   * <p>Updates an existing payment method domain.</p>.
   */
  @aiFunction({
    name: 'post_payment_method_domains_payment_method_domain',
    description: '<p>Updates an existing payment method domain.</p>.',
    inputSchema: stripe.PostPaymentMethodDomainsPaymentMethodDomainParamsSchema
  })
  async PostPaymentMethodDomainsPaymentMethodDomain(
    params: stripe.PostPaymentMethodDomainsPaymentMethodDomainParams
  ): Promise<stripe.PostPaymentMethodDomainsPaymentMethodDomainResponse> {
    return this.ky
      .post(`/v1/payment_method_domains/${params.payment_method_domain}`)
      .json<stripe.PostPaymentMethodDomainsPaymentMethodDomainResponse>()
  }

  /**
 * <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
The payment method doesn’t appear in Elements for this domain until it is active.</p>

<p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>

<p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>.
 */
  @aiFunction({
    name: 'post_payment_method_domains_payment_method_domain_validate',
    description: `<p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
The payment method doesn’t appear in Elements for this domain until it is active.</p>

<p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>

<p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>.`,
    inputSchema:
      stripe.PostPaymentMethodDomainsPaymentMethodDomainValidateParamsSchema
  })
  async PostPaymentMethodDomainsPaymentMethodDomainValidate(
    params: stripe.PostPaymentMethodDomainsPaymentMethodDomainValidateParams
  ): Promise<stripe.PostPaymentMethodDomainsPaymentMethodDomainValidateResponse> {
    return this.ky
      .post(
        `/v1/payment_method_domains/${params.payment_method_domain}/validate`
      )
      .json<stripe.PostPaymentMethodDomainsPaymentMethodDomainValidateResponse>()
  }

  /**
   * <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>.
   */
  @aiFunction({
    name: 'get_payment_methods',
    description:
      '<p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>.',
    inputSchema: stripe.GetPaymentMethodsParamsSchema
  })
  async GetPaymentMethods(
    params: stripe.GetPaymentMethodsParams
  ): Promise<stripe.GetPaymentMethodsResponse> {
    return this.ky
      .get('/v1/payment_methods', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPaymentMethodsResponse>()
  }

  /**
 * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>

<p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>.
 */
  @aiFunction({
    name: 'post_payment_methods',
    description: `<p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>

<p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>.`,
    inputSchema: stripe.PostPaymentMethodsParamsSchema
  })
  async PostPaymentMethods(
    _params: stripe.PostPaymentMethodsParams
  ): Promise<stripe.PostPaymentMethodsResponse> {
    return this.ky
      .post('/v1/payment_methods')
      .json<stripe.PostPaymentMethodsResponse>()
  }

  /**
   * <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>.
   */
  @aiFunction({
    name: 'get_payment_methods_payment_method',
    description:
      '<p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>.',
    inputSchema: stripe.GetPaymentMethodsPaymentMethodParamsSchema
  })
  async GetPaymentMethodsPaymentMethod(
    params: stripe.GetPaymentMethodsPaymentMethodParams
  ): Promise<stripe.GetPaymentMethodsPaymentMethodResponse> {
    return this.ky
      .get(`/v1/payment_methods/${params.payment_method}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPaymentMethodsPaymentMethodResponse>()
  }

  /**
   * <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>.
   */
  @aiFunction({
    name: 'post_payment_methods_payment_method',
    description:
      '<p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>.',
    inputSchema: stripe.PostPaymentMethodsPaymentMethodParamsSchema
  })
  async PostPaymentMethodsPaymentMethod(
    params: stripe.PostPaymentMethodsPaymentMethodParams
  ): Promise<stripe.PostPaymentMethodsPaymentMethodResponse> {
    return this.ky
      .post(`/v1/payment_methods/${params.payment_method}`)
      .json<stripe.PostPaymentMethodsPaymentMethodResponse>()
  }

  /**
 * <p>Attaches a PaymentMethod object to a Customer.</p>

<p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
future use, which makes later declines and payment friction more likely.
See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
future payments.</p>

<p>To use this PaymentMethod as the default for invoice or subscription payments,
set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
on the Customer to the PaymentMethod’s ID.</p>.
 */
  @aiFunction({
    name: 'post_payment_methods_payment_method_attach',
    description: `<p>Attaches a PaymentMethod object to a Customer.</p>

<p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
future use, which makes later declines and payment friction more likely.
See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
future payments.</p>

<p>To use this PaymentMethod as the default for invoice or subscription payments,
set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
on the Customer to the PaymentMethod’s ID.</p>.`,
    inputSchema: stripe.PostPaymentMethodsPaymentMethodAttachParamsSchema
  })
  async PostPaymentMethodsPaymentMethodAttach(
    params: stripe.PostPaymentMethodsPaymentMethodAttachParams
  ): Promise<stripe.PostPaymentMethodsPaymentMethodAttachResponse> {
    return this.ky
      .post(`/v1/payment_methods/${params.payment_method}/attach`)
      .json<stripe.PostPaymentMethodsPaymentMethodAttachResponse>()
  }

  /**
   * <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>.
   */
  @aiFunction({
    name: 'post_payment_methods_payment_method_detach',
    description:
      '<p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>.',
    inputSchema: stripe.PostPaymentMethodsPaymentMethodDetachParamsSchema
  })
  async PostPaymentMethodsPaymentMethodDetach(
    params: stripe.PostPaymentMethodsPaymentMethodDetachParams
  ): Promise<stripe.PostPaymentMethodsPaymentMethodDetachResponse> {
    return this.ky
      .post(`/v1/payment_methods/${params.payment_method}/detach`)
      .json<stripe.PostPaymentMethodsPaymentMethodDetachResponse>()
  }

  /**
   * <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>.
   */
  @aiFunction({
    name: 'get_payouts',
    description:
      '<p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>.',
    inputSchema: stripe.GetPayoutsParamsSchema
  })
  async GetPayouts(
    params: stripe.GetPayoutsParams
  ): Promise<stripe.GetPayoutsResponse> {
    return this.ky
      .get('/v1/payouts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPayoutsResponse>()
  }

  /**
 * <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>

<p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>

<p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>.
 */
  @aiFunction({
    name: 'post_payouts',
    description: `<p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>

<p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>

<p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>.`,
    inputSchema: stripe.PostPayoutsParamsSchema
  })
  async PostPayouts(
    _params: stripe.PostPayoutsParams
  ): Promise<stripe.PostPayoutsResponse> {
    return this.ky.post('/v1/payouts').json<stripe.PostPayoutsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>.
   */
  @aiFunction({
    name: 'get_payouts_payout',
    description:
      '<p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>.',
    inputSchema: stripe.GetPayoutsPayoutParamsSchema
  })
  async GetPayoutsPayout(
    params: stripe.GetPayoutsPayoutParams
  ): Promise<stripe.GetPayoutsPayoutResponse> {
    return this.ky
      .get(`/v1/payouts/${params.payout}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPayoutsPayoutResponse>()
  }

  /**
   * <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>.
   */
  @aiFunction({
    name: 'post_payouts_payout',
    description:
      '<p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>.',
    inputSchema: stripe.PostPayoutsPayoutParamsSchema
  })
  async PostPayoutsPayout(
    params: stripe.PostPayoutsPayoutParams
  ): Promise<stripe.PostPayoutsPayoutResponse> {
    return this.ky
      .post(`/v1/payouts/${params.payout}`)
      .json<stripe.PostPayoutsPayoutResponse>()
  }

  /**
   * <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>.
   */
  @aiFunction({
    name: 'post_payouts_payout_cancel',
    description:
      '<p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>.',
    inputSchema: stripe.PostPayoutsPayoutCancelParamsSchema
  })
  async PostPayoutsPayoutCancel(
    params: stripe.PostPayoutsPayoutCancelParams
  ): Promise<stripe.PostPayoutsPayoutCancelResponse> {
    return this.ky
      .post(`/v1/payouts/${params.payout}/cancel`)
      .json<stripe.PostPayoutsPayoutCancelResponse>()
  }

  /**
 * <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>

<p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>.
 */
  @aiFunction({
    name: 'post_payouts_payout_reverse',
    description: `<p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>

<p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>.`,
    inputSchema: stripe.PostPayoutsPayoutReverseParamsSchema
  })
  async PostPayoutsPayoutReverse(
    params: stripe.PostPayoutsPayoutReverseParams
  ): Promise<stripe.PostPayoutsPayoutReverseResponse> {
    return this.ky
      .post(`/v1/payouts/${params.payout}/reverse`)
      .json<stripe.PostPayoutsPayoutReverseResponse>()
  }

  /**
   * <p>Returns a list of your plans.</p>.
   */
  @aiFunction({
    name: 'get_plans',
    description: '<p>Returns a list of your plans.</p>.',
    inputSchema: stripe.GetPlansParamsSchema
  })
  async GetPlans(
    params: stripe.GetPlansParams
  ): Promise<stripe.GetPlansResponse> {
    return this.ky
      .get('/v1/plans', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPlansResponse>()
  }

  /**
   * <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>.
   */
  @aiFunction({
    name: 'post_plans',
    description:
      '<p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>.',
    inputSchema: stripe.PostPlansParamsSchema
  })
  async PostPlans(
    _params: stripe.PostPlansParams
  ): Promise<stripe.PostPlansResponse> {
    return this.ky.post('/v1/plans').json<stripe.PostPlansResponse>()
  }

  /**
   * <p>Retrieves the plan with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_plans_plan',
    description: '<p>Retrieves the plan with the given ID.</p>.',
    inputSchema: stripe.GetPlansPlanParamsSchema
  })
  async GetPlansPlan(
    params: stripe.GetPlansPlanParams
  ): Promise<stripe.GetPlansPlanResponse> {
    return this.ky
      .get(`/v1/plans/${params.plan}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPlansPlanResponse>()
  }

  /**
   * <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>.
   */
  @aiFunction({
    name: 'post_plans_plan',
    description:
      '<p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>.',
    inputSchema: stripe.PostPlansPlanParamsSchema
  })
  async PostPlansPlan(
    params: stripe.PostPlansPlanParams
  ): Promise<stripe.PostPlansPlanResponse> {
    return this.ky
      .post(`/v1/plans/${params.plan}`)
      .json<stripe.PostPlansPlanResponse>()
  }

  /**
   * <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>.
   */
  @aiFunction({
    name: 'delete_plans_plan',
    description:
      '<p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>.',
    inputSchema: stripe.DeletePlansPlanParamsSchema
  })
  async DeletePlansPlan(
    params: stripe.DeletePlansPlanParams
  ): Promise<stripe.DeletePlansPlanResponse> {
    return this.ky
      .delete(`/v1/plans/${params.plan}`)
      .json<stripe.DeletePlansPlanResponse>()
  }

  /**
   * <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>.
   */
  @aiFunction({
    name: 'get_prices',
    description:
      '<p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>.',
    inputSchema: stripe.GetPricesParamsSchema
  })
  async GetPrices(
    params: stripe.GetPricesParams
  ): Promise<stripe.GetPricesResponse> {
    return this.ky
      .get('/v1/prices', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPricesResponse>()
  }

  /**
   * <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>.
   */
  @aiFunction({
    name: 'post_prices',
    description:
      '<p>Creates a new price for an existing product. The price can be recurring or one-time.</p>.',
    inputSchema: stripe.PostPricesParamsSchema
  })
  async PostPrices(
    _params: stripe.PostPricesParams
  ): Promise<stripe.PostPricesResponse> {
    return this.ky.post('/v1/prices').json<stripe.PostPricesResponse>()
  }

  /**
 * <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_prices_search',
    description: `<p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetPricesSearchParamsSchema
  })
  async GetPricesSearch(
    params: stripe.GetPricesSearchParams
  ): Promise<stripe.GetPricesSearchResponse> {
    return this.ky
      .get('/v1/prices/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPricesSearchResponse>()
  }

  /**
   * <p>Retrieves the price with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_prices_price',
    description: '<p>Retrieves the price with the given ID.</p>.',
    inputSchema: stripe.GetPricesPriceParamsSchema
  })
  async GetPricesPrice(
    params: stripe.GetPricesPriceParams
  ): Promise<stripe.GetPricesPriceResponse> {
    return this.ky
      .get(`/v1/prices/${params.price}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPricesPriceResponse>()
  }

  /**
   * <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_prices_price',
    description:
      '<p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>.',
    inputSchema: stripe.PostPricesPriceParamsSchema
  })
  async PostPricesPrice(
    params: stripe.PostPricesPriceParams
  ): Promise<stripe.PostPricesPriceResponse> {
    return this.ky
      .post(`/v1/prices/${params.price}`)
      .json<stripe.PostPricesPriceResponse>()
  }

  /**
   * <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>.
   */
  @aiFunction({
    name: 'get_products',
    description:
      '<p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>.',
    inputSchema: stripe.GetProductsParamsSchema
  })
  async GetProducts(
    params: stripe.GetProductsParams
  ): Promise<stripe.GetProductsResponse> {
    return this.ky
      .get('/v1/products', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetProductsResponse>()
  }

  /**
   * <p>Creates a new product object.</p>.
   */
  @aiFunction({
    name: 'post_products',
    description: '<p>Creates a new product object.</p>.',
    inputSchema: stripe.PostProductsParamsSchema
  })
  async PostProducts(
    _params: stripe.PostProductsParams
  ): Promise<stripe.PostProductsResponse> {
    return this.ky.post('/v1/products').json<stripe.PostProductsResponse>()
  }

  /**
 * <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_products_search',
    description: `<p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetProductsSearchParamsSchema
  })
  async GetProductsSearch(
    params: stripe.GetProductsSearchParams
  ): Promise<stripe.GetProductsSearchResponse> {
    return this.ky
      .get('/v1/products/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetProductsSearchResponse>()
  }

  /**
   * <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>.
   */
  @aiFunction({
    name: 'get_products_id',
    description:
      '<p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>.',
    inputSchema: stripe.GetProductsIdParamsSchema
  })
  async GetProductsId(
    params: stripe.GetProductsIdParams
  ): Promise<stripe.GetProductsIdResponse> {
    return this.ky
      .get(`/v1/products/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetProductsIdResponse>()
  }

  /**
   * <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_products_id',
    description:
      '<p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostProductsIdParamsSchema
  })
  async PostProductsId(
    params: stripe.PostProductsIdParams
  ): Promise<stripe.PostProductsIdResponse> {
    return this.ky
      .post(`/v1/products/${params.id}`)
      .json<stripe.PostProductsIdResponse>()
  }

  /**
   * <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>.
   */
  @aiFunction({
    name: 'delete_products_id',
    description:
      '<p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>.',
    inputSchema: stripe.DeleteProductsIdParamsSchema
  })
  async DeleteProductsId(
    params: stripe.DeleteProductsIdParams
  ): Promise<stripe.DeleteProductsIdResponse> {
    return this.ky
      .delete(`/v1/products/${params.id}`)
      .json<stripe.DeleteProductsIdResponse>()
  }

  /**
   * <p>Retrieve a list of features for a product</p>.
   */
  @aiFunction({
    name: 'get_products_product_features',
    description: '<p>Retrieve a list of features for a product</p>.',
    inputSchema: stripe.GetProductsProductFeaturesParamsSchema
  })
  async GetProductsProductFeatures(
    params: stripe.GetProductsProductFeaturesParams
  ): Promise<stripe.GetProductsProductFeaturesResponse> {
    return this.ky
      .get(`/v1/products/${params.product}/features`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetProductsProductFeaturesResponse>()
  }

  /**
   * <p>Creates a product_feature, which represents a feature attachment to a product</p>.
   */
  @aiFunction({
    name: 'post_products_product_features',
    description:
      '<p>Creates a product_feature, which represents a feature attachment to a product</p>.',
    inputSchema: stripe.PostProductsProductFeaturesParamsSchema
  })
  async PostProductsProductFeatures(
    params: stripe.PostProductsProductFeaturesParams
  ): Promise<stripe.PostProductsProductFeaturesResponse> {
    return this.ky
      .post(`/v1/products/${params.product}/features`)
      .json<stripe.PostProductsProductFeaturesResponse>()
  }

  /**
   * <p>Retrieves a product_feature, which represents a feature attachment to a product</p>.
   */
  @aiFunction({
    name: 'get_products_product_features_id',
    description:
      '<p>Retrieves a product_feature, which represents a feature attachment to a product</p>.',
    inputSchema: stripe.GetProductsProductFeaturesIdParamsSchema
  })
  async GetProductsProductFeaturesId(
    params: stripe.GetProductsProductFeaturesIdParams
  ): Promise<stripe.GetProductsProductFeaturesIdResponse> {
    return this.ky
      .get(`/v1/products/${params.product}/features/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetProductsProductFeaturesIdResponse>()
  }

  /**
   * <p>Deletes the feature attachment to a product</p>.
   */
  @aiFunction({
    name: 'delete_products_product_features_id',
    description: '<p>Deletes the feature attachment to a product</p>.',
    inputSchema: stripe.DeleteProductsProductFeaturesIdParamsSchema
  })
  async DeleteProductsProductFeaturesId(
    params: stripe.DeleteProductsProductFeaturesIdParams
  ): Promise<stripe.DeleteProductsProductFeaturesIdResponse> {
    return this.ky
      .delete(`/v1/products/${params.product}/features/${params.id}`)
      .json<stripe.DeleteProductsProductFeaturesIdResponse>()
  }

  /**
   * <p>Returns a list of your promotion codes.</p>.
   */
  @aiFunction({
    name: 'get_promotion_codes',
    description: '<p>Returns a list of your promotion codes.</p>.',
    inputSchema: stripe.GetPromotionCodesParamsSchema
  })
  async GetPromotionCodes(
    params: stripe.GetPromotionCodesParams
  ): Promise<stripe.GetPromotionCodesResponse> {
    return this.ky
      .get('/v1/promotion_codes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetPromotionCodesResponse>()
  }

  /**
   * <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>.
   */
  @aiFunction({
    name: 'post_promotion_codes',
    description:
      '<p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>.',
    inputSchema: stripe.PostPromotionCodesParamsSchema
  })
  async PostPromotionCodes(
    _params: stripe.PostPromotionCodesParams
  ): Promise<stripe.PostPromotionCodesResponse> {
    return this.ky
      .post('/v1/promotion_codes')
      .json<stripe.PostPromotionCodesResponse>()
  }

  /**
   * <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>.
   */
  @aiFunction({
    name: 'get_promotion_codes_promotion_code',
    description:
      '<p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>.',
    inputSchema: stripe.GetPromotionCodesPromotionCodeParamsSchema
  })
  async GetPromotionCodesPromotionCode(
    params: stripe.GetPromotionCodesPromotionCodeParams
  ): Promise<stripe.GetPromotionCodesPromotionCodeResponse> {
    return this.ky
      .get(`/v1/promotion_codes/${params.promotion_code}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetPromotionCodesPromotionCodeResponse>()
  }

  /**
   * <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>.
   */
  @aiFunction({
    name: 'post_promotion_codes_promotion_code',
    description:
      '<p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>.',
    inputSchema: stripe.PostPromotionCodesPromotionCodeParamsSchema
  })
  async PostPromotionCodesPromotionCode(
    params: stripe.PostPromotionCodesPromotionCodeParams
  ): Promise<stripe.PostPromotionCodesPromotionCodeResponse> {
    return this.ky
      .post(`/v1/promotion_codes/${params.promotion_code}`)
      .json<stripe.PostPromotionCodesPromotionCodeResponse>()
  }

  /**
   * <p>Returns a list of your quotes.</p>.
   */
  @aiFunction({
    name: 'get_quotes',
    description: '<p>Returns a list of your quotes.</p>.',
    inputSchema: stripe.GetQuotesParamsSchema
  })
  async GetQuotes(
    params: stripe.GetQuotesParams
  ): Promise<stripe.GetQuotesResponse> {
    return this.ky
      .get('/v1/quotes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetQuotesResponse>()
  }

  /**
   * <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>.
   */
  @aiFunction({
    name: 'post_quotes',
    description:
      '<p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>.',
    inputSchema: stripe.PostQuotesParamsSchema
  })
  async PostQuotes(
    _params: stripe.PostQuotesParams
  ): Promise<stripe.PostQuotesResponse> {
    return this.ky.post('/v1/quotes').json<stripe.PostQuotesResponse>()
  }

  /**
   * <p>Retrieves the quote with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_quotes_quote',
    description: '<p>Retrieves the quote with the given ID.</p>.',
    inputSchema: stripe.GetQuotesQuoteParamsSchema
  })
  async GetQuotesQuote(
    params: stripe.GetQuotesQuoteParams
  ): Promise<stripe.GetQuotesQuoteResponse> {
    return this.ky
      .get(`/v1/quotes/${params.quote}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetQuotesQuoteResponse>()
  }

  /**
   * <p>A quote models prices and services for a customer.</p>.
   */
  @aiFunction({
    name: 'post_quotes_quote',
    description: '<p>A quote models prices and services for a customer.</p>.',
    inputSchema: stripe.PostQuotesQuoteParamsSchema
  })
  async PostQuotesQuote(
    params: stripe.PostQuotesQuoteParams
  ): Promise<stripe.PostQuotesQuoteResponse> {
    return this.ky
      .post(`/v1/quotes/${params.quote}`)
      .json<stripe.PostQuotesQuoteResponse>()
  }

  /**
   * <p>Accepts the specified quote.</p>.
   */
  @aiFunction({
    name: 'post_quotes_quote_accept',
    description: '<p>Accepts the specified quote.</p>.',
    inputSchema: stripe.PostQuotesQuoteAcceptParamsSchema
  })
  async PostQuotesQuoteAccept(
    params: stripe.PostQuotesQuoteAcceptParams
  ): Promise<stripe.PostQuotesQuoteAcceptResponse> {
    return this.ky
      .post(`/v1/quotes/${params.quote}/accept`)
      .json<stripe.PostQuotesQuoteAcceptResponse>()
  }

  /**
   * <p>Cancels the quote.</p>.
   */
  @aiFunction({
    name: 'post_quotes_quote_cancel',
    description: '<p>Cancels the quote.</p>.',
    inputSchema: stripe.PostQuotesQuoteCancelParamsSchema
  })
  async PostQuotesQuoteCancel(
    params: stripe.PostQuotesQuoteCancelParams
  ): Promise<stripe.PostQuotesQuoteCancelResponse> {
    return this.ky
      .post(`/v1/quotes/${params.quote}/cancel`)
      .json<stripe.PostQuotesQuoteCancelResponse>()
  }

  /**
   * <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>.
   */
  @aiFunction({
    name: 'get_quotes_quote_computed_upfront_line_items',
    description:
      '<p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>.',
    inputSchema: stripe.GetQuotesQuoteComputedUpfrontLineItemsParamsSchema
  })
  async GetQuotesQuoteComputedUpfrontLineItems(
    params: stripe.GetQuotesQuoteComputedUpfrontLineItemsParams
  ): Promise<stripe.GetQuotesQuoteComputedUpfrontLineItemsResponse> {
    return this.ky
      .get(`/v1/quotes/${params.quote}/computed_upfront_line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetQuotesQuoteComputedUpfrontLineItemsResponse>()
  }

  /**
   * <p>Finalizes the quote.</p>.
   */
  @aiFunction({
    name: 'post_quotes_quote_finalize',
    description: '<p>Finalizes the quote.</p>.',
    inputSchema: stripe.PostQuotesQuoteFinalizeParamsSchema
  })
  async PostQuotesQuoteFinalize(
    params: stripe.PostQuotesQuoteFinalizeParams
  ): Promise<stripe.PostQuotesQuoteFinalizeResponse> {
    return this.ky
      .post(`/v1/quotes/${params.quote}/finalize`)
      .json<stripe.PostQuotesQuoteFinalizeResponse>()
  }

  /**
   * <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
   */
  @aiFunction({
    name: 'get_quotes_quote_line_items',
    description:
      '<p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.',
    inputSchema: stripe.GetQuotesQuoteLineItemsParamsSchema
  })
  async GetQuotesQuoteLineItems(
    params: stripe.GetQuotesQuoteLineItemsParams
  ): Promise<stripe.GetQuotesQuoteLineItemsResponse> {
    return this.ky
      .get(`/v1/quotes/${params.quote}/line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetQuotesQuoteLineItemsResponse>()
  }

  /**
   * <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.stripe.com/quotes/overview#quote_pdf">here</a></p>.
   */
  @aiFunction({
    name: 'get_quotes_quote_pdf',
    description:
      '<p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.stripe.com/quotes/overview#quote_pdf">here</a></p>.',
    inputSchema: stripe.GetQuotesQuotePdfParamsSchema
  })
  async GetQuotesQuotePdf(
    params: stripe.GetQuotesQuotePdfParams
  ): Promise<stripe.GetQuotesQuotePdfResponse> {
    return this.ky
      .get(`/v1/quotes/${params.quote}/pdf`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetQuotesQuotePdfResponse>()
  }

  /**
   * <p>Returns a list of early fraud warnings.</p>.
   */
  @aiFunction({
    name: 'get_radar_early_fraud_warnings',
    description: '<p>Returns a list of early fraud warnings.</p>.',
    inputSchema: stripe.GetRadarEarlyFraudWarningsParamsSchema
  })
  async GetRadarEarlyFraudWarnings(
    params: stripe.GetRadarEarlyFraudWarningsParams
  ): Promise<stripe.GetRadarEarlyFraudWarningsResponse> {
    return this.ky
      .get('/v1/radar/early_fraud_warnings', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetRadarEarlyFraudWarningsResponse>()
  }

  /**
 * <p>Retrieves the details of an early fraud warning that has previously been created. </p>

<p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>.
 */
  @aiFunction({
    name: 'get_radar_early_fraud_warnings_early_fraud_warning',
    description: `<p>Retrieves the details of an early fraud warning that has previously been created. </p>

<p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>.`,
    inputSchema: stripe.GetRadarEarlyFraudWarningsEarlyFraudWarningParamsSchema
  })
  async GetRadarEarlyFraudWarningsEarlyFraudWarning(
    params: stripe.GetRadarEarlyFraudWarningsEarlyFraudWarningParams
  ): Promise<stripe.GetRadarEarlyFraudWarningsEarlyFraudWarningResponse> {
    return this.ky
      .get(`/v1/radar/early_fraud_warnings/${params.early_fraud_warning}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetRadarEarlyFraudWarningsEarlyFraudWarningResponse>()
  }

  /**
   * <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_radar_value_list_items',
    description:
      '<p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetRadarValueListItemsParamsSchema
  })
  async GetRadarValueListItems(
    params: stripe.GetRadarValueListItemsParams
  ): Promise<stripe.GetRadarValueListItemsResponse> {
    return this.ky
      .get('/v1/radar/value_list_items', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetRadarValueListItemsResponse>()
  }

  /**
   * <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>.
   */
  @aiFunction({
    name: 'post_radar_value_list_items',
    description:
      '<p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>.',
    inputSchema: stripe.PostRadarValueListItemsParamsSchema
  })
  async PostRadarValueListItems(
    _params: stripe.PostRadarValueListItemsParams
  ): Promise<stripe.PostRadarValueListItemsResponse> {
    return this.ky
      .post('/v1/radar/value_list_items')
      .json<stripe.PostRadarValueListItemsResponse>()
  }

  /**
   * <p>Retrieves a <code>ValueListItem</code> object.</p>.
   */
  @aiFunction({
    name: 'get_radar_value_list_items_item',
    description: '<p>Retrieves a <code>ValueListItem</code> object.</p>.',
    inputSchema: stripe.GetRadarValueListItemsItemParamsSchema
  })
  async GetRadarValueListItemsItem(
    params: stripe.GetRadarValueListItemsItemParams
  ): Promise<stripe.GetRadarValueListItemsItemResponse> {
    return this.ky
      .get(`/v1/radar/value_list_items/${params.item}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetRadarValueListItemsItemResponse>()
  }

  /**
   * <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>.
   */
  @aiFunction({
    name: 'delete_radar_value_list_items_item',
    description:
      '<p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>.',
    inputSchema: stripe.DeleteRadarValueListItemsItemParamsSchema
  })
  async DeleteRadarValueListItemsItem(
    params: stripe.DeleteRadarValueListItemsItemParams
  ): Promise<stripe.DeleteRadarValueListItemsItemResponse> {
    return this.ky
      .delete(`/v1/radar/value_list_items/${params.item}`)
      .json<stripe.DeleteRadarValueListItemsItemResponse>()
  }

  /**
   * <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_radar_value_lists',
    description:
      '<p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetRadarValueListsParamsSchema
  })
  async GetRadarValueLists(
    params: stripe.GetRadarValueListsParams
  ): Promise<stripe.GetRadarValueListsResponse> {
    return this.ky
      .get('/v1/radar/value_lists', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetRadarValueListsResponse>()
  }

  /**
   * <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>.
   */
  @aiFunction({
    name: 'post_radar_value_lists',
    description:
      '<p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>.',
    inputSchema: stripe.PostRadarValueListsParamsSchema
  })
  async PostRadarValueLists(
    _params: stripe.PostRadarValueListsParams
  ): Promise<stripe.PostRadarValueListsResponse> {
    return this.ky
      .post('/v1/radar/value_lists')
      .json<stripe.PostRadarValueListsResponse>()
  }

  /**
   * <p>Retrieves a <code>ValueList</code> object.</p>.
   */
  @aiFunction({
    name: 'get_radar_value_lists_value_list',
    description: '<p>Retrieves a <code>ValueList</code> object.</p>.',
    inputSchema: stripe.GetRadarValueListsValueListParamsSchema
  })
  async GetRadarValueListsValueList(
    params: stripe.GetRadarValueListsValueListParams
  ): Promise<stripe.GetRadarValueListsValueListResponse> {
    return this.ky
      .get(`/v1/radar/value_lists/${params.value_list}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetRadarValueListsValueListResponse>()
  }

  /**
   * <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>.
   */
  @aiFunction({
    name: 'post_radar_value_lists_value_list',
    description:
      '<p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>.',
    inputSchema: stripe.PostRadarValueListsValueListParamsSchema
  })
  async PostRadarValueListsValueList(
    params: stripe.PostRadarValueListsValueListParams
  ): Promise<stripe.PostRadarValueListsValueListResponse> {
    return this.ky
      .post(`/v1/radar/value_lists/${params.value_list}`)
      .json<stripe.PostRadarValueListsValueListResponse>()
  }

  /**
   * <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>.
   */
  @aiFunction({
    name: 'delete_radar_value_lists_value_list',
    description:
      '<p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>.',
    inputSchema: stripe.DeleteRadarValueListsValueListParamsSchema
  })
  async DeleteRadarValueListsValueList(
    params: stripe.DeleteRadarValueListsValueListParams
  ): Promise<stripe.DeleteRadarValueListsValueListResponse> {
    return this.ky
      .delete(`/v1/radar/value_lists/${params.value_list}`)
      .json<stripe.DeleteRadarValueListsValueListResponse>()
  }

  /**
   * <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.</p>.
   */
  @aiFunction({
    name: 'get_refunds',
    description:
      '<p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.</p>.',
    inputSchema: stripe.GetRefundsParamsSchema
  })
  async GetRefunds(
    params: stripe.GetRefundsParams
  ): Promise<stripe.GetRefundsResponse> {
    return this.ky
      .get('/v1/refunds', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetRefundsResponse>()
  }

  /**
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>

<p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
Funds will be refunded to the credit or debit card that was originally charged.</p>

<p>You can optionally refund only part of a charge.
You can do so multiple times, until the entire charge has been refunded.</p>

<p>Once entirely refunded, a charge can’t be refunded again.
This method will raise an error when called on an already-refunded charge,
or when trying to refund more money than is left on a charge.</p>.
 */
  @aiFunction({
    name: 'post_refunds',
    description: `<p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>

<p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
Funds will be refunded to the credit or debit card that was originally charged.</p>

<p>You can optionally refund only part of a charge.
You can do so multiple times, until the entire charge has been refunded.</p>

<p>Once entirely refunded, a charge can’t be refunded again.
This method will raise an error when called on an already-refunded charge,
or when trying to refund more money than is left on a charge.</p>.`,
    inputSchema: stripe.PostRefundsParamsSchema
  })
  async PostRefunds(
    _params: stripe.PostRefundsParams
  ): Promise<stripe.PostRefundsResponse> {
    return this.ky.post('/v1/refunds').json<stripe.PostRefundsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing refund.</p>.
   */
  @aiFunction({
    name: 'get_refunds_refund',
    description: '<p>Retrieves the details of an existing refund.</p>.',
    inputSchema: stripe.GetRefundsRefundParamsSchema
  })
  async GetRefundsRefund(
    params: stripe.GetRefundsRefundParams
  ): Promise<stripe.GetRefundsRefundResponse> {
    return this.ky
      .get(`/v1/refunds/${params.refund}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetRefundsRefundResponse>()
  }

  /**
 * <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>

<p>This request only accepts <code>metadata</code> as an argument.</p>.
 */
  @aiFunction({
    name: 'post_refunds_refund',
    description: `<p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>

<p>This request only accepts <code>metadata</code> as an argument.</p>.`,
    inputSchema: stripe.PostRefundsRefundParamsSchema
  })
  async PostRefundsRefund(
    params: stripe.PostRefundsRefundParams
  ): Promise<stripe.PostRefundsRefundResponse> {
    return this.ky
      .post(`/v1/refunds/${params.refund}`)
      .json<stripe.PostRefundsRefundResponse>()
  }

  /**
 * <p>Cancels a refund with a status of <code>requires_action</code>.</p>

<p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>.
 */
  @aiFunction({
    name: 'post_refunds_refund_cancel',
    description: `<p>Cancels a refund with a status of <code>requires_action</code>.</p>

<p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>.`,
    inputSchema: stripe.PostRefundsRefundCancelParamsSchema
  })
  async PostRefundsRefundCancel(
    params: stripe.PostRefundsRefundCancelParams
  ): Promise<stripe.PostRefundsRefundCancelResponse> {
    return this.ky
      .post(`/v1/refunds/${params.refund}/cancel`)
      .json<stripe.PostRefundsRefundCancelResponse>()
  }

  /**
   * <p>Returns a list of Report Runs, with the most recent appearing first.</p>.
   */
  @aiFunction({
    name: 'get_reporting_report_runs',
    description:
      '<p>Returns a list of Report Runs, with the most recent appearing first.</p>.',
    inputSchema: stripe.GetReportingReportRunsParamsSchema
  })
  async GetReportingReportRuns(
    params: stripe.GetReportingReportRunsParams
  ): Promise<stripe.GetReportingReportRunsResponse> {
    return this.ky
      .get('/v1/reporting/report_runs', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetReportingReportRunsResponse>()
  }

  /**
   * <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
   */
  @aiFunction({
    name: 'post_reporting_report_runs',
    description:
      '<p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.',
    inputSchema: stripe.PostReportingReportRunsParamsSchema
  })
  async PostReportingReportRuns(
    _params: stripe.PostReportingReportRunsParams
  ): Promise<stripe.PostReportingReportRunsResponse> {
    return this.ky
      .post('/v1/reporting/report_runs')
      .json<stripe.PostReportingReportRunsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing Report Run.</p>.
   */
  @aiFunction({
    name: 'get_reporting_report_runs_report_run',
    description: '<p>Retrieves the details of an existing Report Run.</p>.',
    inputSchema: stripe.GetReportingReportRunsReportRunParamsSchema
  })
  async GetReportingReportRunsReportRun(
    params: stripe.GetReportingReportRunsReportRunParams
  ): Promise<stripe.GetReportingReportRunsReportRunResponse> {
    return this.ky
      .get(`/v1/reporting/report_runs/${params.report_run}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetReportingReportRunsReportRunResponse>()
  }

  /**
   * <p>Returns a full list of Report Types.</p>.
   */
  @aiFunction({
    name: 'get_reporting_report_types',
    description: '<p>Returns a full list of Report Types.</p>.',
    inputSchema: stripe.GetReportingReportTypesParamsSchema
  })
  async GetReportingReportTypes(
    params: stripe.GetReportingReportTypesParams
  ): Promise<stripe.GetReportingReportTypesResponse> {
    return this.ky
      .get('/v1/reporting/report_types', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetReportingReportTypesResponse>()
  }

  /**
   * <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
   */
  @aiFunction({
    name: 'get_reporting_report_types_report_type',
    description:
      '<p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.',
    inputSchema: stripe.GetReportingReportTypesReportTypeParamsSchema
  })
  async GetReportingReportTypesReportType(
    params: stripe.GetReportingReportTypesReportTypeParams
  ): Promise<stripe.GetReportingReportTypesReportTypeResponse> {
    return this.ky
      .get(`/v1/reporting/report_types/${params.report_type}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetReportingReportTypesReportTypeResponse>()
  }

  /**
   * <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
   */
  @aiFunction({
    name: 'get_reviews',
    description:
      '<p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.',
    inputSchema: stripe.GetReviewsParamsSchema
  })
  async GetReviews(
    params: stripe.GetReviewsParams
  ): Promise<stripe.GetReviewsResponse> {
    return this.ky
      .get('/v1/reviews', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetReviewsResponse>()
  }

  /**
   * <p>Retrieves a <code>Review</code> object.</p>.
   */
  @aiFunction({
    name: 'get_reviews_review',
    description: '<p>Retrieves a <code>Review</code> object.</p>.',
    inputSchema: stripe.GetReviewsReviewParamsSchema
  })
  async GetReviewsReview(
    params: stripe.GetReviewsReviewParams
  ): Promise<stripe.GetReviewsReviewResponse> {
    return this.ky
      .get(`/v1/reviews/${params.review}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetReviewsReviewResponse>()
  }

  /**
   * <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>.
   */
  @aiFunction({
    name: 'post_reviews_review_approve',
    description:
      '<p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>.',
    inputSchema: stripe.PostReviewsReviewApproveParamsSchema
  })
  async PostReviewsReviewApprove(
    params: stripe.PostReviewsReviewApproveParams
  ): Promise<stripe.PostReviewsReviewApproveResponse> {
    return this.ky
      .post(`/v1/reviews/${params.review}/approve`)
      .json<stripe.PostReviewsReviewApproveResponse>()
  }

  /**
   * <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>.
   */
  @aiFunction({
    name: 'get_setup_attempts',
    description:
      '<p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>.',
    inputSchema: stripe.GetSetupAttemptsParamsSchema
  })
  async GetSetupAttempts(
    params: stripe.GetSetupAttemptsParams
  ): Promise<stripe.GetSetupAttemptsResponse> {
    return this.ky
      .get('/v1/setup_attempts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSetupAttemptsResponse>()
  }

  /**
   * <p>Returns a list of SetupIntents.</p>.
   */
  @aiFunction({
    name: 'get_setup_intents',
    description: '<p>Returns a list of SetupIntents.</p>.',
    inputSchema: stripe.GetSetupIntentsParamsSchema
  })
  async GetSetupIntents(
    params: stripe.GetSetupIntentsParams
  ): Promise<stripe.GetSetupIntentsResponse> {
    return this.ky
      .get('/v1/setup_intents', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSetupIntentsResponse>()
  }

  /**
 * <p>Creates a SetupIntent object.</p>

<p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
it to collect any required permissions to charge the payment method later.</p>.
 */
  @aiFunction({
    name: 'post_setup_intents',
    description: `<p>Creates a SetupIntent object.</p>

<p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
it to collect any required permissions to charge the payment method later.</p>.`,
    inputSchema: stripe.PostSetupIntentsParamsSchema
  })
  async PostSetupIntents(
    _params: stripe.PostSetupIntentsParams
  ): Promise<stripe.PostSetupIntentsResponse> {
    return this.ky
      .post('/v1/setup_intents')
      .json<stripe.PostSetupIntentsResponse>()
  }

  /**
 * <p>Retrieves the details of a SetupIntent that has previously been created. </p>

<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>

<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>.
 */
  @aiFunction({
    name: 'get_setup_intents_intent',
    description: `<p>Retrieves the details of a SetupIntent that has previously been created. </p>

<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>

<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>.`,
    inputSchema: stripe.GetSetupIntentsIntentParamsSchema
  })
  async GetSetupIntentsIntent(
    params: stripe.GetSetupIntentsIntentParams
  ): Promise<stripe.GetSetupIntentsIntentResponse> {
    return this.ky
      .get(`/v1/setup_intents/${params.intent}`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'client_secret', 'expand')
        )
      })
      .json<stripe.GetSetupIntentsIntentResponse>()
  }

  /**
   * <p>Updates a SetupIntent object.</p>.
   */
  @aiFunction({
    name: 'post_setup_intents_intent',
    description: '<p>Updates a SetupIntent object.</p>.',
    inputSchema: stripe.PostSetupIntentsIntentParamsSchema
  })
  async PostSetupIntentsIntent(
    params: stripe.PostSetupIntentsIntentParams
  ): Promise<stripe.PostSetupIntentsIntentResponse> {
    return this.ky
      .post(`/v1/setup_intents/${params.intent}`)
      .json<stripe.PostSetupIntentsIntentResponse>()
  }

  /**
 * <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>

<p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>.
 */
  @aiFunction({
    name: 'post_setup_intents_intent_cancel',
    description: `<p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>

<p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>.`,
    inputSchema: stripe.PostSetupIntentsIntentCancelParamsSchema
  })
  async PostSetupIntentsIntentCancel(
    params: stripe.PostSetupIntentsIntentCancelParams
  ): Promise<stripe.PostSetupIntentsIntentCancelResponse> {
    return this.ky
      .post(`/v1/setup_intents/${params.intent}/cancel`)
      .json<stripe.PostSetupIntentsIntentCancelResponse>()
  }

  /**
 * <p>Confirm that your customer intends to set up the current or
provided payment method. For example, you would confirm a SetupIntent
when a customer hits the “Save” button on a payment method management
page on your website.</p>

<p>If the selected payment method does not require any additional
steps from the customer, the SetupIntent will transition to the
<code>succeeded</code> status.</p>

<p>Otherwise, it will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If setup fails,
the SetupIntent will transition to the
<code>requires_payment_method</code> status or the <code>canceled</code> status if the
confirmation limit is reached.</p>.
 */
  @aiFunction({
    name: 'post_setup_intents_intent_confirm',
    description: `<p>Confirm that your customer intends to set up the current or
provided payment method. For example, you would confirm a SetupIntent
when a customer hits the “Save” button on a payment method management
page on your website.</p>

<p>If the selected payment method does not require any additional
steps from the customer, the SetupIntent will transition to the
<code>succeeded</code> status.</p>

<p>Otherwise, it will transition to the <code>requires_action</code> status and
suggest additional actions via <code>next_action</code>. If setup fails,
the SetupIntent will transition to the
<code>requires_payment_method</code> status or the <code>canceled</code> status if the
confirmation limit is reached.</p>.`,
    inputSchema: stripe.PostSetupIntentsIntentConfirmParamsSchema
  })
  async PostSetupIntentsIntentConfirm(
    params: stripe.PostSetupIntentsIntentConfirmParams
  ): Promise<stripe.PostSetupIntentsIntentConfirmResponse> {
    return this.ky
      .post(`/v1/setup_intents/${params.intent}/confirm`)
      .json<stripe.PostSetupIntentsIntentConfirmResponse>()
  }

  /**
   * <p>Verifies microdeposits on a SetupIntent object.</p>.
   */
  @aiFunction({
    name: 'post_setup_intents_intent_verify_microdeposits',
    description: '<p>Verifies microdeposits on a SetupIntent object.</p>.',
    inputSchema: stripe.PostSetupIntentsIntentVerifyMicrodepositsParamsSchema
  })
  async PostSetupIntentsIntentVerifyMicrodeposits(
    params: stripe.PostSetupIntentsIntentVerifyMicrodepositsParams
  ): Promise<stripe.PostSetupIntentsIntentVerifyMicrodepositsResponse> {
    return this.ky
      .post(`/v1/setup_intents/${params.intent}/verify_microdeposits`)
      .json<stripe.PostSetupIntentsIntentVerifyMicrodepositsResponse>()
  }

  /**
   * <p>Returns a list of your shipping rates.</p>.
   */
  @aiFunction({
    name: 'get_shipping_rates',
    description: '<p>Returns a list of your shipping rates.</p>.',
    inputSchema: stripe.GetShippingRatesParamsSchema
  })
  async GetShippingRates(
    params: stripe.GetShippingRatesParams
  ): Promise<stripe.GetShippingRatesResponse> {
    return this.ky
      .get('/v1/shipping_rates', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetShippingRatesResponse>()
  }

  /**
   * <p>Creates a new shipping rate object.</p>.
   */
  @aiFunction({
    name: 'post_shipping_rates',
    description: '<p>Creates a new shipping rate object.</p>.',
    inputSchema: stripe.PostShippingRatesParamsSchema
  })
  async PostShippingRates(
    _params: stripe.PostShippingRatesParams
  ): Promise<stripe.PostShippingRatesResponse> {
    return this.ky
      .post('/v1/shipping_rates')
      .json<stripe.PostShippingRatesResponse>()
  }

  /**
   * <p>Returns the shipping rate object with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_shipping_rates_shipping_rate_token',
    description: '<p>Returns the shipping rate object with the given ID.</p>.',
    inputSchema: stripe.GetShippingRatesShippingRateTokenParamsSchema
  })
  async GetShippingRatesShippingRateToken(
    params: stripe.GetShippingRatesShippingRateTokenParams
  ): Promise<stripe.GetShippingRatesShippingRateTokenResponse> {
    return this.ky
      .get(`/v1/shipping_rates/${params.shipping_rate_token}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetShippingRatesShippingRateTokenResponse>()
  }

  /**
   * <p>Updates an existing shipping rate object.</p>.
   */
  @aiFunction({
    name: 'post_shipping_rates_shipping_rate_token',
    description: '<p>Updates an existing shipping rate object.</p>.',
    inputSchema: stripe.PostShippingRatesShippingRateTokenParamsSchema
  })
  async PostShippingRatesShippingRateToken(
    params: stripe.PostShippingRatesShippingRateTokenParams
  ): Promise<stripe.PostShippingRatesShippingRateTokenResponse> {
    return this.ky
      .post(`/v1/shipping_rates/${params.shipping_rate_token}`)
      .json<stripe.PostShippingRatesShippingRateTokenResponse>()
  }

  /**
   * <p>Returns a list of scheduled query runs.</p>.
   */
  @aiFunction({
    name: 'get_sigma_scheduled_query_runs',
    description: '<p>Returns a list of scheduled query runs.</p>.',
    inputSchema: stripe.GetSigmaScheduledQueryRunsParamsSchema
  })
  async GetSigmaScheduledQueryRuns(
    params: stripe.GetSigmaScheduledQueryRunsParams
  ): Promise<stripe.GetSigmaScheduledQueryRunsResponse> {
    return this.ky
      .get('/v1/sigma/scheduled_query_runs', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSigmaScheduledQueryRunsResponse>()
  }

  /**
   * <p>Retrieves the details of an scheduled query run.</p>.
   */
  @aiFunction({
    name: 'get_sigma_scheduled_query_runs_scheduled_query_run',
    description: '<p>Retrieves the details of an scheduled query run.</p>.',
    inputSchema: stripe.GetSigmaScheduledQueryRunsScheduledQueryRunParamsSchema
  })
  async GetSigmaScheduledQueryRunsScheduledQueryRun(
    params: stripe.GetSigmaScheduledQueryRunsScheduledQueryRunParams
  ): Promise<stripe.GetSigmaScheduledQueryRunsScheduledQueryRunResponse> {
    return this.ky
      .get(`/v1/sigma/scheduled_query_runs/${params.scheduled_query_run}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetSigmaScheduledQueryRunsScheduledQueryRunResponse>()
  }

  /**
   * <p>Creates a new source object.</p>.
   */
  @aiFunction({
    name: 'post_sources',
    description: '<p>Creates a new source object.</p>.',
    inputSchema: stripe.PostSourcesParamsSchema
  })
  async PostSources(
    _params: stripe.PostSourcesParams
  ): Promise<stripe.PostSourcesResponse> {
    return this.ky.post('/v1/sources').json<stripe.PostSourcesResponse>()
  }

  /**
   * <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>.
   */
  @aiFunction({
    name: 'get_sources_source',
    description:
      '<p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>.',
    inputSchema: stripe.GetSourcesSourceParamsSchema
  })
  async GetSourcesSource(
    params: stripe.GetSourcesSourceParams
  ): Promise<stripe.GetSourcesSourceResponse> {
    return this.ky
      .get(`/v1/sources/${params.source}`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'client_secret', 'expand')
        )
      })
      .json<stripe.GetSourcesSourceResponse>()
  }

  /**
 * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>.
 */
  @aiFunction({
    name: 'post_sources_source',
    description: `<p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>.`,
    inputSchema: stripe.PostSourcesSourceParamsSchema
  })
  async PostSourcesSource(
    params: stripe.PostSourcesSourceParams
  ): Promise<stripe.PostSourcesSourceResponse> {
    return this.ky
      .post(`/v1/sources/${params.source}`)
      .json<stripe.PostSourcesSourceResponse>()
  }

  /**
   * <p>Retrieves a new Source MandateNotification.</p>.
   */
  @aiFunction({
    name: 'get_sources_source_mandate_notifications_mandate_notification',
    description: '<p>Retrieves a new Source MandateNotification.</p>.',
    inputSchema:
      stripe.GetSourcesSourceMandateNotificationsMandateNotificationParamsSchema
  })
  async GetSourcesSourceMandateNotificationsMandateNotification(
    params: stripe.GetSourcesSourceMandateNotificationsMandateNotificationParams
  ): Promise<stripe.GetSourcesSourceMandateNotificationsMandateNotificationResponse> {
    return this.ky
      .get(
        `/v1/sources/${params.source}/mandate_notifications/${params.mandate_notification}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetSourcesSourceMandateNotificationsMandateNotificationResponse>()
  }

  /**
   * <p>List source transactions for a given source.</p>.
   */
  @aiFunction({
    name: 'get_sources_source_source_transactions',
    description: '<p>List source transactions for a given source.</p>.',
    inputSchema: stripe.GetSourcesSourceSourceTransactionsParamsSchema
  })
  async GetSourcesSourceSourceTransactions(
    params: stripe.GetSourcesSourceSourceTransactionsParams
  ): Promise<stripe.GetSourcesSourceSourceTransactionsResponse> {
    return this.ky
      .get(`/v1/sources/${params.source}/source_transactions`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetSourcesSourceSourceTransactionsResponse>()
  }

  /**
   * <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>.
   */
  @aiFunction({
    name: 'get_sources_source_source_transactions_source_transaction',
    description:
      '<p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>.',
    inputSchema:
      stripe.GetSourcesSourceSourceTransactionsSourceTransactionParamsSchema
  })
  async GetSourcesSourceSourceTransactionsSourceTransaction(
    params: stripe.GetSourcesSourceSourceTransactionsSourceTransactionParams
  ): Promise<stripe.GetSourcesSourceSourceTransactionsSourceTransactionResponse> {
    return this.ky
      .get(
        `/v1/sources/${params.source}/source_transactions/${params.source_transaction}`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetSourcesSourceSourceTransactionsSourceTransactionResponse>()
  }

  /**
   * <p>Verify a given source.</p>.
   */
  @aiFunction({
    name: 'post_sources_source_verify',
    description: '<p>Verify a given source.</p>.',
    inputSchema: stripe.PostSourcesSourceVerifyParamsSchema
  })
  async PostSourcesSourceVerify(
    params: stripe.PostSourcesSourceVerifyParams
  ): Promise<stripe.PostSourcesSourceVerifyResponse> {
    return this.ky
      .post(`/v1/sources/${params.source}/verify`)
      .json<stripe.PostSourcesSourceVerifyResponse>()
  }

  /**
   * <p>Returns a list of your subscription items for a given subscription.</p>.
   */
  @aiFunction({
    name: 'get_subscription_items',
    description:
      '<p>Returns a list of your subscription items for a given subscription.</p>.',
    inputSchema: stripe.GetSubscriptionItemsParamsSchema
  })
  async GetSubscriptionItems(
    params: stripe.GetSubscriptionItemsParams
  ): Promise<stripe.GetSubscriptionItemsResponse> {
    return this.ky
      .get('/v1/subscription_items', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSubscriptionItemsResponse>()
  }

  /**
   * <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>.
   */
  @aiFunction({
    name: 'post_subscription_items',
    description:
      '<p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>.',
    inputSchema: stripe.PostSubscriptionItemsParamsSchema
  })
  async PostSubscriptionItems(
    _params: stripe.PostSubscriptionItemsParams
  ): Promise<stripe.PostSubscriptionItemsResponse> {
    return this.ky
      .post('/v1/subscription_items')
      .json<stripe.PostSubscriptionItemsResponse>()
  }

  /**
   * <p>Retrieves the subscription item with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_subscription_items_item',
    description: '<p>Retrieves the subscription item with the given ID.</p>.',
    inputSchema: stripe.GetSubscriptionItemsItemParamsSchema
  })
  async GetSubscriptionItemsItem(
    params: stripe.GetSubscriptionItemsItemParams
  ): Promise<stripe.GetSubscriptionItemsItemResponse> {
    return this.ky
      .get(`/v1/subscription_items/${params.item}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetSubscriptionItemsItemResponse>()
  }

  /**
   * <p>Updates the plan or quantity of an item on a current subscription.</p>.
   */
  @aiFunction({
    name: 'post_subscription_items_item',
    description:
      '<p>Updates the plan or quantity of an item on a current subscription.</p>.',
    inputSchema: stripe.PostSubscriptionItemsItemParamsSchema
  })
  async PostSubscriptionItemsItem(
    params: stripe.PostSubscriptionItemsItemParams
  ): Promise<stripe.PostSubscriptionItemsItemResponse> {
    return this.ky
      .post(`/v1/subscription_items/${params.item}`)
      .json<stripe.PostSubscriptionItemsItemResponse>()
  }

  /**
   * <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>.
   */
  @aiFunction({
    name: 'delete_subscription_items_item',
    description:
      '<p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>.',
    inputSchema: stripe.DeleteSubscriptionItemsItemParamsSchema
  })
  async DeleteSubscriptionItemsItem(
    params: stripe.DeleteSubscriptionItemsItemParams
  ): Promise<stripe.DeleteSubscriptionItemsItemResponse> {
    return this.ky
      .delete(`/v1/subscription_items/${params.item}`)
      .json<stripe.DeleteSubscriptionItemsItemResponse>()
  }

  /**
 * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>

<p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>.
 */
  @aiFunction({
    name: 'get_subscription_items_subscription_item_usage_record_summaries',
    description: `<p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>

<p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>.`,
    inputSchema:
      stripe.GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParamsSchema
  })
  async GetSubscriptionItemsSubscriptionItemUsageRecordSummaries(
    params: stripe.GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParams
  ): Promise<stripe.GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponse> {
    return this.ky
      .get(
        `/v1/subscription_items/${params.subscription_item}/usage_record_summaries`,
        {
          searchParams: sanitizeSearchParams(
            pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
          )
        }
      )
      .json<stripe.GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponse>()
  }

  /**
 * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>

<p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>

<p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>

<p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>.
 */
  @aiFunction({
    name: 'post_subscription_items_subscription_item_usage_records',
    description: `<p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>

<p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>

<p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>

<p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>.`,
    inputSchema:
      stripe.PostSubscriptionItemsSubscriptionItemUsageRecordsParamsSchema
  })
  async PostSubscriptionItemsSubscriptionItemUsageRecords(
    params: stripe.PostSubscriptionItemsSubscriptionItemUsageRecordsParams
  ): Promise<stripe.PostSubscriptionItemsSubscriptionItemUsageRecordsResponse> {
    return this.ky
      .post(
        `/v1/subscription_items/${params.subscription_item}/usage_records`
      )
      .json<stripe.PostSubscriptionItemsSubscriptionItemUsageRecordsResponse>()
  }

  /**
   * <p>Retrieves the list of your subscription schedules.</p>.
   */
  @aiFunction({
    name: 'get_subscription_schedules',
    description: '<p>Retrieves the list of your subscription schedules.</p>.',
    inputSchema: stripe.GetSubscriptionSchedulesParamsSchema
  })
  async GetSubscriptionSchedules(
    params: stripe.GetSubscriptionSchedulesParams
  ): Promise<stripe.GetSubscriptionSchedulesResponse> {
    return this.ky
      .get('/v1/subscription_schedules', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSubscriptionSchedulesResponse>()
  }

  /**
   * <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>.
   */
  @aiFunction({
    name: 'post_subscription_schedules',
    description:
      '<p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>.',
    inputSchema: stripe.PostSubscriptionSchedulesParamsSchema
  })
  async PostSubscriptionSchedules(
    _params: stripe.PostSubscriptionSchedulesParams
  ): Promise<stripe.PostSubscriptionSchedulesResponse> {
    return this.ky
      .post('/v1/subscription_schedules')
      .json<stripe.PostSubscriptionSchedulesResponse>()
  }

  /**
   * <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>.
   */
  @aiFunction({
    name: 'get_subscription_schedules_schedule',
    description:
      '<p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>.',
    inputSchema: stripe.GetSubscriptionSchedulesScheduleParamsSchema
  })
  async GetSubscriptionSchedulesSchedule(
    params: stripe.GetSubscriptionSchedulesScheduleParams
  ): Promise<stripe.GetSubscriptionSchedulesScheduleResponse> {
    return this.ky
      .get(`/v1/subscription_schedules/${params.schedule}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetSubscriptionSchedulesScheduleResponse>()
  }

  /**
   * <p>Updates an existing subscription schedule.</p>.
   */
  @aiFunction({
    name: 'post_subscription_schedules_schedule',
    description: '<p>Updates an existing subscription schedule.</p>.',
    inputSchema: stripe.PostSubscriptionSchedulesScheduleParamsSchema
  })
  async PostSubscriptionSchedulesSchedule(
    params: stripe.PostSubscriptionSchedulesScheduleParams
  ): Promise<stripe.PostSubscriptionSchedulesScheduleResponse> {
    return this.ky
      .post(`/v1/subscription_schedules/${params.schedule}`)
      .json<stripe.PostSubscriptionSchedulesScheduleResponse>()
  }

  /**
   * <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>.
   */
  @aiFunction({
    name: 'post_subscription_schedules_schedule_cancel',
    description:
      '<p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>.',
    inputSchema: stripe.PostSubscriptionSchedulesScheduleCancelParamsSchema
  })
  async PostSubscriptionSchedulesScheduleCancel(
    params: stripe.PostSubscriptionSchedulesScheduleCancelParams
  ): Promise<stripe.PostSubscriptionSchedulesScheduleCancelResponse> {
    return this.ky
      .post(`/v1/subscription_schedules/${params.schedule}/cancel`)
      .json<stripe.PostSubscriptionSchedulesScheduleCancelResponse>()
  }

  /**
   * <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>.
   */
  @aiFunction({
    name: 'post_subscription_schedules_schedule_release',
    description:
      '<p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>.',
    inputSchema: stripe.PostSubscriptionSchedulesScheduleReleaseParamsSchema
  })
  async PostSubscriptionSchedulesScheduleRelease(
    params: stripe.PostSubscriptionSchedulesScheduleReleaseParams
  ): Promise<stripe.PostSubscriptionSchedulesScheduleReleaseResponse> {
    return this.ky
      .post(`/v1/subscription_schedules/${params.schedule}/release`)
      .json<stripe.PostSubscriptionSchedulesScheduleReleaseResponse>()
  }

  /**
   * <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>.
   */
  @aiFunction({
    name: 'get_subscriptions',
    description:
      '<p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>.',
    inputSchema: stripe.GetSubscriptionsParamsSchema
  })
  async GetSubscriptions(
    params: stripe.GetSubscriptionsParams
  ): Promise<stripe.GetSubscriptionsResponse> {
    return this.ky
      .get('/v1/subscriptions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSubscriptionsResponse>()
  }

  /**
 * <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>

<p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>

<p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
Schedules provide the flexibility to model more complex billing configurations that change over time.</p>.
 */
  @aiFunction({
    name: 'post_subscriptions',
    description: `<p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>

<p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>

<p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
Schedules provide the flexibility to model more complex billing configurations that change over time.</p>.`,
    inputSchema: stripe.PostSubscriptionsParamsSchema
  })
  async PostSubscriptions(
    _params: stripe.PostSubscriptionsParams
  ): Promise<stripe.PostSubscriptionsResponse> {
    return this.ky
      .post('/v1/subscriptions')
      .json<stripe.PostSubscriptionsResponse>()
  }

  /**
 * <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.
 */
  @aiFunction({
    name: 'get_subscriptions_search',
    description: `<p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
to an hour behind during outages. Search functionality is not available to merchants in India.</p>.`,
    inputSchema: stripe.GetSubscriptionsSearchParamsSchema
  })
  async GetSubscriptionsSearch(
    params: stripe.GetSubscriptionsSearchParams
  ): Promise<stripe.GetSubscriptionsSearchResponse> {
    return this.ky
      .get('/v1/subscriptions/search', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetSubscriptionsSearchResponse>()
  }

  /**
   * <p>Retrieves the subscription with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_subscriptions_subscription_exposed_id',
    description: '<p>Retrieves the subscription with the given ID.</p>.',
    inputSchema: stripe.GetSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async GetSubscriptionsSubscriptionExposedId(
    params: stripe.GetSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.GetSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .get(`/v1/subscriptions/${params.subscription_exposed_id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetSubscriptionsSubscriptionExposedIdResponse>()
  }

  /**
 * <p>Updates an existing subscription to match the specified parameters.
When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
To preview how the proration is calculated, use the <a href="/docs/api/invoices/create_preview">create preview</a> endpoint.</p>

<p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>

<p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>

<ul>
<li>The billing interval is changed (for example, from monthly to yearly).</li>
<li>The subscription moves from free to paid.</li>
<li>A trial starts or ends.</li>
</ul>

<p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how <a href="/docs/billing/subscriptions/upgrade-downgrade#immediate-payment">Stripe immediately attempts payment for subscription changes</a>.</p>

<p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>

<p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>

<p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>.
 */
  @aiFunction({
    name: 'post_subscriptions_subscription_exposed_id',
    description: `<p>Updates an existing subscription to match the specified parameters.
When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
To preview how the proration is calculated, use the <a href="/docs/api/invoices/create_preview">create preview</a> endpoint.</p>

<p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>

<p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>

<ul>
<li>The billing interval is changed (for example, from monthly to yearly).</li>
<li>The subscription moves from free to paid.</li>
<li>A trial starts or ends.</li>
</ul>

<p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how <a href="/docs/billing/subscriptions/upgrade-downgrade#immediate-payment">Stripe immediately attempts payment for subscription changes</a>.</p>

<p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>

<p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>

<p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>.`,
    inputSchema: stripe.PostSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async PostSubscriptionsSubscriptionExposedId(
    params: stripe.PostSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.PostSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .post(`/v1/subscriptions/${params.subscription_exposed_id}`)
      .json<stripe.PostSubscriptionsSubscriptionExposedIdResponse>()
  }

  /**
 * <p>Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its <a href="/metadata">metadata</a>.</p>

<p>Any pending invoice items that you’ve created are still charged at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.</p>

<p>By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>.
 */
  @aiFunction({
    name: 'delete_subscriptions_subscription_exposed_id',
    description: `<p>Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its <a href="/metadata">metadata</a>.</p>

<p>Any pending invoice items that you’ve created are still charged at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.</p>

<p>By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>.`,
    inputSchema: stripe.DeleteSubscriptionsSubscriptionExposedIdParamsSchema
  })
  async DeleteSubscriptionsSubscriptionExposedId(
    params: stripe.DeleteSubscriptionsSubscriptionExposedIdParams
  ): Promise<stripe.DeleteSubscriptionsSubscriptionExposedIdResponse> {
    return this.ky
      .delete(`/v1/subscriptions/${params.subscription_exposed_id}`)
      .json<stripe.DeleteSubscriptionsSubscriptionExposedIdResponse>()
  }

  /**
   * <p>Removes the currently applied discount on a subscription.</p>.
   */
  @aiFunction({
    name: 'delete_subscriptions_subscription_exposed_id_discount',
    description:
      '<p>Removes the currently applied discount on a subscription.</p>.',
    inputSchema:
      stripe.DeleteSubscriptionsSubscriptionExposedIdDiscountParamsSchema
  })
  async DeleteSubscriptionsSubscriptionExposedIdDiscount(
    params: stripe.DeleteSubscriptionsSubscriptionExposedIdDiscountParams
  ): Promise<stripe.DeleteSubscriptionsSubscriptionExposedIdDiscountResponse> {
    return this.ky
      .delete(`/v1/subscriptions/${params.subscription_exposed_id}/discount`)
      .json<stripe.DeleteSubscriptionsSubscriptionExposedIdDiscountResponse>()
  }

  /**
   * <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>.
   */
  @aiFunction({
    name: 'post_subscriptions_subscription_resume',
    description:
      '<p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>.',
    inputSchema: stripe.PostSubscriptionsSubscriptionResumeParamsSchema
  })
  async PostSubscriptionsSubscriptionResume(
    params: stripe.PostSubscriptionsSubscriptionResumeParams
  ): Promise<stripe.PostSubscriptionsSubscriptionResumeResponse> {
    return this.ky
      .post(`/v1/subscriptions/${params.subscription}/resume`)
      .json<stripe.PostSubscriptionsSubscriptionResumeResponse>()
  }

  /**
   * <p>Calculates tax based on the input and returns a Tax <code>Calculation</code> object.</p>.
   */
  @aiFunction({
    name: 'post_tax_calculations',
    description:
      '<p>Calculates tax based on the input and returns a Tax <code>Calculation</code> object.</p>.',
    inputSchema: stripe.PostTaxCalculationsParamsSchema
  })
  async PostTaxCalculations(
    _params: stripe.PostTaxCalculationsParams
  ): Promise<stripe.PostTaxCalculationsResponse> {
    return this.ky
      .post('/v1/tax/calculations')
      .json<stripe.PostTaxCalculationsResponse>()
  }

  /**
   * <p>Retrieves a Tax <code>Calculation</code> object, if the calculation hasn’t expired.</p>.
   */
  @aiFunction({
    name: 'get_tax_calculations_calculation',
    description:
      '<p>Retrieves a Tax <code>Calculation</code> object, if the calculation hasn’t expired.</p>.',
    inputSchema: stripe.GetTaxCalculationsCalculationParamsSchema
  })
  async GetTaxCalculationsCalculation(
    params: stripe.GetTaxCalculationsCalculationParams
  ): Promise<stripe.GetTaxCalculationsCalculationResponse> {
    return this.ky
      .get(`/v1/tax/calculations/${params.calculation}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxCalculationsCalculationResponse>()
  }

  /**
   * <p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>.
   */
  @aiFunction({
    name: 'get_tax_calculations_calculation_line_items',
    description:
      '<p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>.',
    inputSchema: stripe.GetTaxCalculationsCalculationLineItemsParamsSchema
  })
  async GetTaxCalculationsCalculationLineItems(
    params: stripe.GetTaxCalculationsCalculationLineItemsParams
  ): Promise<stripe.GetTaxCalculationsCalculationLineItemsResponse> {
    return this.ky
      .get(`/v1/tax/calculations/${params.calculation}/line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetTaxCalculationsCalculationLineItemsResponse>()
  }

  /**
   * <p>Returns a list of Tax <code>Registration</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_tax_registrations',
    description:
      '<p>Returns a list of Tax <code>Registration</code> objects.</p>.',
    inputSchema: stripe.GetTaxRegistrationsParamsSchema
  })
  async GetTaxRegistrations(
    params: stripe.GetTaxRegistrationsParams
  ): Promise<stripe.GetTaxRegistrationsResponse> {
    return this.ky
      .get('/v1/tax/registrations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTaxRegistrationsResponse>()
  }

  /**
   * <p>Creates a new Tax <code>Registration</code> object.</p>.
   */
  @aiFunction({
    name: 'post_tax_registrations',
    description: '<p>Creates a new Tax <code>Registration</code> object.</p>.',
    inputSchema: stripe.PostTaxRegistrationsParamsSchema
  })
  async PostTaxRegistrations(
    _params: stripe.PostTaxRegistrationsParams
  ): Promise<stripe.PostTaxRegistrationsResponse> {
    return this.ky
      .post('/v1/tax/registrations')
      .json<stripe.PostTaxRegistrationsResponse>()
  }

  /**
   * <p>Returns a Tax <code>Registration</code> object.</p>.
   */
  @aiFunction({
    name: 'get_tax_registrations_id',
    description: '<p>Returns a Tax <code>Registration</code> object.</p>.',
    inputSchema: stripe.GetTaxRegistrationsIdParamsSchema
  })
  async GetTaxRegistrationsId(
    params: stripe.GetTaxRegistrationsIdParams
  ): Promise<stripe.GetTaxRegistrationsIdResponse> {
    return this.ky
      .get(`/v1/tax/registrations/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxRegistrationsIdResponse>()
  }

  /**
 * <p>Updates an existing Tax <code>Registration</code> object.</p>

<p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>.
 */
  @aiFunction({
    name: 'post_tax_registrations_id',
    description: `<p>Updates an existing Tax <code>Registration</code> object.</p>

<p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>.`,
    inputSchema: stripe.PostTaxRegistrationsIdParamsSchema
  })
  async PostTaxRegistrationsId(
    params: stripe.PostTaxRegistrationsIdParams
  ): Promise<stripe.PostTaxRegistrationsIdResponse> {
    return this.ky
      .post(`/v1/tax/registrations/${params.id}`)
      .json<stripe.PostTaxRegistrationsIdResponse>()
  }

  /**
   * <p>Retrieves Tax <code>Settings</code> for a merchant.</p>.
   */
  @aiFunction({
    name: 'get_tax_settings',
    description: '<p>Retrieves Tax <code>Settings</code> for a merchant.</p>.',
    inputSchema: stripe.GetTaxSettingsParamsSchema
  })
  async GetTaxSettings(
    params: stripe.GetTaxSettingsParams
  ): Promise<stripe.GetTaxSettingsResponse> {
    return this.ky
      .get('/v1/tax/settings', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTaxSettingsResponse>()
  }

  /**
   * <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>.
   */
  @aiFunction({
    name: 'post_tax_settings',
    description:
      '<p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>.',
    inputSchema: stripe.PostTaxSettingsParamsSchema
  })
  async PostTaxSettings(
    _params: stripe.PostTaxSettingsParams
  ): Promise<stripe.PostTaxSettingsResponse> {
    return this.ky
      .post('/v1/tax/settings')
      .json<stripe.PostTaxSettingsResponse>()
  }

  /**
   * <p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.</p>.
   */
  @aiFunction({
    name: 'post_tax_transactions_create_from_calculation',
    description:
      '<p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.</p>.',
    inputSchema: stripe.PostTaxTransactionsCreateFromCalculationParamsSchema
  })
  async PostTaxTransactionsCreateFromCalculation(
    _params: stripe.PostTaxTransactionsCreateFromCalculationParams
  ): Promise<stripe.PostTaxTransactionsCreateFromCalculationResponse> {
    return this.ky
      .post('/v1/tax/transactions/create_from_calculation')
      .json<stripe.PostTaxTransactionsCreateFromCalculationResponse>()
  }

  /**
   * <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>.
   */
  @aiFunction({
    name: 'post_tax_transactions_create_reversal',
    description:
      '<p>Partially or fully reverses a previously created <code>Transaction</code>.</p>.',
    inputSchema: stripe.PostTaxTransactionsCreateReversalParamsSchema
  })
  async PostTaxTransactionsCreateReversal(
    _params: stripe.PostTaxTransactionsCreateReversalParams
  ): Promise<stripe.PostTaxTransactionsCreateReversalResponse> {
    return this.ky
      .post('/v1/tax/transactions/create_reversal')
      .json<stripe.PostTaxTransactionsCreateReversalResponse>()
  }

  /**
   * <p>Retrieves a Tax <code>Transaction</code> object.</p>.
   */
  @aiFunction({
    name: 'get_tax_transactions_transaction',
    description: '<p>Retrieves a Tax <code>Transaction</code> object.</p>.',
    inputSchema: stripe.GetTaxTransactionsTransactionParamsSchema
  })
  async GetTaxTransactionsTransaction(
    params: stripe.GetTaxTransactionsTransactionParams
  ): Promise<stripe.GetTaxTransactionsTransactionResponse> {
    return this.ky
      .get(`/v1/tax/transactions/${params.transaction}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxTransactionsTransactionResponse>()
  }

  /**
   * <p>Retrieves the line items of a committed standalone transaction as a collection.</p>.
   */
  @aiFunction({
    name: 'get_tax_transactions_transaction_line_items',
    description:
      '<p>Retrieves the line items of a committed standalone transaction as a collection.</p>.',
    inputSchema: stripe.GetTaxTransactionsTransactionLineItemsParamsSchema
  })
  async GetTaxTransactionsTransactionLineItems(
    params: stripe.GetTaxTransactionsTransactionLineItemsParams
  ): Promise<stripe.GetTaxTransactionsTransactionLineItemsResponse> {
    return this.ky
      .get(`/v1/tax/transactions/${params.transaction}/line_items`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetTaxTransactionsTransactionLineItemsResponse>()
  }

  /**
   * <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>.
   */
  @aiFunction({
    name: 'get_tax_codes',
    description:
      '<p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>.',
    inputSchema: stripe.GetTaxCodesParamsSchema
  })
  async GetTaxCodes(
    params: stripe.GetTaxCodesParams
  ): Promise<stripe.GetTaxCodesResponse> {
    return this.ky
      .get('/v1/tax_codes', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTaxCodesResponse>()
  }

  /**
   * <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>.
   */
  @aiFunction({
    name: 'get_tax_codes_id',
    description:
      '<p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>.',
    inputSchema: stripe.GetTaxCodesIdParamsSchema
  })
  async GetTaxCodesId(
    params: stripe.GetTaxCodesIdParams
  ): Promise<stripe.GetTaxCodesIdResponse> {
    return this.ky
      .get(`/v1/tax_codes/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxCodesIdResponse>()
  }

  /**
   * <p>Returns a list of tax IDs.</p>.
   */
  @aiFunction({
    name: 'get_tax_ids',
    description: '<p>Returns a list of tax IDs.</p>.',
    inputSchema: stripe.GetTaxIdsParamsSchema
  })
  async GetTaxIds(
    params: stripe.GetTaxIdsParams
  ): Promise<stripe.GetTaxIdsResponse> {
    return this.ky
      .get('/v1/tax_ids', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTaxIdsResponse>()
  }

  /**
   * <p>Creates a new account or customer <code>tax_id</code> object.</p>.
   */
  @aiFunction({
    name: 'post_tax_ids',
    description:
      '<p>Creates a new account or customer <code>tax_id</code> object.</p>.',
    inputSchema: stripe.PostTaxIdsParamsSchema
  })
  async PostTaxIds(
    _params: stripe.PostTaxIdsParams
  ): Promise<stripe.PostTaxIdsResponse> {
    return this.ky.post('/v1/tax_ids').json<stripe.PostTaxIdsResponse>()
  }

  /**
   * <p>Retrieves an account or customer <code>tax_id</code> object.</p>.
   */
  @aiFunction({
    name: 'get_tax_ids_id',
    description:
      '<p>Retrieves an account or customer <code>tax_id</code> object.</p>.',
    inputSchema: stripe.GetTaxIdsIdParamsSchema
  })
  async GetTaxIdsId(
    params: stripe.GetTaxIdsIdParams
  ): Promise<stripe.GetTaxIdsIdResponse> {
    return this.ky
      .get(`/v1/tax_ids/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxIdsIdResponse>()
  }

  /**
   * <p>Deletes an existing account or customer <code>tax_id</code> object.</p>.
   */
  @aiFunction({
    name: 'delete_tax_ids_id',
    description:
      '<p>Deletes an existing account or customer <code>tax_id</code> object.</p>.',
    inputSchema: stripe.DeleteTaxIdsIdParamsSchema
  })
  async DeleteTaxIdsId(
    params: stripe.DeleteTaxIdsIdParams
  ): Promise<stripe.DeleteTaxIdsIdResponse> {
    return this.ky
      .delete(`/v1/tax_ids/${params.id}`)
      .json<stripe.DeleteTaxIdsIdResponse>()
  }

  /**
   * <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>.
   */
  @aiFunction({
    name: 'get_tax_rates',
    description:
      '<p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>.',
    inputSchema: stripe.GetTaxRatesParamsSchema
  })
  async GetTaxRates(
    params: stripe.GetTaxRatesParams
  ): Promise<stripe.GetTaxRatesResponse> {
    return this.ky
      .get('/v1/tax_rates', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTaxRatesResponse>()
  }

  /**
   * <p>Creates a new tax rate.</p>.
   */
  @aiFunction({
    name: 'post_tax_rates',
    description: '<p>Creates a new tax rate.</p>.',
    inputSchema: stripe.PostTaxRatesParamsSchema
  })
  async PostTaxRates(
    _params: stripe.PostTaxRatesParams
  ): Promise<stripe.PostTaxRatesResponse> {
    return this.ky.post('/v1/tax_rates').json<stripe.PostTaxRatesResponse>()
  }

  /**
   * <p>Retrieves a tax rate with the given ID</p>.
   */
  @aiFunction({
    name: 'get_tax_rates_tax_rate',
    description: '<p>Retrieves a tax rate with the given ID</p>.',
    inputSchema: stripe.GetTaxRatesTaxRateParamsSchema
  })
  async GetTaxRatesTaxRate(
    params: stripe.GetTaxRatesTaxRateParams
  ): Promise<stripe.GetTaxRatesTaxRateResponse> {
    return this.ky
      .get(`/v1/tax_rates/${params.tax_rate}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTaxRatesTaxRateResponse>()
  }

  /**
   * <p>Updates an existing tax rate.</p>.
   */
  @aiFunction({
    name: 'post_tax_rates_tax_rate',
    description: '<p>Updates an existing tax rate.</p>.',
    inputSchema: stripe.PostTaxRatesTaxRateParamsSchema
  })
  async PostTaxRatesTaxRate(
    params: stripe.PostTaxRatesTaxRateParams
  ): Promise<stripe.PostTaxRatesTaxRateResponse> {
    return this.ky
      .post(`/v1/tax_rates/${params.tax_rate}`)
      .json<stripe.PostTaxRatesTaxRateResponse>()
  }

  /**
   * <p>Returns a list of <code>Configuration</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_terminal_configurations',
    description:
      '<p>Returns a list of <code>Configuration</code> objects.</p>.',
    inputSchema: stripe.GetTerminalConfigurationsParamsSchema
  })
  async GetTerminalConfigurations(
    params: stripe.GetTerminalConfigurationsParams
  ): Promise<stripe.GetTerminalConfigurationsResponse> {
    return this.ky
      .get('/v1/terminal/configurations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTerminalConfigurationsResponse>()
  }

  /**
   * <p>Creates a new <code>Configuration</code> object.</p>.
   */
  @aiFunction({
    name: 'post_terminal_configurations',
    description: '<p>Creates a new <code>Configuration</code> object.</p>.',
    inputSchema: stripe.PostTerminalConfigurationsParamsSchema
  })
  async PostTerminalConfigurations(
    _params: stripe.PostTerminalConfigurationsParams
  ): Promise<stripe.PostTerminalConfigurationsResponse> {
    return this.ky
      .post('/v1/terminal/configurations')
      .json<stripe.PostTerminalConfigurationsResponse>()
  }

  /**
   * <p>Retrieves a <code>Configuration</code> object.</p>.
   */
  @aiFunction({
    name: 'get_terminal_configurations_configuration',
    description: '<p>Retrieves a <code>Configuration</code> object.</p>.',
    inputSchema: stripe.GetTerminalConfigurationsConfigurationParamsSchema
  })
  async GetTerminalConfigurationsConfiguration(
    params: stripe.GetTerminalConfigurationsConfigurationParams
  ): Promise<stripe.GetTerminalConfigurationsConfigurationResponse> {
    return this.ky
      .get(`/v1/terminal/configurations/${params.configuration}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTerminalConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Updates a new <code>Configuration</code> object.</p>.
   */
  @aiFunction({
    name: 'post_terminal_configurations_configuration',
    description: '<p>Updates a new <code>Configuration</code> object.</p>.',
    inputSchema: stripe.PostTerminalConfigurationsConfigurationParamsSchema
  })
  async PostTerminalConfigurationsConfiguration(
    params: stripe.PostTerminalConfigurationsConfigurationParams
  ): Promise<stripe.PostTerminalConfigurationsConfigurationResponse> {
    return this.ky
      .post(`/v1/terminal/configurations/${params.configuration}`)
      .json<stripe.PostTerminalConfigurationsConfigurationResponse>()
  }

  /**
   * <p>Deletes a <code>Configuration</code> object.</p>.
   */
  @aiFunction({
    name: 'delete_terminal_configurations_configuration',
    description: '<p>Deletes a <code>Configuration</code> object.</p>.',
    inputSchema: stripe.DeleteTerminalConfigurationsConfigurationParamsSchema
  })
  async DeleteTerminalConfigurationsConfiguration(
    params: stripe.DeleteTerminalConfigurationsConfigurationParams
  ): Promise<stripe.DeleteTerminalConfigurationsConfigurationResponse> {
    return this.ky
      .delete(`/v1/terminal/configurations/${params.configuration}`)
      .json<stripe.DeleteTerminalConfigurationsConfigurationResponse>()
  }

  /**
   * <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>.
   */
  @aiFunction({
    name: 'post_terminal_connection_tokens',
    description:
      '<p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>.',
    inputSchema: stripe.PostTerminalConnectionTokensParamsSchema
  })
  async PostTerminalConnectionTokens(
    _params: stripe.PostTerminalConnectionTokensParams
  ): Promise<stripe.PostTerminalConnectionTokensResponse> {
    return this.ky
      .post('/v1/terminal/connection_tokens')
      .json<stripe.PostTerminalConnectionTokensResponse>()
  }

  /**
   * <p>Returns a list of <code>Location</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_terminal_locations',
    description: '<p>Returns a list of <code>Location</code> objects.</p>.',
    inputSchema: stripe.GetTerminalLocationsParamsSchema
  })
  async GetTerminalLocations(
    params: stripe.GetTerminalLocationsParams
  ): Promise<stripe.GetTerminalLocationsResponse> {
    return this.ky
      .get('/v1/terminal/locations', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTerminalLocationsResponse>()
  }

  /**
 * <p>Creates a new <code>Location</code> object.
For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>.
 */
  @aiFunction({
    name: 'post_terminal_locations',
    description: `<p>Creates a new <code>Location</code> object.
For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>.`,
    inputSchema: stripe.PostTerminalLocationsParamsSchema
  })
  async PostTerminalLocations(
    _params: stripe.PostTerminalLocationsParams
  ): Promise<stripe.PostTerminalLocationsResponse> {
    return this.ky
      .post('/v1/terminal/locations')
      .json<stripe.PostTerminalLocationsResponse>()
  }

  /**
   * <p>Retrieves a <code>Location</code> object.</p>.
   */
  @aiFunction({
    name: 'get_terminal_locations_location',
    description: '<p>Retrieves a <code>Location</code> object.</p>.',
    inputSchema: stripe.GetTerminalLocationsLocationParamsSchema
  })
  async GetTerminalLocationsLocation(
    params: stripe.GetTerminalLocationsLocationParams
  ): Promise<stripe.GetTerminalLocationsLocationResponse> {
    return this.ky
      .get(`/v1/terminal/locations/${params.location}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTerminalLocationsLocationResponse>()
  }

  /**
   * <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_terminal_locations_location',
    description:
      '<p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostTerminalLocationsLocationParamsSchema
  })
  async PostTerminalLocationsLocation(
    params: stripe.PostTerminalLocationsLocationParams
  ): Promise<stripe.PostTerminalLocationsLocationResponse> {
    return this.ky
      .post(`/v1/terminal/locations/${params.location}`)
      .json<stripe.PostTerminalLocationsLocationResponse>()
  }

  /**
   * <p>Deletes a <code>Location</code> object.</p>.
   */
  @aiFunction({
    name: 'delete_terminal_locations_location',
    description: '<p>Deletes a <code>Location</code> object.</p>.',
    inputSchema: stripe.DeleteTerminalLocationsLocationParamsSchema
  })
  async DeleteTerminalLocationsLocation(
    params: stripe.DeleteTerminalLocationsLocationParams
  ): Promise<stripe.DeleteTerminalLocationsLocationResponse> {
    return this.ky
      .delete(`/v1/terminal/locations/${params.location}`)
      .json<stripe.DeleteTerminalLocationsLocationResponse>()
  }

  /**
   * <p>Returns a list of <code>Reader</code> objects.</p>.
   */
  @aiFunction({
    name: 'get_terminal_readers',
    description: '<p>Returns a list of <code>Reader</code> objects.</p>.',
    inputSchema: stripe.GetTerminalReadersParamsSchema
  })
  async GetTerminalReaders(
    params: stripe.GetTerminalReadersParams
  ): Promise<stripe.GetTerminalReadersResponse> {
    return this.ky
      .get('/v1/terminal/readers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTerminalReadersResponse>()
  }

  /**
   * <p>Creates a new <code>Reader</code> object.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers',
    description: '<p>Creates a new <code>Reader</code> object.</p>.',
    inputSchema: stripe.PostTerminalReadersParamsSchema
  })
  async PostTerminalReaders(
    _params: stripe.PostTerminalReadersParams
  ): Promise<stripe.PostTerminalReadersResponse> {
    return this.ky
      .post('/v1/terminal/readers')
      .json<stripe.PostTerminalReadersResponse>()
  }

  /**
   * <p>Retrieves a <code>Reader</code> object.</p>.
   */
  @aiFunction({
    name: 'get_terminal_readers_reader',
    description: '<p>Retrieves a <code>Reader</code> object.</p>.',
    inputSchema: stripe.GetTerminalReadersReaderParamsSchema
  })
  async GetTerminalReadersReader(
    params: stripe.GetTerminalReadersReaderParams
  ): Promise<stripe.GetTerminalReadersReaderResponse> {
    return this.ky
      .get(`/v1/terminal/readers/${params.reader}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTerminalReadersReaderResponse>()
  }

  /**
   * <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader',
    description:
      '<p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.',
    inputSchema: stripe.PostTerminalReadersReaderParamsSchema
  })
  async PostTerminalReadersReader(
    params: stripe.PostTerminalReadersReaderParams
  ): Promise<stripe.PostTerminalReadersReaderResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}`)
      .json<stripe.PostTerminalReadersReaderResponse>()
  }

  /**
   * <p>Deletes a <code>Reader</code> object.</p>.
   */
  @aiFunction({
    name: 'delete_terminal_readers_reader',
    description: '<p>Deletes a <code>Reader</code> object.</p>.',
    inputSchema: stripe.DeleteTerminalReadersReaderParamsSchema
  })
  async DeleteTerminalReadersReader(
    params: stripe.DeleteTerminalReadersReaderParams
  ): Promise<stripe.DeleteTerminalReadersReaderResponse> {
    return this.ky
      .delete(`/v1/terminal/readers/${params.reader}`)
      .json<stripe.DeleteTerminalReadersReaderResponse>()
  }

  /**
   * <p>Cancels the current reader action.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader_cancel_action',
    description: '<p>Cancels the current reader action.</p>.',
    inputSchema: stripe.PostTerminalReadersReaderCancelActionParamsSchema
  })
  async PostTerminalReadersReaderCancelAction(
    params: stripe.PostTerminalReadersReaderCancelActionParams
  ): Promise<stripe.PostTerminalReadersReaderCancelActionResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}/cancel_action`)
      .json<stripe.PostTerminalReadersReaderCancelActionResponse>()
  }

  /**
   * <p>Initiates a payment flow on a Reader.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader_process_payment_intent',
    description: '<p>Initiates a payment flow on a Reader.</p>.',
    inputSchema:
      stripe.PostTerminalReadersReaderProcessPaymentIntentParamsSchema
  })
  async PostTerminalReadersReaderProcessPaymentIntent(
    params: stripe.PostTerminalReadersReaderProcessPaymentIntentParams
  ): Promise<stripe.PostTerminalReadersReaderProcessPaymentIntentResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}/process_payment_intent`)
      .json<stripe.PostTerminalReadersReaderProcessPaymentIntentResponse>()
  }

  /**
   * <p>Initiates a setup intent flow on a Reader.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader_process_setup_intent',
    description: '<p>Initiates a setup intent flow on a Reader.</p>.',
    inputSchema: stripe.PostTerminalReadersReaderProcessSetupIntentParamsSchema
  })
  async PostTerminalReadersReaderProcessSetupIntent(
    params: stripe.PostTerminalReadersReaderProcessSetupIntentParams
  ): Promise<stripe.PostTerminalReadersReaderProcessSetupIntentResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}/process_setup_intent`)
      .json<stripe.PostTerminalReadersReaderProcessSetupIntentResponse>()
  }

  /**
   * <p>Initiates a refund on a Reader</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader_refund_payment',
    description: '<p>Initiates a refund on a Reader</p>.',
    inputSchema: stripe.PostTerminalReadersReaderRefundPaymentParamsSchema
  })
  async PostTerminalReadersReaderRefundPayment(
    params: stripe.PostTerminalReadersReaderRefundPaymentParams
  ): Promise<stripe.PostTerminalReadersReaderRefundPaymentResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}/refund_payment`)
      .json<stripe.PostTerminalReadersReaderRefundPaymentResponse>()
  }

  /**
   * <p>Sets reader display to show cart details.</p>.
   */
  @aiFunction({
    name: 'post_terminal_readers_reader_set_reader_display',
    description: '<p>Sets reader display to show cart details.</p>.',
    inputSchema: stripe.PostTerminalReadersReaderSetReaderDisplayParamsSchema
  })
  async PostTerminalReadersReaderSetReaderDisplay(
    params: stripe.PostTerminalReadersReaderSetReaderDisplayParams
  ): Promise<stripe.PostTerminalReadersReaderSetReaderDisplayResponse> {
    return this.ky
      .post(`/v1/terminal/readers/${params.reader}/set_reader_display`)
      .json<stripe.PostTerminalReadersReaderSetReaderDisplayResponse>()
  }

  /**
   * <p>Creates a test mode Confirmation Token server side for your integration tests.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_confirmation_tokens',
    description:
      '<p>Creates a test mode Confirmation Token server side for your integration tests.</p>.',
    inputSchema: stripe.PostTestHelpersConfirmationTokensParamsSchema
  })
  async PostTestHelpersConfirmationTokens(
    _params: stripe.PostTestHelpersConfirmationTokensParams
  ): Promise<stripe.PostTestHelpersConfirmationTokensResponse> {
    return this.ky
      .post('/v1/test_helpers/confirmation_tokens')
      .json<stripe.PostTestHelpersConfirmationTokensResponse>()
  }

  /**
   * <p>Create an incoming testmode bank transfer</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_customers_customer_fund_cash_balance',
    description: '<p>Create an incoming testmode bank transfer</p>.',
    inputSchema:
      stripe.PostTestHelpersCustomersCustomerFundCashBalanceParamsSchema
  })
  async PostTestHelpersCustomersCustomerFundCashBalance(
    params: stripe.PostTestHelpersCustomersCustomerFundCashBalanceParams
  ): Promise<stripe.PostTestHelpersCustomersCustomerFundCashBalanceResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/customers/${params.customer}/fund_cash_balance`
      )
      .json<stripe.PostTestHelpersCustomersCustomerFundCashBalanceResponse>()
  }

  /**
   * <p>Create a test-mode authorization.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations',
    description: '<p>Create a test-mode authorization.</p>.',
    inputSchema: stripe.PostTestHelpersIssuingAuthorizationsParamsSchema
  })
  async PostTestHelpersIssuingAuthorizations(
    _params: stripe.PostTestHelpersIssuingAuthorizationsParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsResponse> {
    return this.ky
      .post('/v1/test_helpers/issuing/authorizations')
      .json<stripe.PostTestHelpersIssuingAuthorizationsResponse>()
  }

  /**
   * <p>Capture a test-mode authorization.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_capture',
    description: '<p>Capture a test-mode authorization.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationCapture(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/capture`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponse>()
  }

  /**
   * <p>Expire a test-mode Authorization.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_expire',
    description: '<p>Expire a test-mode Authorization.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationExpireParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationExpire(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationExpireParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/expire`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponse>()
  }

  /**
   * <p>Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_finalize_amount',
    description:
      '<p>Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/finalize_amount`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmountResponse>()
  }

  /**
   * <p>Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_fraud_challenges_respond',
    description:
      '<p>Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/fraud_challenges/respond`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespondResponse>()
  }

  /**
   * <p>Increment a test-mode Authorization.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_increment',
    description: '<p>Increment a test-mode Authorization.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationIncrement(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/increment`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse>()
  }

  /**
   * <p>Reverse a test-mode Authorization.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_authorizations_authorization_reverse',
    description: '<p>Reverse a test-mode Authorization.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingAuthorizationsAuthorizationReverseParamsSchema
  })
  async PostTestHelpersIssuingAuthorizationsAuthorizationReverse(
    params: stripe.PostTestHelpersIssuingAuthorizationsAuthorizationReverseParams
  ): Promise<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/authorizations/${params.authorization}/reverse`
      )
      .json<stripe.PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponse>()
  }

  /**
   * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_cards_card_shipping_deliver',
    description:
      '<p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingCardsCardShippingDeliverParamsSchema
  })
  async PostTestHelpersIssuingCardsCardShippingDeliver(
    params: stripe.PostTestHelpersIssuingCardsCardShippingDeliverParams
  ): Promise<stripe.PostTestHelpersIssuingCardsCardShippingDeliverResponse> {
    return this.ky
      .post(`/v1/test_helpers/issuing/cards/${params.card}/shipping/deliver`)
      .json<stripe.PostTestHelpersIssuingCardsCardShippingDeliverResponse>()
  }

  /**
   * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_cards_card_shipping_fail',
    description:
      '<p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>.',
    inputSchema: stripe.PostTestHelpersIssuingCardsCardShippingFailParamsSchema
  })
  async PostTestHelpersIssuingCardsCardShippingFail(
    params: stripe.PostTestHelpersIssuingCardsCardShippingFailParams
  ): Promise<stripe.PostTestHelpersIssuingCardsCardShippingFailResponse> {
    return this.ky
      .post(`/v1/test_helpers/issuing/cards/${params.card}/shipping/fail`)
      .json<stripe.PostTestHelpersIssuingCardsCardShippingFailResponse>()
  }

  /**
   * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_cards_card_shipping_return',
    description:
      '<p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingCardsCardShippingReturnParamsSchema
  })
  async PostTestHelpersIssuingCardsCardShippingReturn(
    params: stripe.PostTestHelpersIssuingCardsCardShippingReturnParams
  ): Promise<stripe.PostTestHelpersIssuingCardsCardShippingReturnResponse> {
    return this.ky
      .post(`/v1/test_helpers/issuing/cards/${params.card}/shipping/return`)
      .json<stripe.PostTestHelpersIssuingCardsCardShippingReturnResponse>()
  }

  /**
   * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_cards_card_shipping_ship',
    description:
      '<p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>.',
    inputSchema: stripe.PostTestHelpersIssuingCardsCardShippingShipParamsSchema
  })
  async PostTestHelpersIssuingCardsCardShippingShip(
    params: stripe.PostTestHelpersIssuingCardsCardShippingShipParams
  ): Promise<stripe.PostTestHelpersIssuingCardsCardShippingShipResponse> {
    return this.ky
      .post(`/v1/test_helpers/issuing/cards/${params.card}/shipping/ship`)
      .json<stripe.PostTestHelpersIssuingCardsCardShippingShipResponse>()
  }

  /**
   * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>submitted</code>. This method requires Stripe Version ‘2024-09-30.acacia’ or later.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_cards_card_shipping_submit',
    description:
      '<p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>submitted</code>. This method requires Stripe Version ‘2024-09-30.acacia’ or later.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingCardsCardShippingSubmitParamsSchema
  })
  async PostTestHelpersIssuingCardsCardShippingSubmit(
    params: stripe.PostTestHelpersIssuingCardsCardShippingSubmitParams
  ): Promise<stripe.PostTestHelpersIssuingCardsCardShippingSubmitResponse> {
    return this.ky
      .post(`/v1/test_helpers/issuing/cards/${params.card}/shipping/submit`)
      .json<stripe.PostTestHelpersIssuingCardsCardShippingSubmitResponse>()
  }

  /**
   * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_personalization_designs_personalization_design_activate',
    description:
      '<p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateParamsSchema
  })
  async PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(
    params: stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateParams
  ): Promise<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/personalization_designs/${params.personalization_design}/activate`
      )
      .json<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponse>()
  }

  /**
   * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_personalization_designs_personalization_design_deactivate',
    description:
      '<p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateParamsSchema
  })
  async PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(
    params: stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateParams
  ): Promise<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/personalization_designs/${params.personalization_design}/deactivate`
      )
      .json<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponse>()
  }

  /**
   * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_personalization_designs_personalization_design_reject',
    description:
      '<p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectParamsSchema
  })
  async PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(
    params: stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectParams
  ): Promise<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/personalization_designs/${params.personalization_design}/reject`
      )
      .json<stripe.PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponse>()
  }

  /**
   * <p>Allows the user to create an Issuing settlement.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_settlements',
    description: '<p>Allows the user to create an Issuing settlement.</p>.',
    inputSchema: stripe.PostTestHelpersIssuingSettlementsParamsSchema
  })
  async PostTestHelpersIssuingSettlements(
    _params: stripe.PostTestHelpersIssuingSettlementsParams
  ): Promise<stripe.PostTestHelpersIssuingSettlementsResponse> {
    return this.ky
      .post('/v1/test_helpers/issuing/settlements')
      .json<stripe.PostTestHelpersIssuingSettlementsResponse>()
  }

  /**
   * <p>Allows the user to mark an Issuing settlement as complete.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_settlements_settlement_complete',
    description:
      '<p>Allows the user to mark an Issuing settlement as complete.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingSettlementsSettlementCompleteParamsSchema
  })
  async PostTestHelpersIssuingSettlementsSettlementComplete(
    params: stripe.PostTestHelpersIssuingSettlementsSettlementCompleteParams
  ): Promise<stripe.PostTestHelpersIssuingSettlementsSettlementCompleteResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/settlements/${params.settlement}/complete`
      )
      .json<stripe.PostTestHelpersIssuingSettlementsSettlementCompleteResponse>()
  }

  /**
   * <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_transactions_create_force_capture',
    description:
      '<p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingTransactionsCreateForceCaptureParamsSchema
  })
  async PostTestHelpersIssuingTransactionsCreateForceCapture(
    _params: stripe.PostTestHelpersIssuingTransactionsCreateForceCaptureParams
  ): Promise<stripe.PostTestHelpersIssuingTransactionsCreateForceCaptureResponse> {
    return this.ky
      .post('/v1/test_helpers/issuing/transactions/create_force_capture')
      .json<stripe.PostTestHelpersIssuingTransactionsCreateForceCaptureResponse>()
  }

  /**
   * <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_transactions_create_unlinked_refund',
    description:
      '<p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingTransactionsCreateUnlinkedRefundParamsSchema
  })
  async PostTestHelpersIssuingTransactionsCreateUnlinkedRefund(
    _params: stripe.PostTestHelpersIssuingTransactionsCreateUnlinkedRefundParams
  ): Promise<stripe.PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponse> {
    return this.ky
      .post('/v1/test_helpers/issuing/transactions/create_unlinked_refund')
      .json<stripe.PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponse>()
  }

  /**
   * <p>Refund a test-mode Transaction.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_issuing_transactions_transaction_refund',
    description: '<p>Refund a test-mode Transaction.</p>.',
    inputSchema:
      stripe.PostTestHelpersIssuingTransactionsTransactionRefundParamsSchema
  })
  async PostTestHelpersIssuingTransactionsTransactionRefund(
    params: stripe.PostTestHelpersIssuingTransactionsTransactionRefundParams
  ): Promise<stripe.PostTestHelpersIssuingTransactionsTransactionRefundResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/issuing/transactions/${params.transaction}/refund`
      )
      .json<stripe.PostTestHelpersIssuingTransactionsTransactionRefundResponse>()
  }

  /**
   * <p>Expire a refund with a status of <code>requires_action</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_refunds_refund_expire',
    description:
      '<p>Expire a refund with a status of <code>requires_action</code>.</p>.',
    inputSchema: stripe.PostTestHelpersRefundsRefundExpireParamsSchema
  })
  async PostTestHelpersRefundsRefundExpire(
    params: stripe.PostTestHelpersRefundsRefundExpireParams
  ): Promise<stripe.PostTestHelpersRefundsRefundExpireResponse> {
    return this.ky
      .post(`/v1/test_helpers/refunds/${params.refund}/expire`)
      .json<stripe.PostTestHelpersRefundsRefundExpireResponse>()
  }

  /**
   * <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_terminal_readers_reader_present_payment_method',
    description:
      '<p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>.',
    inputSchema:
      stripe.PostTestHelpersTerminalReadersReaderPresentPaymentMethodParamsSchema
  })
  async PostTestHelpersTerminalReadersReaderPresentPaymentMethod(
    params: stripe.PostTestHelpersTerminalReadersReaderPresentPaymentMethodParams
  ): Promise<stripe.PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/terminal/readers/${params.reader}/present_payment_method`
      )
      .json<stripe.PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponse>()
  }

  /**
   * <p>Returns a list of your test clocks.</p>.
   */
  @aiFunction({
    name: 'get_test_helpers_test_clocks',
    description: '<p>Returns a list of your test clocks.</p>.',
    inputSchema: stripe.GetTestHelpersTestClocksParamsSchema
  })
  async GetTestHelpersTestClocks(
    params: stripe.GetTestHelpersTestClocksParams
  ): Promise<stripe.GetTestHelpersTestClocksResponse> {
    return this.ky
      .get('/v1/test_helpers/test_clocks', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTestHelpersTestClocksResponse>()
  }

  /**
   * <p>Creates a new test clock that can be attached to new customers and quotes.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_test_clocks',
    description:
      '<p>Creates a new test clock that can be attached to new customers and quotes.</p>.',
    inputSchema: stripe.PostTestHelpersTestClocksParamsSchema
  })
  async PostTestHelpersTestClocks(
    _params: stripe.PostTestHelpersTestClocksParams
  ): Promise<stripe.PostTestHelpersTestClocksResponse> {
    return this.ky
      .post('/v1/test_helpers/test_clocks')
      .json<stripe.PostTestHelpersTestClocksResponse>()
  }

  /**
   * <p>Retrieves a test clock.</p>.
   */
  @aiFunction({
    name: 'get_test_helpers_test_clocks_test_clock',
    description: '<p>Retrieves a test clock.</p>.',
    inputSchema: stripe.GetTestHelpersTestClocksTestClockParamsSchema
  })
  async GetTestHelpersTestClocksTestClock(
    params: stripe.GetTestHelpersTestClocksTestClockParams
  ): Promise<stripe.GetTestHelpersTestClocksTestClockResponse> {
    return this.ky
      .get(`/v1/test_helpers/test_clocks/${params.test_clock}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTestHelpersTestClocksTestClockResponse>()
  }

  /**
   * <p>Deletes a test clock.</p>.
   */
  @aiFunction({
    name: 'delete_test_helpers_test_clocks_test_clock',
    description: '<p>Deletes a test clock.</p>.',
    inputSchema: stripe.DeleteTestHelpersTestClocksTestClockParamsSchema
  })
  async DeleteTestHelpersTestClocksTestClock(
    params: stripe.DeleteTestHelpersTestClocksTestClockParams
  ): Promise<stripe.DeleteTestHelpersTestClocksTestClockResponse> {
    return this.ky
      .delete(`/v1/test_helpers/test_clocks/${params.test_clock}`)
      .json<stripe.DeleteTestHelpersTestClocksTestClockResponse>()
  }

  /**
   * <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_test_clocks_test_clock_advance',
    description:
      '<p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>.',
    inputSchema: stripe.PostTestHelpersTestClocksTestClockAdvanceParamsSchema
  })
  async PostTestHelpersTestClocksTestClockAdvance(
    params: stripe.PostTestHelpersTestClocksTestClockAdvanceParams
  ): Promise<stripe.PostTestHelpersTestClocksTestClockAdvanceResponse> {
    return this.ky
      .post(`/v1/test_helpers/test_clocks/${params.test_clock}/advance`)
      .json<stripe.PostTestHelpersTestClocksTestClockAdvanceResponse>()
  }

  /**
   * <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_inbound_transfers_id_fail',
    description:
      '<p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryInboundTransfersIdFailParamsSchema
  })
  async PostTestHelpersTreasuryInboundTransfersIdFail(
    params: stripe.PostTestHelpersTreasuryInboundTransfersIdFailParams
  ): Promise<stripe.PostTestHelpersTreasuryInboundTransfersIdFailResponse> {
    return this.ky
      .post(`/v1/test_helpers/treasury/inbound_transfers/${params.id}/fail`)
      .json<stripe.PostTestHelpersTreasuryInboundTransfersIdFailResponse>()
  }

  /**
   * <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_inbound_transfers_id_return',
    description:
      '<p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryInboundTransfersIdReturnParamsSchema
  })
  async PostTestHelpersTreasuryInboundTransfersIdReturn(
    params: stripe.PostTestHelpersTreasuryInboundTransfersIdReturnParams
  ): Promise<stripe.PostTestHelpersTreasuryInboundTransfersIdReturnResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/inbound_transfers/${params.id}/return`
      )
      .json<stripe.PostTestHelpersTreasuryInboundTransfersIdReturnResponse>()
  }

  /**
   * <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_inbound_transfers_id_succeed',
    description:
      '<p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryInboundTransfersIdSucceedParamsSchema
  })
  async PostTestHelpersTreasuryInboundTransfersIdSucceed(
    params: stripe.PostTestHelpersTreasuryInboundTransfersIdSucceedParams
  ): Promise<stripe.PostTestHelpersTreasuryInboundTransfersIdSucceedResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/inbound_transfers/${params.id}/succeed`
      )
      .json<stripe.PostTestHelpersTreasuryInboundTransfersIdSucceedResponse>()
  }

  /**
   * <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_payments_id',
    description:
      '<p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>.',
    inputSchema: stripe.PostTestHelpersTreasuryOutboundPaymentsIdParamsSchema
  })
  async PostTestHelpersTreasuryOutboundPaymentsId(
    params: stripe.PostTestHelpersTreasuryOutboundPaymentsIdParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundPaymentsIdResponse> {
    return this.ky
      .post(`/v1/test_helpers/treasury/outbound_payments/${params.id}`)
      .json<stripe.PostTestHelpersTreasuryOutboundPaymentsIdResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_payments_id_fail',
    description:
      '<p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundPaymentsIdFailParamsSchema
  })
  async PostTestHelpersTreasuryOutboundPaymentsIdFail(
    params: stripe.PostTestHelpersTreasuryOutboundPaymentsIdFailParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundPaymentsIdFailResponse> {
    return this.ky
      .post(`/v1/test_helpers/treasury/outbound_payments/${params.id}/fail`)
      .json<stripe.PostTestHelpersTreasuryOutboundPaymentsIdFailResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_payments_id_post',
    description:
      '<p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundPaymentsIdPostParamsSchema
  })
  async PostTestHelpersTreasuryOutboundPaymentsIdPost(
    params: stripe.PostTestHelpersTreasuryOutboundPaymentsIdPostParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundPaymentsIdPostResponse> {
    return this.ky
      .post(`/v1/test_helpers/treasury/outbound_payments/${params.id}/post`)
      .json<stripe.PostTestHelpersTreasuryOutboundPaymentsIdPostResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_payments_id_return',
    description:
      '<p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundPaymentsIdReturnParamsSchema
  })
  async PostTestHelpersTreasuryOutboundPaymentsIdReturn(
    params: stripe.PostTestHelpersTreasuryOutboundPaymentsIdReturnParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundPaymentsIdReturnResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/outbound_payments/${params.id}/return`
      )
      .json<stripe.PostTestHelpersTreasuryOutboundPaymentsIdReturnResponse>()
  }

  /**
   * <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_transfers_outbound_transfer',
    description:
      '<p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferParamsSchema
  })
  async PostTestHelpersTreasuryOutboundTransfersOutboundTransfer(
    params: stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/outbound_transfers/${params.outbound_transfer}`
      )
      .json<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_transfers_outbound_transfer_fail',
    description:
      '<p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamsSchema
  })
  async PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail(
    params: stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/outbound_transfers/${params.outbound_transfer}/fail`
      )
      .json<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_transfers_outbound_transfer_post',
    description:
      '<p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamsSchema
  })
  async PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost(
    params: stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/outbound_transfers/${params.outbound_transfer}/post`
      )
      .json<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponse>()
  }

  /**
   * <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_outbound_transfers_outbound_transfer_return',
    description:
      '<p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>.',
    inputSchema:
      stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamsSchema
  })
  async PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(
    params: stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParams
  ): Promise<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponse> {
    return this.ky
      .post(
        `/v1/test_helpers/treasury/outbound_transfers/${params.outbound_transfer}/return`
      )
      .json<stripe.PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponse>()
  }

  /**
   * <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_received_credits',
    description:
      '<p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>.',
    inputSchema: stripe.PostTestHelpersTreasuryReceivedCreditsParamsSchema
  })
  async PostTestHelpersTreasuryReceivedCredits(
    _params: stripe.PostTestHelpersTreasuryReceivedCreditsParams
  ): Promise<stripe.PostTestHelpersTreasuryReceivedCreditsResponse> {
    return this.ky
      .post('/v1/test_helpers/treasury/received_credits')
      .json<stripe.PostTestHelpersTreasuryReceivedCreditsResponse>()
  }

  /**
   * <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>.
   */
  @aiFunction({
    name: 'post_test_helpers_treasury_received_debits',
    description:
      '<p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>.',
    inputSchema: stripe.PostTestHelpersTreasuryReceivedDebitsParamsSchema
  })
  async PostTestHelpersTreasuryReceivedDebits(
    _params: stripe.PostTestHelpersTreasuryReceivedDebitsParams
  ): Promise<stripe.PostTestHelpersTreasuryReceivedDebitsResponse> {
    return this.ky
      .post('/v1/test_helpers/treasury/received_debits')
      .json<stripe.PostTestHelpersTreasuryReceivedDebitsResponse>()
  }

  /**
 * <p>Creates a single-use token that represents a bank account’s details.
You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>.
 */
  @aiFunction({
    name: 'post_tokens',
    description: `<p>Creates a single-use token that represents a bank account’s details.
You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>.`,
    inputSchema: stripe.PostTokensParamsSchema
  })
  async PostTokens(
    _params: stripe.PostTokensParams
  ): Promise<stripe.PostTokensResponse> {
    return this.ky.post('/v1/tokens').json<stripe.PostTokensResponse>()
  }

  /**
   * <p>Retrieves the token with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_tokens_token',
    description: '<p>Retrieves the token with the given ID.</p>.',
    inputSchema: stripe.GetTokensTokenParamsSchema
  })
  async GetTokensToken(
    params: stripe.GetTokensTokenParams
  ): Promise<stripe.GetTokensTokenResponse> {
    return this.ky
      .get(`/v1/tokens/${params.token}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTokensTokenResponse>()
  }

  /**
   * <p>Returns a list of top-ups.</p>.
   */
  @aiFunction({
    name: 'get_topups',
    description: '<p>Returns a list of top-ups.</p>.',
    inputSchema: stripe.GetTopupsParamsSchema
  })
  async GetTopups(
    params: stripe.GetTopupsParams
  ): Promise<stripe.GetTopupsResponse> {
    return this.ky
      .get('/v1/topups', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTopupsResponse>()
  }

  /**
   * <p>Top up the balance of an account</p>.
   */
  @aiFunction({
    name: 'post_topups',
    description: '<p>Top up the balance of an account</p>.',
    inputSchema: stripe.PostTopupsParamsSchema
  })
  async PostTopups(
    _params: stripe.PostTopupsParams
  ): Promise<stripe.PostTopupsResponse> {
    return this.ky.post('/v1/topups').json<stripe.PostTopupsResponse>()
  }

  /**
   * <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>.
   */
  @aiFunction({
    name: 'get_topups_topup',
    description:
      '<p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>.',
    inputSchema: stripe.GetTopupsTopupParamsSchema
  })
  async GetTopupsTopup(
    params: stripe.GetTopupsTopupParams
  ): Promise<stripe.GetTopupsTopupResponse> {
    return this.ky
      .get(`/v1/topups/${params.topup}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTopupsTopupResponse>()
  }

  /**
   * <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>.
   */
  @aiFunction({
    name: 'post_topups_topup',
    description:
      '<p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>.',
    inputSchema: stripe.PostTopupsTopupParamsSchema
  })
  async PostTopupsTopup(
    params: stripe.PostTopupsTopupParams
  ): Promise<stripe.PostTopupsTopupResponse> {
    return this.ky
      .post(`/v1/topups/${params.topup}`)
      .json<stripe.PostTopupsTopupResponse>()
  }

  /**
   * <p>Cancels a top-up. Only pending top-ups can be canceled.</p>.
   */
  @aiFunction({
    name: 'post_topups_topup_cancel',
    description:
      '<p>Cancels a top-up. Only pending top-ups can be canceled.</p>.',
    inputSchema: stripe.PostTopupsTopupCancelParamsSchema
  })
  async PostTopupsTopupCancel(
    params: stripe.PostTopupsTopupCancelParams
  ): Promise<stripe.PostTopupsTopupCancelResponse> {
    return this.ky
      .post(`/v1/topups/${params.topup}/cancel`)
      .json<stripe.PostTopupsTopupCancelResponse>()
  }

  /**
   * <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>.
   */
  @aiFunction({
    name: 'get_transfers',
    description:
      '<p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>.',
    inputSchema: stripe.GetTransfersParamsSchema
  })
  async GetTransfers(
    params: stripe.GetTransfersParams
  ): Promise<stripe.GetTransfersResponse> {
    return this.ky
      .get('/v1/transfers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTransfersResponse>()
  }

  /**
   * <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>.
   */
  @aiFunction({
    name: 'post_transfers',
    description:
      '<p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>.',
    inputSchema: stripe.PostTransfersParamsSchema
  })
  async PostTransfers(
    _params: stripe.PostTransfersParams
  ): Promise<stripe.PostTransfersResponse> {
    return this.ky.post('/v1/transfers').json<stripe.PostTransfersResponse>()
  }

  /**
   * <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>.
   */
  @aiFunction({
    name: 'get_transfers_id_reversals',
    description:
      '<p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>.',
    inputSchema: stripe.GetTransfersIdReversalsParamsSchema
  })
  async GetTransfersIdReversals(
    params: stripe.GetTransfersIdReversalsParams
  ): Promise<stripe.GetTransfersIdReversalsResponse> {
    return this.ky
      .get(`/v1/transfers/${params.id}/reversals`, {
        searchParams: sanitizeSearchParams(
          pick(params, 'ending_before', 'expand', 'limit', 'starting_after')
        )
      })
      .json<stripe.GetTransfersIdReversalsResponse>()
  }

  /**
 * <p>When you create a new reversal, you must specify a transfer to create it on.</p>

<p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>

<p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>.
 */
  @aiFunction({
    name: 'post_transfers_id_reversals',
    description: `<p>When you create a new reversal, you must specify a transfer to create it on.</p>

<p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>

<p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>.`,
    inputSchema: stripe.PostTransfersIdReversalsParamsSchema
  })
  async PostTransfersIdReversals(
    params: stripe.PostTransfersIdReversalsParams
  ): Promise<stripe.PostTransfersIdReversalsResponse> {
    return this.ky
      .post(`/v1/transfers/${params.id}/reversals`)
      .json<stripe.PostTransfersIdReversalsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>.
   */
  @aiFunction({
    name: 'get_transfers_transfer',
    description:
      '<p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>.',
    inputSchema: stripe.GetTransfersTransferParamsSchema
  })
  async GetTransfersTransfer(
    params: stripe.GetTransfersTransferParams
  ): Promise<stripe.GetTransfersTransferResponse> {
    return this.ky
      .get(`/v1/transfers/${params.transfer}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTransfersTransferResponse>()
  }

  /**
 * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request accepts only metadata as an argument.</p>.
 */
  @aiFunction({
    name: 'post_transfers_transfer',
    description: `<p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request accepts only metadata as an argument.</p>.`,
    inputSchema: stripe.PostTransfersTransferParamsSchema
  })
  async PostTransfersTransfer(
    params: stripe.PostTransfersTransferParams
  ): Promise<stripe.PostTransfersTransferResponse> {
    return this.ky
      .post(`/v1/transfers/${params.transfer}`)
      .json<stripe.PostTransfersTransferResponse>()
  }

  /**
   * <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>.
   */
  @aiFunction({
    name: 'get_transfers_transfer_reversals_id',
    description:
      '<p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>.',
    inputSchema: stripe.GetTransfersTransferReversalsIdParamsSchema
  })
  async GetTransfersTransferReversalsId(
    params: stripe.GetTransfersTransferReversalsIdParams
  ): Promise<stripe.GetTransfersTransferReversalsIdResponse> {
    return this.ky
      .get(`/v1/transfers/${params.transfer}/reversals/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTransfersTransferReversalsIdResponse>()
  }

  /**
 * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request only accepts metadata and description as arguments.</p>.
 */
  @aiFunction({
    name: 'post_transfers_transfer_reversals_id',
    description: `<p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>

<p>This request only accepts metadata and description as arguments.</p>.`,
    inputSchema: stripe.PostTransfersTransferReversalsIdParamsSchema
  })
  async PostTransfersTransferReversalsId(
    params: stripe.PostTransfersTransferReversalsIdParams
  ): Promise<stripe.PostTransfersTransferReversalsIdResponse> {
    return this.ky
      .post(`/v1/transfers/${params.transfer}/reversals/${params.id}`)
      .json<stripe.PostTransfersTransferReversalsIdResponse>()
  }

  /**
   * <p>Returns a list of CreditReversals.</p>.
   */
  @aiFunction({
    name: 'get_treasury_credit_reversals',
    description: '<p>Returns a list of CreditReversals.</p>.',
    inputSchema: stripe.GetTreasuryCreditReversalsParamsSchema
  })
  async GetTreasuryCreditReversals(
    params: stripe.GetTreasuryCreditReversalsParams
  ): Promise<stripe.GetTreasuryCreditReversalsResponse> {
    return this.ky
      .get('/v1/treasury/credit_reversals', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryCreditReversalsResponse>()
  }

  /**
   * <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>.
   */
  @aiFunction({
    name: 'post_treasury_credit_reversals',
    description:
      '<p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>.',
    inputSchema: stripe.PostTreasuryCreditReversalsParamsSchema
  })
  async PostTreasuryCreditReversals(
    _params: stripe.PostTreasuryCreditReversalsParams
  ): Promise<stripe.PostTreasuryCreditReversalsResponse> {
    return this.ky
      .post('/v1/treasury/credit_reversals')
      .json<stripe.PostTreasuryCreditReversalsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>.
   */
  @aiFunction({
    name: 'get_treasury_credit_reversals_credit_reversal',
    description:
      '<p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>.',
    inputSchema: stripe.GetTreasuryCreditReversalsCreditReversalParamsSchema
  })
  async GetTreasuryCreditReversalsCreditReversal(
    params: stripe.GetTreasuryCreditReversalsCreditReversalParams
  ): Promise<stripe.GetTreasuryCreditReversalsCreditReversalResponse> {
    return this.ky
      .get(`/v1/treasury/credit_reversals/${params.credit_reversal}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryCreditReversalsCreditReversalResponse>()
  }

  /**
   * <p>Returns a list of DebitReversals.</p>.
   */
  @aiFunction({
    name: 'get_treasury_debit_reversals',
    description: '<p>Returns a list of DebitReversals.</p>.',
    inputSchema: stripe.GetTreasuryDebitReversalsParamsSchema
  })
  async GetTreasuryDebitReversals(
    params: stripe.GetTreasuryDebitReversalsParams
  ): Promise<stripe.GetTreasuryDebitReversalsResponse> {
    return this.ky
      .get('/v1/treasury/debit_reversals', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryDebitReversalsResponse>()
  }

  /**
   * <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>.
   */
  @aiFunction({
    name: 'post_treasury_debit_reversals',
    description:
      '<p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>.',
    inputSchema: stripe.PostTreasuryDebitReversalsParamsSchema
  })
  async PostTreasuryDebitReversals(
    _params: stripe.PostTreasuryDebitReversalsParams
  ): Promise<stripe.PostTreasuryDebitReversalsResponse> {
    return this.ky
      .post('/v1/treasury/debit_reversals')
      .json<stripe.PostTreasuryDebitReversalsResponse>()
  }

  /**
   * <p>Retrieves a DebitReversal object.</p>.
   */
  @aiFunction({
    name: 'get_treasury_debit_reversals_debit_reversal',
    description: '<p>Retrieves a DebitReversal object.</p>.',
    inputSchema: stripe.GetTreasuryDebitReversalsDebitReversalParamsSchema
  })
  async GetTreasuryDebitReversalsDebitReversal(
    params: stripe.GetTreasuryDebitReversalsDebitReversalParams
  ): Promise<stripe.GetTreasuryDebitReversalsDebitReversalResponse> {
    return this.ky
      .get(`/v1/treasury/debit_reversals/${params.debit_reversal}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryDebitReversalsDebitReversalResponse>()
  }

  /**
   * <p>Returns a list of FinancialAccounts.</p>.
   */
  @aiFunction({
    name: 'get_treasury_financial_accounts',
    description: '<p>Returns a list of FinancialAccounts.</p>.',
    inputSchema: stripe.GetTreasuryFinancialAccountsParamsSchema
  })
  async GetTreasuryFinancialAccounts(
    params: stripe.GetTreasuryFinancialAccountsParams
  ): Promise<stripe.GetTreasuryFinancialAccountsResponse> {
    return this.ky
      .get('/v1/treasury/financial_accounts', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryFinancialAccountsResponse>()
  }

  /**
   * <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'post_treasury_financial_accounts',
    description:
      '<p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>.',
    inputSchema: stripe.PostTreasuryFinancialAccountsParamsSchema
  })
  async PostTreasuryFinancialAccounts(
    _params: stripe.PostTreasuryFinancialAccountsParams
  ): Promise<stripe.PostTreasuryFinancialAccountsResponse> {
    return this.ky
      .post('/v1/treasury/financial_accounts')
      .json<stripe.PostTreasuryFinancialAccountsResponse>()
  }

  /**
   * <p>Retrieves the details of a FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'get_treasury_financial_accounts_financial_account',
    description: '<p>Retrieves the details of a FinancialAccount.</p>.',
    inputSchema: stripe.GetTreasuryFinancialAccountsFinancialAccountParamsSchema
  })
  async GetTreasuryFinancialAccountsFinancialAccount(
    params: stripe.GetTreasuryFinancialAccountsFinancialAccountParams
  ): Promise<stripe.GetTreasuryFinancialAccountsFinancialAccountResponse> {
    return this.ky
      .get(`/v1/treasury/financial_accounts/${params.financial_account}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryFinancialAccountsFinancialAccountResponse>()
  }

  /**
   * <p>Updates the details of a FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'post_treasury_financial_accounts_financial_account',
    description: '<p>Updates the details of a FinancialAccount.</p>.',
    inputSchema:
      stripe.PostTreasuryFinancialAccountsFinancialAccountParamsSchema
  })
  async PostTreasuryFinancialAccountsFinancialAccount(
    params: stripe.PostTreasuryFinancialAccountsFinancialAccountParams
  ): Promise<stripe.PostTreasuryFinancialAccountsFinancialAccountResponse> {
    return this.ky
      .post(`/v1/treasury/financial_accounts/${params.financial_account}`)
      .json<stripe.PostTreasuryFinancialAccountsFinancialAccountResponse>()
  }

  /**
   * <p>Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.</p>.
   */
  @aiFunction({
    name: 'post_treasury_financial_accounts_financial_account_close',
    description:
      '<p>Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.</p>.',
    inputSchema:
      stripe.PostTreasuryFinancialAccountsFinancialAccountCloseParamsSchema
  })
  async PostTreasuryFinancialAccountsFinancialAccountClose(
    params: stripe.PostTreasuryFinancialAccountsFinancialAccountCloseParams
  ): Promise<stripe.PostTreasuryFinancialAccountsFinancialAccountCloseResponse> {
    return this.ky
      .post(
        `/v1/treasury/financial_accounts/${params.financial_account}/close`
      )
      .json<stripe.PostTreasuryFinancialAccountsFinancialAccountCloseResponse>()
  }

  /**
   * <p>Retrieves Features information associated with the FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'get_treasury_financial_accounts_financial_account_features',
    description:
      '<p>Retrieves Features information associated with the FinancialAccount.</p>.',
    inputSchema:
      stripe.GetTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema
  })
  async GetTreasuryFinancialAccountsFinancialAccountFeatures(
    params: stripe.GetTreasuryFinancialAccountsFinancialAccountFeaturesParams
  ): Promise<stripe.GetTreasuryFinancialAccountsFinancialAccountFeaturesResponse> {
    return this.ky
      .get(
        `/v1/treasury/financial_accounts/${params.financial_account}/features`,
        {
          searchParams: sanitizeSearchParams(pick(params, 'expand'))
        }
      )
      .json<stripe.GetTreasuryFinancialAccountsFinancialAccountFeaturesResponse>()
  }

  /**
   * <p>Updates the Features associated with a FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'post_treasury_financial_accounts_financial_account_features',
    description:
      '<p>Updates the Features associated with a FinancialAccount.</p>.',
    inputSchema:
      stripe.PostTreasuryFinancialAccountsFinancialAccountFeaturesParamsSchema
  })
  async PostTreasuryFinancialAccountsFinancialAccountFeatures(
    params: stripe.PostTreasuryFinancialAccountsFinancialAccountFeaturesParams
  ): Promise<stripe.PostTreasuryFinancialAccountsFinancialAccountFeaturesResponse> {
    return this.ky
      .post(
        `/v1/treasury/financial_accounts/${params.financial_account}/features`
      )
      .json<stripe.PostTreasuryFinancialAccountsFinancialAccountFeaturesResponse>()
  }

  /**
   * <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'get_treasury_inbound_transfers',
    description:
      '<p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>.',
    inputSchema: stripe.GetTreasuryInboundTransfersParamsSchema
  })
  async GetTreasuryInboundTransfers(
    params: stripe.GetTreasuryInboundTransfersParams
  ): Promise<stripe.GetTreasuryInboundTransfersResponse> {
    return this.ky
      .get('/v1/treasury/inbound_transfers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryInboundTransfersResponse>()
  }

  /**
   * <p>Creates an InboundTransfer.</p>.
   */
  @aiFunction({
    name: 'post_treasury_inbound_transfers',
    description: '<p>Creates an InboundTransfer.</p>.',
    inputSchema: stripe.PostTreasuryInboundTransfersParamsSchema
  })
  async PostTreasuryInboundTransfers(
    _params: stripe.PostTreasuryInboundTransfersParams
  ): Promise<stripe.PostTreasuryInboundTransfersResponse> {
    return this.ky
      .post('/v1/treasury/inbound_transfers')
      .json<stripe.PostTreasuryInboundTransfersResponse>()
  }

  /**
   * <p>Retrieves the details of an existing InboundTransfer.</p>.
   */
  @aiFunction({
    name: 'get_treasury_inbound_transfers_id',
    description:
      '<p>Retrieves the details of an existing InboundTransfer.</p>.',
    inputSchema: stripe.GetTreasuryInboundTransfersIdParamsSchema
  })
  async GetTreasuryInboundTransfersId(
    params: stripe.GetTreasuryInboundTransfersIdParams
  ): Promise<stripe.GetTreasuryInboundTransfersIdResponse> {
    return this.ky
      .get(`/v1/treasury/inbound_transfers/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryInboundTransfersIdResponse>()
  }

  /**
   * <p>Cancels an InboundTransfer.</p>.
   */
  @aiFunction({
    name: 'post_treasury_inbound_transfers_inbound_transfer_cancel',
    description: '<p>Cancels an InboundTransfer.</p>.',
    inputSchema:
      stripe.PostTreasuryInboundTransfersInboundTransferCancelParamsSchema
  })
  async PostTreasuryInboundTransfersInboundTransferCancel(
    params: stripe.PostTreasuryInboundTransfersInboundTransferCancelParams
  ): Promise<stripe.PostTreasuryInboundTransfersInboundTransferCancelResponse> {
    return this.ky
      .post(
        `/v1/treasury/inbound_transfers/${params.inbound_transfer}/cancel`
      )
      .json<stripe.PostTreasuryInboundTransfersInboundTransferCancelResponse>()
  }

  /**
   * <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'get_treasury_outbound_payments',
    description:
      '<p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>.',
    inputSchema: stripe.GetTreasuryOutboundPaymentsParamsSchema
  })
  async GetTreasuryOutboundPayments(
    params: stripe.GetTreasuryOutboundPaymentsParams
  ): Promise<stripe.GetTreasuryOutboundPaymentsResponse> {
    return this.ky
      .get('/v1/treasury/outbound_payments', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryOutboundPaymentsResponse>()
  }

  /**
   * <p>Creates an OutboundPayment.</p>.
   */
  @aiFunction({
    name: 'post_treasury_outbound_payments',
    description: '<p>Creates an OutboundPayment.</p>.',
    inputSchema: stripe.PostTreasuryOutboundPaymentsParamsSchema
  })
  async PostTreasuryOutboundPayments(
    _params: stripe.PostTreasuryOutboundPaymentsParams
  ): Promise<stripe.PostTreasuryOutboundPaymentsResponse> {
    return this.ky
      .post('/v1/treasury/outbound_payments')
      .json<stripe.PostTreasuryOutboundPaymentsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>.
   */
  @aiFunction({
    name: 'get_treasury_outbound_payments_id',
    description:
      '<p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>.',
    inputSchema: stripe.GetTreasuryOutboundPaymentsIdParamsSchema
  })
  async GetTreasuryOutboundPaymentsId(
    params: stripe.GetTreasuryOutboundPaymentsIdParams
  ): Promise<stripe.GetTreasuryOutboundPaymentsIdResponse> {
    return this.ky
      .get(`/v1/treasury/outbound_payments/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryOutboundPaymentsIdResponse>()
  }

  /**
   * <p>Cancel an OutboundPayment.</p>.
   */
  @aiFunction({
    name: 'post_treasury_outbound_payments_id_cancel',
    description: '<p>Cancel an OutboundPayment.</p>.',
    inputSchema: stripe.PostTreasuryOutboundPaymentsIdCancelParamsSchema
  })
  async PostTreasuryOutboundPaymentsIdCancel(
    params: stripe.PostTreasuryOutboundPaymentsIdCancelParams
  ): Promise<stripe.PostTreasuryOutboundPaymentsIdCancelResponse> {
    return this.ky
      .post(`/v1/treasury/outbound_payments/${params.id}/cancel`)
      .json<stripe.PostTreasuryOutboundPaymentsIdCancelResponse>()
  }

  /**
   * <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>.
   */
  @aiFunction({
    name: 'get_treasury_outbound_transfers',
    description:
      '<p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>.',
    inputSchema: stripe.GetTreasuryOutboundTransfersParamsSchema
  })
  async GetTreasuryOutboundTransfers(
    params: stripe.GetTreasuryOutboundTransfersParams
  ): Promise<stripe.GetTreasuryOutboundTransfersResponse> {
    return this.ky
      .get('/v1/treasury/outbound_transfers', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryOutboundTransfersResponse>()
  }

  /**
   * <p>Creates an OutboundTransfer.</p>.
   */
  @aiFunction({
    name: 'post_treasury_outbound_transfers',
    description: '<p>Creates an OutboundTransfer.</p>.',
    inputSchema: stripe.PostTreasuryOutboundTransfersParamsSchema
  })
  async PostTreasuryOutboundTransfers(
    _params: stripe.PostTreasuryOutboundTransfersParams
  ): Promise<stripe.PostTreasuryOutboundTransfersResponse> {
    return this.ky
      .post('/v1/treasury/outbound_transfers')
      .json<stripe.PostTreasuryOutboundTransfersResponse>()
  }

  /**
   * <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>.
   */
  @aiFunction({
    name: 'get_treasury_outbound_transfers_outbound_transfer',
    description:
      '<p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>.',
    inputSchema: stripe.GetTreasuryOutboundTransfersOutboundTransferParamsSchema
  })
  async GetTreasuryOutboundTransfersOutboundTransfer(
    params: stripe.GetTreasuryOutboundTransfersOutboundTransferParams
  ): Promise<stripe.GetTreasuryOutboundTransfersOutboundTransferResponse> {
    return this.ky
      .get(`/v1/treasury/outbound_transfers/${params.outbound_transfer}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryOutboundTransfersOutboundTransferResponse>()
  }

  /**
   * <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>.
   */
  @aiFunction({
    name: 'post_treasury_outbound_transfers_outbound_transfer_cancel',
    description:
      '<p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>.',
    inputSchema:
      stripe.PostTreasuryOutboundTransfersOutboundTransferCancelParamsSchema
  })
  async PostTreasuryOutboundTransfersOutboundTransferCancel(
    params: stripe.PostTreasuryOutboundTransfersOutboundTransferCancelParams
  ): Promise<stripe.PostTreasuryOutboundTransfersOutboundTransferCancelResponse> {
    return this.ky
      .post(
        `/v1/treasury/outbound_transfers/${params.outbound_transfer}/cancel`
      )
      .json<stripe.PostTreasuryOutboundTransfersOutboundTransferCancelResponse>()
  }

  /**
   * <p>Returns a list of ReceivedCredits.</p>.
   */
  @aiFunction({
    name: 'get_treasury_received_credits',
    description: '<p>Returns a list of ReceivedCredits.</p>.',
    inputSchema: stripe.GetTreasuryReceivedCreditsParamsSchema
  })
  async GetTreasuryReceivedCredits(
    params: stripe.GetTreasuryReceivedCreditsParams
  ): Promise<stripe.GetTreasuryReceivedCreditsResponse> {
    return this.ky
      .get('/v1/treasury/received_credits', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryReceivedCreditsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>.
   */
  @aiFunction({
    name: 'get_treasury_received_credits_id',
    description:
      '<p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>.',
    inputSchema: stripe.GetTreasuryReceivedCreditsIdParamsSchema
  })
  async GetTreasuryReceivedCreditsId(
    params: stripe.GetTreasuryReceivedCreditsIdParams
  ): Promise<stripe.GetTreasuryReceivedCreditsIdResponse> {
    return this.ky
      .get(`/v1/treasury/received_credits/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryReceivedCreditsIdResponse>()
  }

  /**
   * <p>Returns a list of ReceivedDebits.</p>.
   */
  @aiFunction({
    name: 'get_treasury_received_debits',
    description: '<p>Returns a list of ReceivedDebits.</p>.',
    inputSchema: stripe.GetTreasuryReceivedDebitsParamsSchema
  })
  async GetTreasuryReceivedDebits(
    params: stripe.GetTreasuryReceivedDebitsParams
  ): Promise<stripe.GetTreasuryReceivedDebitsResponse> {
    return this.ky
      .get('/v1/treasury/received_debits', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryReceivedDebitsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>.
   */
  @aiFunction({
    name: 'get_treasury_received_debits_id',
    description:
      '<p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>.',
    inputSchema: stripe.GetTreasuryReceivedDebitsIdParamsSchema
  })
  async GetTreasuryReceivedDebitsId(
    params: stripe.GetTreasuryReceivedDebitsIdParams
  ): Promise<stripe.GetTreasuryReceivedDebitsIdResponse> {
    return this.ky
      .get(`/v1/treasury/received_debits/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryReceivedDebitsIdResponse>()
  }

  /**
   * <p>Retrieves a list of TransactionEntry objects.</p>.
   */
  @aiFunction({
    name: 'get_treasury_transaction_entries',
    description: '<p>Retrieves a list of TransactionEntry objects.</p>.',
    inputSchema: stripe.GetTreasuryTransactionEntriesParamsSchema
  })
  async GetTreasuryTransactionEntries(
    params: stripe.GetTreasuryTransactionEntriesParams
  ): Promise<stripe.GetTreasuryTransactionEntriesResponse> {
    return this.ky
      .get('/v1/treasury/transaction_entries', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryTransactionEntriesResponse>()
  }

  /**
   * <p>Retrieves a TransactionEntry object.</p>.
   */
  @aiFunction({
    name: 'get_treasury_transaction_entries_id',
    description: '<p>Retrieves a TransactionEntry object.</p>.',
    inputSchema: stripe.GetTreasuryTransactionEntriesIdParamsSchema
  })
  async GetTreasuryTransactionEntriesId(
    params: stripe.GetTreasuryTransactionEntriesIdParams
  ): Promise<stripe.GetTreasuryTransactionEntriesIdResponse> {
    return this.ky
      .get(`/v1/treasury/transaction_entries/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryTransactionEntriesIdResponse>()
  }

  /**
   * <p>Retrieves a list of Transaction objects.</p>.
   */
  @aiFunction({
    name: 'get_treasury_transactions',
    description: '<p>Retrieves a list of Transaction objects.</p>.',
    inputSchema: stripe.GetTreasuryTransactionsParamsSchema
  })
  async GetTreasuryTransactions(
    params: stripe.GetTreasuryTransactionsParams
  ): Promise<stripe.GetTreasuryTransactionsResponse> {
    return this.ky
      .get('/v1/treasury/transactions', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetTreasuryTransactionsResponse>()
  }

  /**
   * <p>Retrieves the details of an existing Transaction.</p>.
   */
  @aiFunction({
    name: 'get_treasury_transactions_id',
    description: '<p>Retrieves the details of an existing Transaction.</p>.',
    inputSchema: stripe.GetTreasuryTransactionsIdParamsSchema
  })
  async GetTreasuryTransactionsId(
    params: stripe.GetTreasuryTransactionsIdParams
  ): Promise<stripe.GetTreasuryTransactionsIdResponse> {
    return this.ky
      .get(`/v1/treasury/transactions/${params.id}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetTreasuryTransactionsIdResponse>()
  }

  /**
   * <p>Returns a list of your webhook endpoints.</p>.
   */
  @aiFunction({
    name: 'get_webhook_endpoints',
    description: '<p>Returns a list of your webhook endpoints.</p>.',
    inputSchema: stripe.GetWebhookEndpointsParamsSchema
  })
  async GetWebhookEndpoints(
    params: stripe.GetWebhookEndpointsParams
  ): Promise<stripe.GetWebhookEndpointsResponse> {
    return this.ky
      .get('/v1/webhook_endpoints', {
        searchParams: sanitizeSearchParams(params)
      })
      .json<stripe.GetWebhookEndpointsResponse>()
  }

  /**
   * <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>.
   */
  @aiFunction({
    name: 'post_webhook_endpoints',
    description:
      '<p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>.',
    inputSchema: stripe.PostWebhookEndpointsParamsSchema
  })
  async PostWebhookEndpoints(
    _params: stripe.PostWebhookEndpointsParams
  ): Promise<stripe.PostWebhookEndpointsResponse> {
    return this.ky
      .post('/v1/webhook_endpoints')
      .json<stripe.PostWebhookEndpointsResponse>()
  }

  /**
   * <p>Retrieves the webhook endpoint with the given ID.</p>.
   */
  @aiFunction({
    name: 'get_webhook_endpoints_webhook_endpoint',
    description: '<p>Retrieves the webhook endpoint with the given ID.</p>.',
    inputSchema: stripe.GetWebhookEndpointsWebhookEndpointParamsSchema
  })
  async GetWebhookEndpointsWebhookEndpoint(
    params: stripe.GetWebhookEndpointsWebhookEndpointParams
  ): Promise<stripe.GetWebhookEndpointsWebhookEndpointResponse> {
    return this.ky
      .get(`/v1/webhook_endpoints/${params.webhook_endpoint}`, {
        searchParams: sanitizeSearchParams(pick(params, 'expand'))
      })
      .json<stripe.GetWebhookEndpointsWebhookEndpointResponse>()
  }

  /**
   * <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>.
   */
  @aiFunction({
    name: 'post_webhook_endpoints_webhook_endpoint',
    description:
      '<p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>.',
    inputSchema: stripe.PostWebhookEndpointsWebhookEndpointParamsSchema
  })
  async PostWebhookEndpointsWebhookEndpoint(
    params: stripe.PostWebhookEndpointsWebhookEndpointParams
  ): Promise<stripe.PostWebhookEndpointsWebhookEndpointResponse> {
    return this.ky
      .post(`/v1/webhook_endpoints/${params.webhook_endpoint}`)
      .json<stripe.PostWebhookEndpointsWebhookEndpointResponse>()
  }

  /**
   * <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>.
   */
  @aiFunction({
    name: 'delete_webhook_endpoints_webhook_endpoint',
    description:
      '<p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>.',
    inputSchema: stripe.DeleteWebhookEndpointsWebhookEndpointParamsSchema
  })
  async DeleteWebhookEndpointsWebhookEndpoint(
    params: stripe.DeleteWebhookEndpointsWebhookEndpointParams
  ): Promise<stripe.DeleteWebhookEndpointsWebhookEndpointResponse> {
    return this.ky
      .delete(`/v1/webhook_endpoints/${params.webhook_endpoint}`)
      .json<stripe.DeleteWebhookEndpointsWebhookEndpointResponse>()
  }
}
